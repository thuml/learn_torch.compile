
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (2048L*x1)));
                            auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                            auto tmp2 = static_cast<float>(49.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 / tmp3;
                            auto tmp5 = static_cast<float>(0.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = decltype(tmp6)::blendv(tmp4, tmp6, tmp0);
                            auto tmp10 = tmp8 - tmp9;
                            auto tmp11 = tmp7 * tmp10;
                            tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2048L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (2048L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x2));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2));
                        auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2));
                        auto tmp2 = static_cast<float>(49.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 / tmp3;
                        auto tmp5 = static_cast<float>(0.0);
                        auto tmp6 = at::vec::Vectorized<float>(tmp5);
                        auto tmp7 = decltype(tmp6)::blendv(tmp4, tmp6, tmp0);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp12 = static_cast<float>(0.002551020408163265);
                        auto tmp13 = at::vec::Vectorized<float>(tmp12);
                        auto tmp14 = tmp11 * tmp13;
                        auto tmp16 = tmp15 * tmp15;
                        auto tmp17 = tmp14 * tmp16;
                        auto tmp18 = tmp10 * tmp17;
                        auto tmp19 = tmp7 - tmp18;
                        auto tmp21 = tmp20 * tmp13;
                        auto tmp22 = tmp19 - tmp21;
                        auto tmp24 = tmp15 * tmp23;
                        auto tmp25 = tmp22 * tmp24;
                        tmp25.store(out_ptr4 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(672L + x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(672L + x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(560L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(560L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(448L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(448L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(784L + x1 + (896L*x0)));
                tmp0.store(out_ptr1 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(896L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(896L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(896L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.002551020408163265);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp4 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (2048L*x1)));
                            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                            auto tmp1 = static_cast<float>(0.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = to_float_mask(tmp0 <= tmp2);
                            auto tmp6 = static_cast<float>(49.0);
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 / tmp7;
                            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp4);
                            auto tmp11 = tmp9 + tmp10;
                            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                            auto tmp15 = tmp13 - tmp14;
                            auto tmp16 = tmp12 * tmp15;
                            tmp_acc0_vec = tmp_acc0_vec + tmp12;
                            tmp_acc1_vec = tmp_acc1_vec + tmp16;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2048L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp4 = flag_to_float_vec(in_ptr1 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (2048L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp16 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2));
                        auto tmp25 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = static_cast<float>(49.0);
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 / tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp4);
                        auto tmp11 = tmp9 + tmp10;
                        auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                        auto tmp15 = tmp13 - tmp14;
                        auto tmp17 = static_cast<float>(0.002551020408163265);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp16 * tmp18;
                        auto tmp21 = tmp20 * tmp20;
                        auto tmp22 = tmp19 * tmp21;
                        auto tmp23 = tmp15 * tmp22;
                        auto tmp24 = tmp12 - tmp23;
                        auto tmp26 = tmp25 * tmp18;
                        auto tmp27 = tmp24 - tmp26;
                        tmp27.store(out_ptr2 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(2048L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(in_out_ptr1 + static_cast<long>(x1 + (2048L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(672L + x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(672L + x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(560L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(560L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(448L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(448L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (896L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (896L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(784L + x1 + (896L*x0)));
                tmp0.store(out_ptr1 + static_cast<long>(x1 + (896L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(896L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(896L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(896L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.002551020408163265);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2048L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp6 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (2048L*x0)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = to_float_mask(tmp4 <= tmp2);
                        auto tmp8 = static_cast<float>(49.0);
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp6);
                        auto tmp13 = tmp11 + tmp12;
                        auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp5);
                        auto tmp16 = tmp14 + tmp15;
                        auto tmp17 = decltype(tmp2)::blendv(tmp16, tmp2, tmp3);
                        tmp17.store(in_out_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (2048L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (2048L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(2048L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr4 + static_cast<long>(x1 + (2048L*x0)));
                    tmp32.store(out_ptr5 + static_cast<long>(x1 + (2048L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(112L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(784L + x3 + (896L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (896L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (6272L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 7L)) + (43904L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(784L + x3 + (896L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (896L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (6272L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 7L)) + (43904L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(784L + x3 + (896L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (896L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (6272L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 7L)) + (43904L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(784L + x3 + (896L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (896L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (6272L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 7L)) + (43904L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                            auto tmp3 = c10::convert<int>(std::min(7L, 1L + (c10::div_floor_integer((1L + x1), 2L))));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp6 = c10::convert<int>(std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))));
                            auto tmp21 = tmp20 < tmp3;
                            auto tmp22 = tmp21 & tmp7;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = tmp21 & tmp14;
                            auto tmp28 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp29 = tmp27 ? tmp28 : tmp24;
                            out_ptr0[static_cast<long>(x3 + (896L*x2) + (12544L*x1) + (175616L*x0))] = tmp29;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (112L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(672L + x0 + (896L*x1)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                            auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                            auto tmp7 = tmp5 - tmp6;
                            auto tmp8 = tmp4 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            tmp_acc1_vec = tmp_acc1_vec + tmp8;
                        }
                        tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (112L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(672L + x1 + (896L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp9 = static_cast<float>(0.002551020408163265);
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp13 = tmp12 * tmp12;
                        auto tmp14 = tmp11 * tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        auto tmp16 = tmp4 - tmp15;
                        auto tmp18 = tmp17 * tmp10;
                        auto tmp19 = tmp16 - tmp18;
                        auto tmp21 = tmp12 * tmp20;
                        auto tmp22 = tmp19 * tmp21;
                        tmp22.store(out_ptr4 + static_cast<long>(x1 + (112L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(560L + x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(560L + x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(448L + x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(448L + x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (896L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (896L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9)
{
    auto in_ptr8 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (112L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (112L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (112L*x0)));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (112L*x0)));
                    tmp0.store(out_ptr4 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (112L*x0)));
                    tmp0.store(out_ptr5 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (112L*x0)));
                    tmp0.store(out_ptr6 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(896L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0 + (896L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(896L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr9 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(896L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (896L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (896L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(392L + x1 + (448L*x0)));
                tmp0.store(out_ptr1 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(448L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(392L + x1 + (448L*x0)));
                tmp0.store(out_ptr1 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(448L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(392L + x1 + (448L*x0)));
                tmp0.store(out_ptr1 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(448L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(392L + x1 + (448L*x0)));
                tmp0.store(out_ptr1 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(448L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(336L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (448L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (448L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.0006377551020408163);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (56L*x0)));
                tmp2.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(392L + x1 + (448L*x0)));
                tmp0.store(out_ptr1 + static_cast<long>(x1 + (448L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(448L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    tmp32.store(out_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(392L + x3 + (448L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (448L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (6272L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 14L)) + (87808L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(392L + x3 + (448L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (448L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (6272L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 14L)) + (87808L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(392L + x3 + (448L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (448L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (6272L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 14L)) + (87808L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(392L + x3 + (448L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (448L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (6272L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 14L)) + (87808L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                            auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer((1L + x1), 2L))));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))));
                            auto tmp21 = tmp20 < tmp3;
                            auto tmp22 = tmp21 & tmp7;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = tmp21 & tmp14;
                            auto tmp28 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp29 = tmp27 ? tmp28 : tmp24;
                            out_ptr0[static_cast<long>(x3 + (448L*x2) + (12544L*x1) + (351232L*x0))] = tmp29;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (56L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(336L + x0 + (448L*x1)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                            auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                            auto tmp7 = tmp5 - tmp6;
                            auto tmp8 = tmp4 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            tmp_acc1_vec = tmp_acc1_vec + tmp8;
                        }
                        tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (56L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(336L + x1 + (448L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp9 = static_cast<float>(0.0006377551020408163);
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp13 = tmp12 * tmp12;
                        auto tmp14 = tmp11 * tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        auto tmp16 = tmp4 - tmp15;
                        auto tmp18 = tmp17 * tmp10;
                        auto tmp19 = tmp16 - tmp18;
                        auto tmp21 = tmp12 * tmp20;
                        auto tmp22 = tmp19 * tmp21;
                        tmp22.store(out_ptr4 + static_cast<long>(x1 + (56L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(280L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(224L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (448L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (56L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (448L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (56L*x0)));
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9)
{
    auto in_ptr8 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (56L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (56L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (56L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (56L*x0)));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (56L*x0)));
                    tmp0.store(out_ptr4 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (56L*x0)));
                    tmp0.store(out_ptr5 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (56L*x0)));
                    tmp0.store(out_ptr6 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0 + (448L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(448L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr9 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(448L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (448L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (448L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(168L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(168L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(140L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(140L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(112L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(112L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(84L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(84L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(56L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(56L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(28L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(28L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    out_ptr0[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(196L + x1 + (224L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(196L + x1 + (224L*x0))];
                    out_ptr1[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(224L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(168L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(168L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(140L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(140L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(112L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(112L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(84L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(84L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(56L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(56L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(28L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(28L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    out_ptr0[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(196L + x1 + (224L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(196L + x1 + (224L*x0))];
                    out_ptr1[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(224L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(168L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(168L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(168L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(140L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(140L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(112L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(112L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(84L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(84L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(56L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(56L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(28L + x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(28L + x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (224L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (28L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (224L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (28L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    out_ptr0[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(196L + x1 + (224L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(196L + x1 + (224L*x0))];
                    out_ptr1[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(224L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    tmp32.store(out_ptr5 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(196L + x3 + (224L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (224L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (6272L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 28L)) + (175616L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(196L + x3 + (224L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (224L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (6272L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 28L)) + (175616L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(196L + x3 + (224L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (224L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (6272L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 28L)) + (175616L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(196L + x3 + (224L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (224L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (6272L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L))))))) + (6272L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L)))))) >= 0L) ? 0L : 28L)) + (175616L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                            auto tmp3 = c10::convert<int>(std::min(28L, 1L + (c10::div_floor_integer((1L + x1), 2L))));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp6 = c10::convert<int>(std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x1, 2L))));
                            auto tmp21 = tmp20 < tmp3;
                            auto tmp22 = tmp21 & tmp7;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = tmp21 & tmp14;
                            auto tmp28 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp29 = tmp27 ? tmp28 : tmp24;
                            out_ptr0[static_cast<long>(x3 + (224L*x2) + (12544L*x1) + (702464L*x0))] = tmp29;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(168L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr0[static_cast<long>(168L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr3[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(168L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr4 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(168L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr2[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr1[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr4[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(140L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(140L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(140L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(112L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(112L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(112L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(84L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(84L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(56L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(56L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(28L + x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(28L + x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (28L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (28L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (224L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (28L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(28L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (28L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (224L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (28L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9)
{
    auto in_ptr8 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (28L*x0))];
                    out_ptr0[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(x1 + (28L*x0))];
                    out_ptr1[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr2[static_cast<long>(x1 + (28L*x0))];
                    out_ptr2[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr3[static_cast<long>(x1 + (28L*x0))];
                    out_ptr3[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr4 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x1 + (28L*x0))];
                    out_ptr4[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr5 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x1 + (28L*x0))];
                    out_ptr5[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (28L*x0)));
                    tmp0.store(out_ptr6 + static_cast<long>(x1 + (224L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x1 + (28L*x0))];
                    out_ptr6[static_cast<long>(x1 + (224L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0 + (224L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(224L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr9 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(224L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (224L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (224L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(84L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(84L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(70L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(70L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(70L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(70L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(56L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(56L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(42L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(42L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(42L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(42L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(28L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(28L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(14L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(14L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(14L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(14L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    out_ptr0[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(98L + x1 + (112L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(98L + x1 + (112L*x0))];
                    out_ptr1[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(84L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(84L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(84L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(70L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(70L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(70L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(70L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(56L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(56L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(42L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(42L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(42L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(42L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(28L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(28L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(14L + x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(14L + x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(14L + x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(14L + x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (14L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp2.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (14L*x0))] = tmp22;
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    out_ptr0[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(98L + x1 + (112L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(98L + x1 + (112L*x0))];
                    out_ptr1[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp32 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp37 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp42 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp49 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp54 = in_ptr0[static_cast<long>(98L + x3 + (112L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (6272L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (351232L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, (-1L) + x1));
                            auto tmp3 = c10::convert<int>(std::min(56L, 2L + x1));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, (-1L) + x2));
                            auto tmp6 = c10::convert<int>(std::min(56L, 2L + x2));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                            auto tmp21 = tmp20 < tmp6;
                            auto tmp22 = tmp4 & tmp21;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                            auto tmp28 = tmp27 < tmp3;
                            auto tmp29 = tmp28 & tmp7;
                            auto tmp30 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp31 = tmp29 ? tmp30 : tmp24;
                            auto tmp33 = tmp32 / 9;
                            auto tmp34 = tmp28 & tmp14;
                            auto tmp35 = decltype(tmp31)(tmp31 + tmp33);
                            auto tmp36 = tmp34 ? tmp35 : tmp31;
                            auto tmp38 = tmp37 / 9;
                            auto tmp39 = tmp28 & tmp21;
                            auto tmp40 = decltype(tmp36)(tmp36 + tmp38);
                            auto tmp41 = tmp39 ? tmp40 : tmp36;
                            auto tmp43 = tmp42 / 9;
                            auto tmp44 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                            auto tmp45 = tmp44 < tmp3;
                            auto tmp46 = tmp45 & tmp7;
                            auto tmp47 = decltype(tmp41)(tmp41 + tmp43);
                            auto tmp48 = tmp46 ? tmp47 : tmp41;
                            auto tmp50 = tmp49 / 9;
                            auto tmp51 = tmp45 & tmp14;
                            auto tmp52 = decltype(tmp48)(tmp48 + tmp50);
                            auto tmp53 = tmp51 ? tmp52 : tmp48;
                            auto tmp55 = tmp54 / 9;
                            auto tmp56 = tmp45 & tmp21;
                            auto tmp57 = decltype(tmp53)(tmp53 + tmp55);
                            auto tmp58 = tmp56 ? tmp57 : tmp53;
                            out_ptr0[static_cast<long>(x3 + (112L*x2) + (6272L*x1) + (351232L*x0))] = tmp58;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(84L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr0[static_cast<long>(84L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr3[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(84L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr4 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(84L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr2[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr1[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr4[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(70L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(70L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(70L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(70L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(56L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(56L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(56L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(42L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(42L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(42L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(42L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(28L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(28L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(28L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(14L + x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(14L + x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(14L + x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(14L + x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (14L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (14L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (112L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (14L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(8L); x0<static_cast<long>(14L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (14L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (112L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (14L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9)
{
    auto in_ptr8 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (14L*x0))];
                    out_ptr0[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(x1 + (14L*x0))];
                    out_ptr1[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr2[static_cast<long>(x1 + (14L*x0))];
                    out_ptr2[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr3[static_cast<long>(x1 + (14L*x0))];
                    out_ptr3[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr4 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x1 + (14L*x0))];
                    out_ptr4[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr5 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x1 + (14L*x0))];
                    out_ptr5[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (14L*x0)));
                    tmp0.store(out_ptr6 + static_cast<long>(x1 + (112L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(8L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x1 + (14L*x0))];
                    out_ptr6[static_cast<long>(x1 + (112L*x0))] = tmp0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0 + (112L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(112L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr9 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(112L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr7 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (112L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(in_out_ptr0 + static_cast<long>(x1 + (112L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = tmp0 + tmp1;
                tmp2.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(9.964923469387754e-06);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_4, primals_5, primals_7, primals_8, primals_10, primals_11, primals_13, primals_14, primals_16, primals_17, primals_19, primals_20, primals_22, primals_23, primals_25, primals_26, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_37, primals_38, primals_40, primals_41, primals_43, primals_44, primals_46, primals_47, primals_49, primals_50, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_61, primals_62, primals_64, primals_65, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_76, primals_77, primals_79, primals_80, primals_82, primals_83, primals_85, primals_86, primals_88, primals_89, primals_91, primals_92, primals_94, primals_95, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_106, primals_107, primals_109, primals_110, primals_112, primals_113, primals_115, primals_116, primals_118, primals_119, primals_121, primals_122, primals_124, primals_125, primals_127, primals_128, primals_130, primals_131, primals_133, primals_134, primals_136, primals_137, primals_139, primals_140, primals_142, primals_143, primals_145, primals_146, primals_148, primals_149, primals_151, primals_152, primals_154, primals_155, primals_157, primals_158, primals_160, primals_161, primals_163, primals_164, primals_166, primals_167, primals_169, primals_170, primals_172, primals_173, primals_175, primals_176, primals_178, primals_179, primals_181, primals_182, primals_184, primals_185, primals_187, primals_188, primals_190, primals_191, primals_193, primals_194, primals_196, primals_197, primals_199, primals_200, primals_202, primals_203, primals_205, primals_206, primals_208, primals_209, primals_211, primals_212, primals_214, primals_215, primals_217, primals_218, primals_220, primals_221, primals_223, primals_224, primals_226, primals_227, primals_229, primals_230, primals_232, primals_233, primals_235, primals_236, primals_238, primals_239, primals_241, primals_242, primals_244, primals_245, primals_247, primals_248, primals_250, primals_251, primals_253, primals_254, primals_256, primals_257, primals_259, primals_260, primals_262, primals_263, primals_265, primals_266, primals_268, primals_269, primals_271, primals_272, primals_274, primals_275, primals_277, primals_278, primals_280, primals_281, primals_283, primals_284, primals_286, primals_287, primals_289, primals_290, primals_292, primals_293, primals_295, primals_296, primals_298, primals_299, primals_301, primals_302, primals_304, primals_305, primals_307, primals_308, primals_310, primals_311, primals_313, primals_314, primals_316, primals_317, primals_319, primals_320, primals_322, primals_323, primals_325, primals_326, primals_328, primals_329, primals_331, primals_332, primals_334, primals_335, primals_337, primals_338, primals_340, primals_341, primals_343, primals_344, primals_346, primals_347, primals_349, primals_350, primals_352, primals_353, primals_355, primals_356, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_367, primals_368, primals_370, primals_371, primals_373, primals_374, primals_376, primals_377, primals_379, primals_380, primals_382, primals_383, primals_385, primals_386, primals_388, primals_389, primals_391, primals_392, primals_394, primals_395, primals_397, primals_398, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_409, primals_410, primals_412, primals_413, primals_415, primals_416, primals_418, primals_419, primals_421, primals_422, primals_424, primals_425, primals_427, primals_428, primals_430, primals_431, primals_433, primals_434, primals_436, primals_437, primals_439, primals_440, primals_442, primals_443, primals_445, primals_446, primals_897, convolution, squeeze_1, relu, getitem_2, getitem_3, convolution_1, squeeze_4, getitem_14, convolution_2, squeeze_7, getitem_25, convolution_3, squeeze_10, getitem_36, convolution_4, squeeze_13, getitem_47, convolution_5, squeeze_16, getitem_58, convolution_6, squeeze_19, getitem_69, convolution_7, squeeze_22, getitem_80, convolution_8, squeeze_25, getitem_91, cat, convolution_9, squeeze_28, convolution_10, squeeze_31, relu_9, convolution_11, squeeze_34, getitem_106, convolution_12, squeeze_37, add_66, convolution_13, squeeze_40, add_72, convolution_14, squeeze_43, add_78, convolution_15, squeeze_46, add_84, convolution_16, squeeze_49, add_90, convolution_17, squeeze_52, add_96, convolution_18, squeeze_55, cat_1, convolution_19, squeeze_58, relu_18, convolution_20, squeeze_61, getitem_196, convolution_21, squeeze_64, add_118, convolution_22, squeeze_67, add_124, convolution_23, squeeze_70, add_130, convolution_24, squeeze_73, add_136, convolution_25, squeeze_76, add_142, convolution_26, squeeze_79, add_148, convolution_27, squeeze_82, cat_2, convolution_28, squeeze_85, relu_27, convolution_29, squeeze_88, getitem_286, convolution_30, squeeze_91, getitem_297, convolution_31, squeeze_94, getitem_308, convolution_32, squeeze_97, getitem_319, convolution_33, squeeze_100, getitem_330, convolution_34, squeeze_103, getitem_341, convolution_35, squeeze_106, getitem_352, convolution_36, squeeze_109, getitem_363, cat_3, convolution_37, squeeze_112, convolution_38, squeeze_115, relu_36, convolution_39, squeeze_118, getitem_378, convolution_40, squeeze_121, add_221, convolution_41, squeeze_124, add_227, convolution_42, squeeze_127, add_233, convolution_43, squeeze_130, add_239, convolution_44, squeeze_133, add_245, convolution_45, squeeze_136, add_251, convolution_46, squeeze_139, cat_4, convolution_47, squeeze_142, relu_45, convolution_48, squeeze_145, getitem_468, convolution_49, squeeze_148, add_273, convolution_50, squeeze_151, add_279, convolution_51, squeeze_154, add_285, convolution_52, squeeze_157, add_291, convolution_53, squeeze_160, add_297, convolution_54, squeeze_163, add_303, convolution_55, squeeze_166, cat_5, convolution_56, squeeze_169, relu_54, convolution_57, squeeze_172, getitem_558, convolution_58, squeeze_175, add_325, convolution_59, squeeze_178, add_331, convolution_60, squeeze_181, add_337, convolution_61, squeeze_184, add_343, convolution_62, squeeze_187, add_349, convolution_63, squeeze_190, add_355, convolution_64, squeeze_193, cat_6, convolution_65, squeeze_196, relu_63, convolution_66, squeeze_199, getitem_648, convolution_67, squeeze_202, getitem_659, convolution_68, squeeze_205, getitem_670, convolution_69, squeeze_208, getitem_681, convolution_70, squeeze_211, getitem_692, convolution_71, squeeze_214, getitem_703, convolution_72, squeeze_217, getitem_714, convolution_73, squeeze_220, getitem_725, cat_7, convolution_74, squeeze_223, convolution_75, squeeze_226, relu_72, convolution_76, squeeze_229, getitem_740, convolution_77, squeeze_232, add_428, convolution_78, squeeze_235, add_434, convolution_79, squeeze_238, add_440, convolution_80, squeeze_241, add_446, convolution_81, squeeze_244, add_452, convolution_82, squeeze_247, add_458, convolution_83, squeeze_250, cat_8, convolution_84, squeeze_253, relu_81, convolution_85, squeeze_256, getitem_830, convolution_86, squeeze_259, add_480, convolution_87, squeeze_262, add_486, convolution_88, squeeze_265, add_492, convolution_89, squeeze_268, add_498, convolution_90, squeeze_271, add_504, convolution_91, squeeze_274, add_510, convolution_92, squeeze_277, cat_9, convolution_93, squeeze_280, relu_90, convolution_94, squeeze_283, getitem_920, convolution_95, squeeze_286, add_532, convolution_96, squeeze_289, add_538, convolution_97, squeeze_292, add_544, convolution_98, squeeze_295, add_550, convolution_99, squeeze_298, add_556, convolution_100, squeeze_301, add_562, convolution_101, squeeze_304, cat_10, convolution_102, squeeze_307, relu_99, convolution_103, squeeze_310, getitem_1010, convolution_104, squeeze_313, add_584, convolution_105, squeeze_316, add_590, convolution_106, squeeze_319, add_596, convolution_107, squeeze_322, add_602, convolution_108, squeeze_325, add_608, convolution_109, squeeze_328, add_614, convolution_110, squeeze_331, cat_11, convolution_111, squeeze_334, relu_108, convolution_112, squeeze_337, getitem_1100, convolution_113, squeeze_340, add_636, convolution_114, squeeze_343, add_642, convolution_115, squeeze_346, add_648, convolution_116, squeeze_349, add_654, convolution_117, squeeze_352, add_660, convolution_118, squeeze_355, add_666, convolution_119, squeeze_358, cat_12, convolution_120, squeeze_361, relu_117, convolution_121, squeeze_364, getitem_1190, convolution_122, squeeze_367, getitem_1201, convolution_123, squeeze_370, getitem_1212, convolution_124, squeeze_373, getitem_1223, convolution_125, squeeze_376, getitem_1234, convolution_126, squeeze_379, getitem_1245, convolution_127, squeeze_382, getitem_1256, convolution_128, squeeze_385, getitem_1267, cat_13, convolution_129, squeeze_388, convolution_130, squeeze_391, relu_126, convolution_131, squeeze_394, getitem_1282, convolution_132, squeeze_397, add_739, convolution_133, squeeze_400, add_745, convolution_134, squeeze_403, add_751, convolution_135, squeeze_406, add_757, convolution_136, squeeze_409, add_763, convolution_137, squeeze_412, add_769, convolution_138, squeeze_415, cat_14, convolution_139, squeeze_418, relu_135, convolution_140, squeeze_421, getitem_1372, convolution_141, squeeze_424, add_791, convolution_142, squeeze_427, add_797, convolution_143, squeeze_430, add_803, convolution_144, squeeze_433, add_809, convolution_145, squeeze_436, add_815, convolution_146, squeeze_439, add_821, convolution_147, squeeze_442, cat_15, convolution_148, squeeze_445, view, permute_1, le, unsqueeze_598, le_1, unsqueeze_610, le_2, unsqueeze_622, le_3, unsqueeze_634, le_4, unsqueeze_646, le_5, unsqueeze_658, le_6, unsqueeze_670, le_7, unsqueeze_682, le_8, unsqueeze_694, unsqueeze_706, le_10, unsqueeze_718, le_11, unsqueeze_730, le_12, unsqueeze_742, le_13, unsqueeze_754, le_14, unsqueeze_766, le_15, unsqueeze_778, le_16, unsqueeze_790, le_17, unsqueeze_802, unsqueeze_814, unsqueeze_826, le_19, unsqueeze_838, le_20, unsqueeze_850, le_21, unsqueeze_862, le_22, unsqueeze_874, le_23, unsqueeze_886, le_24, unsqueeze_898, le_25, unsqueeze_910, le_26, unsqueeze_922, unsqueeze_934, le_28, unsqueeze_946, le_29, unsqueeze_958, le_30, unsqueeze_970, le_31, unsqueeze_982, le_32, unsqueeze_994, le_33, unsqueeze_1006, le_34, unsqueeze_1018, le_35, unsqueeze_1030, unsqueeze_1042, le_37, unsqueeze_1054, le_38, unsqueeze_1066, le_39, unsqueeze_1078, le_40, unsqueeze_1090, le_41, unsqueeze_1102, le_42, unsqueeze_1114, le_43, unsqueeze_1126, le_44, unsqueeze_1138, unsqueeze_1150, le_46, unsqueeze_1162, le_47, unsqueeze_1174, le_48, unsqueeze_1186, le_49, unsqueeze_1198, le_50, unsqueeze_1210, le_51, unsqueeze_1222, le_52, unsqueeze_1234, le_53, unsqueeze_1246, unsqueeze_1258, le_55, unsqueeze_1270, le_56, unsqueeze_1282, le_57, unsqueeze_1294, le_58, unsqueeze_1306, le_59, unsqueeze_1318, le_60, unsqueeze_1330, le_61, unsqueeze_1342, le_62, unsqueeze_1354, unsqueeze_1366, le_64, unsqueeze_1378, le_65, unsqueeze_1390, le_66, unsqueeze_1402, le_67, unsqueeze_1414, le_68, unsqueeze_1426, le_69, unsqueeze_1438, le_70, unsqueeze_1450, le_71, unsqueeze_1462, unsqueeze_1474, unsqueeze_1486, le_73, unsqueeze_1498, le_74, unsqueeze_1510, le_75, unsqueeze_1522, le_76, unsqueeze_1534, le_77, unsqueeze_1546, le_78, unsqueeze_1558, le_79, unsqueeze_1570, le_80, unsqueeze_1582, unsqueeze_1594, le_82, unsqueeze_1606, le_83, unsqueeze_1618, le_84, unsqueeze_1630, le_85, unsqueeze_1642, le_86, unsqueeze_1654, le_87, unsqueeze_1666, le_88, unsqueeze_1678, le_89, unsqueeze_1690, unsqueeze_1702, le_91, unsqueeze_1714, le_92, unsqueeze_1726, le_93, unsqueeze_1738, le_94, unsqueeze_1750, le_95, unsqueeze_1762, le_96, unsqueeze_1774, le_97, unsqueeze_1786, le_98, unsqueeze_1798, unsqueeze_1810, le_100, unsqueeze_1822, le_101, unsqueeze_1834, le_102, unsqueeze_1846, le_103, unsqueeze_1858, le_104, unsqueeze_1870, le_105, unsqueeze_1882, le_106, unsqueeze_1894, le_107, unsqueeze_1906, unsqueeze_1918, unsqueeze_1930, le_109, unsqueeze_1942, le_110, unsqueeze_1954, le_111, unsqueeze_1966, le_112, unsqueeze_1978, le_113, unsqueeze_1990, le_114, unsqueeze_2002, le_115, unsqueeze_2014, le_116, unsqueeze_2026, unsqueeze_2038, le_118, unsqueeze_2050, le_119, unsqueeze_2062, le_120, unsqueeze_2074, le_121, unsqueeze_2086, le_122, unsqueeze_2098, le_123, unsqueeze_2110, le_124, unsqueeze_2122, le_125, unsqueeze_2134, unsqueeze_2146, le_127, unsqueeze_2158, le_128, unsqueeze_2170, le_129, unsqueeze_2182, le_130, unsqueeze_2194, le_131, unsqueeze_2206, le_132, unsqueeze_2218, le_133, unsqueeze_2230, le_134, unsqueeze_2242, unsqueeze_2254, unsqueeze_2266, le_136, unsqueeze_2278, le_137, unsqueeze_2290, le_138, unsqueeze_2302, le_139, unsqueeze_2314, le_140, unsqueeze_2326, le_141, unsqueeze_2338, le_142, unsqueeze_2350, le_143, unsqueeze_2362, unsqueeze_2374, tangents_1 = args
    args.clear()
    assert_size_stride(primals_1, (64, 3, 7, 7), (147, 1, 21, 3))
    assert_size_stride(primals_2, (64, ), (1, ))
    assert_size_stride(primals_4, (112, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_5, (112, ), (1, ))
    assert_size_stride(primals_7, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_8, (14, ), (1, ))
    assert_size_stride(primals_10, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_11, (14, ), (1, ))
    assert_size_stride(primals_13, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_14, (14, ), (1, ))
    assert_size_stride(primals_16, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_17, (14, ), (1, ))
    assert_size_stride(primals_19, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_20, (14, ), (1, ))
    assert_size_stride(primals_22, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_23, (14, ), (1, ))
    assert_size_stride(primals_25, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_26, (14, ), (1, ))
    assert_size_stride(primals_28, (256, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(primals_29, (256, ), (1, ))
    assert_size_stride(primals_31, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_32, (256, ), (1, ))
    assert_size_stride(primals_34, (112, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_35, (112, ), (1, ))
    assert_size_stride(primals_37, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_38, (14, ), (1, ))
    assert_size_stride(primals_40, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_41, (14, ), (1, ))
    assert_size_stride(primals_43, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_44, (14, ), (1, ))
    assert_size_stride(primals_46, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_47, (14, ), (1, ))
    assert_size_stride(primals_49, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_50, (14, ), (1, ))
    assert_size_stride(primals_52, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_53, (14, ), (1, ))
    assert_size_stride(primals_55, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_56, (14, ), (1, ))
    assert_size_stride(primals_58, (256, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(primals_59, (256, ), (1, ))
    assert_size_stride(primals_61, (112, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_62, (112, ), (1, ))
    assert_size_stride(primals_64, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_65, (14, ), (1, ))
    assert_size_stride(primals_67, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_68, (14, ), (1, ))
    assert_size_stride(primals_70, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_71, (14, ), (1, ))
    assert_size_stride(primals_73, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_74, (14, ), (1, ))
    assert_size_stride(primals_76, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_77, (14, ), (1, ))
    assert_size_stride(primals_79, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_80, (14, ), (1, ))
    assert_size_stride(primals_82, (14, 14, 3, 3), (126, 1, 42, 14))
    assert_size_stride(primals_83, (14, ), (1, ))
    assert_size_stride(primals_85, (256, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(primals_86, (256, ), (1, ))
    assert_size_stride(primals_88, (224, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_89, (224, ), (1, ))
    assert_size_stride(primals_91, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_92, (28, ), (1, ))
    assert_size_stride(primals_94, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_95, (28, ), (1, ))
    assert_size_stride(primals_97, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_98, (28, ), (1, ))
    assert_size_stride(primals_100, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_101, (28, ), (1, ))
    assert_size_stride(primals_103, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_104, (28, ), (1, ))
    assert_size_stride(primals_106, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_107, (28, ), (1, ))
    assert_size_stride(primals_109, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_110, (28, ), (1, ))
    assert_size_stride(primals_112, (512, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(primals_113, (512, ), (1, ))
    assert_size_stride(primals_115, (512, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_116, (512, ), (1, ))
    assert_size_stride(primals_118, (224, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_119, (224, ), (1, ))
    assert_size_stride(primals_121, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_122, (28, ), (1, ))
    assert_size_stride(primals_124, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_125, (28, ), (1, ))
    assert_size_stride(primals_127, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_128, (28, ), (1, ))
    assert_size_stride(primals_130, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_131, (28, ), (1, ))
    assert_size_stride(primals_133, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_134, (28, ), (1, ))
    assert_size_stride(primals_136, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_137, (28, ), (1, ))
    assert_size_stride(primals_139, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_140, (28, ), (1, ))
    assert_size_stride(primals_142, (512, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(primals_143, (512, ), (1, ))
    assert_size_stride(primals_145, (224, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_146, (224, ), (1, ))
    assert_size_stride(primals_148, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_149, (28, ), (1, ))
    assert_size_stride(primals_151, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_152, (28, ), (1, ))
    assert_size_stride(primals_154, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_155, (28, ), (1, ))
    assert_size_stride(primals_157, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_158, (28, ), (1, ))
    assert_size_stride(primals_160, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_161, (28, ), (1, ))
    assert_size_stride(primals_163, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_164, (28, ), (1, ))
    assert_size_stride(primals_166, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_167, (28, ), (1, ))
    assert_size_stride(primals_169, (512, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(primals_170, (512, ), (1, ))
    assert_size_stride(primals_172, (224, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_173, (224, ), (1, ))
    assert_size_stride(primals_175, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_176, (28, ), (1, ))
    assert_size_stride(primals_178, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_179, (28, ), (1, ))
    assert_size_stride(primals_181, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_182, (28, ), (1, ))
    assert_size_stride(primals_184, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_185, (28, ), (1, ))
    assert_size_stride(primals_187, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_188, (28, ), (1, ))
    assert_size_stride(primals_190, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_191, (28, ), (1, ))
    assert_size_stride(primals_193, (28, 28, 3, 3), (252, 1, 84, 28))
    assert_size_stride(primals_194, (28, ), (1, ))
    assert_size_stride(primals_196, (512, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(primals_197, (512, ), (1, ))
    assert_size_stride(primals_199, (448, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_200, (448, ), (1, ))
    assert_size_stride(primals_202, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_203, (56, ), (1, ))
    assert_size_stride(primals_205, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_206, (56, ), (1, ))
    assert_size_stride(primals_208, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_209, (56, ), (1, ))
    assert_size_stride(primals_211, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_212, (56, ), (1, ))
    assert_size_stride(primals_214, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_215, (56, ), (1, ))
    assert_size_stride(primals_217, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_218, (56, ), (1, ))
    assert_size_stride(primals_220, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_221, (56, ), (1, ))
    assert_size_stride(primals_223, (1024, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_224, (1024, ), (1, ))
    assert_size_stride(primals_226, (1024, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_227, (1024, ), (1, ))
    assert_size_stride(primals_229, (448, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_230, (448, ), (1, ))
    assert_size_stride(primals_232, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_233, (56, ), (1, ))
    assert_size_stride(primals_235, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_236, (56, ), (1, ))
    assert_size_stride(primals_238, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_239, (56, ), (1, ))
    assert_size_stride(primals_241, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_242, (56, ), (1, ))
    assert_size_stride(primals_244, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_245, (56, ), (1, ))
    assert_size_stride(primals_247, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_248, (56, ), (1, ))
    assert_size_stride(primals_250, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_251, (56, ), (1, ))
    assert_size_stride(primals_253, (1024, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_254, (1024, ), (1, ))
    assert_size_stride(primals_256, (448, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_257, (448, ), (1, ))
    assert_size_stride(primals_259, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_260, (56, ), (1, ))
    assert_size_stride(primals_262, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_263, (56, ), (1, ))
    assert_size_stride(primals_265, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_266, (56, ), (1, ))
    assert_size_stride(primals_268, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_269, (56, ), (1, ))
    assert_size_stride(primals_271, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_272, (56, ), (1, ))
    assert_size_stride(primals_274, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_275, (56, ), (1, ))
    assert_size_stride(primals_277, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_278, (56, ), (1, ))
    assert_size_stride(primals_280, (1024, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_281, (1024, ), (1, ))
    assert_size_stride(primals_283, (448, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_284, (448, ), (1, ))
    assert_size_stride(primals_286, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_287, (56, ), (1, ))
    assert_size_stride(primals_289, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_290, (56, ), (1, ))
    assert_size_stride(primals_292, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_293, (56, ), (1, ))
    assert_size_stride(primals_295, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_296, (56, ), (1, ))
    assert_size_stride(primals_298, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_299, (56, ), (1, ))
    assert_size_stride(primals_301, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_302, (56, ), (1, ))
    assert_size_stride(primals_304, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_305, (56, ), (1, ))
    assert_size_stride(primals_307, (1024, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_308, (1024, ), (1, ))
    assert_size_stride(primals_310, (448, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_311, (448, ), (1, ))
    assert_size_stride(primals_313, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_314, (56, ), (1, ))
    assert_size_stride(primals_316, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_317, (56, ), (1, ))
    assert_size_stride(primals_319, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_320, (56, ), (1, ))
    assert_size_stride(primals_322, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_323, (56, ), (1, ))
    assert_size_stride(primals_325, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_326, (56, ), (1, ))
    assert_size_stride(primals_328, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_329, (56, ), (1, ))
    assert_size_stride(primals_331, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_332, (56, ), (1, ))
    assert_size_stride(primals_334, (1024, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_335, (1024, ), (1, ))
    assert_size_stride(primals_337, (448, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_338, (448, ), (1, ))
    assert_size_stride(primals_340, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_341, (56, ), (1, ))
    assert_size_stride(primals_343, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_344, (56, ), (1, ))
    assert_size_stride(primals_346, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_347, (56, ), (1, ))
    assert_size_stride(primals_349, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_350, (56, ), (1, ))
    assert_size_stride(primals_352, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_353, (56, ), (1, ))
    assert_size_stride(primals_355, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_356, (56, ), (1, ))
    assert_size_stride(primals_358, (56, 56, 3, 3), (504, 1, 168, 56))
    assert_size_stride(primals_359, (56, ), (1, ))
    assert_size_stride(primals_361, (1024, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_362, (1024, ), (1, ))
    assert_size_stride(primals_364, (896, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_365, (896, ), (1, ))
    assert_size_stride(primals_367, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_368, (112, ), (1, ))
    assert_size_stride(primals_370, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_371, (112, ), (1, ))
    assert_size_stride(primals_373, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_374, (112, ), (1, ))
    assert_size_stride(primals_376, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_377, (112, ), (1, ))
    assert_size_stride(primals_379, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_380, (112, ), (1, ))
    assert_size_stride(primals_382, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_383, (112, ), (1, ))
    assert_size_stride(primals_385, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_386, (112, ), (1, ))
    assert_size_stride(primals_388, (2048, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(primals_389, (2048, ), (1, ))
    assert_size_stride(primals_391, (2048, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_392, (2048, ), (1, ))
    assert_size_stride(primals_394, (896, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(primals_395, (896, ), (1, ))
    assert_size_stride(primals_397, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_398, (112, ), (1, ))
    assert_size_stride(primals_400, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_401, (112, ), (1, ))
    assert_size_stride(primals_403, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_404, (112, ), (1, ))
    assert_size_stride(primals_406, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_407, (112, ), (1, ))
    assert_size_stride(primals_409, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_410, (112, ), (1, ))
    assert_size_stride(primals_412, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_413, (112, ), (1, ))
    assert_size_stride(primals_415, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_416, (112, ), (1, ))
    assert_size_stride(primals_418, (2048, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(primals_419, (2048, ), (1, ))
    assert_size_stride(primals_421, (896, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(primals_422, (896, ), (1, ))
    assert_size_stride(primals_424, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_425, (112, ), (1, ))
    assert_size_stride(primals_427, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_428, (112, ), (1, ))
    assert_size_stride(primals_430, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_431, (112, ), (1, ))
    assert_size_stride(primals_433, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_434, (112, ), (1, ))
    assert_size_stride(primals_436, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_437, (112, ), (1, ))
    assert_size_stride(primals_439, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_440, (112, ), (1, ))
    assert_size_stride(primals_442, (112, 112, 3, 3), (1008, 1, 336, 112))
    assert_size_stride(primals_443, (112, ), (1, ))
    assert_size_stride(primals_445, (2048, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(primals_446, (2048, ), (1, ))
    assert_size_stride(primals_897, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(convolution, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(squeeze_1, (64, ), (1, ))
    assert_size_stride(relu, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(getitem_2, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(getitem_3, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_1, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(squeeze_4, (112, ), (1, ))
    assert_size_stride(getitem_14, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_2, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_7, (14, ), (1, ))
    assert_size_stride(getitem_25, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_3, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_10, (14, ), (1, ))
    assert_size_stride(getitem_36, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_4, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_13, (14, ), (1, ))
    assert_size_stride(getitem_47, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_5, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_16, (14, ), (1, ))
    assert_size_stride(getitem_58, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_6, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_19, (14, ), (1, ))
    assert_size_stride(getitem_69, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_7, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_22, (14, ), (1, ))
    assert_size_stride(getitem_80, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_8, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_25, (14, ), (1, ))
    assert_size_stride(getitem_91, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(cat, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_9, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_28, (256, ), (1, ))
    assert_size_stride(convolution_10, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_31, (256, ), (1, ))
    assert_size_stride(relu_9, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_11, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(squeeze_34, (112, ), (1, ))
    assert_size_stride(getitem_106, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_12, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_37, (14, ), (1, ))
    assert_size_stride(add_66, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_13, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_40, (14, ), (1, ))
    assert_size_stride(add_72, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_14, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_43, (14, ), (1, ))
    assert_size_stride(add_78, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_15, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_46, (14, ), (1, ))
    assert_size_stride(add_84, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_16, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_49, (14, ), (1, ))
    assert_size_stride(add_90, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_17, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_52, (14, ), (1, ))
    assert_size_stride(add_96, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_18, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_55, (14, ), (1, ))
    assert_size_stride(cat_1, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_19, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_58, (256, ), (1, ))
    assert_size_stride(relu_18, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_20, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(squeeze_61, (112, ), (1, ))
    assert_size_stride(getitem_196, (8, 14, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_21, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_64, (14, ), (1, ))
    assert_size_stride(add_118, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_22, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_67, (14, ), (1, ))
    assert_size_stride(add_124, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_23, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_70, (14, ), (1, ))
    assert_size_stride(add_130, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_24, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_73, (14, ), (1, ))
    assert_size_stride(add_136, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_25, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_76, (14, ), (1, ))
    assert_size_stride(add_142, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_26, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_79, (14, ), (1, ))
    assert_size_stride(add_148, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(convolution_27, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(squeeze_82, (14, ), (1, ))
    assert_size_stride(cat_2, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(convolution_28, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_85, (256, ), (1, ))
    assert_size_stride(relu_27, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_29, (8, 224, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(squeeze_88, (224, ), (1, ))
    assert_size_stride(getitem_286, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(convolution_30, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_91, (28, ), (1, ))
    assert_size_stride(getitem_297, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(convolution_31, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_94, (28, ), (1, ))
    assert_size_stride(getitem_308, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(convolution_32, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_97, (28, ), (1, ))
    assert_size_stride(getitem_319, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(convolution_33, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_100, (28, ), (1, ))
    assert_size_stride(getitem_330, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(convolution_34, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_103, (28, ), (1, ))
    assert_size_stride(getitem_341, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(convolution_35, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_106, (28, ), (1, ))
    assert_size_stride(getitem_352, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(convolution_36, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_109, (28, ), (1, ))
    assert_size_stride(getitem_363, (8, 28, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(cat_3, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(convolution_37, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_112, (512, ), (1, ))
    assert_size_stride(convolution_38, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_115, (512, ), (1, ))
    assert_size_stride(relu_36, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_39, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(squeeze_118, (224, ), (1, ))
    assert_size_stride(getitem_378, (8, 28, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(convolution_40, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_121, (28, ), (1, ))
    assert_size_stride(add_221, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_41, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_124, (28, ), (1, ))
    assert_size_stride(add_227, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_42, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_127, (28, ), (1, ))
    assert_size_stride(add_233, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_43, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_130, (28, ), (1, ))
    assert_size_stride(add_239, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_44, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_133, (28, ), (1, ))
    assert_size_stride(add_245, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_45, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_136, (28, ), (1, ))
    assert_size_stride(add_251, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_46, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_139, (28, ), (1, ))
    assert_size_stride(cat_4, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(convolution_47, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_142, (512, ), (1, ))
    assert_size_stride(relu_45, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_48, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(squeeze_145, (224, ), (1, ))
    assert_size_stride(getitem_468, (8, 28, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(convolution_49, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_148, (28, ), (1, ))
    assert_size_stride(add_273, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_50, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_151, (28, ), (1, ))
    assert_size_stride(add_279, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_51, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_154, (28, ), (1, ))
    assert_size_stride(add_285, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_52, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_157, (28, ), (1, ))
    assert_size_stride(add_291, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_53, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_160, (28, ), (1, ))
    assert_size_stride(add_297, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_54, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_163, (28, ), (1, ))
    assert_size_stride(add_303, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_55, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_166, (28, ), (1, ))
    assert_size_stride(cat_5, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(convolution_56, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_169, (512, ), (1, ))
    assert_size_stride(relu_54, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_57, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(squeeze_172, (224, ), (1, ))
    assert_size_stride(getitem_558, (8, 28, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(convolution_58, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_175, (28, ), (1, ))
    assert_size_stride(add_325, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_59, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_178, (28, ), (1, ))
    assert_size_stride(add_331, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_60, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_181, (28, ), (1, ))
    assert_size_stride(add_337, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_61, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_184, (28, ), (1, ))
    assert_size_stride(add_343, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_62, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_187, (28, ), (1, ))
    assert_size_stride(add_349, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_63, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_190, (28, ), (1, ))
    assert_size_stride(add_355, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(convolution_64, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(squeeze_193, (28, ), (1, ))
    assert_size_stride(cat_6, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(convolution_65, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_196, (512, ), (1, ))
    assert_size_stride(relu_63, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_66, (8, 448, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(squeeze_199, (448, ), (1, ))
    assert_size_stride(getitem_648, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(convolution_67, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_202, (56, ), (1, ))
    assert_size_stride(getitem_659, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(convolution_68, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_205, (56, ), (1, ))
    assert_size_stride(getitem_670, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(convolution_69, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_208, (56, ), (1, ))
    assert_size_stride(getitem_681, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(convolution_70, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_211, (56, ), (1, ))
    assert_size_stride(getitem_692, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(convolution_71, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_214, (56, ), (1, ))
    assert_size_stride(getitem_703, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(convolution_72, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_217, (56, ), (1, ))
    assert_size_stride(getitem_714, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(convolution_73, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_220, (56, ), (1, ))
    assert_size_stride(getitem_725, (8, 56, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(cat_7, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_74, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_223, (1024, ), (1, ))
    assert_size_stride(convolution_75, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_226, (1024, ), (1, ))
    assert_size_stride(relu_72, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_76, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(squeeze_229, (448, ), (1, ))
    assert_size_stride(getitem_740, (8, 56, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_77, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_232, (56, ), (1, ))
    assert_size_stride(add_428, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_78, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_235, (56, ), (1, ))
    assert_size_stride(add_434, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_79, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_238, (56, ), (1, ))
    assert_size_stride(add_440, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_80, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_241, (56, ), (1, ))
    assert_size_stride(add_446, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_81, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_244, (56, ), (1, ))
    assert_size_stride(add_452, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_82, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_247, (56, ), (1, ))
    assert_size_stride(add_458, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_83, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_250, (56, ), (1, ))
    assert_size_stride(cat_8, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_84, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_253, (1024, ), (1, ))
    assert_size_stride(relu_81, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_85, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(squeeze_256, (448, ), (1, ))
    assert_size_stride(getitem_830, (8, 56, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_86, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_259, (56, ), (1, ))
    assert_size_stride(add_480, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_87, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_262, (56, ), (1, ))
    assert_size_stride(add_486, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_88, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_265, (56, ), (1, ))
    assert_size_stride(add_492, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_89, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_268, (56, ), (1, ))
    assert_size_stride(add_498, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_90, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_271, (56, ), (1, ))
    assert_size_stride(add_504, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_91, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_274, (56, ), (1, ))
    assert_size_stride(add_510, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_92, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_277, (56, ), (1, ))
    assert_size_stride(cat_9, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_93, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_280, (1024, ), (1, ))
    assert_size_stride(relu_90, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_94, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(squeeze_283, (448, ), (1, ))
    assert_size_stride(getitem_920, (8, 56, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_95, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_286, (56, ), (1, ))
    assert_size_stride(add_532, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_96, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_289, (56, ), (1, ))
    assert_size_stride(add_538, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_97, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_292, (56, ), (1, ))
    assert_size_stride(add_544, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_98, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_295, (56, ), (1, ))
    assert_size_stride(add_550, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_99, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_298, (56, ), (1, ))
    assert_size_stride(add_556, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_100, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_301, (56, ), (1, ))
    assert_size_stride(add_562, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_101, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_304, (56, ), (1, ))
    assert_size_stride(cat_10, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_102, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_307, (1024, ), (1, ))
    assert_size_stride(relu_99, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_103, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(squeeze_310, (448, ), (1, ))
    assert_size_stride(getitem_1010, (8, 56, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_104, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_313, (56, ), (1, ))
    assert_size_stride(add_584, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_105, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_316, (56, ), (1, ))
    assert_size_stride(add_590, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_106, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_319, (56, ), (1, ))
    assert_size_stride(add_596, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_107, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_322, (56, ), (1, ))
    assert_size_stride(add_602, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_108, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_325, (56, ), (1, ))
    assert_size_stride(add_608, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_109, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_328, (56, ), (1, ))
    assert_size_stride(add_614, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_110, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_331, (56, ), (1, ))
    assert_size_stride(cat_11, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_111, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_334, (1024, ), (1, ))
    assert_size_stride(relu_108, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_112, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(squeeze_337, (448, ), (1, ))
    assert_size_stride(getitem_1100, (8, 56, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_113, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_340, (56, ), (1, ))
    assert_size_stride(add_636, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_114, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_343, (56, ), (1, ))
    assert_size_stride(add_642, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_115, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_346, (56, ), (1, ))
    assert_size_stride(add_648, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_116, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_349, (56, ), (1, ))
    assert_size_stride(add_654, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_117, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_352, (56, ), (1, ))
    assert_size_stride(add_660, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_118, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_355, (56, ), (1, ))
    assert_size_stride(add_666, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(convolution_119, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(squeeze_358, (56, ), (1, ))
    assert_size_stride(cat_12, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(convolution_120, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_361, (1024, ), (1, ))
    assert_size_stride(relu_117, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_121, (8, 896, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(squeeze_364, (896, ), (1, ))
    assert_size_stride(getitem_1190, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(convolution_122, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_367, (112, ), (1, ))
    assert_size_stride(getitem_1201, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(convolution_123, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_370, (112, ), (1, ))
    assert_size_stride(getitem_1212, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(convolution_124, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_373, (112, ), (1, ))
    assert_size_stride(getitem_1223, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(convolution_125, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_376, (112, ), (1, ))
    assert_size_stride(getitem_1234, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(convolution_126, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_379, (112, ), (1, ))
    assert_size_stride(getitem_1245, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(convolution_127, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_382, (112, ), (1, ))
    assert_size_stride(getitem_1256, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(convolution_128, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_385, (112, ), (1, ))
    assert_size_stride(getitem_1267, (8, 112, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(cat_13, (8, 896, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(convolution_129, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_388, (2048, ), (1, ))
    assert_size_stride(convolution_130, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_391, (2048, ), (1, ))
    assert_size_stride(relu_126, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(convolution_131, (8, 896, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(squeeze_394, (896, ), (1, ))
    assert_size_stride(getitem_1282, (8, 112, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(convolution_132, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_397, (112, ), (1, ))
    assert_size_stride(add_739, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_133, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_400, (112, ), (1, ))
    assert_size_stride(add_745, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_134, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_403, (112, ), (1, ))
    assert_size_stride(add_751, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_135, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_406, (112, ), (1, ))
    assert_size_stride(add_757, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_136, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_409, (112, ), (1, ))
    assert_size_stride(add_763, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_137, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_412, (112, ), (1, ))
    assert_size_stride(add_769, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_138, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_415, (112, ), (1, ))
    assert_size_stride(cat_14, (8, 896, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(convolution_139, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_418, (2048, ), (1, ))
    assert_size_stride(relu_135, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(convolution_140, (8, 896, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(squeeze_421, (896, ), (1, ))
    assert_size_stride(getitem_1372, (8, 112, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(convolution_141, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_424, (112, ), (1, ))
    assert_size_stride(add_791, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_142, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_427, (112, ), (1, ))
    assert_size_stride(add_797, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_143, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_430, (112, ), (1, ))
    assert_size_stride(add_803, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_144, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_433, (112, ), (1, ))
    assert_size_stride(add_809, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_145, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_436, (112, ), (1, ))
    assert_size_stride(add_815, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_146, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_439, (112, ), (1, ))
    assert_size_stride(add_821, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(convolution_147, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(squeeze_442, (112, ), (1, ))
    assert_size_stride(cat_15, (8, 896, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(convolution_148, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_445, (2048, ), (1, ))
    assert_size_stride(view, (8, 2048), (2048, 1))
    assert_size_stride(permute_1, (1000, 2048), (2048, 1))
    assert_size_stride(le, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(unsqueeze_598, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(le_1, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_610, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_2, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_622, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_3, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_634, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_4, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_646, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_5, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_658, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_6, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_670, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_7, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_682, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_8, (8, 896, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(unsqueeze_694, (1, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(unsqueeze_706, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(le_10, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_718, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_11, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_730, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_12, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_742, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_13, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_754, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_14, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_766, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_15, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_778, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_16, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_790, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_17, (8, 896, 7, 7), (43904, 1, 6272, 896))
    assert_size_stride(unsqueeze_802, (1, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(unsqueeze_814, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(unsqueeze_826, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(le_19, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_838, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_20, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_850, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_21, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_862, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_22, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_874, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_23, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_886, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_24, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_898, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_25, (8, 112, 7, 7), (5488, 1, 784, 112))
    assert_size_stride(unsqueeze_910, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(le_26, (8, 896, 14, 14), (175616, 1, 12544, 896))
    assert_size_stride(unsqueeze_922, (1, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(unsqueeze_934, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_28, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_946, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_29, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_958, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_30, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_970, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_31, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_982, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_32, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_994, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_33, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1006, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_34, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1018, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_35, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(unsqueeze_1030, (1, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(unsqueeze_1042, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_37, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1054, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_38, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1066, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_39, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1078, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_40, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1090, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_41, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1102, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_42, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1114, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_43, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1126, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_44, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(unsqueeze_1138, (1, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(unsqueeze_1150, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_46, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1162, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_47, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1174, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_48, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1186, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_49, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1198, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_50, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1210, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_51, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1222, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_52, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1234, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_53, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(unsqueeze_1246, (1, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(unsqueeze_1258, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_55, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1270, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_56, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1282, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_57, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1294, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_58, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1306, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_59, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1318, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_60, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1330, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_61, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1342, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_62, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(unsqueeze_1354, (1, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(unsqueeze_1366, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_64, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1378, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_65, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1390, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_66, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1402, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_67, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1414, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_68, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1426, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_69, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1438, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_70, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1450, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_71, (8, 448, 14, 14), (87808, 1, 6272, 448))
    assert_size_stride(unsqueeze_1462, (1, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(unsqueeze_1474, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(unsqueeze_1486, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_73, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1498, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_74, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1510, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_75, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1522, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_76, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1534, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_77, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1546, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_78, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1558, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_79, (8, 56, 14, 14), (10976, 1, 784, 56))
    assert_size_stride(unsqueeze_1570, (1, 56, 1, 1), (56, 1, 1, 1))
    assert_size_stride(le_80, (8, 448, 28, 28), (351232, 1, 12544, 448))
    assert_size_stride(unsqueeze_1582, (1, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(unsqueeze_1594, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_82, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1606, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_83, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1618, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_84, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1630, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_85, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1642, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_86, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1654, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_87, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1666, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_88, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1678, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_89, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(unsqueeze_1690, (1, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(unsqueeze_1702, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_91, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1714, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_92, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1726, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_93, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1738, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_94, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1750, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_95, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1762, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_96, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1774, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_97, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1786, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_98, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(unsqueeze_1798, (1, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(unsqueeze_1810, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_100, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1822, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_101, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1834, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_102, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1846, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_103, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1858, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_104, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1870, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_105, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1882, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_106, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1894, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_107, (8, 224, 28, 28), (175616, 1, 6272, 224))
    assert_size_stride(unsqueeze_1906, (1, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(unsqueeze_1918, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(unsqueeze_1930, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_109, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1942, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_110, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1954, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_111, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1966, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_112, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1978, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_113, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_1990, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_114, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_2002, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_115, (8, 28, 28, 28), (21952, 1, 784, 28))
    assert_size_stride(unsqueeze_2014, (1, 28, 1, 1), (28, 1, 1, 1))
    assert_size_stride(le_116, (8, 224, 56, 56), (702464, 1, 12544, 224))
    assert_size_stride(unsqueeze_2026, (1, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(unsqueeze_2038, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_118, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2050, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_119, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2062, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_120, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2074, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_121, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2086, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_122, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2098, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_123, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2110, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_124, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2122, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_125, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(unsqueeze_2134, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(unsqueeze_2146, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_127, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2158, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_128, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2170, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_129, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2182, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_130, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2194, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_131, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2206, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_132, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2218, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_133, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2230, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_134, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(unsqueeze_2242, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(unsqueeze_2254, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_2266, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_136, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2278, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_137, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2290, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_138, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2302, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_139, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2314, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_140, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2326, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_141, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2338, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_142, (8, 14, 56, 56), (43904, 1, 784, 14))
    assert_size_stride(unsqueeze_2350, (1, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(le_143, (8, 112, 56, 56), (351232, 1, 6272, 112))
    assert_size_stride(unsqueeze_2362, (1, 112, 1, 1), (112, 1, 1, 1))
    assert_size_stride(unsqueeze_2374, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_1, out=buf0)
    del permute_1
    buf1 = empty((1000, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), view, out=buf1)
    del view
    buf2 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf3 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf4 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf5 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf6 = empty_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0(c_void_p(tangents_1.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(convolution_148.data_ptr()), c_void_p(unsqueeze_598.data_ptr()), c_void_p(squeeze_445.data_ptr()), c_void_p(primals_446.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()))
    del convolution_148
    del primals_446
    del squeeze_445
    del tangents_1
    del unsqueeze_598
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.div, aten.native_batch_norm_backward, aten.threshold_backward]
    buf7 = aten.convolution_backward(buf6, cat_15, primals_445, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_15
    del primals_445
    buf8 = buf7[0]
    buf9 = buf7[1]
    del buf7
    buf10 = empty((112, ), device='cpu', dtype=torch.float32)
    buf11 = empty((112, ), device='cpu', dtype=torch.float32)
    buf12 = empty((112, ), device='cpu', dtype=torch.float32)
    buf13 = empty_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1(c_void_p(le_1.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(convolution_147.data_ptr()), c_void_p(unsqueeze_610.data_ptr()), c_void_p(squeeze_442.data_ptr()), c_void_p(primals_443.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()))
    del convolution_147
    del le_1
    del primals_443
    del squeeze_442
    del unsqueeze_610
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf14 = aten.convolution_backward(buf13, add_821, primals_442, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_821
    del primals_442
    buf15 = buf14[0]
    buf16 = buf14[1]
    del buf14
    buf17 = buf11; del buf11  # reuse
    buf18 = empty((112, ), device='cpu', dtype=torch.float32)
    buf19 = buf13; del buf13  # reuse
    buf67 = empty_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    buf65 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 672)  # alias
    buf20 = buf18; del buf18  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_2(c_void_p(buf20.data_ptr()), c_void_p(le_2.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(convolution_146.data_ptr()), c_void_p(unsqueeze_622.data_ptr()), c_void_p(squeeze_439.data_ptr()), c_void_p(primals_440.data_ptr()), c_void_p(buf17.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(buf65.data_ptr()))
    del buf15
    del convolution_146
    del le_2
    del primals_440
    del squeeze_439
    del unsqueeze_622
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf21 = aten.convolution_backward(buf19, add_815, primals_439, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_815
    del primals_439
    buf22 = buf21[0]
    buf23 = buf21[1]
    del buf21
    buf24 = empty((112, ), device='cpu', dtype=torch.float32)
    buf25 = empty((112, ), device='cpu', dtype=torch.float32)
    buf26 = buf19; del buf19  # reuse
    buf64 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 560)  # alias
    buf27 = buf25; del buf25  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_3(c_void_p(buf27.data_ptr()), c_void_p(le_3.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(convolution_145.data_ptr()), c_void_p(unsqueeze_634.data_ptr()), c_void_p(squeeze_436.data_ptr()), c_void_p(primals_437.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf64.data_ptr()))
    del buf22
    del convolution_145
    del le_3
    del primals_437
    del squeeze_436
    del unsqueeze_634
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf28 = aten.convolution_backward(buf26, add_809, primals_436, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_809
    del primals_436
    buf29 = buf28[0]
    buf30 = buf28[1]
    del buf28
    buf31 = empty((112, ), device='cpu', dtype=torch.float32)
    buf32 = empty((112, ), device='cpu', dtype=torch.float32)
    buf33 = buf26; del buf26  # reuse
    buf63 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 448)  # alias
    buf34 = buf32; del buf32  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_4(c_void_p(buf34.data_ptr()), c_void_p(le_4.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf29.data_ptr()), c_void_p(convolution_144.data_ptr()), c_void_p(unsqueeze_646.data_ptr()), c_void_p(squeeze_433.data_ptr()), c_void_p(primals_434.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(buf63.data_ptr()))
    del buf29
    del convolution_144
    del le_4
    del primals_434
    del squeeze_433
    del unsqueeze_646
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf35 = aten.convolution_backward(buf33, add_803, primals_433, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_803
    del primals_433
    buf36 = buf35[0]
    buf37 = buf35[1]
    del buf35
    buf38 = empty((112, ), device='cpu', dtype=torch.float32)
    buf39 = empty((112, ), device='cpu', dtype=torch.float32)
    buf40 = buf33; del buf33  # reuse
    buf62 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 336)  # alias
    buf41 = buf39; del buf39  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_5(c_void_p(buf41.data_ptr()), c_void_p(le_5.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(convolution_143.data_ptr()), c_void_p(unsqueeze_658.data_ptr()), c_void_p(squeeze_430.data_ptr()), c_void_p(primals_431.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf40.data_ptr()), c_void_p(buf62.data_ptr()))
    del buf36
    del convolution_143
    del le_5
    del primals_431
    del squeeze_430
    del unsqueeze_658
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf42 = aten.convolution_backward(buf40, add_797, primals_430, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_797
    del primals_430
    buf43 = buf42[0]
    buf44 = buf42[1]
    del buf42
    buf45 = empty((112, ), device='cpu', dtype=torch.float32)
    buf46 = empty((112, ), device='cpu', dtype=torch.float32)
    buf47 = buf40; del buf40  # reuse
    buf61 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 224)  # alias
    buf48 = buf46; del buf46  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_6(c_void_p(buf48.data_ptr()), c_void_p(le_6.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf43.data_ptr()), c_void_p(convolution_142.data_ptr()), c_void_p(unsqueeze_670.data_ptr()), c_void_p(squeeze_427.data_ptr()), c_void_p(primals_428.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(buf61.data_ptr()))
    del buf43
    del convolution_142
    del le_6
    del primals_428
    del squeeze_427
    del unsqueeze_670
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf49 = aten.convolution_backward(buf47, add_791, primals_427, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_791
    del primals_427
    buf50 = buf49[0]
    buf51 = buf49[1]
    del buf49
    buf52 = empty((112, ), device='cpu', dtype=torch.float32)
    buf53 = empty((112, ), device='cpu', dtype=torch.float32)
    buf54 = buf47; del buf47  # reuse
    buf60 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 112)  # alias
    buf55 = buf53; del buf53  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_7(c_void_p(buf55.data_ptr()), c_void_p(le_7.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf50.data_ptr()), c_void_p(convolution_141.data_ptr()), c_void_p(unsqueeze_682.data_ptr()), c_void_p(squeeze_424.data_ptr()), c_void_p(primals_425.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf60.data_ptr()))
    del buf50
    del convolution_141
    del le_7
    del primals_425
    del squeeze_424
    del unsqueeze_682
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf56 = aten.convolution_backward(buf54, getitem_1372, primals_424, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf54
    del getitem_1372
    del primals_424
    buf57 = buf56[0]
    buf58 = buf56[1]
    del buf56
    buf59 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 0)  # alias
    buf66 = reinterpret_tensor(buf67, (8, 112, 7, 7), (43904, 1, 6272, 896), 784)  # alias
    buf68 = empty((896, ), device='cpu', dtype=torch.float32)
    buf69 = empty((896, ), device='cpu', dtype=torch.float32)
    buf70 = empty((896, ), device='cpu', dtype=torch.float32)
    buf71 = buf67; del buf67  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_8(c_void_p(buf71.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(le_8.data_ptr()), c_void_p(convolution_140.data_ptr()), c_void_p(unsqueeze_694.data_ptr()), c_void_p(squeeze_421.data_ptr()), c_void_p(primals_422.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf68.data_ptr()), c_void_p(buf69.data_ptr()), c_void_p(buf70.data_ptr()))
    del buf59
    del buf60
    del buf61
    del buf62
    del buf63
    del buf64
    del buf65
    del buf66
    del buf8
    del convolution_140
    del le_8
    del primals_422
    del squeeze_421
    del unsqueeze_694
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf72 = aten.convolution_backward(buf71, relu_135, primals_421, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_421
    buf73 = buf72[0]
    buf74 = buf72[1]
    del buf72
    buf75 = buf4; del buf4  # reuse
    buf76 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf77 = buf6; del buf6  # reuse
    buf78 = buf76; del buf76  # reuse
    buf79 = buf77; del buf77  # reuse
    cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_9(c_void_p(buf78.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(relu_135.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf73.data_ptr()), c_void_p(convolution_139.data_ptr()), c_void_p(unsqueeze_706.data_ptr()), c_void_p(squeeze_418.data_ptr()), c_void_p(primals_419.data_ptr()), c_void_p(buf75.data_ptr()))
    del convolution_139
    del primals_419
    del squeeze_418
    del unsqueeze_706
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf80 = aten.convolution_backward(buf79, cat_14, primals_418, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_14
    del primals_418
    buf81 = buf80[0]
    buf82 = buf80[1]
    del buf80
    buf83 = empty((112, ), device='cpu', dtype=torch.float32)
    buf84 = empty((112, ), device='cpu', dtype=torch.float32)
    buf85 = empty((112, ), device='cpu', dtype=torch.float32)
    buf86 = buf57; del buf57  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_10(c_void_p(le_10.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(convolution_138.data_ptr()), c_void_p(unsqueeze_718.data_ptr()), c_void_p(squeeze_415.data_ptr()), c_void_p(primals_416.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(buf86.data_ptr()))
    del convolution_138
    del le_10
    del primals_416
    del squeeze_415
    del unsqueeze_718
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf87 = aten.convolution_backward(buf86, add_769, primals_415, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_769
    del primals_415
    buf88 = buf87[0]
    buf89 = buf87[1]
    del buf87
    buf90 = buf84; del buf84  # reuse
    buf91 = empty((112, ), device='cpu', dtype=torch.float32)
    buf92 = buf86; del buf86  # reuse
    buf140 = buf71; del buf71  # reuse
    buf138 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 672)  # alias
    buf93 = buf91; del buf91  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_11(c_void_p(buf93.data_ptr()), c_void_p(le_11.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(convolution_137.data_ptr()), c_void_p(unsqueeze_730.data_ptr()), c_void_p(squeeze_412.data_ptr()), c_void_p(primals_413.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf138.data_ptr()))
    del buf88
    del convolution_137
    del le_11
    del primals_413
    del squeeze_412
    del unsqueeze_730
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf94 = aten.convolution_backward(buf92, add_763, primals_412, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_763
    del primals_412
    buf95 = buf94[0]
    buf96 = buf94[1]
    del buf94
    buf97 = empty((112, ), device='cpu', dtype=torch.float32)
    buf98 = empty((112, ), device='cpu', dtype=torch.float32)
    buf99 = buf92; del buf92  # reuse
    buf137 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 560)  # alias
    buf100 = buf98; del buf98  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_12(c_void_p(buf100.data_ptr()), c_void_p(le_12.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf95.data_ptr()), c_void_p(convolution_136.data_ptr()), c_void_p(unsqueeze_742.data_ptr()), c_void_p(squeeze_409.data_ptr()), c_void_p(primals_410.data_ptr()), c_void_p(buf97.data_ptr()), c_void_p(buf99.data_ptr()), c_void_p(buf137.data_ptr()))
    del buf95
    del convolution_136
    del le_12
    del primals_410
    del squeeze_409
    del unsqueeze_742
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf101 = aten.convolution_backward(buf99, add_757, primals_409, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_757
    del primals_409
    buf102 = buf101[0]
    buf103 = buf101[1]
    del buf101
    buf104 = empty((112, ), device='cpu', dtype=torch.float32)
    buf105 = empty((112, ), device='cpu', dtype=torch.float32)
    buf106 = buf99; del buf99  # reuse
    buf136 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 448)  # alias
    buf107 = buf105; del buf105  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_13(c_void_p(buf107.data_ptr()), c_void_p(le_13.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf102.data_ptr()), c_void_p(convolution_135.data_ptr()), c_void_p(unsqueeze_754.data_ptr()), c_void_p(squeeze_406.data_ptr()), c_void_p(primals_407.data_ptr()), c_void_p(buf104.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(buf136.data_ptr()))
    del buf102
    del convolution_135
    del le_13
    del primals_407
    del squeeze_406
    del unsqueeze_754
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf108 = aten.convolution_backward(buf106, add_751, primals_406, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_751
    del primals_406
    buf109 = buf108[0]
    buf110 = buf108[1]
    del buf108
    buf111 = empty((112, ), device='cpu', dtype=torch.float32)
    buf112 = empty((112, ), device='cpu', dtype=torch.float32)
    buf113 = buf106; del buf106  # reuse
    buf135 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 336)  # alias
    buf114 = buf112; del buf112  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_14(c_void_p(buf114.data_ptr()), c_void_p(le_14.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(convolution_134.data_ptr()), c_void_p(unsqueeze_766.data_ptr()), c_void_p(squeeze_403.data_ptr()), c_void_p(primals_404.data_ptr()), c_void_p(buf111.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(buf135.data_ptr()))
    del buf109
    del convolution_134
    del le_14
    del primals_404
    del squeeze_403
    del unsqueeze_766
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf115 = aten.convolution_backward(buf113, add_745, primals_403, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_745
    del primals_403
    buf116 = buf115[0]
    buf117 = buf115[1]
    del buf115
    buf118 = empty((112, ), device='cpu', dtype=torch.float32)
    buf119 = empty((112, ), device='cpu', dtype=torch.float32)
    buf120 = buf113; del buf113  # reuse
    buf134 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 224)  # alias
    buf121 = buf119; del buf119  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_15(c_void_p(buf121.data_ptr()), c_void_p(le_15.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf116.data_ptr()), c_void_p(convolution_133.data_ptr()), c_void_p(unsqueeze_778.data_ptr()), c_void_p(squeeze_400.data_ptr()), c_void_p(primals_401.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf134.data_ptr()))
    del buf116
    del convolution_133
    del le_15
    del primals_401
    del squeeze_400
    del unsqueeze_778
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf122 = aten.convolution_backward(buf120, add_739, primals_400, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_739
    del primals_400
    buf123 = buf122[0]
    buf124 = buf122[1]
    del buf122
    buf125 = empty((112, ), device='cpu', dtype=torch.float32)
    buf126 = empty((112, ), device='cpu', dtype=torch.float32)
    buf127 = buf120; del buf120  # reuse
    buf133 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 112)  # alias
    buf128 = buf126; del buf126  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_16(c_void_p(buf128.data_ptr()), c_void_p(le_16.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf123.data_ptr()), c_void_p(convolution_132.data_ptr()), c_void_p(unsqueeze_790.data_ptr()), c_void_p(squeeze_397.data_ptr()), c_void_p(primals_398.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(buf127.data_ptr()), c_void_p(buf133.data_ptr()))
    del buf123
    del convolution_132
    del le_16
    del primals_398
    del squeeze_397
    del unsqueeze_790
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf129 = aten.convolution_backward(buf127, getitem_1282, primals_397, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf127
    del getitem_1282
    del primals_397
    buf130 = buf129[0]
    buf131 = buf129[1]
    del buf129
    buf132 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 0)  # alias
    buf139 = reinterpret_tensor(buf140, (8, 112, 7, 7), (43904, 1, 6272, 896), 784)  # alias
    buf141 = buf69; del buf69  # reuse
    buf142 = empty((896, ), device='cpu', dtype=torch.float32)
    buf143 = empty((896, ), device='cpu', dtype=torch.float32)
    buf144 = buf140; del buf140  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_17(c_void_p(buf144.data_ptr()), c_void_p(buf130.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(le_17.data_ptr()), c_void_p(convolution_131.data_ptr()), c_void_p(unsqueeze_802.data_ptr()), c_void_p(squeeze_394.data_ptr()), c_void_p(primals_395.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(buf142.data_ptr()), c_void_p(buf143.data_ptr()))
    del buf132
    del buf133
    del buf134
    del buf135
    del buf136
    del buf137
    del buf138
    del buf139
    del buf81
    del convolution_131
    del le_17
    del primals_395
    del squeeze_394
    del unsqueeze_802
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf145 = aten.convolution_backward(buf144, relu_126, primals_394, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf144
    del primals_394
    buf146 = buf145[0]
    buf147 = buf145[1]
    del buf145
    buf148 = buf146; del buf146  # reuse
    buf149 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf150 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf156 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf151 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf152 = buf79; del buf79  # reuse
    buf158 = empty_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_18(c_void_p(buf148.data_ptr()), c_void_p(relu_126.data_ptr()), c_void_p(relu_135.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf73.data_ptr()), c_void_p(convolution_130.data_ptr()), c_void_p(unsqueeze_814.data_ptr()), c_void_p(convolution_129.data_ptr()), c_void_p(unsqueeze_826.data_ptr()), c_void_p(squeeze_391.data_ptr()), c_void_p(primals_392.data_ptr()), c_void_p(squeeze_388.data_ptr()), c_void_p(primals_389.data_ptr()), c_void_p(buf149.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf156.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(buf158.data_ptr()))
    del buf0
    del buf148
    del buf150
    del buf73
    del convolution_129
    del convolution_130
    del le
    del primals_389
    del primals_392
    del relu_126
    del relu_135
    del squeeze_391
    del unsqueeze_814
    del unsqueeze_826
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf153 = aten.convolution_backward(buf152, relu_117, primals_391, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf152
    del primals_391
    buf154 = buf153[0]
    buf155 = buf153[1]
    del buf153
    buf157 = buf156; del buf156  # reuse
    cpp_fused_native_batch_norm_backward_19(c_void_p(buf157.data_ptr()), c_void_p(squeeze_388.data_ptr()))
    del squeeze_388
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf159 = aten.convolution_backward(buf158, cat_13, primals_388, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf158
    del cat_13
    del primals_388
    buf160 = buf159[0]
    buf161 = buf159[1]
    del buf159
    buf219 = empty_strided((8, 896, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    buf162 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 784)  # alias
    buf163 = empty((112, ), device='cpu', dtype=torch.float32)
    buf164 = empty((112, ), device='cpu', dtype=torch.float32)
    buf165 = empty((112, ), device='cpu', dtype=torch.float32)
    buf166 = buf130; del buf130  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_20(c_void_p(buf160.data_ptr()), c_void_p(le_19.data_ptr()), c_void_p(convolution_128.data_ptr()), c_void_p(unsqueeze_838.data_ptr()), c_void_p(squeeze_385.data_ptr()), c_void_p(primals_386.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(buf163.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf165.data_ptr()), c_void_p(buf166.data_ptr()))
    del convolution_128
    del le_19
    del primals_386
    del squeeze_385
    del unsqueeze_838
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf167 = aten.convolution_backward(buf166, getitem_1256, primals_385, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_1256
    del primals_385
    buf168 = buf167[0]
    buf169 = buf167[1]
    del buf167
    buf170 = buf164; del buf164  # reuse
    buf171 = empty((112, ), device='cpu', dtype=torch.float32)
    buf172 = empty((112, ), device='cpu', dtype=torch.float32)
    buf173 = buf166; del buf166  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_21(c_void_p(le_20.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(convolution_127.data_ptr()), c_void_p(unsqueeze_850.data_ptr()), c_void_p(squeeze_382.data_ptr()), c_void_p(primals_383.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(buf171.data_ptr()), c_void_p(buf172.data_ptr()), c_void_p(buf173.data_ptr()))
    del convolution_127
    del le_20
    del primals_383
    del squeeze_382
    del unsqueeze_850
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf174 = aten.convolution_backward(buf173, getitem_1245, primals_382, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_1245
    del primals_382
    buf175 = buf174[0]
    buf176 = buf174[1]
    del buf174
    buf177 = buf171; del buf171  # reuse
    buf178 = empty((112, ), device='cpu', dtype=torch.float32)
    buf179 = empty((112, ), device='cpu', dtype=torch.float32)
    buf180 = buf173; del buf173  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22(c_void_p(le_21.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(convolution_126.data_ptr()), c_void_p(unsqueeze_862.data_ptr()), c_void_p(squeeze_379.data_ptr()), c_void_p(primals_380.data_ptr()), c_void_p(buf177.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf179.data_ptr()), c_void_p(buf180.data_ptr()))
    del convolution_126
    del le_21
    del primals_380
    del squeeze_379
    del unsqueeze_862
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf181 = aten.convolution_backward(buf180, getitem_1234, primals_379, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_1234
    del primals_379
    buf182 = buf181[0]
    buf183 = buf181[1]
    del buf181
    buf184 = buf178; del buf178  # reuse
    buf185 = empty((112, ), device='cpu', dtype=torch.float32)
    buf186 = empty((112, ), device='cpu', dtype=torch.float32)
    buf187 = buf180; del buf180  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_23(c_void_p(le_22.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(convolution_125.data_ptr()), c_void_p(unsqueeze_874.data_ptr()), c_void_p(squeeze_376.data_ptr()), c_void_p(primals_377.data_ptr()), c_void_p(buf184.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf187.data_ptr()))
    del convolution_125
    del le_22
    del primals_377
    del squeeze_376
    del unsqueeze_874
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf188 = aten.convolution_backward(buf187, getitem_1223, primals_376, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_1223
    del primals_376
    buf189 = buf188[0]
    buf190 = buf188[1]
    del buf188
    buf191 = buf185; del buf185  # reuse
    buf192 = empty((112, ), device='cpu', dtype=torch.float32)
    buf193 = empty((112, ), device='cpu', dtype=torch.float32)
    buf194 = buf187; del buf187  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_24(c_void_p(le_23.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(convolution_124.data_ptr()), c_void_p(unsqueeze_886.data_ptr()), c_void_p(squeeze_373.data_ptr()), c_void_p(primals_374.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf193.data_ptr()), c_void_p(buf194.data_ptr()))
    del convolution_124
    del le_23
    del primals_374
    del squeeze_373
    del unsqueeze_886
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf195 = aten.convolution_backward(buf194, getitem_1212, primals_373, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_1212
    del primals_373
    buf196 = buf195[0]
    buf197 = buf195[1]
    del buf195
    buf198 = buf192; del buf192  # reuse
    buf199 = empty((112, ), device='cpu', dtype=torch.float32)
    buf200 = empty((112, ), device='cpu', dtype=torch.float32)
    buf201 = buf194; del buf194  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_25(c_void_p(le_24.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(convolution_123.data_ptr()), c_void_p(unsqueeze_898.data_ptr()), c_void_p(squeeze_370.data_ptr()), c_void_p(primals_371.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf200.data_ptr()), c_void_p(buf201.data_ptr()))
    del convolution_123
    del le_24
    del primals_371
    del squeeze_370
    del unsqueeze_898
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf202 = aten.convolution_backward(buf201, getitem_1201, primals_370, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_1201
    del primals_370
    buf203 = buf202[0]
    buf204 = buf202[1]
    del buf202
    buf205 = buf199; del buf199  # reuse
    buf206 = empty((112, ), device='cpu', dtype=torch.float32)
    buf207 = empty((112, ), device='cpu', dtype=torch.float32)
    buf208 = buf201; del buf201  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_26(c_void_p(le_25.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(convolution_122.data_ptr()), c_void_p(unsqueeze_910.data_ptr()), c_void_p(squeeze_367.data_ptr()), c_void_p(primals_368.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(buf206.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(buf208.data_ptr()))
    del buf160
    del convolution_122
    del le_25
    del primals_368
    del squeeze_367
    del unsqueeze_910
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf209 = aten.convolution_backward(buf208, getitem_1190, primals_367, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf208
    del getitem_1190
    del primals_367
    buf210 = buf209[0]
    buf211 = buf209[1]
    del buf209
    buf212 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 0)  # alias
    buf213 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 112)  # alias
    buf214 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 224)  # alias
    buf215 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 336)  # alias
    buf216 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 448)  # alias
    buf217 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 560)  # alias
    buf218 = reinterpret_tensor(buf219, (8, 112, 14, 14), (175616, 1, 12544, 896), 672)  # alias
    buf220 = buf142; del buf142  # reuse
    buf221 = empty((896, ), device='cpu', dtype=torch.float32)
    buf222 = empty((896, ), device='cpu', dtype=torch.float32)
    buf223 = buf219; del buf219  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_27(c_void_p(buf223.data_ptr()), c_void_p(buf210.data_ptr()), c_void_p(buf203.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf189.data_ptr()), c_void_p(buf182.data_ptr()), c_void_p(buf175.data_ptr()), c_void_p(buf168.data_ptr()), c_void_p(le_26.data_ptr()), c_void_p(convolution_121.data_ptr()), c_void_p(unsqueeze_922.data_ptr()), c_void_p(squeeze_364.data_ptr()), c_void_p(primals_365.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf213.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf215.data_ptr()), c_void_p(buf216.data_ptr()), c_void_p(buf217.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(buf221.data_ptr()), c_void_p(buf222.data_ptr()))
    del buf162
    del buf168
    del buf175
    del buf182
    del buf189
    del buf196
    del buf203
    del buf212
    del buf213
    del buf214
    del buf215
    del buf216
    del buf217
    del buf218
    del buf221
    del convolution_121
    del le_26
    del primals_365
    del squeeze_364
    del unsqueeze_922
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf224 = aten.convolution_backward(buf223, relu_117, primals_364, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_364
    buf225 = buf224[0]
    buf226 = buf224[1]
    del buf224
    buf227 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf228 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf229 = empty_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    buf230 = buf228; del buf228  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_28(c_void_p(buf230.data_ptr()), c_void_p(relu_117.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf225.data_ptr()), c_void_p(convolution_120.data_ptr()), c_void_p(unsqueeze_934.data_ptr()), c_void_p(squeeze_361.data_ptr()), c_void_p(primals_362.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(buf229.data_ptr()))
    del convolution_120
    del primals_362
    del squeeze_361
    del unsqueeze_934
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf231 = aten.convolution_backward(buf229, cat_12, primals_361, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_12
    del primals_361
    buf232 = buf231[0]
    buf233 = buf231[1]
    del buf231
    buf234 = empty((56, ), device='cpu', dtype=torch.float32)
    buf235 = empty((56, ), device='cpu', dtype=torch.float32)
    buf236 = empty((56, ), device='cpu', dtype=torch.float32)
    buf237 = empty_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_29(c_void_p(le_28.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(convolution_119.data_ptr()), c_void_p(unsqueeze_946.data_ptr()), c_void_p(squeeze_358.data_ptr()), c_void_p(primals_359.data_ptr()), c_void_p(buf234.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(buf236.data_ptr()), c_void_p(buf237.data_ptr()))
    del convolution_119
    del le_28
    del primals_359
    del squeeze_358
    del unsqueeze_946
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf238 = aten.convolution_backward(buf237, add_666, primals_358, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_666
    del primals_358
    buf239 = buf238[0]
    buf240 = buf238[1]
    del buf238
    buf241 = buf235; del buf235  # reuse
    buf242 = empty((56, ), device='cpu', dtype=torch.float32)
    buf243 = buf237; del buf237  # reuse
    buf291 = empty_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    buf289 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 336)  # alias
    buf244 = buf242; del buf242  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_30(c_void_p(buf244.data_ptr()), c_void_p(le_29.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(convolution_118.data_ptr()), c_void_p(unsqueeze_958.data_ptr()), c_void_p(squeeze_355.data_ptr()), c_void_p(primals_356.data_ptr()), c_void_p(buf241.data_ptr()), c_void_p(buf243.data_ptr()), c_void_p(buf289.data_ptr()))
    del buf239
    del convolution_118
    del le_29
    del primals_356
    del squeeze_355
    del unsqueeze_958
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf245 = aten.convolution_backward(buf243, add_660, primals_355, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_660
    del primals_355
    buf246 = buf245[0]
    buf247 = buf245[1]
    del buf245
    buf248 = empty((56, ), device='cpu', dtype=torch.float32)
    buf249 = empty((56, ), device='cpu', dtype=torch.float32)
    buf250 = buf243; del buf243  # reuse
    buf288 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 280)  # alias
    buf251 = buf249; del buf249  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_31(c_void_p(buf251.data_ptr()), c_void_p(le_30.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(convolution_117.data_ptr()), c_void_p(unsqueeze_970.data_ptr()), c_void_p(squeeze_352.data_ptr()), c_void_p(primals_353.data_ptr()), c_void_p(buf248.data_ptr()), c_void_p(buf250.data_ptr()), c_void_p(buf288.data_ptr()))
    del buf246
    del convolution_117
    del le_30
    del primals_353
    del squeeze_352
    del unsqueeze_970
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf252 = aten.convolution_backward(buf250, add_654, primals_352, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_654
    del primals_352
    buf253 = buf252[0]
    buf254 = buf252[1]
    del buf252
    buf255 = empty((56, ), device='cpu', dtype=torch.float32)
    buf256 = empty((56, ), device='cpu', dtype=torch.float32)
    buf257 = buf250; del buf250  # reuse
    buf287 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 224)  # alias
    buf258 = buf256; del buf256  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_32(c_void_p(buf258.data_ptr()), c_void_p(le_31.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf253.data_ptr()), c_void_p(convolution_116.data_ptr()), c_void_p(unsqueeze_982.data_ptr()), c_void_p(squeeze_349.data_ptr()), c_void_p(primals_350.data_ptr()), c_void_p(buf255.data_ptr()), c_void_p(buf257.data_ptr()), c_void_p(buf287.data_ptr()))
    del buf253
    del convolution_116
    del le_31
    del primals_350
    del squeeze_349
    del unsqueeze_982
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf259 = aten.convolution_backward(buf257, add_648, primals_349, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_648
    del primals_349
    buf260 = buf259[0]
    buf261 = buf259[1]
    del buf259
    buf262 = empty((56, ), device='cpu', dtype=torch.float32)
    buf263 = empty((56, ), device='cpu', dtype=torch.float32)
    buf264 = buf257; del buf257  # reuse
    buf286 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 168)  # alias
    buf265 = buf263; del buf263  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_33(c_void_p(buf265.data_ptr()), c_void_p(le_32.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(convolution_115.data_ptr()), c_void_p(unsqueeze_994.data_ptr()), c_void_p(squeeze_346.data_ptr()), c_void_p(primals_347.data_ptr()), c_void_p(buf262.data_ptr()), c_void_p(buf264.data_ptr()), c_void_p(buf286.data_ptr()))
    del buf260
    del convolution_115
    del le_32
    del primals_347
    del squeeze_346
    del unsqueeze_994
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf266 = aten.convolution_backward(buf264, add_642, primals_346, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_642
    del primals_346
    buf267 = buf266[0]
    buf268 = buf266[1]
    del buf266
    buf269 = empty((56, ), device='cpu', dtype=torch.float32)
    buf270 = empty((56, ), device='cpu', dtype=torch.float32)
    buf271 = buf264; del buf264  # reuse
    buf285 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 112)  # alias
    buf272 = buf270; del buf270  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_34(c_void_p(buf272.data_ptr()), c_void_p(le_33.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(convolution_114.data_ptr()), c_void_p(unsqueeze_1006.data_ptr()), c_void_p(squeeze_343.data_ptr()), c_void_p(primals_344.data_ptr()), c_void_p(buf269.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf285.data_ptr()))
    del buf267
    del convolution_114
    del le_33
    del primals_344
    del squeeze_343
    del unsqueeze_1006
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf273 = aten.convolution_backward(buf271, add_636, primals_343, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_636
    del primals_343
    buf274 = buf273[0]
    buf275 = buf273[1]
    del buf273
    buf276 = empty((56, ), device='cpu', dtype=torch.float32)
    buf277 = empty((56, ), device='cpu', dtype=torch.float32)
    buf278 = buf271; del buf271  # reuse
    buf284 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 56)  # alias
    buf279 = buf277; del buf277  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_35(c_void_p(buf279.data_ptr()), c_void_p(le_34.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(convolution_113.data_ptr()), c_void_p(unsqueeze_1018.data_ptr()), c_void_p(squeeze_340.data_ptr()), c_void_p(primals_341.data_ptr()), c_void_p(buf276.data_ptr()), c_void_p(buf278.data_ptr()), c_void_p(buf284.data_ptr()))
    del buf274
    del convolution_113
    del le_34
    del primals_341
    del squeeze_340
    del unsqueeze_1018
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf280 = aten.convolution_backward(buf278, getitem_1100, primals_340, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf278
    del getitem_1100
    del primals_340
    buf281 = buf280[0]
    buf282 = buf280[1]
    del buf280
    buf283 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 0)  # alias
    buf290 = reinterpret_tensor(buf291, (8, 56, 14, 14), (87808, 1, 6272, 448), 392)  # alias
    buf292 = empty((448, ), device='cpu', dtype=torch.float32)
    buf293 = empty((448, ), device='cpu', dtype=torch.float32)
    buf294 = empty((448, ), device='cpu', dtype=torch.float32)
    buf295 = buf291; del buf291  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_36(c_void_p(buf295.data_ptr()), c_void_p(buf281.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(le_35.data_ptr()), c_void_p(convolution_112.data_ptr()), c_void_p(unsqueeze_1030.data_ptr()), c_void_p(squeeze_337.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(buf283.data_ptr()), c_void_p(buf290.data_ptr()), c_void_p(buf292.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(buf294.data_ptr()))
    del buf232
    del buf283
    del buf284
    del buf285
    del buf286
    del buf287
    del buf288
    del buf289
    del buf290
    del convolution_112
    del le_35
    del primals_338
    del squeeze_337
    del unsqueeze_1030
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf296 = aten.convolution_backward(buf295, relu_108, primals_337, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_337
    buf297 = buf296[0]
    buf298 = buf296[1]
    del buf296
    buf299 = buf154; del buf154  # reuse
    buf300 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf301 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf302 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf303 = buf229; del buf229  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_37(c_void_p(buf299.data_ptr()), c_void_p(relu_108.data_ptr()), c_void_p(relu_117.data_ptr()), c_void_p(buf225.data_ptr()), c_void_p(buf297.data_ptr()), c_void_p(convolution_111.data_ptr()), c_void_p(unsqueeze_1042.data_ptr()), c_void_p(squeeze_334.data_ptr()), c_void_p(primals_335.data_ptr()), c_void_p(buf300.data_ptr()), c_void_p(buf301.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(buf303.data_ptr()))
    del buf225
    del buf297
    del convolution_111
    del primals_335
    del relu_108
    del relu_117
    del squeeze_334
    del unsqueeze_1042
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf304 = aten.convolution_backward(buf303, cat_11, primals_334, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_11
    del primals_334
    buf305 = buf304[0]
    buf306 = buf304[1]
    del buf304
    buf307 = empty((56, ), device='cpu', dtype=torch.float32)
    buf308 = empty((56, ), device='cpu', dtype=torch.float32)
    buf309 = empty((56, ), device='cpu', dtype=torch.float32)
    buf310 = buf281; del buf281  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_38(c_void_p(le_37.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(convolution_110.data_ptr()), c_void_p(unsqueeze_1054.data_ptr()), c_void_p(squeeze_331.data_ptr()), c_void_p(primals_332.data_ptr()), c_void_p(buf307.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(buf309.data_ptr()), c_void_p(buf310.data_ptr()))
    del convolution_110
    del le_37
    del primals_332
    del squeeze_331
    del unsqueeze_1054
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf311 = aten.convolution_backward(buf310, add_614, primals_331, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_614
    del primals_331
    buf312 = buf311[0]
    buf313 = buf311[1]
    del buf311
    buf314 = buf308; del buf308  # reuse
    buf315 = empty((56, ), device='cpu', dtype=torch.float32)
    buf316 = buf310; del buf310  # reuse
    buf364 = buf295; del buf295  # reuse
    buf362 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 336)  # alias
    buf317 = buf315; del buf315  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_39(c_void_p(buf317.data_ptr()), c_void_p(le_38.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(convolution_109.data_ptr()), c_void_p(unsqueeze_1066.data_ptr()), c_void_p(squeeze_328.data_ptr()), c_void_p(primals_329.data_ptr()), c_void_p(buf314.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf362.data_ptr()))
    del buf312
    del convolution_109
    del le_38
    del primals_329
    del squeeze_328
    del unsqueeze_1066
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf318 = aten.convolution_backward(buf316, add_608, primals_328, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_608
    del primals_328
    buf319 = buf318[0]
    buf320 = buf318[1]
    del buf318
    buf321 = empty((56, ), device='cpu', dtype=torch.float32)
    buf322 = empty((56, ), device='cpu', dtype=torch.float32)
    buf323 = buf316; del buf316  # reuse
    buf361 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 280)  # alias
    buf324 = buf322; del buf322  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_40(c_void_p(buf324.data_ptr()), c_void_p(le_39.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(convolution_108.data_ptr()), c_void_p(unsqueeze_1078.data_ptr()), c_void_p(squeeze_325.data_ptr()), c_void_p(primals_326.data_ptr()), c_void_p(buf321.data_ptr()), c_void_p(buf323.data_ptr()), c_void_p(buf361.data_ptr()))
    del buf319
    del convolution_108
    del le_39
    del primals_326
    del squeeze_325
    del unsqueeze_1078
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf325 = aten.convolution_backward(buf323, add_602, primals_325, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_602
    del primals_325
    buf326 = buf325[0]
    buf327 = buf325[1]
    del buf325
    buf328 = empty((56, ), device='cpu', dtype=torch.float32)
    buf329 = empty((56, ), device='cpu', dtype=torch.float32)
    buf330 = buf323; del buf323  # reuse
    buf360 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 224)  # alias
    buf331 = buf329; del buf329  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_41(c_void_p(buf331.data_ptr()), c_void_p(le_40.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf326.data_ptr()), c_void_p(convolution_107.data_ptr()), c_void_p(unsqueeze_1090.data_ptr()), c_void_p(squeeze_322.data_ptr()), c_void_p(primals_323.data_ptr()), c_void_p(buf328.data_ptr()), c_void_p(buf330.data_ptr()), c_void_p(buf360.data_ptr()))
    del buf326
    del convolution_107
    del le_40
    del primals_323
    del squeeze_322
    del unsqueeze_1090
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf332 = aten.convolution_backward(buf330, add_596, primals_322, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_596
    del primals_322
    buf333 = buf332[0]
    buf334 = buf332[1]
    del buf332
    buf335 = empty((56, ), device='cpu', dtype=torch.float32)
    buf336 = empty((56, ), device='cpu', dtype=torch.float32)
    buf337 = buf330; del buf330  # reuse
    buf359 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 168)  # alias
    buf338 = buf336; del buf336  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_42(c_void_p(buf338.data_ptr()), c_void_p(le_41.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(convolution_106.data_ptr()), c_void_p(unsqueeze_1102.data_ptr()), c_void_p(squeeze_319.data_ptr()), c_void_p(primals_320.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(buf337.data_ptr()), c_void_p(buf359.data_ptr()))
    del buf333
    del convolution_106
    del le_41
    del primals_320
    del squeeze_319
    del unsqueeze_1102
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf339 = aten.convolution_backward(buf337, add_590, primals_319, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_590
    del primals_319
    buf340 = buf339[0]
    buf341 = buf339[1]
    del buf339
    buf342 = empty((56, ), device='cpu', dtype=torch.float32)
    buf343 = empty((56, ), device='cpu', dtype=torch.float32)
    buf344 = buf337; del buf337  # reuse
    buf358 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 112)  # alias
    buf345 = buf343; del buf343  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_43(c_void_p(buf345.data_ptr()), c_void_p(le_42.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(convolution_105.data_ptr()), c_void_p(unsqueeze_1114.data_ptr()), c_void_p(squeeze_316.data_ptr()), c_void_p(primals_317.data_ptr()), c_void_p(buf342.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf358.data_ptr()))
    del buf340
    del convolution_105
    del le_42
    del primals_317
    del squeeze_316
    del unsqueeze_1114
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf346 = aten.convolution_backward(buf344, add_584, primals_316, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_584
    del primals_316
    buf347 = buf346[0]
    buf348 = buf346[1]
    del buf346
    buf349 = empty((56, ), device='cpu', dtype=torch.float32)
    buf350 = empty((56, ), device='cpu', dtype=torch.float32)
    buf351 = buf344; del buf344  # reuse
    buf357 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 56)  # alias
    buf352 = buf350; del buf350  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_44(c_void_p(buf352.data_ptr()), c_void_p(le_43.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf347.data_ptr()), c_void_p(convolution_104.data_ptr()), c_void_p(unsqueeze_1126.data_ptr()), c_void_p(squeeze_313.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(buf349.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(buf357.data_ptr()))
    del buf347
    del convolution_104
    del le_43
    del primals_314
    del squeeze_313
    del unsqueeze_1126
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf353 = aten.convolution_backward(buf351, getitem_1010, primals_313, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf351
    del getitem_1010
    del primals_313
    buf354 = buf353[0]
    buf355 = buf353[1]
    del buf353
    buf356 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 0)  # alias
    buf363 = reinterpret_tensor(buf364, (8, 56, 14, 14), (87808, 1, 6272, 448), 392)  # alias
    buf365 = buf293; del buf293  # reuse
    buf366 = empty((448, ), device='cpu', dtype=torch.float32)
    buf367 = empty((448, ), device='cpu', dtype=torch.float32)
    buf368 = buf364; del buf364  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_45(c_void_p(buf368.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(le_44.data_ptr()), c_void_p(convolution_103.data_ptr()), c_void_p(unsqueeze_1138.data_ptr()), c_void_p(squeeze_310.data_ptr()), c_void_p(primals_311.data_ptr()), c_void_p(buf356.data_ptr()), c_void_p(buf363.data_ptr()), c_void_p(buf365.data_ptr()), c_void_p(buf366.data_ptr()), c_void_p(buf367.data_ptr()))
    del buf305
    del buf356
    del buf357
    del buf358
    del buf359
    del buf360
    del buf361
    del buf362
    del buf363
    del convolution_103
    del le_44
    del primals_311
    del squeeze_310
    del unsqueeze_1138
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf369 = aten.convolution_backward(buf368, relu_99, primals_310, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_310
    buf370 = buf369[0]
    buf371 = buf369[1]
    del buf369
    buf372 = buf301; del buf301  # reuse
    buf373 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf374 = buf303; del buf303  # reuse
    buf375 = buf373; del buf373  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_46(c_void_p(buf375.data_ptr()), c_void_p(relu_99.data_ptr()), c_void_p(buf299.data_ptr()), c_void_p(buf370.data_ptr()), c_void_p(convolution_102.data_ptr()), c_void_p(unsqueeze_1150.data_ptr()), c_void_p(squeeze_307.data_ptr()), c_void_p(primals_308.data_ptr()), c_void_p(buf372.data_ptr()), c_void_p(buf374.data_ptr()))
    del convolution_102
    del primals_308
    del squeeze_307
    del unsqueeze_1150
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf376 = aten.convolution_backward(buf374, cat_10, primals_307, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_10
    del primals_307
    buf377 = buf376[0]
    buf378 = buf376[1]
    del buf376
    buf379 = empty((56, ), device='cpu', dtype=torch.float32)
    buf380 = empty((56, ), device='cpu', dtype=torch.float32)
    buf381 = empty((56, ), device='cpu', dtype=torch.float32)
    buf382 = buf354; del buf354  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47(c_void_p(le_46.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(convolution_101.data_ptr()), c_void_p(unsqueeze_1162.data_ptr()), c_void_p(squeeze_304.data_ptr()), c_void_p(primals_305.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf380.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf382.data_ptr()))
    del convolution_101
    del le_46
    del primals_305
    del squeeze_304
    del unsqueeze_1162
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf383 = aten.convolution_backward(buf382, add_562, primals_304, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_562
    del primals_304
    buf384 = buf383[0]
    buf385 = buf383[1]
    del buf383
    buf386 = buf380; del buf380  # reuse
    buf387 = empty((56, ), device='cpu', dtype=torch.float32)
    buf388 = buf382; del buf382  # reuse
    buf436 = buf368; del buf368  # reuse
    buf434 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 336)  # alias
    buf389 = buf387; del buf387  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_48(c_void_p(buf389.data_ptr()), c_void_p(le_47.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf384.data_ptr()), c_void_p(convolution_100.data_ptr()), c_void_p(unsqueeze_1174.data_ptr()), c_void_p(squeeze_301.data_ptr()), c_void_p(primals_302.data_ptr()), c_void_p(buf386.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(buf434.data_ptr()))
    del buf384
    del convolution_100
    del le_47
    del primals_302
    del squeeze_301
    del unsqueeze_1174
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf390 = aten.convolution_backward(buf388, add_556, primals_301, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_556
    del primals_301
    buf391 = buf390[0]
    buf392 = buf390[1]
    del buf390
    buf393 = empty((56, ), device='cpu', dtype=torch.float32)
    buf394 = empty((56, ), device='cpu', dtype=torch.float32)
    buf395 = buf388; del buf388  # reuse
    buf433 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 280)  # alias
    buf396 = buf394; del buf394  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_49(c_void_p(buf396.data_ptr()), c_void_p(le_48.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(convolution_99.data_ptr()), c_void_p(unsqueeze_1186.data_ptr()), c_void_p(squeeze_298.data_ptr()), c_void_p(primals_299.data_ptr()), c_void_p(buf393.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(buf433.data_ptr()))
    del buf391
    del convolution_99
    del le_48
    del primals_299
    del squeeze_298
    del unsqueeze_1186
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf397 = aten.convolution_backward(buf395, add_550, primals_298, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_550
    del primals_298
    buf398 = buf397[0]
    buf399 = buf397[1]
    del buf397
    buf400 = empty((56, ), device='cpu', dtype=torch.float32)
    buf401 = empty((56, ), device='cpu', dtype=torch.float32)
    buf402 = buf395; del buf395  # reuse
    buf432 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 224)  # alias
    buf403 = buf401; del buf401  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_50(c_void_p(buf403.data_ptr()), c_void_p(le_49.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf398.data_ptr()), c_void_p(convolution_98.data_ptr()), c_void_p(unsqueeze_1198.data_ptr()), c_void_p(squeeze_295.data_ptr()), c_void_p(primals_296.data_ptr()), c_void_p(buf400.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf432.data_ptr()))
    del buf398
    del convolution_98
    del le_49
    del primals_296
    del squeeze_295
    del unsqueeze_1198
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf404 = aten.convolution_backward(buf402, add_544, primals_295, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_544
    del primals_295
    buf405 = buf404[0]
    buf406 = buf404[1]
    del buf404
    buf407 = empty((56, ), device='cpu', dtype=torch.float32)
    buf408 = empty((56, ), device='cpu', dtype=torch.float32)
    buf409 = buf402; del buf402  # reuse
    buf431 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 168)  # alias
    buf410 = buf408; del buf408  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_51(c_void_p(buf410.data_ptr()), c_void_p(le_50.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf405.data_ptr()), c_void_p(convolution_97.data_ptr()), c_void_p(unsqueeze_1210.data_ptr()), c_void_p(squeeze_292.data_ptr()), c_void_p(primals_293.data_ptr()), c_void_p(buf407.data_ptr()), c_void_p(buf409.data_ptr()), c_void_p(buf431.data_ptr()))
    del buf405
    del convolution_97
    del le_50
    del primals_293
    del squeeze_292
    del unsqueeze_1210
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf411 = aten.convolution_backward(buf409, add_538, primals_292, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_538
    del primals_292
    buf412 = buf411[0]
    buf413 = buf411[1]
    del buf411
    buf414 = empty((56, ), device='cpu', dtype=torch.float32)
    buf415 = empty((56, ), device='cpu', dtype=torch.float32)
    buf416 = buf409; del buf409  # reuse
    buf430 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 112)  # alias
    buf417 = buf415; del buf415  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_52(c_void_p(buf417.data_ptr()), c_void_p(le_51.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(convolution_96.data_ptr()), c_void_p(unsqueeze_1222.data_ptr()), c_void_p(squeeze_289.data_ptr()), c_void_p(primals_290.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(buf430.data_ptr()))
    del buf412
    del convolution_96
    del le_51
    del primals_290
    del squeeze_289
    del unsqueeze_1222
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf418 = aten.convolution_backward(buf416, add_532, primals_289, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_532
    del primals_289
    buf419 = buf418[0]
    buf420 = buf418[1]
    del buf418
    buf421 = empty((56, ), device='cpu', dtype=torch.float32)
    buf422 = empty((56, ), device='cpu', dtype=torch.float32)
    buf423 = buf416; del buf416  # reuse
    buf429 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 56)  # alias
    buf424 = buf422; del buf422  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_53(c_void_p(buf424.data_ptr()), c_void_p(le_52.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf419.data_ptr()), c_void_p(convolution_95.data_ptr()), c_void_p(unsqueeze_1234.data_ptr()), c_void_p(squeeze_286.data_ptr()), c_void_p(primals_287.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf423.data_ptr()), c_void_p(buf429.data_ptr()))
    del buf419
    del convolution_95
    del le_52
    del primals_287
    del squeeze_286
    del unsqueeze_1234
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf425 = aten.convolution_backward(buf423, getitem_920, primals_286, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf423
    del getitem_920
    del primals_286
    buf426 = buf425[0]
    buf427 = buf425[1]
    del buf425
    buf428 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 0)  # alias
    buf435 = reinterpret_tensor(buf436, (8, 56, 14, 14), (87808, 1, 6272, 448), 392)  # alias
    buf437 = buf366; del buf366  # reuse
    buf438 = empty((448, ), device='cpu', dtype=torch.float32)
    buf439 = empty((448, ), device='cpu', dtype=torch.float32)
    buf440 = buf436; del buf436  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_54(c_void_p(buf440.data_ptr()), c_void_p(buf426.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(le_53.data_ptr()), c_void_p(convolution_94.data_ptr()), c_void_p(unsqueeze_1246.data_ptr()), c_void_p(squeeze_283.data_ptr()), c_void_p(primals_284.data_ptr()), c_void_p(buf428.data_ptr()), c_void_p(buf435.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf439.data_ptr()))
    del buf377
    del buf428
    del buf429
    del buf430
    del buf431
    del buf432
    del buf433
    del buf434
    del buf435
    del convolution_94
    del le_53
    del primals_284
    del squeeze_283
    del unsqueeze_1246
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf441 = aten.convolution_backward(buf440, relu_90, primals_283, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_283
    buf442 = buf441[0]
    buf443 = buf441[1]
    del buf441
    buf444 = buf299; del buf299  # reuse
    buf445 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf446 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf447 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf448 = buf374; del buf374  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_55(c_void_p(buf444.data_ptr()), c_void_p(relu_90.data_ptr()), c_void_p(relu_99.data_ptr()), c_void_p(buf370.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(convolution_93.data_ptr()), c_void_p(unsqueeze_1258.data_ptr()), c_void_p(squeeze_280.data_ptr()), c_void_p(primals_281.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf446.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(buf448.data_ptr()))
    del buf370
    del convolution_93
    del primals_281
    del relu_90
    del relu_99
    del squeeze_280
    del unsqueeze_1258
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf449 = aten.convolution_backward(buf448, cat_9, primals_280, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_9
    del primals_280
    buf450 = buf449[0]
    buf451 = buf449[1]
    del buf449
    buf452 = empty((56, ), device='cpu', dtype=torch.float32)
    buf453 = empty((56, ), device='cpu', dtype=torch.float32)
    buf454 = empty((56, ), device='cpu', dtype=torch.float32)
    buf455 = buf426; del buf426  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_56(c_void_p(le_55.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(convolution_92.data_ptr()), c_void_p(unsqueeze_1270.data_ptr()), c_void_p(squeeze_277.data_ptr()), c_void_p(primals_278.data_ptr()), c_void_p(buf452.data_ptr()), c_void_p(buf453.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf455.data_ptr()))
    del convolution_92
    del le_55
    del primals_278
    del squeeze_277
    del unsqueeze_1270
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf456 = aten.convolution_backward(buf455, add_510, primals_277, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_510
    del primals_277
    buf457 = buf456[0]
    buf458 = buf456[1]
    del buf456
    buf459 = buf453; del buf453  # reuse
    buf460 = empty((56, ), device='cpu', dtype=torch.float32)
    buf461 = buf455; del buf455  # reuse
    buf509 = buf440; del buf440  # reuse
    buf507 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 336)  # alias
    buf462 = buf460; del buf460  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_57(c_void_p(buf462.data_ptr()), c_void_p(le_56.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf457.data_ptr()), c_void_p(convolution_91.data_ptr()), c_void_p(unsqueeze_1282.data_ptr()), c_void_p(squeeze_274.data_ptr()), c_void_p(primals_275.data_ptr()), c_void_p(buf459.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(buf507.data_ptr()))
    del buf457
    del convolution_91
    del le_56
    del primals_275
    del squeeze_274
    del unsqueeze_1282
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf463 = aten.convolution_backward(buf461, add_504, primals_274, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_504
    del primals_274
    buf464 = buf463[0]
    buf465 = buf463[1]
    del buf463
    buf466 = empty((56, ), device='cpu', dtype=torch.float32)
    buf467 = empty((56, ), device='cpu', dtype=torch.float32)
    buf468 = buf461; del buf461  # reuse
    buf506 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 280)  # alias
    buf469 = buf467; del buf467  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_58(c_void_p(buf469.data_ptr()), c_void_p(le_57.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf464.data_ptr()), c_void_p(convolution_90.data_ptr()), c_void_p(unsqueeze_1294.data_ptr()), c_void_p(squeeze_271.data_ptr()), c_void_p(primals_272.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(buf506.data_ptr()))
    del buf464
    del convolution_90
    del le_57
    del primals_272
    del squeeze_271
    del unsqueeze_1294
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf470 = aten.convolution_backward(buf468, add_498, primals_271, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_498
    del primals_271
    buf471 = buf470[0]
    buf472 = buf470[1]
    del buf470
    buf473 = empty((56, ), device='cpu', dtype=torch.float32)
    buf474 = empty((56, ), device='cpu', dtype=torch.float32)
    buf475 = buf468; del buf468  # reuse
    buf505 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 224)  # alias
    buf476 = buf474; del buf474  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_59(c_void_p(buf476.data_ptr()), c_void_p(le_58.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(convolution_89.data_ptr()), c_void_p(unsqueeze_1306.data_ptr()), c_void_p(squeeze_268.data_ptr()), c_void_p(primals_269.data_ptr()), c_void_p(buf473.data_ptr()), c_void_p(buf475.data_ptr()), c_void_p(buf505.data_ptr()))
    del buf471
    del convolution_89
    del le_58
    del primals_269
    del squeeze_268
    del unsqueeze_1306
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf477 = aten.convolution_backward(buf475, add_492, primals_268, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_492
    del primals_268
    buf478 = buf477[0]
    buf479 = buf477[1]
    del buf477
    buf480 = empty((56, ), device='cpu', dtype=torch.float32)
    buf481 = empty((56, ), device='cpu', dtype=torch.float32)
    buf482 = buf475; del buf475  # reuse
    buf504 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 168)  # alias
    buf483 = buf481; del buf481  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_60(c_void_p(buf483.data_ptr()), c_void_p(le_59.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(convolution_88.data_ptr()), c_void_p(unsqueeze_1318.data_ptr()), c_void_p(squeeze_265.data_ptr()), c_void_p(primals_266.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(buf482.data_ptr()), c_void_p(buf504.data_ptr()))
    del buf478
    del convolution_88
    del le_59
    del primals_266
    del squeeze_265
    del unsqueeze_1318
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf484 = aten.convolution_backward(buf482, add_486, primals_265, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_486
    del primals_265
    buf485 = buf484[0]
    buf486 = buf484[1]
    del buf484
    buf487 = empty((56, ), device='cpu', dtype=torch.float32)
    buf488 = empty((56, ), device='cpu', dtype=torch.float32)
    buf489 = buf482; del buf482  # reuse
    buf503 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 112)  # alias
    buf490 = buf488; del buf488  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_61(c_void_p(buf490.data_ptr()), c_void_p(le_60.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(convolution_87.data_ptr()), c_void_p(unsqueeze_1330.data_ptr()), c_void_p(squeeze_262.data_ptr()), c_void_p(primals_263.data_ptr()), c_void_p(buf487.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(buf503.data_ptr()))
    del buf485
    del convolution_87
    del le_60
    del primals_263
    del squeeze_262
    del unsqueeze_1330
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf491 = aten.convolution_backward(buf489, add_480, primals_262, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_480
    del primals_262
    buf492 = buf491[0]
    buf493 = buf491[1]
    del buf491
    buf494 = empty((56, ), device='cpu', dtype=torch.float32)
    buf495 = empty((56, ), device='cpu', dtype=torch.float32)
    buf496 = buf489; del buf489  # reuse
    buf502 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 56)  # alias
    buf497 = buf495; del buf495  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_62(c_void_p(buf497.data_ptr()), c_void_p(le_61.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(convolution_86.data_ptr()), c_void_p(unsqueeze_1342.data_ptr()), c_void_p(squeeze_259.data_ptr()), c_void_p(primals_260.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(buf502.data_ptr()))
    del buf492
    del convolution_86
    del le_61
    del primals_260
    del squeeze_259
    del unsqueeze_1342
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf498 = aten.convolution_backward(buf496, getitem_830, primals_259, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf496
    del getitem_830
    del primals_259
    buf499 = buf498[0]
    buf500 = buf498[1]
    del buf498
    buf501 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 0)  # alias
    buf508 = reinterpret_tensor(buf509, (8, 56, 14, 14), (87808, 1, 6272, 448), 392)  # alias
    buf510 = buf438; del buf438  # reuse
    buf511 = empty((448, ), device='cpu', dtype=torch.float32)
    buf512 = empty((448, ), device='cpu', dtype=torch.float32)
    buf513 = buf509; del buf509  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_63(c_void_p(buf513.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(le_62.data_ptr()), c_void_p(convolution_85.data_ptr()), c_void_p(unsqueeze_1354.data_ptr()), c_void_p(squeeze_256.data_ptr()), c_void_p(primals_257.data_ptr()), c_void_p(buf501.data_ptr()), c_void_p(buf508.data_ptr()), c_void_p(buf510.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(buf512.data_ptr()))
    del buf450
    del buf501
    del buf502
    del buf503
    del buf504
    del buf505
    del buf506
    del buf507
    del buf508
    del convolution_85
    del le_62
    del primals_257
    del squeeze_256
    del unsqueeze_1354
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf514 = aten.convolution_backward(buf513, relu_81, primals_256, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_256
    buf515 = buf514[0]
    buf516 = buf514[1]
    del buf514
    buf517 = buf446; del buf446  # reuse
    buf518 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf519 = buf448; del buf448  # reuse
    buf520 = buf518; del buf518  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_64(c_void_p(buf520.data_ptr()), c_void_p(relu_81.data_ptr()), c_void_p(buf444.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(convolution_84.data_ptr()), c_void_p(unsqueeze_1366.data_ptr()), c_void_p(squeeze_253.data_ptr()), c_void_p(primals_254.data_ptr()), c_void_p(buf517.data_ptr()), c_void_p(buf519.data_ptr()))
    del convolution_84
    del primals_254
    del squeeze_253
    del unsqueeze_1366
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf521 = aten.convolution_backward(buf519, cat_8, primals_253, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_8
    del primals_253
    buf522 = buf521[0]
    buf523 = buf521[1]
    del buf521
    buf524 = empty((56, ), device='cpu', dtype=torch.float32)
    buf525 = empty((56, ), device='cpu', dtype=torch.float32)
    buf526 = empty((56, ), device='cpu', dtype=torch.float32)
    buf527 = buf499; del buf499  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_65(c_void_p(le_64.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(convolution_83.data_ptr()), c_void_p(unsqueeze_1378.data_ptr()), c_void_p(squeeze_250.data_ptr()), c_void_p(primals_251.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf525.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(buf527.data_ptr()))
    del convolution_83
    del le_64
    del primals_251
    del squeeze_250
    del unsqueeze_1378
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf528 = aten.convolution_backward(buf527, add_458, primals_250, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_458
    del primals_250
    buf529 = buf528[0]
    buf530 = buf528[1]
    del buf528
    buf531 = buf525; del buf525  # reuse
    buf532 = empty((56, ), device='cpu', dtype=torch.float32)
    buf533 = buf527; del buf527  # reuse
    buf581 = buf513; del buf513  # reuse
    buf579 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 336)  # alias
    buf534 = buf532; del buf532  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_66(c_void_p(buf534.data_ptr()), c_void_p(le_65.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(convolution_82.data_ptr()), c_void_p(unsqueeze_1390.data_ptr()), c_void_p(squeeze_247.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(buf531.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(buf579.data_ptr()))
    del buf529
    del convolution_82
    del le_65
    del primals_248
    del squeeze_247
    del unsqueeze_1390
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf535 = aten.convolution_backward(buf533, add_452, primals_247, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_452
    del primals_247
    buf536 = buf535[0]
    buf537 = buf535[1]
    del buf535
    buf538 = empty((56, ), device='cpu', dtype=torch.float32)
    buf539 = empty((56, ), device='cpu', dtype=torch.float32)
    buf540 = buf533; del buf533  # reuse
    buf578 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 280)  # alias
    buf541 = buf539; del buf539  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_67(c_void_p(buf541.data_ptr()), c_void_p(le_66.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf536.data_ptr()), c_void_p(convolution_81.data_ptr()), c_void_p(unsqueeze_1402.data_ptr()), c_void_p(squeeze_244.data_ptr()), c_void_p(primals_245.data_ptr()), c_void_p(buf538.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf578.data_ptr()))
    del buf536
    del convolution_81
    del le_66
    del primals_245
    del squeeze_244
    del unsqueeze_1402
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf542 = aten.convolution_backward(buf540, add_446, primals_244, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_446
    del primals_244
    buf543 = buf542[0]
    buf544 = buf542[1]
    del buf542
    buf545 = empty((56, ), device='cpu', dtype=torch.float32)
    buf546 = empty((56, ), device='cpu', dtype=torch.float32)
    buf547 = buf540; del buf540  # reuse
    buf577 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 224)  # alias
    buf548 = buf546; del buf546  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_68(c_void_p(buf548.data_ptr()), c_void_p(le_67.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf543.data_ptr()), c_void_p(convolution_80.data_ptr()), c_void_p(unsqueeze_1414.data_ptr()), c_void_p(squeeze_241.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(buf545.data_ptr()), c_void_p(buf547.data_ptr()), c_void_p(buf577.data_ptr()))
    del buf543
    del convolution_80
    del le_67
    del primals_242
    del squeeze_241
    del unsqueeze_1414
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf549 = aten.convolution_backward(buf547, add_440, primals_241, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_440
    del primals_241
    buf550 = buf549[0]
    buf551 = buf549[1]
    del buf549
    buf552 = empty((56, ), device='cpu', dtype=torch.float32)
    buf553 = empty((56, ), device='cpu', dtype=torch.float32)
    buf554 = buf547; del buf547  # reuse
    buf576 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 168)  # alias
    buf555 = buf553; del buf553  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_69(c_void_p(buf555.data_ptr()), c_void_p(le_68.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(convolution_79.data_ptr()), c_void_p(unsqueeze_1426.data_ptr()), c_void_p(squeeze_238.data_ptr()), c_void_p(primals_239.data_ptr()), c_void_p(buf552.data_ptr()), c_void_p(buf554.data_ptr()), c_void_p(buf576.data_ptr()))
    del buf550
    del convolution_79
    del le_68
    del primals_239
    del squeeze_238
    del unsqueeze_1426
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf556 = aten.convolution_backward(buf554, add_434, primals_238, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_434
    del primals_238
    buf557 = buf556[0]
    buf558 = buf556[1]
    del buf556
    buf559 = empty((56, ), device='cpu', dtype=torch.float32)
    buf560 = empty((56, ), device='cpu', dtype=torch.float32)
    buf561 = buf554; del buf554  # reuse
    buf575 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 112)  # alias
    buf562 = buf560; del buf560  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_70(c_void_p(buf562.data_ptr()), c_void_p(le_69.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf557.data_ptr()), c_void_p(convolution_78.data_ptr()), c_void_p(unsqueeze_1438.data_ptr()), c_void_p(squeeze_235.data_ptr()), c_void_p(primals_236.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf575.data_ptr()))
    del buf557
    del convolution_78
    del le_69
    del primals_236
    del squeeze_235
    del unsqueeze_1438
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf563 = aten.convolution_backward(buf561, add_428, primals_235, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_428
    del primals_235
    buf564 = buf563[0]
    buf565 = buf563[1]
    del buf563
    buf566 = empty((56, ), device='cpu', dtype=torch.float32)
    buf567 = empty((56, ), device='cpu', dtype=torch.float32)
    buf568 = buf561; del buf561  # reuse
    buf574 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 56)  # alias
    buf569 = buf567; del buf567  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_71(c_void_p(buf569.data_ptr()), c_void_p(le_70.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf564.data_ptr()), c_void_p(convolution_77.data_ptr()), c_void_p(unsqueeze_1450.data_ptr()), c_void_p(squeeze_232.data_ptr()), c_void_p(primals_233.data_ptr()), c_void_p(buf566.data_ptr()), c_void_p(buf568.data_ptr()), c_void_p(buf574.data_ptr()))
    del buf564
    del convolution_77
    del le_70
    del primals_233
    del squeeze_232
    del unsqueeze_1450
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf570 = aten.convolution_backward(buf568, getitem_740, primals_232, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf568
    del getitem_740
    del primals_232
    buf571 = buf570[0]
    buf572 = buf570[1]
    del buf570
    buf573 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 0)  # alias
    buf580 = reinterpret_tensor(buf581, (8, 56, 14, 14), (87808, 1, 6272, 448), 392)  # alias
    buf582 = buf511; del buf511  # reuse
    buf583 = empty((448, ), device='cpu', dtype=torch.float32)
    buf584 = empty((448, ), device='cpu', dtype=torch.float32)
    buf585 = buf581; del buf581  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_72(c_void_p(buf585.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(le_71.data_ptr()), c_void_p(convolution_76.data_ptr()), c_void_p(unsqueeze_1462.data_ptr()), c_void_p(squeeze_229.data_ptr()), c_void_p(primals_230.data_ptr()), c_void_p(buf573.data_ptr()), c_void_p(buf580.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(buf584.data_ptr()))
    del buf522
    del buf573
    del buf574
    del buf575
    del buf576
    del buf577
    del buf578
    del buf579
    del buf580
    del convolution_76
    del le_71
    del primals_230
    del squeeze_229
    del unsqueeze_1462
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf586 = aten.convolution_backward(buf585, relu_72, primals_229, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf585
    del primals_229
    buf587 = buf586[0]
    buf588 = buf586[1]
    del buf586
    buf589 = buf444; del buf444  # reuse
    buf590 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf591 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf597 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf592 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf593 = buf519; del buf519  # reuse
    buf599 = buf442; del buf442  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_73(c_void_p(buf589.data_ptr()), c_void_p(relu_72.data_ptr()), c_void_p(relu_81.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(convolution_75.data_ptr()), c_void_p(unsqueeze_1474.data_ptr()), c_void_p(convolution_74.data_ptr()), c_void_p(unsqueeze_1486.data_ptr()), c_void_p(squeeze_226.data_ptr()), c_void_p(primals_227.data_ptr()), c_void_p(squeeze_223.data_ptr()), c_void_p(primals_224.data_ptr()), c_void_p(buf590.data_ptr()), c_void_p(buf591.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(buf592.data_ptr()), c_void_p(buf593.data_ptr()), c_void_p(buf599.data_ptr()))
    del buf515
    del buf587
    del buf589
    del buf591
    del convolution_74
    del convolution_75
    del primals_224
    del primals_227
    del relu_72
    del relu_81
    del squeeze_226
    del unsqueeze_1474
    del unsqueeze_1486
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf594 = aten.convolution_backward(buf593, relu_63, primals_226, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf593
    del primals_226
    buf595 = buf594[0]
    buf596 = buf594[1]
    del buf594
    buf598 = buf597; del buf597  # reuse
    cpp_fused_native_batch_norm_backward_74(c_void_p(buf598.data_ptr()), c_void_p(squeeze_223.data_ptr()))
    del squeeze_223
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf600 = aten.convolution_backward(buf599, cat_7, primals_223, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf599
    del cat_7
    del primals_223
    buf601 = buf600[0]
    buf602 = buf600[1]
    del buf600
    buf660 = empty_strided((8, 448, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    buf603 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 392)  # alias
    buf604 = empty((56, ), device='cpu', dtype=torch.float32)
    buf605 = empty((56, ), device='cpu', dtype=torch.float32)
    buf606 = empty((56, ), device='cpu', dtype=torch.float32)
    buf607 = buf571; del buf571  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_75(c_void_p(buf601.data_ptr()), c_void_p(le_73.data_ptr()), c_void_p(convolution_73.data_ptr()), c_void_p(unsqueeze_1498.data_ptr()), c_void_p(squeeze_220.data_ptr()), c_void_p(primals_221.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(buf604.data_ptr()), c_void_p(buf605.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(buf607.data_ptr()))
    del convolution_73
    del le_73
    del primals_221
    del squeeze_220
    del unsqueeze_1498
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf608 = aten.convolution_backward(buf607, getitem_714, primals_220, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_714
    del primals_220
    buf609 = buf608[0]
    buf610 = buf608[1]
    del buf608
    buf611 = buf605; del buf605  # reuse
    buf612 = empty((56, ), device='cpu', dtype=torch.float32)
    buf613 = empty((56, ), device='cpu', dtype=torch.float32)
    buf614 = buf607; del buf607  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_76(c_void_p(le_74.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(convolution_72.data_ptr()), c_void_p(unsqueeze_1510.data_ptr()), c_void_p(squeeze_217.data_ptr()), c_void_p(primals_218.data_ptr()), c_void_p(buf611.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(buf613.data_ptr()), c_void_p(buf614.data_ptr()))
    del convolution_72
    del le_74
    del primals_218
    del squeeze_217
    del unsqueeze_1510
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf615 = aten.convolution_backward(buf614, getitem_703, primals_217, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_703
    del primals_217
    buf616 = buf615[0]
    buf617 = buf615[1]
    del buf615
    buf618 = buf612; del buf612  # reuse
    buf619 = empty((56, ), device='cpu', dtype=torch.float32)
    buf620 = empty((56, ), device='cpu', dtype=torch.float32)
    buf621 = buf614; del buf614  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_77(c_void_p(le_75.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(convolution_71.data_ptr()), c_void_p(unsqueeze_1522.data_ptr()), c_void_p(squeeze_214.data_ptr()), c_void_p(primals_215.data_ptr()), c_void_p(buf618.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf620.data_ptr()), c_void_p(buf621.data_ptr()))
    del convolution_71
    del le_75
    del primals_215
    del squeeze_214
    del unsqueeze_1522
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf622 = aten.convolution_backward(buf621, getitem_692, primals_214, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_692
    del primals_214
    buf623 = buf622[0]
    buf624 = buf622[1]
    del buf622
    buf625 = buf619; del buf619  # reuse
    buf626 = empty((56, ), device='cpu', dtype=torch.float32)
    buf627 = empty((56, ), device='cpu', dtype=torch.float32)
    buf628 = buf621; del buf621  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_78(c_void_p(le_76.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(convolution_70.data_ptr()), c_void_p(unsqueeze_1534.data_ptr()), c_void_p(squeeze_211.data_ptr()), c_void_p(primals_212.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf626.data_ptr()), c_void_p(buf627.data_ptr()), c_void_p(buf628.data_ptr()))
    del convolution_70
    del le_76
    del primals_212
    del squeeze_211
    del unsqueeze_1534
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf629 = aten.convolution_backward(buf628, getitem_681, primals_211, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_681
    del primals_211
    buf630 = buf629[0]
    buf631 = buf629[1]
    del buf629
    buf632 = buf626; del buf626  # reuse
    buf633 = empty((56, ), device='cpu', dtype=torch.float32)
    buf634 = empty((56, ), device='cpu', dtype=torch.float32)
    buf635 = buf628; del buf628  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_79(c_void_p(le_77.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(convolution_69.data_ptr()), c_void_p(unsqueeze_1546.data_ptr()), c_void_p(squeeze_208.data_ptr()), c_void_p(primals_209.data_ptr()), c_void_p(buf632.data_ptr()), c_void_p(buf633.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(buf635.data_ptr()))
    del convolution_69
    del le_77
    del primals_209
    del squeeze_208
    del unsqueeze_1546
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf636 = aten.convolution_backward(buf635, getitem_670, primals_208, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_670
    del primals_208
    buf637 = buf636[0]
    buf638 = buf636[1]
    del buf636
    buf639 = buf633; del buf633  # reuse
    buf640 = empty((56, ), device='cpu', dtype=torch.float32)
    buf641 = empty((56, ), device='cpu', dtype=torch.float32)
    buf642 = buf635; del buf635  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_80(c_void_p(le_78.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(convolution_68.data_ptr()), c_void_p(unsqueeze_1558.data_ptr()), c_void_p(squeeze_205.data_ptr()), c_void_p(primals_206.data_ptr()), c_void_p(buf639.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(buf641.data_ptr()), c_void_p(buf642.data_ptr()))
    del convolution_68
    del le_78
    del primals_206
    del squeeze_205
    del unsqueeze_1558
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf643 = aten.convolution_backward(buf642, getitem_659, primals_205, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_659
    del primals_205
    buf644 = buf643[0]
    buf645 = buf643[1]
    del buf643
    buf646 = buf640; del buf640  # reuse
    buf647 = empty((56, ), device='cpu', dtype=torch.float32)
    buf648 = empty((56, ), device='cpu', dtype=torch.float32)
    buf649 = buf642; del buf642  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_81(c_void_p(le_79.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(convolution_67.data_ptr()), c_void_p(unsqueeze_1570.data_ptr()), c_void_p(squeeze_202.data_ptr()), c_void_p(primals_203.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf647.data_ptr()), c_void_p(buf648.data_ptr()), c_void_p(buf649.data_ptr()))
    del buf601
    del buf647
    del convolution_67
    del le_79
    del primals_203
    del squeeze_202
    del unsqueeze_1570
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf650 = aten.convolution_backward(buf649, getitem_648, primals_202, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf649
    del getitem_648
    del primals_202
    buf651 = buf650[0]
    buf652 = buf650[1]
    del buf650
    buf653 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 0)  # alias
    buf654 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 56)  # alias
    buf655 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 112)  # alias
    buf656 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 168)  # alias
    buf657 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 224)  # alias
    buf658 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 280)  # alias
    buf659 = reinterpret_tensor(buf660, (8, 56, 28, 28), (351232, 1, 12544, 448), 336)  # alias
    buf661 = buf583; del buf583  # reuse
    buf662 = empty((448, ), device='cpu', dtype=torch.float32)
    buf663 = empty((448, ), device='cpu', dtype=torch.float32)
    buf664 = buf660; del buf660  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_82(c_void_p(buf664.data_ptr()), c_void_p(buf651.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf637.data_ptr()), c_void_p(buf630.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(le_80.data_ptr()), c_void_p(convolution_66.data_ptr()), c_void_p(unsqueeze_1582.data_ptr()), c_void_p(squeeze_199.data_ptr()), c_void_p(primals_200.data_ptr()), c_void_p(buf653.data_ptr()), c_void_p(buf654.data_ptr()), c_void_p(buf655.data_ptr()), c_void_p(buf656.data_ptr()), c_void_p(buf657.data_ptr()), c_void_p(buf658.data_ptr()), c_void_p(buf659.data_ptr()), c_void_p(buf661.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf663.data_ptr()))
    del buf603
    del buf609
    del buf616
    del buf623
    del buf630
    del buf637
    del buf644
    del buf653
    del buf654
    del buf655
    del buf656
    del buf657
    del buf658
    del buf659
    del buf662
    del convolution_66
    del le_80
    del primals_200
    del squeeze_199
    del unsqueeze_1582
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf665 = aten.convolution_backward(buf664, relu_63, primals_199, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_199
    buf666 = buf665[0]
    buf667 = buf665[1]
    del buf665
    buf668 = empty((512, ), device='cpu', dtype=torch.float32)
    buf669 = empty((512, ), device='cpu', dtype=torch.float32)
    buf670 = empty_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    buf671 = buf669; del buf669  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_83(c_void_p(buf671.data_ptr()), c_void_p(relu_63.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(convolution_65.data_ptr()), c_void_p(unsqueeze_1594.data_ptr()), c_void_p(squeeze_196.data_ptr()), c_void_p(primals_197.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf670.data_ptr()))
    del convolution_65
    del primals_197
    del squeeze_196
    del unsqueeze_1594
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf672 = aten.convolution_backward(buf670, cat_6, primals_196, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_6
    del primals_196
    buf673 = buf672[0]
    buf674 = buf672[1]
    del buf672
    buf675 = empty((28, ), device='cpu', dtype=torch.float32)
    buf676 = empty((28, ), device='cpu', dtype=torch.float32)
    buf677 = empty((28, ), device='cpu', dtype=torch.float32)
    buf678 = reinterpret_tensor(buf210, (8, 28, 28, 28), (21952, 1, 784, 28), 0); del buf210  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_84(c_void_p(le_82.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(convolution_64.data_ptr()), c_void_p(unsqueeze_1606.data_ptr()), c_void_p(squeeze_193.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(buf675.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(buf678.data_ptr()))
    del convolution_64
    del le_82
    del primals_194
    del squeeze_193
    del unsqueeze_1606
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf679 = aten.convolution_backward(buf678, add_355, primals_193, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_355
    del primals_193
    buf680 = buf679[0]
    buf681 = buf679[1]
    del buf679
    buf682 = buf676; del buf676  # reuse
    buf683 = empty((28, ), device='cpu', dtype=torch.float32)
    buf684 = buf678; del buf678  # reuse
    buf732 = reinterpret_tensor(buf223, (8, 224, 28, 28), (175616, 1, 6272, 224), 0); del buf223  # reuse
    buf730 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 168)  # alias
    buf685 = buf683; del buf683  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_85(c_void_p(buf685.data_ptr()), c_void_p(le_83.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(convolution_63.data_ptr()), c_void_p(unsqueeze_1618.data_ptr()), c_void_p(squeeze_190.data_ptr()), c_void_p(primals_191.data_ptr()), c_void_p(buf682.data_ptr()), c_void_p(buf684.data_ptr()), c_void_p(buf730.data_ptr()))
    del buf680
    del convolution_63
    del le_83
    del primals_191
    del squeeze_190
    del unsqueeze_1618
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf686 = aten.convolution_backward(buf684, add_349, primals_190, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_349
    del primals_190
    buf687 = buf686[0]
    buf688 = buf686[1]
    del buf686
    buf689 = empty((28, ), device='cpu', dtype=torch.float32)
    buf690 = empty((28, ), device='cpu', dtype=torch.float32)
    buf691 = buf684; del buf684  # reuse
    buf729 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 140)  # alias
    buf692 = buf690; del buf690  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_86(c_void_p(buf692.data_ptr()), c_void_p(le_84.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(convolution_62.data_ptr()), c_void_p(unsqueeze_1630.data_ptr()), c_void_p(squeeze_187.data_ptr()), c_void_p(primals_188.data_ptr()), c_void_p(buf689.data_ptr()), c_void_p(buf691.data_ptr()), c_void_p(buf729.data_ptr()))
    del buf687
    del convolution_62
    del le_84
    del primals_188
    del squeeze_187
    del unsqueeze_1630
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf693 = aten.convolution_backward(buf691, add_343, primals_187, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_343
    del primals_187
    buf694 = buf693[0]
    buf695 = buf693[1]
    del buf693
    buf696 = empty((28, ), device='cpu', dtype=torch.float32)
    buf697 = empty((28, ), device='cpu', dtype=torch.float32)
    buf698 = buf691; del buf691  # reuse
    buf728 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 112)  # alias
    buf699 = buf697; del buf697  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_87(c_void_p(buf699.data_ptr()), c_void_p(le_85.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(convolution_61.data_ptr()), c_void_p(unsqueeze_1642.data_ptr()), c_void_p(squeeze_184.data_ptr()), c_void_p(primals_185.data_ptr()), c_void_p(buf696.data_ptr()), c_void_p(buf698.data_ptr()), c_void_p(buf728.data_ptr()))
    del buf694
    del convolution_61
    del le_85
    del primals_185
    del squeeze_184
    del unsqueeze_1642
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf700 = aten.convolution_backward(buf698, add_337, primals_184, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_337
    del primals_184
    buf701 = buf700[0]
    buf702 = buf700[1]
    del buf700
    buf703 = empty((28, ), device='cpu', dtype=torch.float32)
    buf704 = empty((28, ), device='cpu', dtype=torch.float32)
    buf705 = buf698; del buf698  # reuse
    buf727 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 84)  # alias
    buf706 = buf704; del buf704  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_88(c_void_p(buf706.data_ptr()), c_void_p(le_86.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf701.data_ptr()), c_void_p(convolution_60.data_ptr()), c_void_p(unsqueeze_1654.data_ptr()), c_void_p(squeeze_181.data_ptr()), c_void_p(primals_182.data_ptr()), c_void_p(buf703.data_ptr()), c_void_p(buf705.data_ptr()), c_void_p(buf727.data_ptr()))
    del buf701
    del convolution_60
    del le_86
    del primals_182
    del squeeze_181
    del unsqueeze_1654
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf707 = aten.convolution_backward(buf705, add_331, primals_181, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_331
    del primals_181
    buf708 = buf707[0]
    buf709 = buf707[1]
    del buf707
    buf710 = empty((28, ), device='cpu', dtype=torch.float32)
    buf711 = empty((28, ), device='cpu', dtype=torch.float32)
    buf712 = buf705; del buf705  # reuse
    buf726 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 56)  # alias
    buf713 = buf711; del buf711  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_89(c_void_p(buf713.data_ptr()), c_void_p(le_87.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf708.data_ptr()), c_void_p(convolution_59.data_ptr()), c_void_p(unsqueeze_1666.data_ptr()), c_void_p(squeeze_178.data_ptr()), c_void_p(primals_179.data_ptr()), c_void_p(buf710.data_ptr()), c_void_p(buf712.data_ptr()), c_void_p(buf726.data_ptr()))
    del buf708
    del convolution_59
    del le_87
    del primals_179
    del squeeze_178
    del unsqueeze_1666
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf714 = aten.convolution_backward(buf712, add_325, primals_178, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_325
    del primals_178
    buf715 = buf714[0]
    buf716 = buf714[1]
    del buf714
    buf717 = empty((28, ), device='cpu', dtype=torch.float32)
    buf718 = empty((28, ), device='cpu', dtype=torch.float32)
    buf719 = buf712; del buf712  # reuse
    buf725 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 28)  # alias
    buf720 = buf718; del buf718  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_90(c_void_p(buf720.data_ptr()), c_void_p(le_88.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf715.data_ptr()), c_void_p(convolution_58.data_ptr()), c_void_p(unsqueeze_1678.data_ptr()), c_void_p(squeeze_175.data_ptr()), c_void_p(primals_176.data_ptr()), c_void_p(buf717.data_ptr()), c_void_p(buf719.data_ptr()), c_void_p(buf725.data_ptr()))
    del buf715
    del convolution_58
    del le_88
    del primals_176
    del squeeze_175
    del unsqueeze_1678
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf721 = aten.convolution_backward(buf719, getitem_558, primals_175, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf719
    del getitem_558
    del primals_175
    buf722 = buf721[0]
    buf723 = buf721[1]
    del buf721
    buf724 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 0)  # alias
    buf731 = reinterpret_tensor(buf732, (8, 28, 28, 28), (175616, 1, 6272, 224), 196)  # alias
    buf733 = empty((224, ), device='cpu', dtype=torch.float32)
    buf734 = empty((224, ), device='cpu', dtype=torch.float32)
    buf735 = empty((224, ), device='cpu', dtype=torch.float32)
    buf736 = buf732; del buf732  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_91(c_void_p(buf736.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(le_89.data_ptr()), c_void_p(convolution_57.data_ptr()), c_void_p(unsqueeze_1690.data_ptr()), c_void_p(squeeze_172.data_ptr()), c_void_p(primals_173.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(buf733.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf735.data_ptr()))
    del buf673
    del buf724
    del buf725
    del buf726
    del buf727
    del buf728
    del buf729
    del buf730
    del buf731
    del convolution_57
    del le_89
    del primals_173
    del squeeze_172
    del unsqueeze_1690
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf737 = aten.convolution_backward(buf736, relu_54, primals_172, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_172
    buf738 = buf737[0]
    buf739 = buf737[1]
    del buf737
    buf740 = buf595; del buf595  # reuse
    buf741 = empty((512, ), device='cpu', dtype=torch.float32)
    buf742 = empty((512, ), device='cpu', dtype=torch.float32)
    buf743 = empty((512, ), device='cpu', dtype=torch.float32)
    buf744 = buf670; del buf670  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_92(c_void_p(buf740.data_ptr()), c_void_p(relu_54.data_ptr()), c_void_p(relu_63.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(buf738.data_ptr()), c_void_p(convolution_56.data_ptr()), c_void_p(unsqueeze_1702.data_ptr()), c_void_p(squeeze_169.data_ptr()), c_void_p(primals_170.data_ptr()), c_void_p(buf741.data_ptr()), c_void_p(buf742.data_ptr()), c_void_p(buf743.data_ptr()), c_void_p(buf744.data_ptr()))
    del buf666
    del convolution_56
    del primals_170
    del relu_54
    del relu_63
    del squeeze_169
    del unsqueeze_1702
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf745 = aten.convolution_backward(buf744, cat_5, primals_169, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_5
    del primals_169
    buf746 = buf745[0]
    buf747 = buf745[1]
    del buf745
    buf748 = empty((28, ), device='cpu', dtype=torch.float32)
    buf749 = empty((28, ), device='cpu', dtype=torch.float32)
    buf750 = empty((28, ), device='cpu', dtype=torch.float32)
    buf751 = buf722; del buf722  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_93(c_void_p(le_91.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(convolution_55.data_ptr()), c_void_p(unsqueeze_1714.data_ptr()), c_void_p(squeeze_166.data_ptr()), c_void_p(primals_167.data_ptr()), c_void_p(buf748.data_ptr()), c_void_p(buf749.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(buf751.data_ptr()))
    del convolution_55
    del le_91
    del primals_167
    del squeeze_166
    del unsqueeze_1714
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf752 = aten.convolution_backward(buf751, add_303, primals_166, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_303
    del primals_166
    buf753 = buf752[0]
    buf754 = buf752[1]
    del buf752
    buf755 = buf749; del buf749  # reuse
    buf756 = empty((28, ), device='cpu', dtype=torch.float32)
    buf757 = buf751; del buf751  # reuse
    buf805 = buf736; del buf736  # reuse
    buf803 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 168)  # alias
    buf758 = buf756; del buf756  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_94(c_void_p(buf758.data_ptr()), c_void_p(le_92.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(convolution_54.data_ptr()), c_void_p(unsqueeze_1726.data_ptr()), c_void_p(squeeze_163.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(buf757.data_ptr()), c_void_p(buf803.data_ptr()))
    del buf753
    del convolution_54
    del le_92
    del primals_164
    del squeeze_163
    del unsqueeze_1726
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf759 = aten.convolution_backward(buf757, add_297, primals_163, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_297
    del primals_163
    buf760 = buf759[0]
    buf761 = buf759[1]
    del buf759
    buf762 = empty((28, ), device='cpu', dtype=torch.float32)
    buf763 = empty((28, ), device='cpu', dtype=torch.float32)
    buf764 = buf757; del buf757  # reuse
    buf802 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 140)  # alias
    buf765 = buf763; del buf763  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_95(c_void_p(buf765.data_ptr()), c_void_p(le_93.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(convolution_53.data_ptr()), c_void_p(unsqueeze_1738.data_ptr()), c_void_p(squeeze_160.data_ptr()), c_void_p(primals_161.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf802.data_ptr()))
    del buf760
    del convolution_53
    del le_93
    del primals_161
    del squeeze_160
    del unsqueeze_1738
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf766 = aten.convolution_backward(buf764, add_291, primals_160, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_291
    del primals_160
    buf767 = buf766[0]
    buf768 = buf766[1]
    del buf766
    buf769 = empty((28, ), device='cpu', dtype=torch.float32)
    buf770 = empty((28, ), device='cpu', dtype=torch.float32)
    buf771 = buf764; del buf764  # reuse
    buf801 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 112)  # alias
    buf772 = buf770; del buf770  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_96(c_void_p(buf772.data_ptr()), c_void_p(le_94.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf767.data_ptr()), c_void_p(convolution_52.data_ptr()), c_void_p(unsqueeze_1750.data_ptr()), c_void_p(squeeze_157.data_ptr()), c_void_p(primals_158.data_ptr()), c_void_p(buf769.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(buf801.data_ptr()))
    del buf767
    del convolution_52
    del le_94
    del primals_158
    del squeeze_157
    del unsqueeze_1750
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf773 = aten.convolution_backward(buf771, add_285, primals_157, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_285
    del primals_157
    buf774 = buf773[0]
    buf775 = buf773[1]
    del buf773
    buf776 = empty((28, ), device='cpu', dtype=torch.float32)
    buf777 = empty((28, ), device='cpu', dtype=torch.float32)
    buf778 = buf771; del buf771  # reuse
    buf800 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 84)  # alias
    buf779 = buf777; del buf777  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_97(c_void_p(buf779.data_ptr()), c_void_p(le_95.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(convolution_51.data_ptr()), c_void_p(unsqueeze_1762.data_ptr()), c_void_p(squeeze_154.data_ptr()), c_void_p(primals_155.data_ptr()), c_void_p(buf776.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(buf800.data_ptr()))
    del buf774
    del convolution_51
    del le_95
    del primals_155
    del squeeze_154
    del unsqueeze_1762
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf780 = aten.convolution_backward(buf778, add_279, primals_154, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_279
    del primals_154
    buf781 = buf780[0]
    buf782 = buf780[1]
    del buf780
    buf783 = empty((28, ), device='cpu', dtype=torch.float32)
    buf784 = empty((28, ), device='cpu', dtype=torch.float32)
    buf785 = buf778; del buf778  # reuse
    buf799 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 56)  # alias
    buf786 = buf784; del buf784  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_98(c_void_p(buf786.data_ptr()), c_void_p(le_96.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf781.data_ptr()), c_void_p(convolution_50.data_ptr()), c_void_p(unsqueeze_1774.data_ptr()), c_void_p(squeeze_151.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(buf783.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(buf799.data_ptr()))
    del buf781
    del convolution_50
    del le_96
    del primals_152
    del squeeze_151
    del unsqueeze_1774
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf787 = aten.convolution_backward(buf785, add_273, primals_151, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_273
    del primals_151
    buf788 = buf787[0]
    buf789 = buf787[1]
    del buf787
    buf790 = empty((28, ), device='cpu', dtype=torch.float32)
    buf791 = empty((28, ), device='cpu', dtype=torch.float32)
    buf792 = buf785; del buf785  # reuse
    buf798 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 28)  # alias
    buf793 = buf791; del buf791  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_99(c_void_p(buf793.data_ptr()), c_void_p(le_97.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf788.data_ptr()), c_void_p(convolution_49.data_ptr()), c_void_p(unsqueeze_1786.data_ptr()), c_void_p(squeeze_148.data_ptr()), c_void_p(primals_149.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(buf798.data_ptr()))
    del buf788
    del convolution_49
    del le_97
    del primals_149
    del squeeze_148
    del unsqueeze_1786
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf794 = aten.convolution_backward(buf792, getitem_468, primals_148, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf792
    del getitem_468
    del primals_148
    buf795 = buf794[0]
    buf796 = buf794[1]
    del buf794
    buf797 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 0)  # alias
    buf804 = reinterpret_tensor(buf805, (8, 28, 28, 28), (175616, 1, 6272, 224), 196)  # alias
    buf806 = buf734; del buf734  # reuse
    buf807 = empty((224, ), device='cpu', dtype=torch.float32)
    buf808 = empty((224, ), device='cpu', dtype=torch.float32)
    buf809 = buf805; del buf805  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_100(c_void_p(buf809.data_ptr()), c_void_p(buf795.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(le_98.data_ptr()), c_void_p(convolution_48.data_ptr()), c_void_p(unsqueeze_1798.data_ptr()), c_void_p(squeeze_145.data_ptr()), c_void_p(primals_146.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(buf804.data_ptr()), c_void_p(buf806.data_ptr()), c_void_p(buf807.data_ptr()), c_void_p(buf808.data_ptr()))
    del buf746
    del buf797
    del buf798
    del buf799
    del buf800
    del buf801
    del buf802
    del buf803
    del buf804
    del convolution_48
    del le_98
    del primals_146
    del squeeze_145
    del unsqueeze_1798
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf810 = aten.convolution_backward(buf809, relu_45, primals_145, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_145
    buf811 = buf810[0]
    buf812 = buf810[1]
    del buf810
    buf813 = buf742; del buf742  # reuse
    buf814 = empty((512, ), device='cpu', dtype=torch.float32)
    buf815 = buf744; del buf744  # reuse
    buf816 = buf814; del buf814  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_101(c_void_p(buf816.data_ptr()), c_void_p(relu_45.data_ptr()), c_void_p(buf740.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(convolution_47.data_ptr()), c_void_p(unsqueeze_1810.data_ptr()), c_void_p(squeeze_142.data_ptr()), c_void_p(primals_143.data_ptr()), c_void_p(buf813.data_ptr()), c_void_p(buf815.data_ptr()))
    del convolution_47
    del primals_143
    del squeeze_142
    del unsqueeze_1810
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf817 = aten.convolution_backward(buf815, cat_4, primals_142, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_4
    del primals_142
    buf818 = buf817[0]
    buf819 = buf817[1]
    del buf817
    buf820 = empty((28, ), device='cpu', dtype=torch.float32)
    buf821 = empty((28, ), device='cpu', dtype=torch.float32)
    buf822 = empty((28, ), device='cpu', dtype=torch.float32)
    buf823 = buf795; del buf795  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_102(c_void_p(le_100.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(convolution_46.data_ptr()), c_void_p(unsqueeze_1822.data_ptr()), c_void_p(squeeze_139.data_ptr()), c_void_p(primals_140.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf821.data_ptr()), c_void_p(buf822.data_ptr()), c_void_p(buf823.data_ptr()))
    del convolution_46
    del le_100
    del primals_140
    del squeeze_139
    del unsqueeze_1822
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf824 = aten.convolution_backward(buf823, add_251, primals_139, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_251
    del primals_139
    buf825 = buf824[0]
    buf826 = buf824[1]
    del buf824
    buf827 = buf821; del buf821  # reuse
    buf828 = empty((28, ), device='cpu', dtype=torch.float32)
    buf829 = buf823; del buf823  # reuse
    buf877 = buf809; del buf809  # reuse
    buf875 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 168)  # alias
    buf830 = buf828; del buf828  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_103(c_void_p(buf830.data_ptr()), c_void_p(le_101.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf825.data_ptr()), c_void_p(convolution_45.data_ptr()), c_void_p(unsqueeze_1834.data_ptr()), c_void_p(squeeze_136.data_ptr()), c_void_p(primals_137.data_ptr()), c_void_p(buf827.data_ptr()), c_void_p(buf829.data_ptr()), c_void_p(buf875.data_ptr()))
    del buf825
    del convolution_45
    del le_101
    del primals_137
    del squeeze_136
    del unsqueeze_1834
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf831 = aten.convolution_backward(buf829, add_245, primals_136, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_245
    del primals_136
    buf832 = buf831[0]
    buf833 = buf831[1]
    del buf831
    buf834 = empty((28, ), device='cpu', dtype=torch.float32)
    buf835 = empty((28, ), device='cpu', dtype=torch.float32)
    buf836 = buf829; del buf829  # reuse
    buf874 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 140)  # alias
    buf837 = buf835; del buf835  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_104(c_void_p(buf837.data_ptr()), c_void_p(le_102.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf832.data_ptr()), c_void_p(convolution_44.data_ptr()), c_void_p(unsqueeze_1846.data_ptr()), c_void_p(squeeze_133.data_ptr()), c_void_p(primals_134.data_ptr()), c_void_p(buf834.data_ptr()), c_void_p(buf836.data_ptr()), c_void_p(buf874.data_ptr()))
    del buf832
    del convolution_44
    del le_102
    del primals_134
    del squeeze_133
    del unsqueeze_1846
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf838 = aten.convolution_backward(buf836, add_239, primals_133, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_239
    del primals_133
    buf839 = buf838[0]
    buf840 = buf838[1]
    del buf838
    buf841 = empty((28, ), device='cpu', dtype=torch.float32)
    buf842 = empty((28, ), device='cpu', dtype=torch.float32)
    buf843 = buf836; del buf836  # reuse
    buf873 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 112)  # alias
    buf844 = buf842; del buf842  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_105(c_void_p(buf844.data_ptr()), c_void_p(le_103.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf839.data_ptr()), c_void_p(convolution_43.data_ptr()), c_void_p(unsqueeze_1858.data_ptr()), c_void_p(squeeze_130.data_ptr()), c_void_p(primals_131.data_ptr()), c_void_p(buf841.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf873.data_ptr()))
    del buf839
    del convolution_43
    del le_103
    del primals_131
    del squeeze_130
    del unsqueeze_1858
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf845 = aten.convolution_backward(buf843, add_233, primals_130, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_233
    del primals_130
    buf846 = buf845[0]
    buf847 = buf845[1]
    del buf845
    buf848 = empty((28, ), device='cpu', dtype=torch.float32)
    buf849 = empty((28, ), device='cpu', dtype=torch.float32)
    buf850 = buf843; del buf843  # reuse
    buf872 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 84)  # alias
    buf851 = buf849; del buf849  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_106(c_void_p(buf851.data_ptr()), c_void_p(le_104.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf846.data_ptr()), c_void_p(convolution_42.data_ptr()), c_void_p(unsqueeze_1870.data_ptr()), c_void_p(squeeze_127.data_ptr()), c_void_p(primals_128.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf850.data_ptr()), c_void_p(buf872.data_ptr()))
    del buf846
    del convolution_42
    del le_104
    del primals_128
    del squeeze_127
    del unsqueeze_1870
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf852 = aten.convolution_backward(buf850, add_227, primals_127, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_227
    del primals_127
    buf853 = buf852[0]
    buf854 = buf852[1]
    del buf852
    buf855 = empty((28, ), device='cpu', dtype=torch.float32)
    buf856 = empty((28, ), device='cpu', dtype=torch.float32)
    buf857 = buf850; del buf850  # reuse
    buf871 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 56)  # alias
    buf858 = buf856; del buf856  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_107(c_void_p(buf858.data_ptr()), c_void_p(le_105.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(convolution_41.data_ptr()), c_void_p(unsqueeze_1882.data_ptr()), c_void_p(squeeze_124.data_ptr()), c_void_p(primals_125.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(buf857.data_ptr()), c_void_p(buf871.data_ptr()))
    del buf853
    del convolution_41
    del le_105
    del primals_125
    del squeeze_124
    del unsqueeze_1882
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf859 = aten.convolution_backward(buf857, add_221, primals_124, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_221
    del primals_124
    buf860 = buf859[0]
    buf861 = buf859[1]
    del buf859
    buf862 = empty((28, ), device='cpu', dtype=torch.float32)
    buf863 = empty((28, ), device='cpu', dtype=torch.float32)
    buf864 = buf857; del buf857  # reuse
    buf870 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 28)  # alias
    buf865 = buf863; del buf863  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_108(c_void_p(buf865.data_ptr()), c_void_p(le_106.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf860.data_ptr()), c_void_p(convolution_40.data_ptr()), c_void_p(unsqueeze_1894.data_ptr()), c_void_p(squeeze_121.data_ptr()), c_void_p(primals_122.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(buf864.data_ptr()), c_void_p(buf870.data_ptr()))
    del buf860
    del convolution_40
    del le_106
    del primals_122
    del squeeze_121
    del unsqueeze_1894
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf866 = aten.convolution_backward(buf864, getitem_378, primals_121, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf864
    del getitem_378
    del primals_121
    buf867 = buf866[0]
    buf868 = buf866[1]
    del buf866
    buf869 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 0)  # alias
    buf876 = reinterpret_tensor(buf877, (8, 28, 28, 28), (175616, 1, 6272, 224), 196)  # alias
    buf878 = buf807; del buf807  # reuse
    buf879 = empty((224, ), device='cpu', dtype=torch.float32)
    buf880 = empty((224, ), device='cpu', dtype=torch.float32)
    buf881 = buf877; del buf877  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_109(c_void_p(buf881.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(le_107.data_ptr()), c_void_p(convolution_39.data_ptr()), c_void_p(unsqueeze_1906.data_ptr()), c_void_p(squeeze_118.data_ptr()), c_void_p(primals_119.data_ptr()), c_void_p(buf869.data_ptr()), c_void_p(buf876.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf879.data_ptr()), c_void_p(buf880.data_ptr()))
    del buf818
    del buf869
    del buf870
    del buf871
    del buf872
    del buf873
    del buf874
    del buf875
    del buf876
    del convolution_39
    del le_107
    del primals_119
    del squeeze_118
    del unsqueeze_1906
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf882 = aten.convolution_backward(buf881, relu_36, primals_118, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf881
    del primals_118
    buf883 = buf882[0]
    buf884 = buf882[1]
    del buf882
    buf885 = buf740; del buf740  # reuse
    buf886 = empty((512, ), device='cpu', dtype=torch.float32)
    buf887 = empty((512, ), device='cpu', dtype=torch.float32)
    buf893 = empty((512, ), device='cpu', dtype=torch.float32)
    buf888 = empty((512, ), device='cpu', dtype=torch.float32)
    buf889 = buf815; del buf815  # reuse
    buf895 = buf738; del buf738  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_110(c_void_p(buf885.data_ptr()), c_void_p(relu_36.data_ptr()), c_void_p(relu_45.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf883.data_ptr()), c_void_p(convolution_38.data_ptr()), c_void_p(unsqueeze_1918.data_ptr()), c_void_p(convolution_37.data_ptr()), c_void_p(unsqueeze_1930.data_ptr()), c_void_p(squeeze_115.data_ptr()), c_void_p(primals_116.data_ptr()), c_void_p(squeeze_112.data_ptr()), c_void_p(primals_113.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf887.data_ptr()), c_void_p(buf893.data_ptr()), c_void_p(buf888.data_ptr()), c_void_p(buf889.data_ptr()), c_void_p(buf895.data_ptr()))
    del buf811
    del buf883
    del buf885
    del buf887
    del convolution_37
    del convolution_38
    del primals_113
    del primals_116
    del relu_36
    del relu_45
    del squeeze_115
    del unsqueeze_1918
    del unsqueeze_1930
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf890 = aten.convolution_backward(buf889, relu_27, primals_115, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf889
    del primals_115
    buf891 = buf890[0]
    buf892 = buf890[1]
    del buf890
    buf894 = buf893; del buf893  # reuse
    cpp_fused_native_batch_norm_backward_111(c_void_p(buf894.data_ptr()), c_void_p(squeeze_112.data_ptr()))
    del squeeze_112
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf896 = aten.convolution_backward(buf895, cat_3, primals_112, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf895
    del cat_3
    del primals_112
    buf897 = buf896[0]
    buf898 = buf896[1]
    del buf896
    buf956 = empty_strided((8, 224, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    buf899 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 196)  # alias
    buf900 = empty((28, ), device='cpu', dtype=torch.float32)
    buf901 = empty((28, ), device='cpu', dtype=torch.float32)
    buf902 = empty((28, ), device='cpu', dtype=torch.float32)
    buf903 = buf867; del buf867  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_112(c_void_p(buf897.data_ptr()), c_void_p(le_109.data_ptr()), c_void_p(convolution_36.data_ptr()), c_void_p(unsqueeze_1942.data_ptr()), c_void_p(squeeze_109.data_ptr()), c_void_p(primals_110.data_ptr()), c_void_p(buf899.data_ptr()), c_void_p(buf900.data_ptr()), c_void_p(buf901.data_ptr()), c_void_p(buf902.data_ptr()), c_void_p(buf903.data_ptr()))
    del convolution_36
    del le_109
    del primals_110
    del squeeze_109
    del unsqueeze_1942
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf904 = aten.convolution_backward(buf903, getitem_352, primals_109, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_352
    del primals_109
    buf905 = buf904[0]
    buf906 = buf904[1]
    del buf904
    buf907 = buf901; del buf901  # reuse
    buf908 = empty((28, ), device='cpu', dtype=torch.float32)
    buf909 = empty((28, ), device='cpu', dtype=torch.float32)
    buf910 = buf903; del buf903  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_113(c_void_p(le_110.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(convolution_35.data_ptr()), c_void_p(unsqueeze_1954.data_ptr()), c_void_p(squeeze_106.data_ptr()), c_void_p(primals_107.data_ptr()), c_void_p(buf907.data_ptr()), c_void_p(buf908.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf910.data_ptr()))
    del convolution_35
    del le_110
    del primals_107
    del squeeze_106
    del unsqueeze_1954
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf911 = aten.convolution_backward(buf910, getitem_341, primals_106, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_341
    del primals_106
    buf912 = buf911[0]
    buf913 = buf911[1]
    del buf911
    buf914 = buf908; del buf908  # reuse
    buf915 = empty((28, ), device='cpu', dtype=torch.float32)
    buf916 = empty((28, ), device='cpu', dtype=torch.float32)
    buf917 = buf910; del buf910  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_114(c_void_p(le_111.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(convolution_34.data_ptr()), c_void_p(unsqueeze_1966.data_ptr()), c_void_p(squeeze_103.data_ptr()), c_void_p(primals_104.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()), c_void_p(buf916.data_ptr()), c_void_p(buf917.data_ptr()))
    del convolution_34
    del le_111
    del primals_104
    del squeeze_103
    del unsqueeze_1966
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf918 = aten.convolution_backward(buf917, getitem_330, primals_103, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_330
    del primals_103
    buf919 = buf918[0]
    buf920 = buf918[1]
    del buf918
    buf921 = buf915; del buf915  # reuse
    buf922 = empty((28, ), device='cpu', dtype=torch.float32)
    buf923 = empty((28, ), device='cpu', dtype=torch.float32)
    buf924 = buf917; del buf917  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_115(c_void_p(le_112.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(convolution_33.data_ptr()), c_void_p(unsqueeze_1978.data_ptr()), c_void_p(squeeze_100.data_ptr()), c_void_p(primals_101.data_ptr()), c_void_p(buf921.data_ptr()), c_void_p(buf922.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(buf924.data_ptr()))
    del convolution_33
    del le_112
    del primals_101
    del squeeze_100
    del unsqueeze_1978
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf925 = aten.convolution_backward(buf924, getitem_319, primals_100, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_319
    del primals_100
    buf926 = buf925[0]
    buf927 = buf925[1]
    del buf925
    buf928 = buf922; del buf922  # reuse
    buf929 = empty((28, ), device='cpu', dtype=torch.float32)
    buf930 = empty((28, ), device='cpu', dtype=torch.float32)
    buf931 = buf924; del buf924  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_116(c_void_p(le_113.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(convolution_32.data_ptr()), c_void_p(unsqueeze_1990.data_ptr()), c_void_p(squeeze_97.data_ptr()), c_void_p(primals_98.data_ptr()), c_void_p(buf928.data_ptr()), c_void_p(buf929.data_ptr()), c_void_p(buf930.data_ptr()), c_void_p(buf931.data_ptr()))
    del convolution_32
    del le_113
    del primals_98
    del squeeze_97
    del unsqueeze_1990
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf932 = aten.convolution_backward(buf931, getitem_308, primals_97, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_308
    del primals_97
    buf933 = buf932[0]
    buf934 = buf932[1]
    del buf932
    buf935 = buf929; del buf929  # reuse
    buf936 = empty((28, ), device='cpu', dtype=torch.float32)
    buf937 = empty((28, ), device='cpu', dtype=torch.float32)
    buf938 = buf931; del buf931  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_117(c_void_p(le_114.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(convolution_31.data_ptr()), c_void_p(unsqueeze_2002.data_ptr()), c_void_p(squeeze_94.data_ptr()), c_void_p(primals_95.data_ptr()), c_void_p(buf935.data_ptr()), c_void_p(buf936.data_ptr()), c_void_p(buf937.data_ptr()), c_void_p(buf938.data_ptr()))
    del convolution_31
    del le_114
    del primals_95
    del squeeze_94
    del unsqueeze_2002
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf939 = aten.convolution_backward(buf938, getitem_297, primals_94, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_297
    del primals_94
    buf940 = buf939[0]
    buf941 = buf939[1]
    del buf939
    buf942 = buf936; del buf936  # reuse
    buf943 = empty((28, ), device='cpu', dtype=torch.float32)
    buf944 = empty((28, ), device='cpu', dtype=torch.float32)
    buf945 = buf938; del buf938  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_118(c_void_p(le_115.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(convolution_30.data_ptr()), c_void_p(unsqueeze_2014.data_ptr()), c_void_p(squeeze_91.data_ptr()), c_void_p(primals_92.data_ptr()), c_void_p(buf942.data_ptr()), c_void_p(buf943.data_ptr()), c_void_p(buf944.data_ptr()), c_void_p(buf945.data_ptr()))
    del buf897
    del buf943
    del convolution_30
    del le_115
    del primals_92
    del squeeze_91
    del unsqueeze_2014
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf946 = aten.convolution_backward(buf945, getitem_286, primals_91, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf945
    del getitem_286
    del primals_91
    buf947 = buf946[0]
    buf948 = buf946[1]
    del buf946
    buf949 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 0)  # alias
    buf950 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 28)  # alias
    buf951 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 56)  # alias
    buf952 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 84)  # alias
    buf953 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 112)  # alias
    buf954 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 140)  # alias
    buf955 = reinterpret_tensor(buf956, (8, 28, 56, 56), (702464, 1, 12544, 224), 168)  # alias
    buf957 = buf879; del buf879  # reuse
    buf958 = empty((224, ), device='cpu', dtype=torch.float32)
    buf959 = empty((224, ), device='cpu', dtype=torch.float32)
    buf960 = buf956; del buf956  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_119(c_void_p(buf960.data_ptr()), c_void_p(buf947.data_ptr()), c_void_p(buf940.data_ptr()), c_void_p(buf933.data_ptr()), c_void_p(buf926.data_ptr()), c_void_p(buf919.data_ptr()), c_void_p(buf912.data_ptr()), c_void_p(buf905.data_ptr()), c_void_p(le_116.data_ptr()), c_void_p(convolution_29.data_ptr()), c_void_p(unsqueeze_2026.data_ptr()), c_void_p(squeeze_88.data_ptr()), c_void_p(primals_89.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf950.data_ptr()), c_void_p(buf951.data_ptr()), c_void_p(buf952.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(buf954.data_ptr()), c_void_p(buf955.data_ptr()), c_void_p(buf957.data_ptr()), c_void_p(buf958.data_ptr()), c_void_p(buf959.data_ptr()))
    del buf899
    del buf905
    del buf912
    del buf919
    del buf926
    del buf933
    del buf940
    del buf947
    del buf949
    del buf950
    del buf951
    del buf952
    del buf953
    del buf954
    del buf955
    del buf958
    del convolution_29
    del le_116
    del primals_89
    del squeeze_88
    del unsqueeze_2026
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf961 = aten.convolution_backward(buf960, relu_27, primals_88, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf960
    del primals_88
    buf962 = buf961[0]
    buf963 = buf961[1]
    del buf961
    buf964 = empty((256, ), device='cpu', dtype=torch.float32)
    buf965 = empty((256, ), device='cpu', dtype=torch.float32)
    buf966 = empty_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    buf967 = buf965; del buf965  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_120(c_void_p(buf967.data_ptr()), c_void_p(relu_27.data_ptr()), c_void_p(buf891.data_ptr()), c_void_p(buf962.data_ptr()), c_void_p(convolution_28.data_ptr()), c_void_p(unsqueeze_2038.data_ptr()), c_void_p(squeeze_85.data_ptr()), c_void_p(primals_86.data_ptr()), c_void_p(buf964.data_ptr()), c_void_p(buf966.data_ptr()))
    del convolution_28
    del primals_86
    del squeeze_85
    del unsqueeze_2038
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf968 = aten.convolution_backward(buf966, cat_2, primals_85, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_2
    del primals_85
    buf969 = buf968[0]
    buf970 = buf968[1]
    del buf968
    buf971 = empty((14, ), device='cpu', dtype=torch.float32)
    buf972 = empty((14, ), device='cpu', dtype=torch.float32)
    buf973 = empty((14, ), device='cpu', dtype=torch.float32)
    buf974 = reinterpret_tensor(buf651, (8, 14, 56, 56), (43904, 1, 784, 14), 0); del buf651  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_121(c_void_p(le_118.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(convolution_27.data_ptr()), c_void_p(unsqueeze_2050.data_ptr()), c_void_p(squeeze_82.data_ptr()), c_void_p(primals_83.data_ptr()), c_void_p(buf971.data_ptr()), c_void_p(buf972.data_ptr()), c_void_p(buf973.data_ptr()), c_void_p(buf974.data_ptr()))
    del convolution_27
    del le_118
    del primals_83
    del squeeze_82
    del unsqueeze_2050
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf975 = aten.convolution_backward(buf974, add_148, primals_82, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_148
    del primals_82
    buf976 = buf975[0]
    buf977 = buf975[1]
    del buf975
    buf978 = buf972; del buf972  # reuse
    buf979 = empty((14, ), device='cpu', dtype=torch.float32)
    buf980 = buf974; del buf974  # reuse
    buf1028 = reinterpret_tensor(buf664, (8, 112, 56, 56), (351232, 1, 6272, 112), 0); del buf664  # reuse
    buf1026 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 84)  # alias
    buf981 = buf979; del buf979  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_122(c_void_p(buf981.data_ptr()), c_void_p(le_119.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf976.data_ptr()), c_void_p(convolution_26.data_ptr()), c_void_p(unsqueeze_2062.data_ptr()), c_void_p(squeeze_79.data_ptr()), c_void_p(primals_80.data_ptr()), c_void_p(buf978.data_ptr()), c_void_p(buf980.data_ptr()), c_void_p(buf1026.data_ptr()))
    del buf976
    del convolution_26
    del le_119
    del primals_80
    del squeeze_79
    del unsqueeze_2062
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf982 = aten.convolution_backward(buf980, add_142, primals_79, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_142
    del primals_79
    buf983 = buf982[0]
    buf984 = buf982[1]
    del buf982
    buf985 = empty((14, ), device='cpu', dtype=torch.float32)
    buf986 = empty((14, ), device='cpu', dtype=torch.float32)
    buf987 = buf980; del buf980  # reuse
    buf1025 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 70)  # alias
    buf988 = buf986; del buf986  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_123(c_void_p(buf988.data_ptr()), c_void_p(le_120.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf983.data_ptr()), c_void_p(convolution_25.data_ptr()), c_void_p(unsqueeze_2074.data_ptr()), c_void_p(squeeze_76.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(buf985.data_ptr()), c_void_p(buf987.data_ptr()), c_void_p(buf1025.data_ptr()))
    del buf983
    del convolution_25
    del le_120
    del primals_77
    del squeeze_76
    del unsqueeze_2074
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf989 = aten.convolution_backward(buf987, add_136, primals_76, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_136
    del primals_76
    buf990 = buf989[0]
    buf991 = buf989[1]
    del buf989
    buf992 = empty((14, ), device='cpu', dtype=torch.float32)
    buf993 = empty((14, ), device='cpu', dtype=torch.float32)
    buf994 = buf987; del buf987  # reuse
    buf1024 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 56)  # alias
    buf995 = buf993; del buf993  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_124(c_void_p(buf995.data_ptr()), c_void_p(le_121.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf990.data_ptr()), c_void_p(convolution_24.data_ptr()), c_void_p(unsqueeze_2086.data_ptr()), c_void_p(squeeze_73.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(buf992.data_ptr()), c_void_p(buf994.data_ptr()), c_void_p(buf1024.data_ptr()))
    del buf990
    del convolution_24
    del le_121
    del primals_74
    del squeeze_73
    del unsqueeze_2086
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf996 = aten.convolution_backward(buf994, add_130, primals_73, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_130
    del primals_73
    buf997 = buf996[0]
    buf998 = buf996[1]
    del buf996
    buf999 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1000 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1001 = buf994; del buf994  # reuse
    buf1023 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 42)  # alias
    buf1002 = buf1000; del buf1000  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_125(c_void_p(buf1002.data_ptr()), c_void_p(le_122.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf997.data_ptr()), c_void_p(convolution_23.data_ptr()), c_void_p(unsqueeze_2098.data_ptr()), c_void_p(squeeze_70.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(buf1001.data_ptr()), c_void_p(buf1023.data_ptr()))
    del buf997
    del convolution_23
    del le_122
    del primals_71
    del squeeze_70
    del unsqueeze_2098
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1003 = aten.convolution_backward(buf1001, add_124, primals_70, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_124
    del primals_70
    buf1004 = buf1003[0]
    buf1005 = buf1003[1]
    del buf1003
    buf1006 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1007 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1008 = buf1001; del buf1001  # reuse
    buf1022 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 28)  # alias
    buf1009 = buf1007; del buf1007  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_126(c_void_p(buf1009.data_ptr()), c_void_p(le_123.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf1004.data_ptr()), c_void_p(convolution_22.data_ptr()), c_void_p(unsqueeze_2110.data_ptr()), c_void_p(squeeze_67.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(buf1006.data_ptr()), c_void_p(buf1008.data_ptr()), c_void_p(buf1022.data_ptr()))
    del buf1004
    del convolution_22
    del le_123
    del primals_68
    del squeeze_67
    del unsqueeze_2110
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1010 = aten.convolution_backward(buf1008, add_118, primals_67, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_118
    del primals_67
    buf1011 = buf1010[0]
    buf1012 = buf1010[1]
    del buf1010
    buf1013 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1014 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1015 = buf1008; del buf1008  # reuse
    buf1021 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 14)  # alias
    buf1016 = buf1014; del buf1014  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_127(c_void_p(buf1016.data_ptr()), c_void_p(le_124.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(convolution_21.data_ptr()), c_void_p(unsqueeze_2122.data_ptr()), c_void_p(squeeze_64.data_ptr()), c_void_p(primals_65.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(buf1015.data_ptr()), c_void_p(buf1021.data_ptr()))
    del buf1011
    del convolution_21
    del le_124
    del primals_65
    del squeeze_64
    del unsqueeze_2122
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1017 = aten.convolution_backward(buf1015, getitem_196, primals_64, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1015
    del getitem_196
    del primals_64
    buf1018 = buf1017[0]
    buf1019 = buf1017[1]
    del buf1017
    buf1020 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 0)  # alias
    buf1027 = reinterpret_tensor(buf1028, (8, 14, 56, 56), (351232, 1, 6272, 112), 98)  # alias
    buf1029 = buf206; del buf206  # reuse
    buf1030 = empty((112, ), device='cpu', dtype=torch.float32)
    buf1031 = empty((112, ), device='cpu', dtype=torch.float32)
    buf1032 = buf1028; del buf1028  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_128(c_void_p(buf1032.data_ptr()), c_void_p(buf1018.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(le_125.data_ptr()), c_void_p(convolution_20.data_ptr()), c_void_p(unsqueeze_2134.data_ptr()), c_void_p(squeeze_61.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(buf1020.data_ptr()), c_void_p(buf1027.data_ptr()), c_void_p(buf1029.data_ptr()), c_void_p(buf1030.data_ptr()), c_void_p(buf1031.data_ptr()))
    del buf1020
    del buf1021
    del buf1022
    del buf1023
    del buf1024
    del buf1025
    del buf1026
    del buf1027
    del buf969
    del convolution_20
    del le_125
    del primals_62
    del squeeze_61
    del unsqueeze_2134
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1033 = aten.convolution_backward(buf1032, relu_18, primals_61, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_61
    buf1034 = buf1033[0]
    buf1035 = buf1033[1]
    del buf1033
    buf1036 = buf1034; del buf1034  # reuse
    buf1037 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1038 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1039 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1040 = buf966; del buf966  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_129(c_void_p(buf1036.data_ptr()), c_void_p(relu_18.data_ptr()), c_void_p(relu_27.data_ptr()), c_void_p(buf891.data_ptr()), c_void_p(buf962.data_ptr()), c_void_p(convolution_19.data_ptr()), c_void_p(unsqueeze_2146.data_ptr()), c_void_p(squeeze_58.data_ptr()), c_void_p(primals_59.data_ptr()), c_void_p(buf1037.data_ptr()), c_void_p(buf1038.data_ptr()), c_void_p(buf1039.data_ptr()), c_void_p(buf1040.data_ptr()))
    del buf891
    del convolution_19
    del primals_59
    del relu_18
    del relu_27
    del squeeze_58
    del unsqueeze_2146
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1041 = aten.convolution_backward(buf1040, cat_1, primals_58, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_1
    del primals_58
    buf1042 = buf1041[0]
    buf1043 = buf1041[1]
    del buf1041
    buf1044 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1045 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1046 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1047 = buf1018; del buf1018  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130(c_void_p(le_127.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(convolution_18.data_ptr()), c_void_p(unsqueeze_2158.data_ptr()), c_void_p(squeeze_55.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(buf1045.data_ptr()), c_void_p(buf1046.data_ptr()), c_void_p(buf1047.data_ptr()))
    del convolution_18
    del le_127
    del primals_56
    del squeeze_55
    del unsqueeze_2158
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1048 = aten.convolution_backward(buf1047, add_96, primals_55, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_96
    del primals_55
    buf1049 = buf1048[0]
    buf1050 = buf1048[1]
    del buf1048
    buf1051 = buf1045; del buf1045  # reuse
    buf1052 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1053 = buf1047; del buf1047  # reuse
    buf1101 = buf1032; del buf1032  # reuse
    buf1099 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 84)  # alias
    buf1054 = buf1052; del buf1052  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_131(c_void_p(buf1054.data_ptr()), c_void_p(le_128.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1049.data_ptr()), c_void_p(convolution_17.data_ptr()), c_void_p(unsqueeze_2170.data_ptr()), c_void_p(squeeze_52.data_ptr()), c_void_p(primals_53.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(buf1053.data_ptr()), c_void_p(buf1099.data_ptr()))
    del buf1049
    del convolution_17
    del le_128
    del primals_53
    del squeeze_52
    del unsqueeze_2170
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1055 = aten.convolution_backward(buf1053, add_90, primals_52, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_90
    del primals_52
    buf1056 = buf1055[0]
    buf1057 = buf1055[1]
    del buf1055
    buf1058 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1059 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1060 = buf1053; del buf1053  # reuse
    buf1098 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 70)  # alias
    buf1061 = buf1059; del buf1059  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_132(c_void_p(buf1061.data_ptr()), c_void_p(le_129.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1056.data_ptr()), c_void_p(convolution_16.data_ptr()), c_void_p(unsqueeze_2182.data_ptr()), c_void_p(squeeze_49.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(buf1060.data_ptr()), c_void_p(buf1098.data_ptr()))
    del buf1056
    del convolution_16
    del le_129
    del primals_50
    del squeeze_49
    del unsqueeze_2182
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1062 = aten.convolution_backward(buf1060, add_84, primals_49, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_84
    del primals_49
    buf1063 = buf1062[0]
    buf1064 = buf1062[1]
    del buf1062
    buf1065 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1066 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1067 = buf1060; del buf1060  # reuse
    buf1097 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 56)  # alias
    buf1068 = buf1066; del buf1066  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_133(c_void_p(buf1068.data_ptr()), c_void_p(le_130.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1063.data_ptr()), c_void_p(convolution_15.data_ptr()), c_void_p(unsqueeze_2194.data_ptr()), c_void_p(squeeze_46.data_ptr()), c_void_p(primals_47.data_ptr()), c_void_p(buf1065.data_ptr()), c_void_p(buf1067.data_ptr()), c_void_p(buf1097.data_ptr()))
    del buf1063
    del convolution_15
    del le_130
    del primals_47
    del squeeze_46
    del unsqueeze_2194
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1069 = aten.convolution_backward(buf1067, add_78, primals_46, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_78
    del primals_46
    buf1070 = buf1069[0]
    buf1071 = buf1069[1]
    del buf1069
    buf1072 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1073 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1074 = buf1067; del buf1067  # reuse
    buf1096 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 42)  # alias
    buf1075 = buf1073; del buf1073  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_134(c_void_p(buf1075.data_ptr()), c_void_p(le_131.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1070.data_ptr()), c_void_p(convolution_14.data_ptr()), c_void_p(unsqueeze_2206.data_ptr()), c_void_p(squeeze_43.data_ptr()), c_void_p(primals_44.data_ptr()), c_void_p(buf1072.data_ptr()), c_void_p(buf1074.data_ptr()), c_void_p(buf1096.data_ptr()))
    del buf1070
    del convolution_14
    del le_131
    del primals_44
    del squeeze_43
    del unsqueeze_2206
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1076 = aten.convolution_backward(buf1074, add_72, primals_43, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_72
    del primals_43
    buf1077 = buf1076[0]
    buf1078 = buf1076[1]
    del buf1076
    buf1079 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1080 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1081 = buf1074; del buf1074  # reuse
    buf1095 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 28)  # alias
    buf1082 = buf1080; del buf1080  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_135(c_void_p(buf1082.data_ptr()), c_void_p(le_132.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1077.data_ptr()), c_void_p(convolution_13.data_ptr()), c_void_p(unsqueeze_2218.data_ptr()), c_void_p(squeeze_40.data_ptr()), c_void_p(primals_41.data_ptr()), c_void_p(buf1079.data_ptr()), c_void_p(buf1081.data_ptr()), c_void_p(buf1095.data_ptr()))
    del buf1077
    del convolution_13
    del le_132
    del primals_41
    del squeeze_40
    del unsqueeze_2218
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1083 = aten.convolution_backward(buf1081, add_66, primals_40, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_66
    del primals_40
    buf1084 = buf1083[0]
    buf1085 = buf1083[1]
    del buf1083
    buf1086 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1087 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1088 = buf1081; del buf1081  # reuse
    buf1094 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 14)  # alias
    buf1089 = buf1087; del buf1087  # reuse
    cpp_fused_add_cat_native_batch_norm_backward_threshold_backward_136(c_void_p(buf1089.data_ptr()), c_void_p(le_133.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1084.data_ptr()), c_void_p(convolution_12.data_ptr()), c_void_p(unsqueeze_2230.data_ptr()), c_void_p(squeeze_37.data_ptr()), c_void_p(primals_38.data_ptr()), c_void_p(buf1086.data_ptr()), c_void_p(buf1088.data_ptr()), c_void_p(buf1094.data_ptr()))
    del buf1084
    del convolution_12
    del le_133
    del primals_38
    del squeeze_37
    del unsqueeze_2230
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1090 = aten.convolution_backward(buf1088, getitem_106, primals_37, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1088
    del getitem_106
    del primals_37
    buf1091 = buf1090[0]
    buf1092 = buf1090[1]
    del buf1090
    buf1093 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 0)  # alias
    buf1100 = reinterpret_tensor(buf1101, (8, 14, 56, 56), (351232, 1, 6272, 112), 98)  # alias
    buf1102 = buf1030; del buf1030  # reuse
    buf1103 = empty((112, ), device='cpu', dtype=torch.float32)
    buf1104 = empty((112, ), device='cpu', dtype=torch.float32)
    buf1105 = buf1101; del buf1101  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_137(c_void_p(buf1105.data_ptr()), c_void_p(buf1091.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(le_134.data_ptr()), c_void_p(convolution_11.data_ptr()), c_void_p(unsqueeze_2242.data_ptr()), c_void_p(squeeze_34.data_ptr()), c_void_p(primals_35.data_ptr()), c_void_p(buf1093.data_ptr()), c_void_p(buf1100.data_ptr()), c_void_p(buf1102.data_ptr()), c_void_p(buf1103.data_ptr()), c_void_p(buf1104.data_ptr()))
    del buf1042
    del buf1093
    del buf1094
    del buf1095
    del buf1096
    del buf1097
    del buf1098
    del buf1099
    del buf1100
    del convolution_11
    del le_134
    del primals_35
    del squeeze_34
    del unsqueeze_2242
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1106 = aten.convolution_backward(buf1105, relu_9, primals_34, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_34
    buf1107 = buf1106[0]
    buf1108 = buf1106[1]
    del buf1106
    buf1109 = buf1038; del buf1038  # reuse
    buf1110 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1116 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1111 = buf1040; del buf1040  # reuse
    buf1117 = buf962; del buf962  # reuse
    buf1112 = buf1110; del buf1110  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_138(c_void_p(buf1112.data_ptr()), c_void_p(relu_9.data_ptr()), c_void_p(buf1036.data_ptr()), c_void_p(buf1107.data_ptr()), c_void_p(convolution_10.data_ptr()), c_void_p(unsqueeze_2254.data_ptr()), c_void_p(convolution_9.data_ptr()), c_void_p(unsqueeze_2266.data_ptr()), c_void_p(squeeze_31.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(squeeze_28.data_ptr()), c_void_p(primals_29.data_ptr()), c_void_p(buf1109.data_ptr()), c_void_p(buf1116.data_ptr()), c_void_p(buf1111.data_ptr()), c_void_p(buf1117.data_ptr()))
    del buf1036
    del buf1107
    del convolution_10
    del convolution_9
    del primals_29
    del primals_32
    del relu_9
    del squeeze_31
    del unsqueeze_2254
    del unsqueeze_2266
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1113 = aten.convolution_backward(buf1111, getitem_2, primals_31, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1111
    del primals_31
    buf1114 = buf1113[0]
    buf1115 = buf1113[1]
    del buf1113
    buf1118 = buf1116; del buf1116  # reuse
    cpp_fused_native_batch_norm_backward_139(c_void_p(buf1118.data_ptr()), c_void_p(squeeze_28.data_ptr()))
    del squeeze_28
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1119 = aten.convolution_backward(buf1117, cat, primals_28, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1117
    del cat
    del primals_28
    buf1120 = buf1119[0]
    buf1121 = buf1119[1]
    del buf1119
    buf1179 = buf1105; del buf1105  # reuse
    buf1122 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 98)  # alias
    buf1123 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1124 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1125 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1126 = buf1091; del buf1091  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_140(c_void_p(buf1120.data_ptr()), c_void_p(le_136.data_ptr()), c_void_p(convolution_8.data_ptr()), c_void_p(unsqueeze_2278.data_ptr()), c_void_p(squeeze_25.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(buf1122.data_ptr()), c_void_p(buf1123.data_ptr()), c_void_p(buf1124.data_ptr()), c_void_p(buf1125.data_ptr()), c_void_p(buf1126.data_ptr()))
    del convolution_8
    del le_136
    del primals_26
    del squeeze_25
    del unsqueeze_2278
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1127 = aten.convolution_backward(buf1126, getitem_80, primals_25, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_80
    del primals_25
    buf1128 = buf1127[0]
    buf1129 = buf1127[1]
    del buf1127
    buf1130 = buf1124; del buf1124  # reuse
    buf1131 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1132 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1133 = buf1126; del buf1126  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_141(c_void_p(le_137.data_ptr()), c_void_p(buf1120.data_ptr()), c_void_p(convolution_7.data_ptr()), c_void_p(unsqueeze_2290.data_ptr()), c_void_p(squeeze_22.data_ptr()), c_void_p(primals_23.data_ptr()), c_void_p(buf1130.data_ptr()), c_void_p(buf1131.data_ptr()), c_void_p(buf1132.data_ptr()), c_void_p(buf1133.data_ptr()))
    del convolution_7
    del le_137
    del primals_23
    del squeeze_22
    del unsqueeze_2290
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1134 = aten.convolution_backward(buf1133, getitem_69, primals_22, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_69
    del primals_22
    buf1135 = buf1134[0]
    buf1136 = buf1134[1]
    del buf1134
    buf1137 = buf1131; del buf1131  # reuse
    buf1138 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1139 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1140 = buf1133; del buf1133  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_142(c_void_p(le_138.data_ptr()), c_void_p(buf1120.data_ptr()), c_void_p(convolution_6.data_ptr()), c_void_p(unsqueeze_2302.data_ptr()), c_void_p(squeeze_19.data_ptr()), c_void_p(primals_20.data_ptr()), c_void_p(buf1137.data_ptr()), c_void_p(buf1138.data_ptr()), c_void_p(buf1139.data_ptr()), c_void_p(buf1140.data_ptr()))
    del convolution_6
    del le_138
    del primals_20
    del squeeze_19
    del unsqueeze_2302
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1141 = aten.convolution_backward(buf1140, getitem_58, primals_19, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_58
    del primals_19
    buf1142 = buf1141[0]
    buf1143 = buf1141[1]
    del buf1141
    buf1144 = buf1138; del buf1138  # reuse
    buf1145 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1146 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1147 = buf1140; del buf1140  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_143(c_void_p(le_139.data_ptr()), c_void_p(buf1120.data_ptr()), c_void_p(convolution_5.data_ptr()), c_void_p(unsqueeze_2314.data_ptr()), c_void_p(squeeze_16.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(buf1144.data_ptr()), c_void_p(buf1145.data_ptr()), c_void_p(buf1146.data_ptr()), c_void_p(buf1147.data_ptr()))
    del convolution_5
    del le_139
    del primals_17
    del squeeze_16
    del unsqueeze_2314
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1148 = aten.convolution_backward(buf1147, getitem_47, primals_16, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_47
    del primals_16
    buf1149 = buf1148[0]
    buf1150 = buf1148[1]
    del buf1148
    buf1151 = buf1145; del buf1145  # reuse
    buf1152 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1153 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1154 = buf1147; del buf1147  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_144(c_void_p(le_140.data_ptr()), c_void_p(buf1120.data_ptr()), c_void_p(convolution_4.data_ptr()), c_void_p(unsqueeze_2326.data_ptr()), c_void_p(squeeze_13.data_ptr()), c_void_p(primals_14.data_ptr()), c_void_p(buf1151.data_ptr()), c_void_p(buf1152.data_ptr()), c_void_p(buf1153.data_ptr()), c_void_p(buf1154.data_ptr()))
    del convolution_4
    del le_140
    del primals_14
    del squeeze_13
    del unsqueeze_2326
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1155 = aten.convolution_backward(buf1154, getitem_36, primals_13, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_36
    del primals_13
    buf1156 = buf1155[0]
    buf1157 = buf1155[1]
    del buf1155
    buf1158 = buf1152; del buf1152  # reuse
    buf1159 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1160 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1161 = buf1154; del buf1154  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_145(c_void_p(le_141.data_ptr()), c_void_p(buf1120.data_ptr()), c_void_p(convolution_3.data_ptr()), c_void_p(unsqueeze_2338.data_ptr()), c_void_p(squeeze_10.data_ptr()), c_void_p(primals_11.data_ptr()), c_void_p(buf1158.data_ptr()), c_void_p(buf1159.data_ptr()), c_void_p(buf1160.data_ptr()), c_void_p(buf1161.data_ptr()))
    del convolution_3
    del le_141
    del primals_11
    del squeeze_10
    del unsqueeze_2338
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1162 = aten.convolution_backward(buf1161, getitem_25, primals_10, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_25
    del primals_10
    buf1163 = buf1162[0]
    buf1164 = buf1162[1]
    del buf1162
    buf1165 = buf1159; del buf1159  # reuse
    buf1166 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1167 = empty((14, ), device='cpu', dtype=torch.float32)
    buf1168 = buf1161; del buf1161  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_146(c_void_p(le_142.data_ptr()), c_void_p(buf1120.data_ptr()), c_void_p(convolution_2.data_ptr()), c_void_p(unsqueeze_2350.data_ptr()), c_void_p(squeeze_7.data_ptr()), c_void_p(primals_8.data_ptr()), c_void_p(buf1165.data_ptr()), c_void_p(buf1166.data_ptr()), c_void_p(buf1167.data_ptr()), c_void_p(buf1168.data_ptr()))
    del buf1120
    del buf1166
    del convolution_2
    del le_142
    del primals_8
    del squeeze_7
    del unsqueeze_2350
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1169 = aten.convolution_backward(buf1168, getitem_14, primals_7, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1168
    del getitem_14
    del primals_7
    buf1170 = buf1169[0]
    buf1171 = buf1169[1]
    del buf1169
    buf1172 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 0)  # alias
    buf1173 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 14)  # alias
    buf1174 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 28)  # alias
    buf1175 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 42)  # alias
    buf1176 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 56)  # alias
    buf1177 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 70)  # alias
    buf1178 = reinterpret_tensor(buf1179, (8, 14, 56, 56), (351232, 1, 6272, 112), 84)  # alias
    buf1180 = buf1103; del buf1103  # reuse
    buf1181 = empty((112, ), device='cpu', dtype=torch.float32)
    buf1182 = empty((112, ), device='cpu', dtype=torch.float32)
    buf1183 = buf1179; del buf1179  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_147(c_void_p(buf1183.data_ptr()), c_void_p(buf1170.data_ptr()), c_void_p(buf1163.data_ptr()), c_void_p(buf1156.data_ptr()), c_void_p(buf1149.data_ptr()), c_void_p(buf1142.data_ptr()), c_void_p(buf1135.data_ptr()), c_void_p(buf1128.data_ptr()), c_void_p(le_143.data_ptr()), c_void_p(convolution_1.data_ptr()), c_void_p(unsqueeze_2362.data_ptr()), c_void_p(squeeze_4.data_ptr()), c_void_p(primals_5.data_ptr()), c_void_p(buf1172.data_ptr()), c_void_p(buf1173.data_ptr()), c_void_p(buf1174.data_ptr()), c_void_p(buf1175.data_ptr()), c_void_p(buf1176.data_ptr()), c_void_p(buf1177.data_ptr()), c_void_p(buf1178.data_ptr()), c_void_p(buf1180.data_ptr()), c_void_p(buf1181.data_ptr()), c_void_p(buf1182.data_ptr()))
    del buf1122
    del buf1128
    del buf1135
    del buf1142
    del buf1149
    del buf1156
    del buf1163
    del buf1170
    del buf1172
    del buf1173
    del buf1174
    del buf1175
    del buf1176
    del buf1177
    del buf1178
    del buf1181
    del convolution_1
    del le_143
    del primals_5
    del squeeze_4
    del unsqueeze_2362
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1184 = aten.convolution_backward(buf1183, getitem_2, primals_4, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1183
    del getitem_2
    del primals_4
    buf1185 = buf1184[0]
    buf1186 = buf1184[1]
    del buf1184
    buf1187 = buf1114; del buf1114  # reuse
    cpp_fused_add_148(c_void_p(buf1187.data_ptr()), c_void_p(buf1185.data_ptr()))
    del buf1185
    # Source Nodes: [], Original ATen: [aten.add, aten.max_pool2d_with_indices_backward]
    buf1188 = aten.max_pool2d_with_indices_backward(buf1187, relu, [3, 3], [2, 2], [1, 1], [1, 1], False, getitem_3)
    del buf1187
    del getitem_3
    buf1189 = buf1188
    del buf1188
    buf1190 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1191 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1192 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1193 = buf1189; del buf1189  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_149(c_void_p(buf1193.data_ptr()), c_void_p(relu.data_ptr()), c_void_p(convolution.data_ptr()), c_void_p(unsqueeze_2374.data_ptr()), c_void_p(squeeze_1.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(buf1190.data_ptr()), c_void_p(buf1191.data_ptr()), c_void_p(buf1192.data_ptr()))
    del buf1191
    del convolution
    del primals_2
    del relu
    del squeeze_1
    del unsqueeze_2374
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1194 = aten.convolution_backward(buf1193, primals_897, primals_1, [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False])
    del buf1193
    del primals_1
    del primals_897
    buf1195 = buf1194[1]
    return (buf1195, buf1192, buf1190, buf1186, buf1182, buf1180, buf1171, buf1167, buf1165, buf1164, buf1160, buf1158, buf1157, buf1153, buf1151, buf1150, buf1146, buf1144, buf1143, buf1139, buf1137, buf1136, buf1132, buf1130, buf1129, buf1125, buf1123, buf1121, buf1118, buf1109, buf1115, buf1112, buf1109, buf1108, buf1104, buf1102, buf1092, buf1089, buf1086, buf1085, buf1082, buf1079, buf1078, buf1075, buf1072, buf1071, buf1068, buf1065, buf1064, buf1061, buf1058, buf1057, buf1054, buf1051, buf1050, buf1046, buf1044, buf1043, buf1039, buf1037, buf1035, buf1031, buf1029, buf1019, buf1016, buf1013, buf1012, buf1009, buf1006, buf1005, buf1002, buf999, buf998, buf995, buf992, buf991, buf988, buf985, buf984, buf981, buf978, buf977, buf973, buf971, buf970, buf967, buf964, buf963, buf959, buf957, buf948, buf944, buf942, buf941, buf937, buf935, buf934, buf930, buf928, buf927, buf923, buf921, buf920, buf916, buf914, buf913, buf909, buf907, buf906, buf902, buf900, buf898, buf894, buf886, buf892, buf888, buf886, buf884, buf880, buf878, buf868, buf865, buf862, buf861, buf858, buf855, buf854, buf851, buf848, buf847, buf844, buf841, buf840, buf837, buf834, buf833, buf830, buf827, buf826, buf822, buf820, buf819, buf816, buf813, buf812, buf808, buf806, buf796, buf793, buf790, buf789, buf786, buf783, buf782, buf779, buf776, buf775, buf772, buf769, buf768, buf765, buf762, buf761, buf758, buf755, buf754, buf750, buf748, buf747, buf743, buf741, buf739, buf735, buf733, buf723, buf720, buf717, buf716, buf713, buf710, buf709, buf706, buf703, buf702, buf699, buf696, buf695, buf692, buf689, buf688, buf685, buf682, buf681, buf677, buf675, buf674, buf671, buf668, buf667, buf663, buf661, buf652, buf648, buf646, buf645, buf641, buf639, buf638, buf634, buf632, buf631, buf627, buf625, buf624, buf620, buf618, buf617, buf613, buf611, buf610, buf606, buf604, buf602, buf598, buf590, buf596, buf592, buf590, buf588, buf584, buf582, buf572, buf569, buf566, buf565, buf562, buf559, buf558, buf555, buf552, buf551, buf548, buf545, buf544, buf541, buf538, buf537, buf534, buf531, buf530, buf526, buf524, buf523, buf520, buf517, buf516, buf512, buf510, buf500, buf497, buf494, buf493, buf490, buf487, buf486, buf483, buf480, buf479, buf476, buf473, buf472, buf469, buf466, buf465, buf462, buf459, buf458, buf454, buf452, buf451, buf447, buf445, buf443, buf439, buf437, buf427, buf424, buf421, buf420, buf417, buf414, buf413, buf410, buf407, buf406, buf403, buf400, buf399, buf396, buf393, buf392, buf389, buf386, buf385, buf381, buf379, buf378, buf375, buf372, buf371, buf367, buf365, buf355, buf352, buf349, buf348, buf345, buf342, buf341, buf338, buf335, buf334, buf331, buf328, buf327, buf324, buf321, buf320, buf317, buf314, buf313, buf309, buf307, buf306, buf302, buf300, buf298, buf294, buf292, buf282, buf279, buf276, buf275, buf272, buf269, buf268, buf265, buf262, buf261, buf258, buf255, buf254, buf251, buf248, buf247, buf244, buf241, buf240, buf236, buf234, buf233, buf230, buf227, buf226, buf222, buf220, buf211, buf207, buf205, buf204, buf200, buf198, buf197, buf193, buf191, buf190, buf186, buf184, buf183, buf179, buf177, buf176, buf172, buf170, buf169, buf165, buf163, buf161, buf157, buf149, buf155, buf151, buf149, buf147, buf143, buf141, buf131, buf128, buf125, buf124, buf121, buf118, buf117, buf114, buf111, buf110, buf107, buf104, buf103, buf100, buf97, buf96, buf93, buf90, buf89, buf85, buf83, buf82, buf78, buf75, buf74, buf70, buf68, buf58, buf55, buf52, buf51, buf48, buf45, buf44, buf41, buf38, buf37, buf34, buf31, buf30, buf27, buf24, buf23, buf20, buf17, buf16, buf12, buf10, buf9, buf5, buf3, reinterpret_tensor(buf1, (1000, 2048), (2048, 1), 0), reinterpret_tensor(buf2, (1000, ), (1, ), 0), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((64, 3, 7, 7), (147, 1, 21, 3), device='cpu', dtype=torch.float32)
    primals_2 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((112, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_8 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_11 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_14 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_16 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_20 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_22 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_23 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_26 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((256, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_29 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_32 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((112, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_35 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_37 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_38 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_41 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_43 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_44 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_47 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_50 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_53 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((256, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_59 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_61 = rand_strided((112, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_64 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_65 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_67 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_70 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_71 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_76 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_77 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_80 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((14, 14, 3, 3), (126, 1, 42, 14), device='cpu', dtype=torch.float32)
    primals_83 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    primals_85 = rand_strided((256, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_86 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_88 = rand_strided((224, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_89 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_92 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_95 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_98 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_101 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_104 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_107 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_109 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_110 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((512, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_113 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((512, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_116 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_118 = rand_strided((224, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_119 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    primals_121 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_122 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_125 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_128 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_130 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_131 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_134 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_137 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_140 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((512, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_143 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_145 = rand_strided((224, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_146 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    primals_148 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_149 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_151 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_154 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_155 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_157 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_158 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_160 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_161 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_164 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_166 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_169 = rand_strided((512, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_170 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((224, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_173 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_176 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_179 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_181 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_182 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_185 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_188 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_190 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_191 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((28, 28, 3, 3), (252, 1, 84, 28), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((512, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_197 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_199 = rand_strided((448, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_203 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_206 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_209 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_212 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_214 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_215 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_218 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_220 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_223 = rand_strided((1024, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_224 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_226 = rand_strided((1024, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_227 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((448, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_230 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_233 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_235 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_236 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_238 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_239 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_244 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_245 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_250 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_251 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_253 = rand_strided((1024, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_254 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_256 = rand_strided((448, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_257 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_260 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_262 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_263 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_265 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_266 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_268 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_269 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_272 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_274 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_277 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_278 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((1024, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_281 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((448, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_284 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    primals_286 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_287 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_289 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_290 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_292 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_293 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_296 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_299 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_302 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_304 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_305 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_307 = rand_strided((1024, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_308 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_310 = rand_strided((448, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_311 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_316 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_317 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_319 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_320 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_322 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_323 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_326 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_328 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_331 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_332 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_334 = rand_strided((1024, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_335 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((448, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_338 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    primals_340 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_341 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_343 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_344 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_346 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_347 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_350 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_352 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_353 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_356 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_358 = rand_strided((56, 56, 3, 3), (504, 1, 168, 56), device='cpu', dtype=torch.float32)
    primals_359 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((1024, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_362 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_364 = rand_strided((896, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((896, ), (1, ), device='cpu', dtype=torch.float32)
    primals_367 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_368 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_370 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_371 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_374 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_376 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_377 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_379 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_380 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_382 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_383 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_385 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_386 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_388 = rand_strided((2048, 896, 1, 1), (896, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_389 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_391 = rand_strided((2048, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_392 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_394 = rand_strided((896, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_395 = rand_strided((896, ), (1, ), device='cpu', dtype=torch.float32)
    primals_397 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_398 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_400 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_401 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_403 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_404 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_406 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_407 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_409 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_410 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_412 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_413 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_415 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_416 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_418 = rand_strided((2048, 896, 1, 1), (896, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_419 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_421 = rand_strided((896, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_422 = rand_strided((896, ), (1, ), device='cpu', dtype=torch.float32)
    primals_424 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_425 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_427 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_428 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_430 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_431 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_433 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_434 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_436 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_437 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_439 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_440 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_442 = rand_strided((112, 112, 3, 3), (1008, 1, 336, 112), device='cpu', dtype=torch.float32)
    primals_443 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    primals_445 = rand_strided((2048, 896, 1, 1), (896, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_446 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_897 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    convolution = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    squeeze_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    getitem_2 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    getitem_3 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.int64)
    convolution_1 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    squeeze_4 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_14 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_2 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_7 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_25 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_3 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_10 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_36 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_4 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_13 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_47 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_5 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_16 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_58 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_6 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_19 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_69 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_7 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_22 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_80 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_8 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_25 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_91 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    cat = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_9 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_28 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_10 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_31 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_9 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_11 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    squeeze_34 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_106 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_12 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_37 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_66 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_13 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_40 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_72 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_14 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_43 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_78 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_15 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_46 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_84 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_16 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_49 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_90 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_17 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_52 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_96 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_18 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_55 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    cat_1 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_19 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_58 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_18 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_20 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    squeeze_61 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_196 = rand_strided((8, 14, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_21 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_64 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_118 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_22 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_67 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_124 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_23 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_70 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_130 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_24 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_73 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_136 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_25 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_76 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_142 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_26 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_79 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    add_148 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    convolution_27 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.float32)
    squeeze_82 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.float32)
    cat_2 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.float32)
    convolution_28 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_85 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_27 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_29 = rand_strided((8, 224, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    squeeze_88 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_286 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    convolution_30 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_91 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_297 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    convolution_31 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_94 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_308 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    convolution_32 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_97 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_319 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    convolution_33 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_100 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_330 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    convolution_34 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_103 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_341 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    convolution_35 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_106 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_352 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    convolution_36 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_109 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_363 = rand_strided((8, 28, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.float32)
    cat_3 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    convolution_37 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_112 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_38 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_115 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_36 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_39 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    squeeze_118 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_378 = rand_strided((8, 28, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    convolution_40 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_121 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_221 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_41 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_124 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_227 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_42 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_127 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_233 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_43 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_130 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_239 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_44 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_133 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_245 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_45 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_136 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_251 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_46 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_139 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    cat_4 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    convolution_47 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_142 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_45 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_48 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    squeeze_145 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_468 = rand_strided((8, 28, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    convolution_49 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_148 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_273 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_50 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_151 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_279 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_51 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_154 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_285 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_52 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_157 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_291 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_53 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_160 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_297 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_54 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_163 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_303 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_55 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_166 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    cat_5 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    convolution_56 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_169 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_54 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_57 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    squeeze_172 = rand_strided((224, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_558 = rand_strided((8, 28, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    convolution_58 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_175 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_325 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_59 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_178 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_331 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_60 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_181 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_337 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_61 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_184 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_343 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_62 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_187 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_349 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_63 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_190 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    add_355 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    convolution_64 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.float32)
    squeeze_193 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.float32)
    cat_6 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.float32)
    convolution_65 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_196 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_63 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_66 = rand_strided((8, 448, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    squeeze_199 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_648 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    convolution_67 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_202 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_659 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    convolution_68 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_205 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_670 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    convolution_69 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_208 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_681 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    convolution_70 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_211 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_692 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    convolution_71 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_214 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_703 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    convolution_72 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_217 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_714 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    convolution_73 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_220 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_725 = rand_strided((8, 56, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.float32)
    cat_7 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_74 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_223 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_75 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_226 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_72 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_76 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    squeeze_229 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_740 = rand_strided((8, 56, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_77 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_232 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_428 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_78 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_235 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_434 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_79 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_238 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_440 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_80 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_241 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_446 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_81 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_244 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_452 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_82 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_247 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_458 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_83 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_250 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    cat_8 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_84 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_253 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_81 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_85 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    squeeze_256 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_830 = rand_strided((8, 56, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_86 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_259 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_480 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_87 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_262 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_486 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_88 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_265 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_492 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_89 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_268 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_498 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_90 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_271 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_504 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_91 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_274 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_510 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_92 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_277 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    cat_9 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_93 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_280 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_90 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_94 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    squeeze_283 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_920 = rand_strided((8, 56, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_95 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_286 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_532 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_96 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_289 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_538 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_97 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_292 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_544 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_98 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_295 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_550 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_99 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_298 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_556 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_100 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_301 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_562 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_101 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_304 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    cat_10 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_102 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_307 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_99 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_103 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    squeeze_310 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1010 = rand_strided((8, 56, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_104 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_313 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_584 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_105 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_316 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_590 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_106 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_319 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_596 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_107 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_322 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_602 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_108 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_325 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_608 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_109 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_328 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_614 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_110 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_331 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    cat_11 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_111 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_334 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_108 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_112 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    squeeze_337 = rand_strided((448, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1100 = rand_strided((8, 56, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_113 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_340 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_636 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_114 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_343 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_642 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_115 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_346 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_648 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_116 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_349 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_654 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_117 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_352 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_660 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_118 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_355 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    add_666 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    convolution_119 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.float32)
    squeeze_358 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.float32)
    cat_12 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.float32)
    convolution_120 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_361 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_117 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_121 = rand_strided((8, 896, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    squeeze_364 = rand_strided((896, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1190 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    convolution_122 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_367 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1201 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    convolution_123 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_370 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1212 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    convolution_124 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_373 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1223 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    convolution_125 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_376 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1234 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    convolution_126 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_379 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1245 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    convolution_127 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_382 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1256 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    convolution_128 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_385 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1267 = rand_strided((8, 112, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.float32)
    cat_13 = rand_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    convolution_129 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_388 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_130 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_391 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    relu_126 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    convolution_131 = rand_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    squeeze_394 = rand_strided((896, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1282 = rand_strided((8, 112, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    convolution_132 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_397 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_739 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_133 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_400 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_745 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_134 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_403 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_751 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_135 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_406 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_757 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_136 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_409 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_763 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_137 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_412 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_769 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_138 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_415 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    cat_14 = rand_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    convolution_139 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_418 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    relu_135 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    convolution_140 = rand_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    squeeze_421 = rand_strided((896, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_1372 = rand_strided((8, 112, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    convolution_141 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_424 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_791 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_142 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_427 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_797 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_143 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_430 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_803 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_144 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_433 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_809 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_145 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_436 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_815 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_146 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_439 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    add_821 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    convolution_147 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.float32)
    squeeze_442 = rand_strided((112, ), (1, ), device='cpu', dtype=torch.float32)
    cat_15 = rand_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.float32)
    convolution_148 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_445 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    view = rand_strided((8, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_1 = rand_strided((1000, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    le = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.bool)
    unsqueeze_598 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_1 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_610 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_2 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_622 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_3 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_634 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_4 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_646 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_5 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_658 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_6 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_670 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_7 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_682 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_8 = rand_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.bool)
    unsqueeze_694 = rand_strided((1, 896, 1, 1), (896, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_706 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_10 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_718 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_11 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_730 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_12 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_742 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_13 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_754 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_14 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_766 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_15 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_778 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_16 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_790 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_17 = rand_strided((8, 896, 7, 7), (43904, 1, 6272, 896), device='cpu', dtype=torch.bool)
    unsqueeze_802 = rand_strided((1, 896, 1, 1), (896, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_814 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_826 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_19 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_838 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_20 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_850 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_21 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_862 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_22 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_874 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_23 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_886 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_24 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_898 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_25 = rand_strided((8, 112, 7, 7), (5488, 1, 784, 112), device='cpu', dtype=torch.bool)
    unsqueeze_910 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_26 = rand_strided((8, 896, 14, 14), (175616, 1, 12544, 896), device='cpu', dtype=torch.bool)
    unsqueeze_922 = rand_strided((1, 896, 1, 1), (896, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_934 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_28 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_946 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_29 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_958 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_30 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_970 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_31 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_982 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_32 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_994 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_33 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1006 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_34 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1018 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_35 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.bool)
    unsqueeze_1030 = rand_strided((1, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1042 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_37 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1054 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_38 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1066 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_39 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1078 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_40 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1090 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_41 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1102 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_42 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1114 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_43 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1126 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_44 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.bool)
    unsqueeze_1138 = rand_strided((1, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1150 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_46 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1162 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_47 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1174 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_48 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1186 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_49 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1198 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_50 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1210 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_51 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1222 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_52 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1234 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_53 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.bool)
    unsqueeze_1246 = rand_strided((1, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1258 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_55 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1270 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_56 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1282 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_57 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1294 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_58 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1306 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_59 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1318 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_60 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1330 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_61 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1342 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_62 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.bool)
    unsqueeze_1354 = rand_strided((1, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1366 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_64 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1378 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_65 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1390 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_66 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1402 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_67 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1414 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_68 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1426 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_69 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1438 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_70 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1450 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_71 = rand_strided((8, 448, 14, 14), (87808, 1, 6272, 448), device='cpu', dtype=torch.bool)
    unsqueeze_1462 = rand_strided((1, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1474 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1486 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_73 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1498 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_74 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1510 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_75 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1522 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_76 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1534 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_77 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1546 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_78 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1558 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_79 = rand_strided((8, 56, 14, 14), (10976, 1, 784, 56), device='cpu', dtype=torch.bool)
    unsqueeze_1570 = rand_strided((1, 56, 1, 1), (56, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_80 = rand_strided((8, 448, 28, 28), (351232, 1, 12544, 448), device='cpu', dtype=torch.bool)
    unsqueeze_1582 = rand_strided((1, 448, 1, 1), (448, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1594 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_82 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1606 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_83 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1618 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_84 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1630 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_85 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1642 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_86 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1654 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_87 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1666 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_88 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1678 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_89 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.bool)
    unsqueeze_1690 = rand_strided((1, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1702 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_91 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1714 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_92 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1726 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_93 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1738 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_94 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1750 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_95 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1762 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_96 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1774 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_97 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1786 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_98 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.bool)
    unsqueeze_1798 = rand_strided((1, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1810 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_100 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1822 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_101 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1834 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_102 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1846 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_103 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1858 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_104 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1870 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_105 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1882 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_106 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1894 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_107 = rand_strided((8, 224, 28, 28), (175616, 1, 6272, 224), device='cpu', dtype=torch.bool)
    unsqueeze_1906 = rand_strided((1, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1918 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1930 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_109 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1942 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_110 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1954 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_111 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1966 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_112 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1978 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_113 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_1990 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_114 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_2002 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_115 = rand_strided((8, 28, 28, 28), (21952, 1, 784, 28), device='cpu', dtype=torch.bool)
    unsqueeze_2014 = rand_strided((1, 28, 1, 1), (28, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_116 = rand_strided((8, 224, 56, 56), (702464, 1, 12544, 224), device='cpu', dtype=torch.bool)
    unsqueeze_2026 = rand_strided((1, 224, 1, 1), (224, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2038 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_118 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2050 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_119 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2062 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_120 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2074 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_121 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2086 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_122 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2098 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_123 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2110 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_124 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2122 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_125 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.bool)
    unsqueeze_2134 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2146 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_127 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2158 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_128 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2170 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_129 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2182 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_130 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2194 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_131 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2206 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_132 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2218 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_133 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2230 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_134 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.bool)
    unsqueeze_2242 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2254 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2266 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_136 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2278 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_137 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2290 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_138 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2302 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_139 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2314 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_140 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2326 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_141 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2338 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_142 = rand_strided((8, 14, 56, 56), (43904, 1, 784, 14), device='cpu', dtype=torch.bool)
    unsqueeze_2350 = rand_strided((1, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_143 = rand_strided((8, 112, 56, 56), (351232, 1, 6272, 112), device='cpu', dtype=torch.bool)
    unsqueeze_2362 = rand_strided((1, 112, 1, 1), (112, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2374 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_2, primals_4, primals_5, primals_7, primals_8, primals_10, primals_11, primals_13, primals_14, primals_16, primals_17, primals_19, primals_20, primals_22, primals_23, primals_25, primals_26, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_37, primals_38, primals_40, primals_41, primals_43, primals_44, primals_46, primals_47, primals_49, primals_50, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_61, primals_62, primals_64, primals_65, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_76, primals_77, primals_79, primals_80, primals_82, primals_83, primals_85, primals_86, primals_88, primals_89, primals_91, primals_92, primals_94, primals_95, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_106, primals_107, primals_109, primals_110, primals_112, primals_113, primals_115, primals_116, primals_118, primals_119, primals_121, primals_122, primals_124, primals_125, primals_127, primals_128, primals_130, primals_131, primals_133, primals_134, primals_136, primals_137, primals_139, primals_140, primals_142, primals_143, primals_145, primals_146, primals_148, primals_149, primals_151, primals_152, primals_154, primals_155, primals_157, primals_158, primals_160, primals_161, primals_163, primals_164, primals_166, primals_167, primals_169, primals_170, primals_172, primals_173, primals_175, primals_176, primals_178, primals_179, primals_181, primals_182, primals_184, primals_185, primals_187, primals_188, primals_190, primals_191, primals_193, primals_194, primals_196, primals_197, primals_199, primals_200, primals_202, primals_203, primals_205, primals_206, primals_208, primals_209, primals_211, primals_212, primals_214, primals_215, primals_217, primals_218, primals_220, primals_221, primals_223, primals_224, primals_226, primals_227, primals_229, primals_230, primals_232, primals_233, primals_235, primals_236, primals_238, primals_239, primals_241, primals_242, primals_244, primals_245, primals_247, primals_248, primals_250, primals_251, primals_253, primals_254, primals_256, primals_257, primals_259, primals_260, primals_262, primals_263, primals_265, primals_266, primals_268, primals_269, primals_271, primals_272, primals_274, primals_275, primals_277, primals_278, primals_280, primals_281, primals_283, primals_284, primals_286, primals_287, primals_289, primals_290, primals_292, primals_293, primals_295, primals_296, primals_298, primals_299, primals_301, primals_302, primals_304, primals_305, primals_307, primals_308, primals_310, primals_311, primals_313, primals_314, primals_316, primals_317, primals_319, primals_320, primals_322, primals_323, primals_325, primals_326, primals_328, primals_329, primals_331, primals_332, primals_334, primals_335, primals_337, primals_338, primals_340, primals_341, primals_343, primals_344, primals_346, primals_347, primals_349, primals_350, primals_352, primals_353, primals_355, primals_356, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_367, primals_368, primals_370, primals_371, primals_373, primals_374, primals_376, primals_377, primals_379, primals_380, primals_382, primals_383, primals_385, primals_386, primals_388, primals_389, primals_391, primals_392, primals_394, primals_395, primals_397, primals_398, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_409, primals_410, primals_412, primals_413, primals_415, primals_416, primals_418, primals_419, primals_421, primals_422, primals_424, primals_425, primals_427, primals_428, primals_430, primals_431, primals_433, primals_434, primals_436, primals_437, primals_439, primals_440, primals_442, primals_443, primals_445, primals_446, primals_897, convolution, squeeze_1, relu, getitem_2, getitem_3, convolution_1, squeeze_4, getitem_14, convolution_2, squeeze_7, getitem_25, convolution_3, squeeze_10, getitem_36, convolution_4, squeeze_13, getitem_47, convolution_5, squeeze_16, getitem_58, convolution_6, squeeze_19, getitem_69, convolution_7, squeeze_22, getitem_80, convolution_8, squeeze_25, getitem_91, cat, convolution_9, squeeze_28, convolution_10, squeeze_31, relu_9, convolution_11, squeeze_34, getitem_106, convolution_12, squeeze_37, add_66, convolution_13, squeeze_40, add_72, convolution_14, squeeze_43, add_78, convolution_15, squeeze_46, add_84, convolution_16, squeeze_49, add_90, convolution_17, squeeze_52, add_96, convolution_18, squeeze_55, cat_1, convolution_19, squeeze_58, relu_18, convolution_20, squeeze_61, getitem_196, convolution_21, squeeze_64, add_118, convolution_22, squeeze_67, add_124, convolution_23, squeeze_70, add_130, convolution_24, squeeze_73, add_136, convolution_25, squeeze_76, add_142, convolution_26, squeeze_79, add_148, convolution_27, squeeze_82, cat_2, convolution_28, squeeze_85, relu_27, convolution_29, squeeze_88, getitem_286, convolution_30, squeeze_91, getitem_297, convolution_31, squeeze_94, getitem_308, convolution_32, squeeze_97, getitem_319, convolution_33, squeeze_100, getitem_330, convolution_34, squeeze_103, getitem_341, convolution_35, squeeze_106, getitem_352, convolution_36, squeeze_109, getitem_363, cat_3, convolution_37, squeeze_112, convolution_38, squeeze_115, relu_36, convolution_39, squeeze_118, getitem_378, convolution_40, squeeze_121, add_221, convolution_41, squeeze_124, add_227, convolution_42, squeeze_127, add_233, convolution_43, squeeze_130, add_239, convolution_44, squeeze_133, add_245, convolution_45, squeeze_136, add_251, convolution_46, squeeze_139, cat_4, convolution_47, squeeze_142, relu_45, convolution_48, squeeze_145, getitem_468, convolution_49, squeeze_148, add_273, convolution_50, squeeze_151, add_279, convolution_51, squeeze_154, add_285, convolution_52, squeeze_157, add_291, convolution_53, squeeze_160, add_297, convolution_54, squeeze_163, add_303, convolution_55, squeeze_166, cat_5, convolution_56, squeeze_169, relu_54, convolution_57, squeeze_172, getitem_558, convolution_58, squeeze_175, add_325, convolution_59, squeeze_178, add_331, convolution_60, squeeze_181, add_337, convolution_61, squeeze_184, add_343, convolution_62, squeeze_187, add_349, convolution_63, squeeze_190, add_355, convolution_64, squeeze_193, cat_6, convolution_65, squeeze_196, relu_63, convolution_66, squeeze_199, getitem_648, convolution_67, squeeze_202, getitem_659, convolution_68, squeeze_205, getitem_670, convolution_69, squeeze_208, getitem_681, convolution_70, squeeze_211, getitem_692, convolution_71, squeeze_214, getitem_703, convolution_72, squeeze_217, getitem_714, convolution_73, squeeze_220, getitem_725, cat_7, convolution_74, squeeze_223, convolution_75, squeeze_226, relu_72, convolution_76, squeeze_229, getitem_740, convolution_77, squeeze_232, add_428, convolution_78, squeeze_235, add_434, convolution_79, squeeze_238, add_440, convolution_80, squeeze_241, add_446, convolution_81, squeeze_244, add_452, convolution_82, squeeze_247, add_458, convolution_83, squeeze_250, cat_8, convolution_84, squeeze_253, relu_81, convolution_85, squeeze_256, getitem_830, convolution_86, squeeze_259, add_480, convolution_87, squeeze_262, add_486, convolution_88, squeeze_265, add_492, convolution_89, squeeze_268, add_498, convolution_90, squeeze_271, add_504, convolution_91, squeeze_274, add_510, convolution_92, squeeze_277, cat_9, convolution_93, squeeze_280, relu_90, convolution_94, squeeze_283, getitem_920, convolution_95, squeeze_286, add_532, convolution_96, squeeze_289, add_538, convolution_97, squeeze_292, add_544, convolution_98, squeeze_295, add_550, convolution_99, squeeze_298, add_556, convolution_100, squeeze_301, add_562, convolution_101, squeeze_304, cat_10, convolution_102, squeeze_307, relu_99, convolution_103, squeeze_310, getitem_1010, convolution_104, squeeze_313, add_584, convolution_105, squeeze_316, add_590, convolution_106, squeeze_319, add_596, convolution_107, squeeze_322, add_602, convolution_108, squeeze_325, add_608, convolution_109, squeeze_328, add_614, convolution_110, squeeze_331, cat_11, convolution_111, squeeze_334, relu_108, convolution_112, squeeze_337, getitem_1100, convolution_113, squeeze_340, add_636, convolution_114, squeeze_343, add_642, convolution_115, squeeze_346, add_648, convolution_116, squeeze_349, add_654, convolution_117, squeeze_352, add_660, convolution_118, squeeze_355, add_666, convolution_119, squeeze_358, cat_12, convolution_120, squeeze_361, relu_117, convolution_121, squeeze_364, getitem_1190, convolution_122, squeeze_367, getitem_1201, convolution_123, squeeze_370, getitem_1212, convolution_124, squeeze_373, getitem_1223, convolution_125, squeeze_376, getitem_1234, convolution_126, squeeze_379, getitem_1245, convolution_127, squeeze_382, getitem_1256, convolution_128, squeeze_385, getitem_1267, cat_13, convolution_129, squeeze_388, convolution_130, squeeze_391, relu_126, convolution_131, squeeze_394, getitem_1282, convolution_132, squeeze_397, add_739, convolution_133, squeeze_400, add_745, convolution_134, squeeze_403, add_751, convolution_135, squeeze_406, add_757, convolution_136, squeeze_409, add_763, convolution_137, squeeze_412, add_769, convolution_138, squeeze_415, cat_14, convolution_139, squeeze_418, relu_135, convolution_140, squeeze_421, getitem_1372, convolution_141, squeeze_424, add_791, convolution_142, squeeze_427, add_797, convolution_143, squeeze_430, add_803, convolution_144, squeeze_433, add_809, convolution_145, squeeze_436, add_815, convolution_146, squeeze_439, add_821, convolution_147, squeeze_442, cat_15, convolution_148, squeeze_445, view, permute_1, le, unsqueeze_598, le_1, unsqueeze_610, le_2, unsqueeze_622, le_3, unsqueeze_634, le_4, unsqueeze_646, le_5, unsqueeze_658, le_6, unsqueeze_670, le_7, unsqueeze_682, le_8, unsqueeze_694, unsqueeze_706, le_10, unsqueeze_718, le_11, unsqueeze_730, le_12, unsqueeze_742, le_13, unsqueeze_754, le_14, unsqueeze_766, le_15, unsqueeze_778, le_16, unsqueeze_790, le_17, unsqueeze_802, unsqueeze_814, unsqueeze_826, le_19, unsqueeze_838, le_20, unsqueeze_850, le_21, unsqueeze_862, le_22, unsqueeze_874, le_23, unsqueeze_886, le_24, unsqueeze_898, le_25, unsqueeze_910, le_26, unsqueeze_922, unsqueeze_934, le_28, unsqueeze_946, le_29, unsqueeze_958, le_30, unsqueeze_970, le_31, unsqueeze_982, le_32, unsqueeze_994, le_33, unsqueeze_1006, le_34, unsqueeze_1018, le_35, unsqueeze_1030, unsqueeze_1042, le_37, unsqueeze_1054, le_38, unsqueeze_1066, le_39, unsqueeze_1078, le_40, unsqueeze_1090, le_41, unsqueeze_1102, le_42, unsqueeze_1114, le_43, unsqueeze_1126, le_44, unsqueeze_1138, unsqueeze_1150, le_46, unsqueeze_1162, le_47, unsqueeze_1174, le_48, unsqueeze_1186, le_49, unsqueeze_1198, le_50, unsqueeze_1210, le_51, unsqueeze_1222, le_52, unsqueeze_1234, le_53, unsqueeze_1246, unsqueeze_1258, le_55, unsqueeze_1270, le_56, unsqueeze_1282, le_57, unsqueeze_1294, le_58, unsqueeze_1306, le_59, unsqueeze_1318, le_60, unsqueeze_1330, le_61, unsqueeze_1342, le_62, unsqueeze_1354, unsqueeze_1366, le_64, unsqueeze_1378, le_65, unsqueeze_1390, le_66, unsqueeze_1402, le_67, unsqueeze_1414, le_68, unsqueeze_1426, le_69, unsqueeze_1438, le_70, unsqueeze_1450, le_71, unsqueeze_1462, unsqueeze_1474, unsqueeze_1486, le_73, unsqueeze_1498, le_74, unsqueeze_1510, le_75, unsqueeze_1522, le_76, unsqueeze_1534, le_77, unsqueeze_1546, le_78, unsqueeze_1558, le_79, unsqueeze_1570, le_80, unsqueeze_1582, unsqueeze_1594, le_82, unsqueeze_1606, le_83, unsqueeze_1618, le_84, unsqueeze_1630, le_85, unsqueeze_1642, le_86, unsqueeze_1654, le_87, unsqueeze_1666, le_88, unsqueeze_1678, le_89, unsqueeze_1690, unsqueeze_1702, le_91, unsqueeze_1714, le_92, unsqueeze_1726, le_93, unsqueeze_1738, le_94, unsqueeze_1750, le_95, unsqueeze_1762, le_96, unsqueeze_1774, le_97, unsqueeze_1786, le_98, unsqueeze_1798, unsqueeze_1810, le_100, unsqueeze_1822, le_101, unsqueeze_1834, le_102, unsqueeze_1846, le_103, unsqueeze_1858, le_104, unsqueeze_1870, le_105, unsqueeze_1882, le_106, unsqueeze_1894, le_107, unsqueeze_1906, unsqueeze_1918, unsqueeze_1930, le_109, unsqueeze_1942, le_110, unsqueeze_1954, le_111, unsqueeze_1966, le_112, unsqueeze_1978, le_113, unsqueeze_1990, le_114, unsqueeze_2002, le_115, unsqueeze_2014, le_116, unsqueeze_2026, unsqueeze_2038, le_118, unsqueeze_2050, le_119, unsqueeze_2062, le_120, unsqueeze_2074, le_121, unsqueeze_2086, le_122, unsqueeze_2098, le_123, unsqueeze_2110, le_124, unsqueeze_2122, le_125, unsqueeze_2134, unsqueeze_2146, le_127, unsqueeze_2158, le_128, unsqueeze_2170, le_129, unsqueeze_2182, le_130, unsqueeze_2194, le_131, unsqueeze_2206, le_132, unsqueeze_2218, le_133, unsqueeze_2230, le_134, unsqueeze_2242, unsqueeze_2254, unsqueeze_2266, le_136, unsqueeze_2278, le_137, unsqueeze_2290, le_138, unsqueeze_2302, le_139, unsqueeze_2314, le_140, unsqueeze_2326, le_141, unsqueeze_2338, le_142, unsqueeze_2350, le_143, unsqueeze_2362, unsqueeze_2374, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('res2net50_14w_8s', benchmark_compiled_module)
