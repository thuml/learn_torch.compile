
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_as_strided_scatter_div_mul_native_layer_norm_backward_sum_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr1 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            tmp0.store(out_ptr1 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2 + (512L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp1 = static_cast<float>(196.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 / tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x1 + (196L*x0))] = static_cast<float>(tmp_acc0);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(512L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = out_ptr1[static_cast<long>(x3 + (512L*x0))];
                                auto tmp3 = in_ptr2[static_cast<long>(x3)];
                                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (14L*x3) + (7168L*x1) + (100352L*x0)));
                                auto tmp1 = static_cast<float>(196.0);
                                auto tmp2 = tmp0 / tmp1;
                                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                                auto tmp6 = at::vec::Vectorized<float>(tmp4);
                                auto tmp7 = tmp6 * tmp5;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            }
                            tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x2 + (14L*x1) + (196L*x0)));
                        }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            float tmp_acc0 = 0;
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(512L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = out_ptr1[static_cast<long>(x3 + (512L*x0))];
                                auto tmp3 = in_ptr2[static_cast<long>(x3)];
                                auto tmp5 = in_ptr3[static_cast<long>(x2 + (14L*x3) + (7168L*x1) + (100352L*x0))];
                                auto tmp1 = static_cast<float>(196.0);
                                auto tmp2 = tmp0 / tmp1;
                                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                                auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                                tmp_acc0 = tmp_acc0 + tmp6;
                            }
                            out_ptr3[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp_acc0;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(8L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = out_ptr1[static_cast<long>(x0 + (512L*x1))];
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x3 + (14L*x0) + (7168L*x2) + (100352L*x1)));
                                auto tmp1 = static_cast<float>(196.0);
                                auto tmp2 = tmp0 / tmp1;
                                auto tmp4 = at::vec::Vectorized<float>(tmp2);
                                auto tmp5 = tmp4 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(8L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = out_ptr1[static_cast<long>(x0 + (512L*x1))];
                                auto tmp3 = in_ptr3[static_cast<long>(x3 + (14L*x0) + (7168L*x2) + (100352L*x1))];
                                auto tmp1 = static_cast<float>(196.0);
                                auto tmp2 = tmp0 / tmp1;
                                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                                tmp_acc0 = tmp_acc0 + tmp4;
                            }
                        }
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr4[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (512L*x1)));
                            auto tmp1 = static_cast<float>(196.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 / tmp2;
                            tmp_acc0_vec = tmp_acc0_vec + tmp3;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(8L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x3 + (14L*x1) + (196L*x0)));
                            auto tmp1 = out_ptr1[static_cast<long>(x2 + (512L*x0))];
                            auto tmp4 = in_ptr2[static_cast<long>(x2)];
                            auto tmp8 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = out_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (196L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x3 + (14L*x2) + (7168L*x1) + (100352L*x0)));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x3 + (14L*x1) + (196L*x0)));
                            auto tmp2 = static_cast<float>(196.0);
                            auto tmp3 = tmp1 / tmp2;
                            auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                            auto tmp6 = static_cast<float>(512.0);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            auto tmp9 = at::vec::Vectorized<float>(tmp7);
                            auto tmp10 = tmp9 - tmp8;
                            auto tmp13 = tmp11 * tmp12;
                            auto tmp14 = tmp10 - tmp13;
                            auto tmp15 = tmp0 * tmp14;
                            tmp15.store(out_ptr6 + static_cast<long>(x3 + (14L*x2) + (7168L*x1) + (100352L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(8L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x3 + (14L*x1) + (196L*x0))];
                            auto tmp1 = out_ptr1[static_cast<long>(x2 + (512L*x0))];
                            auto tmp4 = in_ptr2[static_cast<long>(x2)];
                            auto tmp8 = out_ptr2[static_cast<long>(x1 + (14L*x3) + (196L*x0))];
                            auto tmp10 = in_ptr3[static_cast<long>(x3 + (14L*x2) + (7168L*x1) + (100352L*x0))];
                            auto tmp11 = out_ptr3[static_cast<long>(x3 + (14L*x1) + (196L*x0))];
                            auto tmp2 = static_cast<float>(196.0);
                            auto tmp3 = tmp1 / tmp2;
                            auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                            auto tmp6 = static_cast<float>(512.0);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp13 = decltype(tmp9)(tmp9 - tmp12);
                            auto tmp14 = decltype(tmp0)(tmp0 * tmp13);
                            out_ptr6[static_cast<long>(x3 + (14L*x2) + (7168L*x1) + (100352L*x0))] = tmp14;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        for (long x0_inner = 0; x0_inner < 8; x0_inner++)
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = out_ptr6[static_cast<long>((14L*x2) + (14L*x2_inner) + (7168L*(static_cast<long>(x1) % static_cast<long>(14L))) + (100352L*x0) + (100352L*x0_inner) + (c10::div_floor_integer(x1, 14L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = in_ptr5[static_cast<long>(x0 + x0_inner)];
                            auto tmp2 = static_cast<float>(0.5);
                            auto tmp3 = tmp1 / tmp2;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp0 * tmp4;
                            tmp5.store(out_ptr7 + static_cast<long>(x2 + (512L*x1) + (100352L*x0) + (100352L*x0_inner)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr4[static_cast<long>((14L*x2) + (14L*x2_inner) + (7168L*(static_cast<long>((x1 + x1_inner)) % static_cast<long>(14L))) + (100352L*x0) + (c10::div_floor_integer((x1 + x1_inner), 14L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = in_ptr5[static_cast<long>(x1 + x1_inner + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (100352L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp8 = out_ptr1[static_cast<long>(x1 + x1_inner + (196L*x0))];
                            auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (100352L*x0)));
                            auto tmp12 = out_ptr2[static_cast<long>(x1 + x1_inner + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(512.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr4[static_cast<long>((14L*x2) + (7168L*(static_cast<long>(x1) % static_cast<long>(14L))) + (100352L*x0) + (c10::div_floor_integer(x1, 14L)))];
                        auto tmp1 = in_ptr5[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = in_out_ptr0[static_cast<long>(x2 + (512L*x1) + (100352L*x0))];
                        auto tmp3 = in_ptr2[static_cast<long>(x2)];
                        auto tmp7 = out_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp9 = in_ptr3[static_cast<long>(x2 + (512L*x1) + (100352L*x0))];
                        auto tmp10 = out_ptr2[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = static_cast<float>(512.0);
                        auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 - tmp11);
                        auto tmp13 = decltype(tmp1)(tmp1 * tmp12);
                        auto tmp14 = decltype(tmp0)(tmp0 + tmp13);
                        in_out_ptr0[static_cast<long>(x2 + (512L*x1) + (100352L*x0))] = tmp14;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.5);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.52173912525177);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.52173912525177);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.54347825050354);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.54347825050354);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.5652174055576324);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.5652174055576324);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.5869565308094025);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.5869565308094025);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6086956560611725);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6086956560611725);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6304347813129425);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6304347813129425);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6521739065647125);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6521739065647125);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6739130616188049);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.6739130616188049);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.695652186870575);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.695652186870575);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.717391312122345);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.717391312122345);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.739130437374115);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.739130437374115);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.760869562625885);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.760869562625885);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.782608687877655);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.782608687877655);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8043478280305862);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8043478280305862);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8260869532823563);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8260869532823563);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8478260785341263);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8478260785341263);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8695652186870575);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8695652186870575);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8913043439388275);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.8913043439388275);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.9130434766411781);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (100352L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.9130434766411781);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (100352L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6272L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (16L*x2) + (100352L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (6272L*x1) + (6272L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp16[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0)), static_cast<long>(196L), tmp16, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp4));
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                        auto tmp9 = tmp6 * tmp8;
                                        return tmp9;
                                    }
                                    ;
                                    auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp11 = tmp0 >= tmp3;
                                    auto tmp12 = static_cast<int>(16);
                                    auto tmp13 = tmp0 < tmp12;
                                    auto tmp14 = tmp11 & tmp13;
                                    auto tmp15 = [&]
                                    {
                                        auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x3_inner));
                                        auto tmp18 = static_cast<float>(0.42044820762685725);
                                        auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                        auto tmp20 = tmp17 * tmp19;
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                    auto tmp22 = tmp0 >= tmp12;
                                    auto tmp23 = static_cast<int>(24);
                                    auto tmp24 = tmp0 < tmp23;
                                    auto tmp25 = [&]
                                    {
                                        auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-1605632L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (100352L*x1) + (802816L*x0)), to_float_mask(tmp22));
                                        return tmp26;
                                    }
                                    ;
                                    auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                    auto tmp28 = to_float_mask(tmp14);
                                    auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                    auto tmp30 = to_float_mask(tmp4);
                                    auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                    tmp31.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (1536L*x3_inner) + (301056L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp7 = static_cast<float>(0.42044820762685725);
                                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp10 = tmp0 >= tmp3;
                                auto tmp11 = static_cast<long>(16);
                                auto tmp12 = tmp0 < tmp11;
                                auto tmp13 = tmp10 & tmp12;
                                auto tmp14 = [&]
                                {
                                    auto tmp15 = in_ptr1[static_cast<long>((-802816L) + x3 + (196L*x4) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    auto tmp16 = static_cast<float>(0.42044820762685725);
                                    auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                    return tmp17;
                                }
                                ;
                                auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                auto tmp19 = tmp0 >= tmp11;
                                auto tmp20 = static_cast<long>(24);
                                auto tmp21 = tmp0 < tmp20;
                                auto tmp22 = [&]
                                {
                                    auto tmp23 = in_ptr2[static_cast<long>((-1605632L) + x4 + (32L*x3) + (6272L*x2) + (100352L*x1) + (802816L*x0))];
                                    return tmp23;
                                }
                                ;
                                auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                auto tmp25 = tmp13 ? tmp18 : tmp24;
                                auto tmp26 = tmp4 ? tmp9 : tmp25;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (512L*x0) + (1536L*x3) + (301056L*x1))] = tmp26;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (100352L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_native_layer_norm_backward_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            float tmp_acc1 = 0;
                            at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(512L); x3+=static_cast<long>(8L))
                            {
                                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3 + (512L*x2) + (14336L*x1) + (401408L*x0)));
                                auto tmp16 = in_ptr3[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                                auto tmp19 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                                auto tmp0 = c10::convert<int>(x1);
                                auto tmp1 = static_cast<int>(29);
                                auto tmp2 = tmp0 < tmp1;
                                auto tmp3 = c10::convert<int>(x2);
                                auto tmp4 = tmp3 < tmp1;
                                auto tmp5 = tmp2 & tmp4;
                                auto tmp6 = [&]
                                {
                                    auto tmp7 = masked_load(in_ptr0 + static_cast<long>(x3 + (512L*x2) + (14848L*x1) + (430592L*x0)), to_float_mask(tmp5));
                                    return tmp7;
                                }
                                ;
                                auto tmp8 = decltype(tmp6())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp6(), to_float_mask(tmp5));
                                auto tmp10 = tmp8 * tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x3 + (512L*x2) + (14848L*x1) + (430592L*x0)), to_float_mask(tmp5));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp5));
                                auto tmp14 = tmp13 * tmp9;
                                auto tmp17 = at::vec::Vectorized<float>(tmp16);
                                auto tmp18 = tmp15 - tmp17;
                                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                                auto tmp21 = tmp18 * tmp20;
                                auto tmp22 = tmp14 * tmp21;
                                tmp_acc0_vec = tmp_acc0_vec + tmp10;
                                tmp_acc1_vec = tmp_acc1_vec + tmp22;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                            tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                            out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = static_cast<float>(tmp_acc1);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x3) + (14336L*x2) + (401408L*x1)));
                                auto tmp10 = in_ptr3[static_cast<long>(x2 + (28L*x3) + (784L*x1))];
                                auto tmp13 = in_ptr4[static_cast<long>(x2 + (28L*x3) + (784L*x1))];
                                auto tmp0 = c10::convert<int>(x2);
                                auto tmp1 = static_cast<int>(29);
                                auto tmp2 = tmp0 < tmp1;
                                auto tmp3 = c10::convert<int>(x3);
                                auto tmp4 = tmp3 < tmp1;
                                auto tmp5 = tmp2 & tmp4;
                                auto tmp6 = [&]
                                {
                                    auto tmp7 = masked_load(in_ptr0 + static_cast<long>(x0 + (512L*x3) + (14848L*x2) + (430592L*x1)), to_float_mask(tmp5));
                                    return tmp7;
                                }
                                ;
                                auto tmp8 = decltype(tmp6())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp6(), to_float_mask(tmp5));
                                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                                auto tmp12 = tmp9 - tmp11;
                                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                                auto tmp15 = tmp12 * tmp14;
                                auto tmp16 = tmp8 * tmp15;
                                auto tmp17 = [&]
                                {
                                    auto tmp18 = masked_load(in_ptr0 + static_cast<long>(x0 + (512L*x3) + (14848L*x2) + (430592L*x1)), to_float_mask(tmp5));
                                    return tmp18;
                                }
                                ;
                                auto tmp19 = decltype(tmp17())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp17(), to_float_mask(tmp5));
                                tmp_acc0_vec = tmp_acc0_vec + tmp16;
                                tmp_acc1_vec = tmp_acc1_vec + tmp19;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(512L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp16 = out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3 + (512L*x2) + (14336L*x1) + (401408L*x0)));
                            auto tmp20 = in_ptr3[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp25 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp1 = static_cast<float>(512.0);
                            auto tmp2 = tmp0 / tmp1;
                            auto tmp3 = c10::convert<int>(x1);
                            auto tmp4 = static_cast<int>(29);
                            auto tmp5 = tmp3 < tmp4;
                            auto tmp6 = c10::convert<int>(x2);
                            auto tmp7 = tmp6 < tmp4;
                            auto tmp8 = tmp5 & tmp7;
                            auto tmp9 = [&]
                            {
                                auto tmp10 = masked_load(in_ptr0 + static_cast<long>(x3 + (512L*x2) + (14848L*x1) + (430592L*x0)), to_float_mask(tmp8));
                                return tmp10;
                            }
                            ;
                            auto tmp11 = decltype(tmp9())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp9(), to_float_mask(tmp8));
                            auto tmp13 = tmp11 * tmp12;
                            auto tmp14 = at::vec::Vectorized<float>(tmp1);
                            auto tmp15 = tmp13 * tmp14;
                            auto tmp17 = at::vec::Vectorized<float>(tmp16);
                            auto tmp18 = tmp15 - tmp17;
                            auto tmp21 = at::vec::Vectorized<float>(tmp20);
                            auto tmp22 = tmp19 - tmp21;
                            auto tmp23 = at::vec::Vectorized<float>(tmp0);
                            auto tmp24 = tmp22 * tmp23;
                            auto tmp26 = at::vec::Vectorized<float>(tmp25);
                            auto tmp27 = tmp24 * tmp26;
                            auto tmp28 = tmp18 - tmp27;
                            auto tmp29 = at::vec::Vectorized<float>(tmp2);
                            auto tmp30 = tmp29 * tmp28;
                            tmp30.store(out_ptr4 + static_cast<long>(x3 + (512L*x1) + (14336L*x2) + (401408L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_div_mul_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (256L*(static_cast<long>(x2) % static_cast<long>(14L))) + (3584L*(static_cast<long>(x1) % static_cast<long>(2L))) + (7168L*(c10::div_floor_integer(x2, 14L))) + (100352L*(c10::div_floor_integer(x1, 2L))) + (200704L*x0)));
                            auto tmp1 = in_ptr1[static_cast<long>(x0)];
                            auto tmp2 = static_cast<float>(0.9347826093435287);
                            auto tmp3 = tmp1 / tmp2;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp0 * tmp4;
                            tmp5.store(out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x3) + (50176L*x2) + (200704L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (4L*x0) + (4L*x0_inner) + (1024L*x3) + (200704L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x3 + (256L*(static_cast<long>(x2) % static_cast<long>(14L))) + (3584L*(static_cast<long>(x1) % static_cast<long>(2L))) + (7168L*(c10::div_floor_integer(x2, 14L))) + (100352L*(c10::div_floor_integer(x1, 2L))) + (200704L*x0)));
                            auto tmp1 = in_ptr5[static_cast<long>(x1 + (4L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(256.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(200704L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (200704L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.9347826093435287);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (200704L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(25088L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (8L*x2) + (200704L*x0)), static_cast<long>(8L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (25088L*x1) + (25088L*x1_inner) + (200704L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(50176L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(50176L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(3)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(4L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(192L); x4+=static_cast<long>(8L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(8L))
                                {
                                    float tmp16[8*8] __attribute__ ((aligned (8)));
                                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-1605632L) + x4 + (196L*x5) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0)), static_cast<long>(196L), tmp16, 8);
                                    for (long x4_inner = 0; x4_inner < 8; x4_inner++)
                                    {
                                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                        auto tmp1 = static_cast<int>(0);
                                        auto tmp2 = tmp0 >= tmp1;
                                        auto tmp3 = static_cast<int>(8);
                                        auto tmp4 = tmp0 < tmp3;
                                        auto tmp5 = [&]
                                        {
                                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0)), to_float_mask(tmp4));
                                            auto tmp7 = static_cast<float>(0.42044820762685725);
                                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                            auto tmp9 = tmp6 * tmp8;
                                            return tmp9;
                                        }
                                        ;
                                        auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                        auto tmp11 = tmp0 >= tmp3;
                                        auto tmp12 = static_cast<int>(16);
                                        auto tmp13 = tmp0 < tmp12;
                                        auto tmp14 = tmp11 & tmp13;
                                        auto tmp15 = [&]
                                        {
                                            auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x4_inner));
                                            auto tmp18 = static_cast<float>(0.42044820762685725);
                                            auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                            auto tmp20 = tmp17 * tmp19;
                                            return tmp20;
                                        }
                                        ;
                                        auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                        auto tmp22 = tmp0 >= tmp12;
                                        auto tmp23 = static_cast<int>(24);
                                        auto tmp24 = tmp0 < tmp23;
                                        auto tmp25 = [&]
                                        {
                                            auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-3211264L) + x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0)), to_float_mask(tmp22));
                                            return tmp26;
                                        }
                                        ;
                                        auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                        auto tmp28 = to_float_mask(tmp14);
                                        auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                        auto tmp30 = to_float_mask(tmp4);
                                        auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                        tmp31.store(out_ptr0 + static_cast<long>(x5 + (32L*x2) + (256L*x0) + (768L*x4) + (768L*x4_inner) + (150528L*x3) + (602112L*x1)));
                                    }
                                }
                            }
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(192L); x4<static_cast<long>(196L); x4+=static_cast<long>(1L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(1L))
                                {
                                    auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<long>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<long>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = in_ptr0[static_cast<long>(x5 + (32L*x4) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0))];
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                        return tmp8;
                                    }
                                    ;
                                    auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                    auto tmp10 = tmp0 >= tmp3;
                                    auto tmp11 = static_cast<long>(16);
                                    auto tmp12 = tmp0 < tmp11;
                                    auto tmp13 = tmp10 & tmp12;
                                    auto tmp14 = [&]
                                    {
                                        auto tmp15 = in_ptr1[static_cast<long>((-1605632L) + x4 + (196L*x5) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0))];
                                        auto tmp16 = static_cast<float>(0.42044820762685725);
                                        auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                        return tmp17;
                                    }
                                    ;
                                    auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                    auto tmp19 = tmp0 >= tmp11;
                                    auto tmp20 = static_cast<long>(24);
                                    auto tmp21 = tmp0 < tmp20;
                                    auto tmp22 = [&]
                                    {
                                        auto tmp23 = in_ptr2[static_cast<long>((-3211264L) + x5 + (32L*x4) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0))];
                                        return tmp23;
                                    }
                                    ;
                                    auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                    auto tmp25 = tmp13 ? tmp18 : tmp24;
                                    auto tmp26 = tmp4 ? tmp9 : tmp25;
                                    out_ptr0[static_cast<long>(x5 + (32L*x2) + (256L*x0) + (768L*x4) + (150528L*x3) + (602112L*x1))] = tmp26;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (768L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x3) + (50176L*x2) + (200704L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (4L*x0) + (4L*x0_inner) + (1024L*x3) + (200704L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (4L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(256.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(200704L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (200704L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.9565217383205891);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (200704L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x3) + (50176L*x2) + (200704L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (4L*x0) + (4L*x0_inner) + (1024L*x3) + (200704L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (4L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(256.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(200704L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (200704L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.9565217383205891);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (200704L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(25088L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (8L*x2) + (200704L*x0)), static_cast<long>(8L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (25088L*x1) + (25088L*x1_inner) + (200704L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(50176L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(50176L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(3)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(4L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(192L); x4+=static_cast<long>(8L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(8L))
                                {
                                    float tmp16[8*8] __attribute__ ((aligned (8)));
                                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-1605632L) + x4 + (196L*x5) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0)), static_cast<long>(196L), tmp16, 8);
                                    for (long x4_inner = 0; x4_inner < 8; x4_inner++)
                                    {
                                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                        auto tmp1 = static_cast<int>(0);
                                        auto tmp2 = tmp0 >= tmp1;
                                        auto tmp3 = static_cast<int>(8);
                                        auto tmp4 = tmp0 < tmp3;
                                        auto tmp5 = [&]
                                        {
                                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0)), to_float_mask(tmp4));
                                            auto tmp7 = static_cast<float>(0.42044820762685725);
                                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                            auto tmp9 = tmp6 * tmp8;
                                            return tmp9;
                                        }
                                        ;
                                        auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                        auto tmp11 = tmp0 >= tmp3;
                                        auto tmp12 = static_cast<int>(16);
                                        auto tmp13 = tmp0 < tmp12;
                                        auto tmp14 = tmp11 & tmp13;
                                        auto tmp15 = [&]
                                        {
                                            auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x4_inner));
                                            auto tmp18 = static_cast<float>(0.42044820762685725);
                                            auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                            auto tmp20 = tmp17 * tmp19;
                                            return tmp20;
                                        }
                                        ;
                                        auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                        auto tmp22 = tmp0 >= tmp12;
                                        auto tmp23 = static_cast<int>(24);
                                        auto tmp24 = tmp0 < tmp23;
                                        auto tmp25 = [&]
                                        {
                                            auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-3211264L) + x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0)), to_float_mask(tmp22));
                                            return tmp26;
                                        }
                                        ;
                                        auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                        auto tmp28 = to_float_mask(tmp14);
                                        auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                        auto tmp30 = to_float_mask(tmp4);
                                        auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                        tmp31.store(out_ptr0 + static_cast<long>(x5 + (32L*x2) + (256L*x0) + (768L*x4) + (768L*x4_inner) + (150528L*x3) + (602112L*x1)));
                                    }
                                }
                            }
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(192L); x4<static_cast<long>(196L); x4+=static_cast<long>(1L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(1L))
                                {
                                    auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<long>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<long>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = in_ptr0[static_cast<long>(x5 + (32L*x4) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0))];
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                        return tmp8;
                                    }
                                    ;
                                    auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                    auto tmp10 = tmp0 >= tmp3;
                                    auto tmp11 = static_cast<long>(16);
                                    auto tmp12 = tmp0 < tmp11;
                                    auto tmp13 = tmp10 & tmp12;
                                    auto tmp14 = [&]
                                    {
                                        auto tmp15 = in_ptr1[static_cast<long>((-1605632L) + x4 + (196L*x5) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0))];
                                        auto tmp16 = static_cast<float>(0.42044820762685725);
                                        auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                        return tmp17;
                                    }
                                    ;
                                    auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                    auto tmp19 = tmp0 >= tmp11;
                                    auto tmp20 = static_cast<long>(24);
                                    auto tmp21 = tmp0 < tmp20;
                                    auto tmp22 = [&]
                                    {
                                        auto tmp23 = in_ptr2[static_cast<long>((-3211264L) + x5 + (32L*x4) + (6272L*x3) + (25088L*x2) + (200704L*x1) + (1605632L*x0))];
                                        return tmp23;
                                    }
                                    ;
                                    auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                    auto tmp25 = tmp13 ? tmp18 : tmp24;
                                    auto tmp26 = tmp4 ? tmp9 : tmp25;
                                    out_ptr0[static_cast<long>(x5 + (32L*x2) + (256L*x0) + (768L*x4) + (150528L*x3) + (602112L*x1))] = tmp26;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_clone_native_layer_norm_backward_sum_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (768L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x3) + (50176L*x2) + (200704L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (4L*x0) + (4L*x0_inner) + (1024L*x3) + (200704L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (4L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (1024L*x2) + (200704L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(256.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (256L*x2) + (50176L*x1) + (200704L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(200704L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (200704L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(3584L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (3584L*x1) + (50176L*x2) + (100352L*x0)));
                            tmp0.store(out_ptr6 + static_cast<long>(x3 + (3584L*x2) + (7168L*x1) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_native_layer_norm_backward_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            float tmp_acc1 = 0;
                            at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                            {
                                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3 + (256L*x2) + (14336L*x1) + (802816L*x0)));
                                auto tmp16 = in_ptr3[static_cast<long>(x1 + (56L*x2) + (3136L*x0))];
                                auto tmp19 = in_ptr4[static_cast<long>(x1 + (56L*x2) + (3136L*x0))];
                                auto tmp0 = c10::convert<int>(x1);
                                auto tmp1 = static_cast<int>(57);
                                auto tmp2 = tmp0 < tmp1;
                                auto tmp3 = c10::convert<int>(x2);
                                auto tmp4 = tmp3 < tmp1;
                                auto tmp5 = tmp2 & tmp4;
                                auto tmp6 = [&]
                                {
                                    auto tmp7 = masked_load(in_ptr0 + static_cast<long>(x3 + (256L*x2) + (14592L*x1) + (831744L*x0)), to_float_mask(tmp5));
                                    return tmp7;
                                }
                                ;
                                auto tmp8 = decltype(tmp6())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp6(), to_float_mask(tmp5));
                                auto tmp10 = tmp8 * tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x3 + (256L*x2) + (14592L*x1) + (831744L*x0)), to_float_mask(tmp5));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp5));
                                auto tmp14 = tmp13 * tmp9;
                                auto tmp17 = at::vec::Vectorized<float>(tmp16);
                                auto tmp18 = tmp15 - tmp17;
                                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                                auto tmp21 = tmp18 * tmp20;
                                auto tmp22 = tmp14 * tmp21;
                                tmp_acc0_vec = tmp_acc0_vec + tmp10;
                                tmp_acc1_vec = tmp_acc1_vec + tmp22;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (56L*x1) + (3136L*x0))] = static_cast<float>(tmp_acc0);
                            tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                            out_ptr1[static_cast<long>(x2 + (56L*x1) + (3136L*x0))] = static_cast<float>(tmp_acc1);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                            {
                                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x3) + (14336L*x2) + (802816L*x1)));
                                auto tmp10 = in_ptr3[static_cast<long>(x2 + (56L*x3) + (3136L*x1))];
                                auto tmp13 = in_ptr4[static_cast<long>(x2 + (56L*x3) + (3136L*x1))];
                                auto tmp0 = c10::convert<int>(x2);
                                auto tmp1 = static_cast<int>(57);
                                auto tmp2 = tmp0 < tmp1;
                                auto tmp3 = c10::convert<int>(x3);
                                auto tmp4 = tmp3 < tmp1;
                                auto tmp5 = tmp2 & tmp4;
                                auto tmp6 = [&]
                                {
                                    auto tmp7 = masked_load(in_ptr0 + static_cast<long>(x0 + (256L*x3) + (14592L*x2) + (831744L*x1)), to_float_mask(tmp5));
                                    return tmp7;
                                }
                                ;
                                auto tmp8 = decltype(tmp6())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp6(), to_float_mask(tmp5));
                                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                                auto tmp12 = tmp9 - tmp11;
                                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                                auto tmp15 = tmp12 * tmp14;
                                auto tmp16 = tmp8 * tmp15;
                                auto tmp17 = [&]
                                {
                                    auto tmp18 = masked_load(in_ptr0 + static_cast<long>(x0 + (256L*x3) + (14592L*x2) + (831744L*x1)), to_float_mask(tmp5));
                                    return tmp18;
                                }
                                ;
                                auto tmp19 = decltype(tmp17())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp17(), to_float_mask(tmp5));
                                tmp_acc0_vec = tmp_acc0_vec + tmp16;
                                tmp_acc1_vec = tmp_acc1_vec + tmp19;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(256L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x1 + (56L*x2) + (3136L*x0))];
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp16 = out_ptr0[static_cast<long>(x2 + (56L*x1) + (3136L*x0))];
                            auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3 + (256L*x2) + (14336L*x1) + (802816L*x0)));
                            auto tmp20 = in_ptr3[static_cast<long>(x1 + (56L*x2) + (3136L*x0))];
                            auto tmp25 = out_ptr1[static_cast<long>(x2 + (56L*x1) + (3136L*x0))];
                            auto tmp1 = static_cast<float>(256.0);
                            auto tmp2 = tmp0 / tmp1;
                            auto tmp3 = c10::convert<int>(x1);
                            auto tmp4 = static_cast<int>(57);
                            auto tmp5 = tmp3 < tmp4;
                            auto tmp6 = c10::convert<int>(x2);
                            auto tmp7 = tmp6 < tmp4;
                            auto tmp8 = tmp5 & tmp7;
                            auto tmp9 = [&]
                            {
                                auto tmp10 = masked_load(in_ptr0 + static_cast<long>(x3 + (256L*x2) + (14592L*x1) + (831744L*x0)), to_float_mask(tmp8));
                                return tmp10;
                            }
                            ;
                            auto tmp11 = decltype(tmp9())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp9(), to_float_mask(tmp8));
                            auto tmp13 = tmp11 * tmp12;
                            auto tmp14 = at::vec::Vectorized<float>(tmp1);
                            auto tmp15 = tmp13 * tmp14;
                            auto tmp17 = at::vec::Vectorized<float>(tmp16);
                            auto tmp18 = tmp15 - tmp17;
                            auto tmp21 = at::vec::Vectorized<float>(tmp20);
                            auto tmp22 = tmp19 - tmp21;
                            auto tmp23 = at::vec::Vectorized<float>(tmp0);
                            auto tmp24 = tmp22 * tmp23;
                            auto tmp26 = at::vec::Vectorized<float>(tmp25);
                            auto tmp27 = tmp24 * tmp26;
                            auto tmp28 = tmp18 - tmp27;
                            auto tmp29 = at::vec::Vectorized<float>(tmp2);
                            auto tmp30 = tmp29 * tmp28;
                            tmp30.store(out_ptr4 + static_cast<long>(x3 + (256L*x1) + (14336L*x2) + (802816L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_div_mul_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (128L*(static_cast<long>(x2) % static_cast<long>(14L))) + (1792L*(static_cast<long>(x1) % static_cast<long>(4L))) + (7168L*(c10::div_floor_integer(x2, 14L))) + (100352L*(c10::div_floor_integer(x1, 4L))) + (401408L*x0)));
                            auto tmp1 = in_ptr1[static_cast<long>(x0)];
                            auto tmp2 = static_cast<float>(0.9782608691602945);
                            auto tmp3 = tmp1 / tmp2;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp0 * tmp4;
                            tmp5.store(out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(12845056L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_div_mul_native_layer_norm_backward_sum_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x3) + (25088L*x2) + (401408L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (16L*x0) + (16L*x0_inner) + (2048L*x3) + (401408L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x3 + (128L*(static_cast<long>(x2) % static_cast<long>(14L))) + (1792L*(static_cast<long>(x1) % static_cast<long>(4L))) + (7168L*(c10::div_floor_integer(x2, 14L))) + (100352L*(c10::div_floor_integer(x1, 4L))) + (401408L*x0)));
                            auto tmp1 = in_ptr5[static_cast<long>(x1 + (16L*x2) + (3136L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(128.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(401408L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (401408L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(0.9782608691602945);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp0 * tmp4;
                    tmp5.store(out_ptr5 + static_cast<long>(x1 + (401408L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(100352L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x1 + (4L*x2) + (401408L*x0))];
                        out_ptr1[static_cast<long>(x2 + (100352L*x1) + (401408L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(3)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(192L); x4+=static_cast<long>(8L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(8L))
                                {
                                    float tmp16[8*8] __attribute__ ((aligned (8)));
                                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-3211264L) + x4 + (196L*x5) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0)), static_cast<long>(196L), tmp16, 8);
                                    for (long x4_inner = 0; x4_inner < 8; x4_inner++)
                                    {
                                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                        auto tmp1 = static_cast<int>(0);
                                        auto tmp2 = tmp0 >= tmp1;
                                        auto tmp3 = static_cast<int>(8);
                                        auto tmp4 = tmp0 < tmp3;
                                        auto tmp5 = [&]
                                        {
                                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0)), to_float_mask(tmp4));
                                            auto tmp7 = static_cast<float>(0.42044820762685725);
                                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                            auto tmp9 = tmp6 * tmp8;
                                            return tmp9;
                                        }
                                        ;
                                        auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                        auto tmp11 = tmp0 >= tmp3;
                                        auto tmp12 = static_cast<int>(16);
                                        auto tmp13 = tmp0 < tmp12;
                                        auto tmp14 = tmp11 & tmp13;
                                        auto tmp15 = [&]
                                        {
                                            auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x4_inner));
                                            auto tmp18 = static_cast<float>(0.42044820762685725);
                                            auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                            auto tmp20 = tmp17 * tmp19;
                                            return tmp20;
                                        }
                                        ;
                                        auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                        auto tmp22 = tmp0 >= tmp12;
                                        auto tmp23 = static_cast<int>(24);
                                        auto tmp24 = tmp0 < tmp23;
                                        auto tmp25 = [&]
                                        {
                                            auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-6422528L) + x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0)), to_float_mask(tmp22));
                                            return tmp26;
                                        }
                                        ;
                                        auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                        auto tmp28 = to_float_mask(tmp14);
                                        auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                        auto tmp30 = to_float_mask(tmp4);
                                        auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                        tmp31.store(out_ptr0 + static_cast<long>(x5 + (32L*x2) + (128L*x0) + (384L*x4) + (384L*x4_inner) + (75264L*x3) + (1204224L*x1)));
                                    }
                                }
                            }
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(192L); x4<static_cast<long>(196L); x4+=static_cast<long>(1L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(1L))
                                {
                                    auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<long>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<long>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = in_ptr0[static_cast<long>(x5 + (32L*x4) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0))];
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                        return tmp8;
                                    }
                                    ;
                                    auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                    auto tmp10 = tmp0 >= tmp3;
                                    auto tmp11 = static_cast<long>(16);
                                    auto tmp12 = tmp0 < tmp11;
                                    auto tmp13 = tmp10 & tmp12;
                                    auto tmp14 = [&]
                                    {
                                        auto tmp15 = in_ptr1[static_cast<long>((-3211264L) + x4 + (196L*x5) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0))];
                                        auto tmp16 = static_cast<float>(0.42044820762685725);
                                        auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                        return tmp17;
                                    }
                                    ;
                                    auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                    auto tmp19 = tmp0 >= tmp11;
                                    auto tmp20 = static_cast<long>(24);
                                    auto tmp21 = tmp0 < tmp20;
                                    auto tmp22 = [&]
                                    {
                                        auto tmp23 = in_ptr2[static_cast<long>((-6422528L) + x5 + (32L*x4) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0))];
                                        return tmp23;
                                    }
                                    ;
                                    auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                    auto tmp25 = tmp13 ? tmp18 : tmp24;
                                    auto tmp26 = tmp4 ? tmp9 : tmp25;
                                    out_ptr0[static_cast<long>(x5 + (32L*x2) + (128L*x0) + (384L*x4) + (75264L*x3) + (1204224L*x1))] = tmp26;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x3) + (25088L*x2) + (401408L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (16L*x0) + (16L*x0_inner) + (2048L*x3) + (401408L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (16L*x2) + (3136L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(128.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(12845056L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x3) + (25088L*x2) + (401408L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (16L*x0) + (16L*x0_inner) + (2048L*x3) + (401408L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (16L*x2) + (3136L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(128.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(100352L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x1 + (4L*x2) + (401408L*x0))];
                        out_ptr1[static_cast<long>(x2 + (100352L*x1) + (401408L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp1 * tmp4;
                    auto tmp6 = tmp2 - tmp5;
                    tmp6.store(in_out_ptr0 + static_cast<long>(x1 + (196L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (196L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x1 + (196L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_clone_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(3)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(192L); x4+=static_cast<long>(8L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(8L))
                                {
                                    float tmp16[8*8] __attribute__ ((aligned (8)));
                                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-3211264L) + x4 + (196L*x5) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0)), static_cast<long>(196L), tmp16, 8);
                                    for (long x4_inner = 0; x4_inner < 8; x4_inner++)
                                    {
                                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                        auto tmp1 = static_cast<int>(0);
                                        auto tmp2 = tmp0 >= tmp1;
                                        auto tmp3 = static_cast<int>(8);
                                        auto tmp4 = tmp0 < tmp3;
                                        auto tmp5 = [&]
                                        {
                                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0)), to_float_mask(tmp4));
                                            auto tmp7 = static_cast<float>(0.42044820762685725);
                                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                            auto tmp9 = tmp6 * tmp8;
                                            return tmp9;
                                        }
                                        ;
                                        auto tmp10 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                        auto tmp11 = tmp0 >= tmp3;
                                        auto tmp12 = static_cast<int>(16);
                                        auto tmp13 = tmp0 < tmp12;
                                        auto tmp14 = tmp11 & tmp13;
                                        auto tmp15 = [&]
                                        {
                                            auto tmp17 = at::vec::Vectorized<float>::loadu(tmp16 + static_cast<long>(8L*x4_inner));
                                            auto tmp18 = static_cast<float>(0.42044820762685725);
                                            auto tmp19 = at::vec::Vectorized<float>(tmp18);
                                            auto tmp20 = tmp17 * tmp19;
                                            return tmp20;
                                        }
                                        ;
                                        auto tmp21 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp14));
                                        auto tmp22 = tmp0 >= tmp12;
                                        auto tmp23 = static_cast<int>(24);
                                        auto tmp24 = tmp0 < tmp23;
                                        auto tmp25 = [&]
                                        {
                                            auto tmp26 = masked_load(in_ptr2 + static_cast<long>((-6422528L) + x5 + (32L*x4) + (32L*x4_inner) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0)), to_float_mask(tmp22));
                                            return tmp26;
                                        }
                                        ;
                                        auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp22));
                                        auto tmp28 = to_float_mask(tmp14);
                                        auto tmp29 = decltype(tmp21)::blendv(tmp27, tmp21, tmp28);
                                        auto tmp30 = to_float_mask(tmp4);
                                        auto tmp31 = decltype(tmp10)::blendv(tmp29, tmp10, tmp30);
                                        tmp31.store(out_ptr0 + static_cast<long>(x5 + (32L*x2) + (128L*x0) + (384L*x4) + (384L*x4_inner) + (75264L*x3) + (1204224L*x1)));
                                    }
                                }
                            }
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(192L); x4<static_cast<long>(196L); x4+=static_cast<long>(1L))
                            {
                                #pragma GCC ivdep
                                for(long x5=static_cast<long>(0L); x5<static_cast<long>(32L); x5+=static_cast<long>(1L))
                                {
                                    auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<long>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<long>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = in_ptr0[static_cast<long>(x5 + (32L*x4) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0))];
                                        auto tmp7 = static_cast<float>(0.42044820762685725);
                                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                                        return tmp8;
                                    }
                                    ;
                                    auto tmp9 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                    auto tmp10 = tmp0 >= tmp3;
                                    auto tmp11 = static_cast<long>(16);
                                    auto tmp12 = tmp0 < tmp11;
                                    auto tmp13 = tmp10 & tmp12;
                                    auto tmp14 = [&]
                                    {
                                        auto tmp15 = in_ptr1[static_cast<long>((-3211264L) + x4 + (196L*x5) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0))];
                                        auto tmp16 = static_cast<float>(0.42044820762685725);
                                        auto tmp17 = decltype(tmp15)(tmp15 * tmp16);
                                        return tmp17;
                                    }
                                    ;
                                    auto tmp18 = tmp13 ? tmp14() : static_cast<decltype(tmp14())>(0.0);
                                    auto tmp19 = tmp0 >= tmp11;
                                    auto tmp20 = static_cast<long>(24);
                                    auto tmp21 = tmp0 < tmp20;
                                    auto tmp22 = [&]
                                    {
                                        auto tmp23 = in_ptr2[static_cast<long>((-6422528L) + x5 + (32L*x4) + (6272L*x3) + (100352L*x2) + (401408L*x1) + (3211264L*x0))];
                                        return tmp23;
                                    }
                                    ;
                                    auto tmp24 = tmp19 ? tmp22() : static_cast<decltype(tmp22())>(0.0);
                                    auto tmp25 = tmp13 ? tmp18 : tmp24;
                                    auto tmp26 = tmp4 ? tmp9 : tmp25;
                                    out_ptr0[static_cast<long>(x5 + (32L*x2) + (128L*x0) + (384L*x4) + (75264L*x3) + (1204224L*x1))] = tmp26;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x3) + (25088L*x2) + (401408L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (16L*x0) + (16L*x0_inner) + (2048L*x3) + (401408L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (16L*x2) + (3136L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (16L*x3) + (16L*x3_inner) + (2048L*x2) + (401408L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (196L*x1) + (3136L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(128.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (128L*x2) + (25088L*x1) + (401408L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(401408L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (401408L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (128L*(static_cast<long>(x2) % static_cast<long>(14L))) + (1792L*(static_cast<long>(x1) % static_cast<long>(14L))) + (25088L*(c10::div_floor_integer(x2, 14L))) + (100352L*(c10::div_floor_integer(x1, 14L))) + (401408L*x0)));
                            tmp0.store(out_ptr6 + static_cast<long>(x3 + (128L*x2) + (7168L*x1) + (401408L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_2, primals_4, primals_6, primals_8, primals_10, primals_13, primals_15, primals_17, primals_19, primals_21, primals_24, primals_26, primals_28, primals_30, primals_32, primals_34, primals_36, primals_38, primals_40, primals_42, primals_44, primals_46, primals_48, primals_50, primals_52, primals_54, primals_56, primals_58, primals_60, primals_62, primals_64, primals_66, primals_68, primals_70, primals_72, primals_74, primals_76, primals_78, primals_80, primals_82, primals_84, primals_86, primals_88, primals_90, primals_92, primals_94, primals_96, primals_98, primals_100, primals_102, primals_104, primals_106, primals_124, primals_142, primals_306, mul, view_2, view_12, mul_4, view_14, addmm_2, view_16, mul_9, view_18, view_28, bernoulli, mul_14, view_30, addmm_6, view_32, bernoulli_1, permute_17, convolution_1, getitem_15, rsqrt_4, constant_pad_nd, getitem_17, mul_22, view_38, view_48, bernoulli_2, mul_27, view_50, addmm_10, view_52, bernoulli_3, mul_33, view_54, view_64, bernoulli_4, mul_38, view_66, addmm_14, view_68, bernoulli_5, permute_37, convolution_2, getitem_33, rsqrt_9, constant_pad_nd_1, getitem_35, mul_46, view_74, view_84, bernoulli_6, mul_51, view_86, addmm_18, view_88, bernoulli_7, mul_57, view_90, view_100, bernoulli_8, mul_62, view_102, addmm_22, view_104, bernoulli_9, mul_68, view_106, view_116, bernoulli_10, mul_73, view_118, addmm_26, view_120, bernoulli_11, mul_79, view_122, view_132, bernoulli_12, mul_84, view_134, addmm_30, view_136, bernoulli_13, mul_90, view_138, view_148, bernoulli_14, mul_95, view_150, addmm_34, view_152, bernoulli_15, mul_101, view_154, view_164, bernoulli_16, mul_106, view_166, addmm_38, view_168, bernoulli_17, mul_112, view_170, view_180, bernoulli_18, mul_117, view_182, addmm_42, view_184, bernoulli_19, mul_123, view_186, view_196, bernoulli_20, mul_128, view_198, addmm_46, view_200, bernoulli_21, mul_134, view_202, view_212, bernoulli_22, mul_139, view_214, addmm_50, view_216, bernoulli_23, mul_145, view_218, view_228, bernoulli_24, mul_150, view_230, addmm_54, view_232, bernoulli_25, mul_156, view_234, view_244, bernoulli_26, mul_161, view_246, addmm_58, view_248, bernoulli_27, mul_167, view_250, view_260, bernoulli_28, mul_172, view_262, addmm_62, view_264, bernoulli_29, mul_178, view_266, view_276, bernoulli_30, mul_183, view_278, addmm_66, view_280, bernoulli_31, mul_189, view_282, view_292, bernoulli_32, mul_194, view_294, addmm_70, view_296, bernoulli_33, mul_200, view_298, view_308, bernoulli_34, mul_205, view_310, addmm_74, view_312, bernoulli_35, mul_211, view_314, view_324, bernoulli_36, mul_216, view_326, addmm_78, view_328, bernoulli_37, mul_222, view_330, view_340, bernoulli_38, mul_227, view_342, addmm_82, view_344, bernoulli_39, mul_233, view_346, view_356, bernoulli_40, mul_238, view_358, addmm_86, view_360, bernoulli_41, mul_244, view_362, view_372, bernoulli_42, mul_249, view_374, addmm_90, view_376, bernoulli_43, mul_255, view_378, view_388, bernoulli_44, mul_260, view_390, addmm_94, view_392, bernoulli_45, mul_266, clone_172, permute_187, div_71, permute_195, permute_199, div_72, permute_203, permute_208, permute_209, alias_24, permute_210, permute_211, permute_214, div_73, permute_218, permute_222, div_74, permute_226, permute_231, permute_232, alias_25, permute_233, permute_234, permute_237, div_75, permute_241, permute_245, div_76, permute_249, permute_254, permute_255, alias_26, permute_256, permute_257, permute_260, div_77, permute_264, permute_268, div_78, permute_272, permute_277, permute_278, alias_27, permute_279, permute_280, permute_283, div_79, permute_287, permute_291, div_80, permute_295, permute_300, permute_301, alias_28, permute_302, permute_303, permute_306, div_81, permute_310, permute_314, div_82, permute_318, permute_323, permute_324, alias_29, permute_325, permute_326, permute_329, div_83, permute_333, permute_337, div_84, permute_341, permute_346, permute_347, alias_30, permute_348, permute_349, permute_352, div_85, permute_356, permute_360, div_86, permute_364, permute_369, permute_370, alias_31, permute_371, permute_372, permute_375, div_87, permute_379, permute_383, div_88, permute_387, permute_392, permute_393, alias_32, permute_394, permute_395, permute_398, div_89, permute_402, permute_406, div_90, permute_410, permute_415, permute_416, alias_33, permute_417, permute_418, permute_421, div_91, permute_425, permute_429, div_92, permute_433, permute_438, permute_439, alias_34, permute_440, permute_441, permute_444, div_93, permute_448, permute_452, div_94, permute_456, permute_461, permute_462, alias_35, permute_463, permute_464, permute_467, div_95, permute_471, permute_475, div_96, permute_479, permute_484, permute_485, alias_36, permute_486, permute_487, permute_490, div_97, permute_494, permute_498, div_98, permute_502, permute_507, permute_508, alias_37, permute_509, permute_510, permute_513, div_99, permute_517, permute_521, div_100, permute_525, permute_530, permute_531, alias_38, permute_532, permute_533, permute_536, div_101, permute_540, permute_544, div_102, permute_548, permute_553, permute_554, alias_39, permute_555, permute_556, permute_559, div_103, permute_563, permute_567, div_104, permute_571, permute_576, permute_577, alias_40, permute_578, permute_579, permute_582, div_105, permute_586, permute_590, div_106, permute_594, permute_599, permute_600, alias_41, permute_601, permute_602, permute_605, div_107, permute_609, permute_613, div_108, permute_617, permute_622, permute_623, alias_42, permute_624, permute_625, permute_628, div_109, permute_632, permute_636, div_110, permute_640, permute_645, permute_646, alias_43, permute_647, permute_648, permute_651, div_111, permute_661, permute_665, div_113, permute_669, permute_674, permute_675, alias_44, permute_676, permute_677, permute_680, div_114, permute_684, permute_688, div_115, permute_692, permute_697, permute_698, alias_45, permute_699, permute_700, permute_703, div_116, permute_713, permute_717, div_118, permute_721, permute_726, permute_727, alias_46, permute_728, permute_729, permute_732, div_119, permute_736, permute_740, div_120, permute_744, permute_749, permute_750, alias_47, permute_751, permute_752, permute_755, div_121, tangents_1 = args
    args.clear()
    assert_size_stride(primals_2, (128, ), (1, ))
    assert_size_stride(primals_4, (128, ), (1, ))
    assert_size_stride(primals_6, (128, ), (1, ))
    assert_size_stride(primals_8, (128, ), (1, ))
    assert_size_stride(primals_10, (256, ), (1, ))
    assert_size_stride(primals_13, (256, ), (1, ))
    assert_size_stride(primals_15, (256, ), (1, ))
    assert_size_stride(primals_17, (256, ), (1, ))
    assert_size_stride(primals_19, (256, ), (1, ))
    assert_size_stride(primals_21, (512, ), (1, ))
    assert_size_stride(primals_24, (512, ), (1, ))
    assert_size_stride(primals_26, (512, ), (1, ))
    assert_size_stride(primals_28, (512, ), (1, ))
    assert_size_stride(primals_30, (512, ), (1, ))
    assert_size_stride(primals_32, (512, ), (1, ))
    assert_size_stride(primals_34, (512, ), (1, ))
    assert_size_stride(primals_36, (512, ), (1, ))
    assert_size_stride(primals_38, (512, ), (1, ))
    assert_size_stride(primals_40, (512, ), (1, ))
    assert_size_stride(primals_42, (512, ), (1, ))
    assert_size_stride(primals_44, (512, ), (1, ))
    assert_size_stride(primals_46, (512, ), (1, ))
    assert_size_stride(primals_48, (512, ), (1, ))
    assert_size_stride(primals_50, (512, ), (1, ))
    assert_size_stride(primals_52, (512, ), (1, ))
    assert_size_stride(primals_54, (512, ), (1, ))
    assert_size_stride(primals_56, (512, ), (1, ))
    assert_size_stride(primals_58, (512, ), (1, ))
    assert_size_stride(primals_60, (512, ), (1, ))
    assert_size_stride(primals_62, (512, ), (1, ))
    assert_size_stride(primals_64, (512, ), (1, ))
    assert_size_stride(primals_66, (512, ), (1, ))
    assert_size_stride(primals_68, (512, ), (1, ))
    assert_size_stride(primals_70, (512, ), (1, ))
    assert_size_stride(primals_72, (512, ), (1, ))
    assert_size_stride(primals_74, (512, ), (1, ))
    assert_size_stride(primals_76, (512, ), (1, ))
    assert_size_stride(primals_78, (512, ), (1, ))
    assert_size_stride(primals_80, (512, ), (1, ))
    assert_size_stride(primals_82, (512, ), (1, ))
    assert_size_stride(primals_84, (512, ), (1, ))
    assert_size_stride(primals_86, (512, ), (1, ))
    assert_size_stride(primals_88, (512, ), (1, ))
    assert_size_stride(primals_90, (512, ), (1, ))
    assert_size_stride(primals_92, (512, ), (1, ))
    assert_size_stride(primals_94, (512, ), (1, ))
    assert_size_stride(primals_96, (512, ), (1, ))
    assert_size_stride(primals_98, (512, ), (1, ))
    assert_size_stride(primals_100, (512, ), (1, ))
    assert_size_stride(primals_102, (512, ), (1, ))
    assert_size_stride(primals_104, (512, ), (1, ))
    assert_size_stride(primals_106, (128, 3, 4, 4), (48, 1, 12, 3))
    assert_size_stride(primals_124, (256, 128, 3, 3), (1152, 1, 384, 128))
    assert_size_stride(primals_142, (512, 256, 3, 3), (2304, 1, 768, 256))
    assert_size_stride(primals_306, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(mul, (8, 16, 196, 128), (401408, 1, 2048, 16))
    assert_size_stride(view_2, (25088, 128), (128, 1))
    assert_size_stride(view_12, (25088, 128), (128, 1))
    assert_size_stride(mul_4, (8, 16, 196, 128), (401408, 1, 2048, 16))
    assert_size_stride(view_14, (25088, 128), (128, 1))
    assert_size_stride(addmm_2, (25088, 512), (512, 1))
    assert_size_stride(view_16, (25088, 512), (512, 1))
    assert_size_stride(mul_9, (8, 16, 196, 128), (401408, 1, 2048, 16))
    assert_size_stride(view_18, (25088, 128), (128, 1))
    assert_size_stride(view_28, (25088, 128), (128, 1))
    assert_size_stride(bernoulli, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_14, (8, 16, 196, 128), (401408, 1, 2048, 16))
    assert_size_stride(view_30, (25088, 128), (128, 1))
    assert_size_stride(addmm_6, (25088, 512), (512, 1))
    assert_size_stride(view_32, (25088, 512), (512, 1))
    assert_size_stride(bernoulli_1, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(permute_17, (8, 128, 56, 56), (401408, 1, 7168, 128))
    assert_size_stride(convolution_1, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(getitem_15, (8, 56, 56, 1), (3136, 1, 56, 56))
    assert_size_stride(rsqrt_4, (8, 56, 56, 1), (3136, 1, 56, 56))
    assert_size_stride(constant_pad_nd, (8, 256, 57, 57), (831744, 1, 14592, 256))
    assert_size_stride(getitem_17, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(mul_22, (8, 4, 196, 256), (200704, 1, 1024, 4))
    assert_size_stride(view_38, (6272, 256), (256, 1))
    assert_size_stride(view_48, (6272, 256), (256, 1))
    assert_size_stride(bernoulli_2, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_27, (8, 4, 196, 256), (200704, 1, 1024, 4))
    assert_size_stride(view_50, (6272, 256), (256, 1))
    assert_size_stride(addmm_10, (6272, 1024), (1024, 1))
    assert_size_stride(view_52, (6272, 1024), (1024, 1))
    assert_size_stride(bernoulli_3, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_33, (8, 4, 196, 256), (200704, 1, 1024, 4))
    assert_size_stride(view_54, (6272, 256), (256, 1))
    assert_size_stride(view_64, (6272, 256), (256, 1))
    assert_size_stride(bernoulli_4, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_38, (8, 4, 196, 256), (200704, 1, 1024, 4))
    assert_size_stride(view_66, (6272, 256), (256, 1))
    assert_size_stride(addmm_14, (6272, 1024), (1024, 1))
    assert_size_stride(view_68, (6272, 1024), (1024, 1))
    assert_size_stride(bernoulli_5, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(permute_37, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(convolution_2, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(getitem_33, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(rsqrt_9, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(constant_pad_nd_1, (8, 512, 29, 29), (430592, 1, 14848, 512))
    assert_size_stride(getitem_35, (8, 512, 14, 14), (100352, 1, 7168, 512))
    assert_size_stride(mul_46, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_74, (1568, 512), (512, 1))
    assert_size_stride(view_84, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_6, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_51, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_86, (1568, 512), (512, 1))
    assert_size_stride(addmm_18, (1568, 2048), (2048, 1))
    assert_size_stride(view_88, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_7, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_57, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_90, (1568, 512), (512, 1))
    assert_size_stride(view_100, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_8, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_62, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_102, (1568, 512), (512, 1))
    assert_size_stride(addmm_22, (1568, 2048), (2048, 1))
    assert_size_stride(view_104, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_9, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_68, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_106, (1568, 512), (512, 1))
    assert_size_stride(view_116, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_10, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_73, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_118, (1568, 512), (512, 1))
    assert_size_stride(addmm_26, (1568, 2048), (2048, 1))
    assert_size_stride(view_120, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_11, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_79, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_122, (1568, 512), (512, 1))
    assert_size_stride(view_132, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_12, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_84, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_134, (1568, 512), (512, 1))
    assert_size_stride(addmm_30, (1568, 2048), (2048, 1))
    assert_size_stride(view_136, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_13, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_90, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_138, (1568, 512), (512, 1))
    assert_size_stride(view_148, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_14, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_95, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_150, (1568, 512), (512, 1))
    assert_size_stride(addmm_34, (1568, 2048), (2048, 1))
    assert_size_stride(view_152, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_15, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_101, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_154, (1568, 512), (512, 1))
    assert_size_stride(view_164, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_16, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_106, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_166, (1568, 512), (512, 1))
    assert_size_stride(addmm_38, (1568, 2048), (2048, 1))
    assert_size_stride(view_168, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_17, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_112, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_170, (1568, 512), (512, 1))
    assert_size_stride(view_180, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_18, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_117, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_182, (1568, 512), (512, 1))
    assert_size_stride(addmm_42, (1568, 2048), (2048, 1))
    assert_size_stride(view_184, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_19, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_123, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_186, (1568, 512), (512, 1))
    assert_size_stride(view_196, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_20, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_128, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_198, (1568, 512), (512, 1))
    assert_size_stride(addmm_46, (1568, 2048), (2048, 1))
    assert_size_stride(view_200, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_21, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_134, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_202, (1568, 512), (512, 1))
    assert_size_stride(view_212, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_22, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_139, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_214, (1568, 512), (512, 1))
    assert_size_stride(addmm_50, (1568, 2048), (2048, 1))
    assert_size_stride(view_216, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_23, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_145, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_218, (1568, 512), (512, 1))
    assert_size_stride(view_228, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_24, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_150, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_230, (1568, 512), (512, 1))
    assert_size_stride(addmm_54, (1568, 2048), (2048, 1))
    assert_size_stride(view_232, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_25, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_156, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_234, (1568, 512), (512, 1))
    assert_size_stride(view_244, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_26, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_161, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_246, (1568, 512), (512, 1))
    assert_size_stride(addmm_58, (1568, 2048), (2048, 1))
    assert_size_stride(view_248, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_27, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_167, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_250, (1568, 512), (512, 1))
    assert_size_stride(view_260, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_28, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_172, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_262, (1568, 512), (512, 1))
    assert_size_stride(addmm_62, (1568, 2048), (2048, 1))
    assert_size_stride(view_264, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_29, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_178, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_266, (1568, 512), (512, 1))
    assert_size_stride(view_276, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_30, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_183, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_278, (1568, 512), (512, 1))
    assert_size_stride(addmm_66, (1568, 2048), (2048, 1))
    assert_size_stride(view_280, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_31, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_189, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_282, (1568, 512), (512, 1))
    assert_size_stride(view_292, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_32, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_194, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_294, (1568, 512), (512, 1))
    assert_size_stride(addmm_70, (1568, 2048), (2048, 1))
    assert_size_stride(view_296, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_33, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_200, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_298, (1568, 512), (512, 1))
    assert_size_stride(view_308, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_34, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_205, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_310, (1568, 512), (512, 1))
    assert_size_stride(addmm_74, (1568, 2048), (2048, 1))
    assert_size_stride(view_312, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_35, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_211, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_314, (1568, 512), (512, 1))
    assert_size_stride(view_324, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_36, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_216, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_326, (1568, 512), (512, 1))
    assert_size_stride(addmm_78, (1568, 2048), (2048, 1))
    assert_size_stride(view_328, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_37, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_222, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_330, (1568, 512), (512, 1))
    assert_size_stride(view_340, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_38, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_227, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_342, (1568, 512), (512, 1))
    assert_size_stride(addmm_82, (1568, 2048), (2048, 1))
    assert_size_stride(view_344, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_39, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_233, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_346, (1568, 512), (512, 1))
    assert_size_stride(view_356, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_40, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_238, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_358, (1568, 512), (512, 1))
    assert_size_stride(addmm_86, (1568, 2048), (2048, 1))
    assert_size_stride(view_360, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_41, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_244, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_362, (1568, 512), (512, 1))
    assert_size_stride(view_372, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_42, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_249, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_374, (1568, 512), (512, 1))
    assert_size_stride(addmm_90, (1568, 2048), (2048, 1))
    assert_size_stride(view_376, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_43, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_255, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_378, (1568, 512), (512, 1))
    assert_size_stride(view_388, (1568, 512), (512, 1))
    assert_size_stride(bernoulli_44, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_260, (8, 1, 196, 512), (100352, 1, 512, 1))
    assert_size_stride(view_390, (1568, 512), (512, 1))
    assert_size_stride(addmm_94, (1568, 2048), (2048, 1))
    assert_size_stride(view_392, (1568, 2048), (2048, 1))
    assert_size_stride(bernoulli_45, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(mul_266, (8, 14, 14, 512), (100352, 1, 7168, 14))
    assert_size_stride(clone_172, (8, 512), (512, 1))
    assert_size_stride(permute_187, (1000, 512), (512, 1))
    assert_size_stride(div_71, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_195, (512, 2048), (2048, 1))
    assert_size_stride(permute_199, (2048, 512), (512, 1))
    assert_size_stride(div_72, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_203, (512, 512), (512, 1))
    assert_size_stride(permute_208, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_209, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_24, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_210, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_211, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_214, (1536, 512), (512, 1))
    assert_size_stride(div_73, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_218, (512, 2048), (2048, 1))
    assert_size_stride(permute_222, (2048, 512), (512, 1))
    assert_size_stride(div_74, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_226, (512, 512), (512, 1))
    assert_size_stride(permute_231, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_232, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_25, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_233, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_234, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_237, (1536, 512), (512, 1))
    assert_size_stride(div_75, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_241, (512, 2048), (2048, 1))
    assert_size_stride(permute_245, (2048, 512), (512, 1))
    assert_size_stride(div_76, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_249, (512, 512), (512, 1))
    assert_size_stride(permute_254, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_255, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_26, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_256, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_257, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_260, (1536, 512), (512, 1))
    assert_size_stride(div_77, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_264, (512, 2048), (2048, 1))
    assert_size_stride(permute_268, (2048, 512), (512, 1))
    assert_size_stride(div_78, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_272, (512, 512), (512, 1))
    assert_size_stride(permute_277, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_278, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_27, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_279, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_280, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_283, (1536, 512), (512, 1))
    assert_size_stride(div_79, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_287, (512, 2048), (2048, 1))
    assert_size_stride(permute_291, (2048, 512), (512, 1))
    assert_size_stride(div_80, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_295, (512, 512), (512, 1))
    assert_size_stride(permute_300, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_301, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_28, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_302, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_303, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_306, (1536, 512), (512, 1))
    assert_size_stride(div_81, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_310, (512, 2048), (2048, 1))
    assert_size_stride(permute_314, (2048, 512), (512, 1))
    assert_size_stride(div_82, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_318, (512, 512), (512, 1))
    assert_size_stride(permute_323, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_324, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_29, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_325, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_326, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_329, (1536, 512), (512, 1))
    assert_size_stride(div_83, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_333, (512, 2048), (2048, 1))
    assert_size_stride(permute_337, (2048, 512), (512, 1))
    assert_size_stride(div_84, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_341, (512, 512), (512, 1))
    assert_size_stride(permute_346, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_347, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_30, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_348, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_349, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_352, (1536, 512), (512, 1))
    assert_size_stride(div_85, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_356, (512, 2048), (2048, 1))
    assert_size_stride(permute_360, (2048, 512), (512, 1))
    assert_size_stride(div_86, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_364, (512, 512), (512, 1))
    assert_size_stride(permute_369, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_370, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_31, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_371, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_372, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_375, (1536, 512), (512, 1))
    assert_size_stride(div_87, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_379, (512, 2048), (2048, 1))
    assert_size_stride(permute_383, (2048, 512), (512, 1))
    assert_size_stride(div_88, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_387, (512, 512), (512, 1))
    assert_size_stride(permute_392, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_393, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_32, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_394, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_395, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_398, (1536, 512), (512, 1))
    assert_size_stride(div_89, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_402, (512, 2048), (2048, 1))
    assert_size_stride(permute_406, (2048, 512), (512, 1))
    assert_size_stride(div_90, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_410, (512, 512), (512, 1))
    assert_size_stride(permute_415, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_416, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_33, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_417, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_418, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_421, (1536, 512), (512, 1))
    assert_size_stride(div_91, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_425, (512, 2048), (2048, 1))
    assert_size_stride(permute_429, (2048, 512), (512, 1))
    assert_size_stride(div_92, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_433, (512, 512), (512, 1))
    assert_size_stride(permute_438, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_439, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_34, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_440, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_441, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_444, (1536, 512), (512, 1))
    assert_size_stride(div_93, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_448, (512, 2048), (2048, 1))
    assert_size_stride(permute_452, (2048, 512), (512, 1))
    assert_size_stride(div_94, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_456, (512, 512), (512, 1))
    assert_size_stride(permute_461, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_462, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_35, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_463, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_464, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_467, (1536, 512), (512, 1))
    assert_size_stride(div_95, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_471, (512, 2048), (2048, 1))
    assert_size_stride(permute_475, (2048, 512), (512, 1))
    assert_size_stride(div_96, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_479, (512, 512), (512, 1))
    assert_size_stride(permute_484, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_485, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_36, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_486, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_487, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_490, (1536, 512), (512, 1))
    assert_size_stride(div_97, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_494, (512, 2048), (2048, 1))
    assert_size_stride(permute_498, (2048, 512), (512, 1))
    assert_size_stride(div_98, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_502, (512, 512), (512, 1))
    assert_size_stride(permute_507, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_508, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_37, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_509, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_510, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_513, (1536, 512), (512, 1))
    assert_size_stride(div_99, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_517, (512, 2048), (2048, 1))
    assert_size_stride(permute_521, (2048, 512), (512, 1))
    assert_size_stride(div_100, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_525, (512, 512), (512, 1))
    assert_size_stride(permute_530, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_531, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_38, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_532, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_533, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_536, (1536, 512), (512, 1))
    assert_size_stride(div_101, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_540, (512, 2048), (2048, 1))
    assert_size_stride(permute_544, (2048, 512), (512, 1))
    assert_size_stride(div_102, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_548, (512, 512), (512, 1))
    assert_size_stride(permute_553, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_554, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_39, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_555, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_556, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_559, (1536, 512), (512, 1))
    assert_size_stride(div_103, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_563, (512, 2048), (2048, 1))
    assert_size_stride(permute_567, (2048, 512), (512, 1))
    assert_size_stride(div_104, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_571, (512, 512), (512, 1))
    assert_size_stride(permute_576, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_577, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_40, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_578, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_579, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_582, (1536, 512), (512, 1))
    assert_size_stride(div_105, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_586, (512, 2048), (2048, 1))
    assert_size_stride(permute_590, (2048, 512), (512, 1))
    assert_size_stride(div_106, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_594, (512, 512), (512, 1))
    assert_size_stride(permute_599, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_600, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_41, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_601, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_602, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_605, (1536, 512), (512, 1))
    assert_size_stride(div_107, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_609, (512, 2048), (2048, 1))
    assert_size_stride(permute_613, (2048, 512), (512, 1))
    assert_size_stride(div_108, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_617, (512, 512), (512, 1))
    assert_size_stride(permute_622, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_623, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_42, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_624, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_625, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_628, (1536, 512), (512, 1))
    assert_size_stride(div_109, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_632, (512, 2048), (2048, 1))
    assert_size_stride(permute_636, (2048, 512), (512, 1))
    assert_size_stride(div_110, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_640, (512, 512), (512, 1))
    assert_size_stride(permute_645, (128, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_646, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_43, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1))
    assert_size_stride(permute_647, (128, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_648, (128, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_651, (1536, 512), (512, 1))
    assert_size_stride(div_111, (8, 1, 196, 1), (196, 1, 1, 1))
    assert_size_stride(permute_661, (256, 1024), (1024, 1))
    assert_size_stride(permute_665, (1024, 256), (256, 1))
    assert_size_stride(div_113, (8, 4, 196, 1), (784, 1, 4, 4))
    assert_size_stride(permute_669, (256, 256), (256, 1))
    assert_size_stride(permute_674, (256, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_675, (256, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_44, (8, 8, 4, 196, 196), (1229312, 153664, 38416, 196, 1))
    assert_size_stride(permute_676, (256, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_677, (256, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_680, (768, 256), (256, 1))
    assert_size_stride(div_114, (8, 4, 196, 1), (784, 1, 4, 4))
    assert_size_stride(permute_684, (256, 1024), (1024, 1))
    assert_size_stride(permute_688, (1024, 256), (256, 1))
    assert_size_stride(div_115, (8, 4, 196, 1), (784, 1, 4, 4))
    assert_size_stride(permute_692, (256, 256), (256, 1))
    assert_size_stride(permute_697, (256, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_698, (256, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_45, (8, 8, 4, 196, 196), (1229312, 153664, 38416, 196, 1))
    assert_size_stride(permute_699, (256, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_700, (256, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_703, (768, 256), (256, 1))
    assert_size_stride(div_116, (8, 4, 196, 1), (784, 1, 4, 4))
    assert_size_stride(permute_713, (128, 512), (512, 1))
    assert_size_stride(permute_717, (512, 128), (128, 1))
    assert_size_stride(div_118, (8, 16, 196, 1), (3136, 1, 16, 16))
    assert_size_stride(permute_721, (128, 128), (128, 1))
    assert_size_stride(permute_726, (512, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_727, (512, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_46, (8, 4, 16, 196, 196), (2458624, 614656, 38416, 196, 1))
    assert_size_stride(permute_728, (512, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_729, (512, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_732, (384, 128), (128, 1))
    assert_size_stride(div_119, (8, 16, 196, 1), (3136, 1, 16, 16))
    assert_size_stride(permute_736, (128, 512), (512, 1))
    assert_size_stride(permute_740, (512, 128), (128, 1))
    assert_size_stride(div_120, (8, 16, 196, 1), (3136, 1, 16, 16))
    assert_size_stride(permute_744, (128, 128), (128, 1))
    assert_size_stride(permute_749, (512, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_750, (512, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_47, (8, 4, 16, 196, 196), (2458624, 614656, 38416, 196, 1))
    assert_size_stride(permute_751, (512, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_752, (512, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_755, (384, 128), (128, 1))
    assert_size_stride(div_121, (8, 16, 196, 1), (3136, 1, 16, 16))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_187, out=buf0)
    del permute_187
    buf1 = empty((1000, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), clone_172, out=buf1)
    del clone_172
    buf2 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf4 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf6 = empty_strided((8, 14, 14, 1), (196, 14, 1, 1568), device='cpu', dtype=torch.float32)
    buf7 = empty_strided((8, 14, 14, 1), (196, 1, 14, 1568), device='cpu', dtype=torch.float32)
    buf8 = empty((512, ), device='cpu', dtype=torch.float32)
    buf9 = empty((512, ), device='cpu', dtype=torch.float32)
    buf10 = empty_strided((8, 14, 14, 512), (100352, 1, 7168, 14), device='cpu', dtype=torch.float32)
    buf11 = empty((8, 1, 196, 512), device='cpu', dtype=torch.float32)
    cpp_fused_as_strided_scatter_div_mul_native_layer_norm_backward_sum_0(c_void_p(tangents_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(primals_104.data_ptr()), c_void_p(mul_266.data_ptr()), c_void_p(div_71.data_ptr()), c_void_p(bernoulli_45.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()))
    del bernoulli_45
    del buf0
    del buf4
    del div_71
    del mul_266
    del primals_104
    del tangents_1
    buf12 = empty((1568, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf11, (1568, 512), (512, 1), 0), permute_195, out=buf12)
    del permute_195
    buf13 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf11, (512, 1568), (1, 512), 0), view_392, out=buf13)
    del view_392
    buf14 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf15 = reinterpret_tensor(buf12, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf12  # reuse
    cpp_fused_gelu_gelu_backward_sum_1(c_void_p(buf15.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(addmm_94.data_ptr()), c_void_p(buf14.data_ptr()))
    del addmm_94
    buf16 = reinterpret_tensor(buf11, (1568, 512), (512, 1), 0); del buf11  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf15, (1568, 2048), (2048, 1), 0), permute_199, out=buf16)
    del permute_199
    buf17 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf15, (2048, 1568), (1, 2048), 0), view_390, out=buf17)
    del view_390
    buf18 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf19 = reinterpret_tensor(buf7, (8, 1, 196, 1), (196, 1568, 1, 1568), 0); del buf7  # reuse
    buf20 = reinterpret_tensor(buf6, (8, 1, 196, 1), (196, 1568, 1, 1568), 0); del buf6  # reuse
    buf21 = empty((512, ), device='cpu', dtype=torch.float32)
    buf22 = empty((512, ), device='cpu', dtype=torch.float32)
    buf23 = reinterpret_tensor(buf16, (8, 1, 196, 512), (100352, 802816, 512, 1), 0); del buf16  # reuse
    buf24 = empty((8, 1, 196, 512), device='cpu', dtype=torch.float32)
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_2(c_void_p(buf23.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(primals_102.data_ptr()), c_void_p(mul_260.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(div_72.data_ptr()), c_void_p(bernoulli_44.data_ptr()), c_void_p(buf18.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(buf20.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf24.data_ptr()))
    del bernoulli_44
    del div_72
    del mul_260
    del primals_102
    buf25 = reinterpret_tensor(buf10, (1568, 512), (512, 1), 0); del buf10  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf24, (1568, 512), (512, 1), 0), permute_203, out=buf25)
    del permute_203
    buf26 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf24, (512, 1568), (1, 512), 0), view_388, out=buf26)
    del view_388
    buf27 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf28 = empty((8, 16, 1, 196, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_sum_3(c_void_p(buf24.data_ptr()), c_void_p(buf25.data_ptr()), c_void_p(buf27.data_ptr()), c_void_p(buf28.data_ptr()))
    buf29 = reinterpret_tensor(buf25, (128, 196, 32), (6272, 32, 1), 0); del buf25  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_208, reinterpret_tensor(buf28, (128, 196, 32), (6272, 32, 1), 0), out=buf29)
    del permute_208
    buf30 = empty((128, 196, 196), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf28, (128, 196, 32), (6272, 32, 1), 0), permute_209, out=buf30)
    del permute_209
    buf31 = empty_strided((8, 16, 1, 196, 1), (3136, 196, 25088, 1, 25088), device='cpu', dtype=torch.float32)
    buf32 = reinterpret_tensor(buf30, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf30  # reuse
    cpp_fused__softmax_backward_data_4(c_void_p(buf32.data_ptr()), c_void_p(alias_24.data_ptr()), c_void_p(buf31.data_ptr()))
    del alias_24
    buf33 = reinterpret_tensor(buf28, (128, 32, 196), (6272, 196, 1), 0); del buf28  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_210, reinterpret_tensor(buf32, (128, 196, 196), (38416, 196, 1), 0), out=buf33)
    del permute_210
    buf34 = reinterpret_tensor(buf24, (128, 196, 32), (6272, 32, 1), 0); del buf24  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf32, (128, 196, 196), (38416, 196, 1), 0), permute_211, out=buf34)
    del permute_211
    buf35 = empty((8, 1, 196, 3, 16, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_5(c_void_p(buf34.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(buf29.data_ptr()), c_void_p(buf35.data_ptr()))
    buf36 = reinterpret_tensor(buf34, (1568, 512), (512, 1), 0); del buf34  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf35, (1568, 1536), (1536, 1), 0), permute_214, out=buf36)
    del permute_214
    buf37 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf35, (1536, 1568), (1, 1536), 0), view_378, out=buf37)
    del view_378
    buf38 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf39 = buf20; del buf20  # reuse
    buf40 = buf19; del buf19  # reuse
    buf41 = empty((512, ), device='cpu', dtype=torch.float32)
    buf42 = empty((512, ), device='cpu', dtype=torch.float32)
    buf43 = buf23; del buf23  # reuse
    buf44 = reinterpret_tensor(buf33, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf33  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_6(c_void_p(buf43.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(primals_100.data_ptr()), c_void_p(mul_255.data_ptr()), c_void_p(div_73.data_ptr()), c_void_p(bernoulli_43.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf39.data_ptr()), c_void_p(buf40.data_ptr()), c_void_p(buf41.data_ptr()), c_void_p(buf42.data_ptr()), c_void_p(buf44.data_ptr()))
    del bernoulli_43
    del div_73
    del mul_255
    del primals_100
    buf45 = reinterpret_tensor(buf15, (1568, 2048), (2048, 1), 0); del buf15  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf44, (1568, 512), (512, 1), 0), permute_218, out=buf45)
    del permute_218
    buf46 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf44, (512, 1568), (1, 512), 0), view_376, out=buf46)
    del view_376
    buf47 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf48 = reinterpret_tensor(buf45, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf45  # reuse
    cpp_fused_gelu_gelu_backward_sum_7(c_void_p(buf48.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(addmm_90.data_ptr()), c_void_p(buf47.data_ptr()))
    del addmm_90
    buf49 = reinterpret_tensor(buf44, (1568, 512), (512, 1), 0); del buf44  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf48, (1568, 2048), (2048, 1), 0), permute_222, out=buf49)
    del permute_222
    buf50 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf48, (2048, 1568), (1, 2048), 0), view_374, out=buf50)
    del view_374
    buf51 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf52 = buf40; del buf40  # reuse
    buf53 = buf39; del buf39  # reuse
    buf54 = empty((512, ), device='cpu', dtype=torch.float32)
    buf55 = empty((512, ), device='cpu', dtype=torch.float32)
    buf56 = buf43; del buf43  # reuse
    buf57 = reinterpret_tensor(buf36, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf36  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_8(c_void_p(buf56.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(buf49.data_ptr()), c_void_p(primals_98.data_ptr()), c_void_p(mul_249.data_ptr()), c_void_p(div_74.data_ptr()), c_void_p(bernoulli_42.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(buf53.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf55.data_ptr()), c_void_p(buf57.data_ptr()))
    del bernoulli_42
    del div_74
    del mul_249
    del primals_98
    buf58 = buf49; del buf49  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf57, (1568, 512), (512, 1), 0), permute_226, out=buf58)
    del permute_226
    buf59 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf57, (512, 1568), (1, 512), 0), view_372, out=buf59)
    del view_372
    buf60 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf61 = reinterpret_tensor(buf29, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf29  # reuse
    cpp_fused_clone_sum_9(c_void_p(buf57.data_ptr()), c_void_p(buf58.data_ptr()), c_void_p(buf60.data_ptr()), c_void_p(buf61.data_ptr()))
    buf62 = reinterpret_tensor(buf58, (128, 196, 32), (6272, 32, 1), 0); del buf58  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_231, reinterpret_tensor(buf61, (128, 196, 32), (6272, 32, 1), 0), out=buf62)
    del permute_231
    buf63 = reinterpret_tensor(buf32, (128, 196, 196), (38416, 196, 1), 0); del buf32  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf61, (128, 196, 32), (6272, 32, 1), 0), permute_232, out=buf63)
    del permute_232
    buf64 = buf31; del buf31  # reuse
    buf65 = reinterpret_tensor(buf63, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf63  # reuse
    cpp_fused__softmax_backward_data_10(c_void_p(buf65.data_ptr()), c_void_p(alias_25.data_ptr()), c_void_p(buf64.data_ptr()))
    del alias_25
    buf66 = reinterpret_tensor(buf61, (128, 32, 196), (6272, 196, 1), 0); del buf61  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_233, reinterpret_tensor(buf65, (128, 196, 196), (38416, 196, 1), 0), out=buf66)
    del permute_233
    buf67 = reinterpret_tensor(buf57, (128, 196, 32), (6272, 32, 1), 0); del buf57  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf65, (128, 196, 196), (38416, 196, 1), 0), permute_234, out=buf67)
    del permute_234
    buf68 = buf35; del buf35  # reuse
    cpp_fused_clone_11(c_void_p(buf67.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf62.data_ptr()), c_void_p(buf68.data_ptr()))
    buf69 = reinterpret_tensor(buf67, (1568, 512), (512, 1), 0); del buf67  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf68, (1568, 1536), (1536, 1), 0), permute_237, out=buf69)
    del permute_237
    buf70 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf68, (1536, 1568), (1, 1536), 0), view_362, out=buf70)
    del view_362
    buf71 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf72 = buf53; del buf53  # reuse
    buf73 = buf52; del buf52  # reuse
    buf74 = empty((512, ), device='cpu', dtype=torch.float32)
    buf75 = empty((512, ), device='cpu', dtype=torch.float32)
    buf76 = buf56; del buf56  # reuse
    buf77 = reinterpret_tensor(buf66, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf66  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_12(c_void_p(buf76.data_ptr()), c_void_p(buf68.data_ptr()), c_void_p(buf69.data_ptr()), c_void_p(primals_96.data_ptr()), c_void_p(mul_244.data_ptr()), c_void_p(div_75.data_ptr()), c_void_p(bernoulli_41.data_ptr()), c_void_p(buf71.data_ptr()), c_void_p(buf72.data_ptr()), c_void_p(buf73.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf75.data_ptr()), c_void_p(buf77.data_ptr()))
    del bernoulli_41
    del div_75
    del mul_244
    del primals_96
    buf78 = reinterpret_tensor(buf48, (1568, 2048), (2048, 1), 0); del buf48  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf77, (1568, 512), (512, 1), 0), permute_241, out=buf78)
    del permute_241
    buf79 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf77, (512, 1568), (1, 512), 0), view_360, out=buf79)
    del view_360
    buf80 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf81 = reinterpret_tensor(buf78, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf78  # reuse
    cpp_fused_gelu_gelu_backward_sum_13(c_void_p(buf81.data_ptr()), c_void_p(buf77.data_ptr()), c_void_p(addmm_86.data_ptr()), c_void_p(buf80.data_ptr()))
    del addmm_86
    buf82 = reinterpret_tensor(buf77, (1568, 512), (512, 1), 0); del buf77  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf81, (1568, 2048), (2048, 1), 0), permute_245, out=buf82)
    del permute_245
    buf83 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf81, (2048, 1568), (1, 2048), 0), view_358, out=buf83)
    del view_358
    buf84 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf85 = buf73; del buf73  # reuse
    buf86 = buf72; del buf72  # reuse
    buf87 = empty((512, ), device='cpu', dtype=torch.float32)
    buf88 = empty((512, ), device='cpu', dtype=torch.float32)
    buf89 = buf76; del buf76  # reuse
    buf90 = reinterpret_tensor(buf69, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf69  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_14(c_void_p(buf89.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(primals_94.data_ptr()), c_void_p(mul_238.data_ptr()), c_void_p(div_76.data_ptr()), c_void_p(bernoulli_40.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(buf86.data_ptr()), c_void_p(buf87.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(buf90.data_ptr()))
    del bernoulli_40
    del div_76
    del mul_238
    del primals_94
    buf91 = buf82; del buf82  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf90, (1568, 512), (512, 1), 0), permute_249, out=buf91)
    del permute_249
    buf92 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf90, (512, 1568), (1, 512), 0), view_356, out=buf92)
    del view_356
    buf93 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf94 = reinterpret_tensor(buf62, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf62  # reuse
    cpp_fused_clone_sum_15(c_void_p(buf90.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf93.data_ptr()), c_void_p(buf94.data_ptr()))
    buf95 = reinterpret_tensor(buf91, (128, 196, 32), (6272, 32, 1), 0); del buf91  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_254, reinterpret_tensor(buf94, (128, 196, 32), (6272, 32, 1), 0), out=buf95)
    del permute_254
    buf96 = reinterpret_tensor(buf65, (128, 196, 196), (38416, 196, 1), 0); del buf65  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf94, (128, 196, 32), (6272, 32, 1), 0), permute_255, out=buf96)
    del permute_255
    buf97 = buf64; del buf64  # reuse
    buf98 = reinterpret_tensor(buf96, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf96  # reuse
    cpp_fused__softmax_backward_data_16(c_void_p(buf98.data_ptr()), c_void_p(alias_26.data_ptr()), c_void_p(buf97.data_ptr()))
    del alias_26
    buf99 = reinterpret_tensor(buf94, (128, 32, 196), (6272, 196, 1), 0); del buf94  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_256, reinterpret_tensor(buf98, (128, 196, 196), (38416, 196, 1), 0), out=buf99)
    del permute_256
    buf100 = reinterpret_tensor(buf90, (128, 196, 32), (6272, 32, 1), 0); del buf90  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf98, (128, 196, 196), (38416, 196, 1), 0), permute_257, out=buf100)
    del permute_257
    buf101 = buf68; del buf68  # reuse
    cpp_fused_clone_17(c_void_p(buf100.data_ptr()), c_void_p(buf99.data_ptr()), c_void_p(buf95.data_ptr()), c_void_p(buf101.data_ptr()))
    buf102 = reinterpret_tensor(buf99, (1568, 512), (512, 1), 0); del buf99  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf101, (1568, 1536), (1536, 1), 0), permute_260, out=buf102)
    del permute_260
    buf103 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf101, (1536, 1568), (1, 1536), 0), view_346, out=buf103)
    del view_346
    buf104 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf105 = buf86; del buf86  # reuse
    buf106 = buf85; del buf85  # reuse
    buf107 = empty((512, ), device='cpu', dtype=torch.float32)
    buf108 = empty((512, ), device='cpu', dtype=torch.float32)
    buf109 = reinterpret_tensor(buf102, (8, 1, 196, 512), (100352, 802816, 512, 1), 0); del buf102  # reuse
    buf110 = reinterpret_tensor(buf95, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf95  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_18(c_void_p(buf109.data_ptr()), c_void_p(buf101.data_ptr()), c_void_p(primals_92.data_ptr()), c_void_p(mul_233.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(div_77.data_ptr()), c_void_p(bernoulli_39.data_ptr()), c_void_p(buf104.data_ptr()), c_void_p(buf105.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(buf107.data_ptr()), c_void_p(buf108.data_ptr()), c_void_p(buf110.data_ptr()))
    del bernoulli_39
    del div_77
    del mul_233
    del primals_92
    buf111 = reinterpret_tensor(buf81, (1568, 2048), (2048, 1), 0); del buf81  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf110, (1568, 512), (512, 1), 0), permute_264, out=buf111)
    del permute_264
    buf112 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf110, (512, 1568), (1, 512), 0), view_344, out=buf112)
    del view_344
    buf113 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf114 = reinterpret_tensor(buf111, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf111  # reuse
    cpp_fused_gelu_gelu_backward_sum_19(c_void_p(buf114.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(addmm_82.data_ptr()), c_void_p(buf113.data_ptr()))
    del addmm_82
    buf115 = reinterpret_tensor(buf110, (1568, 512), (512, 1), 0); del buf110  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf114, (1568, 2048), (2048, 1), 0), permute_268, out=buf115)
    del permute_268
    buf116 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf114, (2048, 1568), (1, 2048), 0), view_342, out=buf116)
    del view_342
    buf117 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf118 = buf106; del buf106  # reuse
    buf119 = buf105; del buf105  # reuse
    buf120 = empty((512, ), device='cpu', dtype=torch.float32)
    buf121 = empty((512, ), device='cpu', dtype=torch.float32)
    buf122 = buf109; del buf109  # reuse
    buf123 = reinterpret_tensor(buf89, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf89  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_20(c_void_p(buf122.data_ptr()), c_void_p(buf114.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(primals_90.data_ptr()), c_void_p(mul_227.data_ptr()), c_void_p(div_78.data_ptr()), c_void_p(bernoulli_38.data_ptr()), c_void_p(buf117.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(buf123.data_ptr()))
    del bernoulli_38
    del div_78
    del mul_227
    del primals_90
    buf124 = buf115; del buf115  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf123, (1568, 512), (512, 1), 0), permute_272, out=buf124)
    del permute_272
    buf125 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf123, (512, 1568), (1, 512), 0), view_340, out=buf125)
    del view_340
    buf126 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf127 = reinterpret_tensor(buf100, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf100  # reuse
    cpp_fused_clone_sum_21(c_void_p(buf123.data_ptr()), c_void_p(buf124.data_ptr()), c_void_p(buf126.data_ptr()), c_void_p(buf127.data_ptr()))
    buf128 = reinterpret_tensor(buf124, (128, 196, 32), (6272, 32, 1), 0); del buf124  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_277, reinterpret_tensor(buf127, (128, 196, 32), (6272, 32, 1), 0), out=buf128)
    del permute_277
    buf129 = reinterpret_tensor(buf98, (128, 196, 196), (38416, 196, 1), 0); del buf98  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf127, (128, 196, 32), (6272, 32, 1), 0), permute_278, out=buf129)
    del permute_278
    buf130 = buf97; del buf97  # reuse
    buf131 = reinterpret_tensor(buf129, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf129  # reuse
    cpp_fused__softmax_backward_data_22(c_void_p(buf131.data_ptr()), c_void_p(alias_27.data_ptr()), c_void_p(buf130.data_ptr()))
    del alias_27
    buf132 = reinterpret_tensor(buf127, (128, 32, 196), (6272, 196, 1), 0); del buf127  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_279, reinterpret_tensor(buf131, (128, 196, 196), (38416, 196, 1), 0), out=buf132)
    del permute_279
    buf133 = reinterpret_tensor(buf123, (128, 196, 32), (6272, 32, 1), 0); del buf123  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf131, (128, 196, 196), (38416, 196, 1), 0), permute_280, out=buf133)
    del permute_280
    buf134 = buf101; del buf101  # reuse
    cpp_fused_clone_23(c_void_p(buf133.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(buf134.data_ptr()))
    buf135 = reinterpret_tensor(buf133, (1568, 512), (512, 1), 0); del buf133  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf134, (1568, 1536), (1536, 1), 0), permute_283, out=buf135)
    del permute_283
    buf136 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf134, (1536, 1568), (1, 1536), 0), view_330, out=buf136)
    del view_330
    buf137 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf138 = buf119; del buf119  # reuse
    buf139 = buf118; del buf118  # reuse
    buf140 = empty((512, ), device='cpu', dtype=torch.float32)
    buf141 = empty((512, ), device='cpu', dtype=torch.float32)
    buf142 = buf122; del buf122  # reuse
    buf143 = reinterpret_tensor(buf132, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf132  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_24(c_void_p(buf142.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(buf135.data_ptr()), c_void_p(primals_88.data_ptr()), c_void_p(mul_222.data_ptr()), c_void_p(div_79.data_ptr()), c_void_p(bernoulli_37.data_ptr()), c_void_p(buf137.data_ptr()), c_void_p(buf138.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf140.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(buf143.data_ptr()))
    del bernoulli_37
    del div_79
    del mul_222
    del primals_88
    buf144 = reinterpret_tensor(buf114, (1568, 2048), (2048, 1), 0); del buf114  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf143, (1568, 512), (512, 1), 0), permute_287, out=buf144)
    del permute_287
    buf145 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf143, (512, 1568), (1, 512), 0), view_328, out=buf145)
    del view_328
    buf146 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf147 = reinterpret_tensor(buf144, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf144  # reuse
    cpp_fused_gelu_gelu_backward_sum_25(c_void_p(buf147.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(addmm_78.data_ptr()), c_void_p(buf146.data_ptr()))
    del addmm_78
    buf148 = reinterpret_tensor(buf143, (1568, 512), (512, 1), 0); del buf143  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf147, (1568, 2048), (2048, 1), 0), permute_291, out=buf148)
    del permute_291
    buf149 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf147, (2048, 1568), (1, 2048), 0), view_326, out=buf149)
    del view_326
    buf150 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf151 = buf139; del buf139  # reuse
    buf152 = buf138; del buf138  # reuse
    buf153 = empty((512, ), device='cpu', dtype=torch.float32)
    buf154 = empty((512, ), device='cpu', dtype=torch.float32)
    buf155 = buf142; del buf142  # reuse
    buf156 = reinterpret_tensor(buf135, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf135  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_26(c_void_p(buf155.data_ptr()), c_void_p(buf147.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(primals_86.data_ptr()), c_void_p(mul_216.data_ptr()), c_void_p(div_80.data_ptr()), c_void_p(bernoulli_36.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf156.data_ptr()))
    del bernoulli_36
    del div_80
    del mul_216
    del primals_86
    buf157 = buf148; del buf148  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf156, (1568, 512), (512, 1), 0), permute_295, out=buf157)
    del permute_295
    buf158 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf156, (512, 1568), (1, 512), 0), view_324, out=buf158)
    del view_324
    buf159 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf160 = reinterpret_tensor(buf128, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf128  # reuse
    cpp_fused_clone_sum_27(c_void_p(buf156.data_ptr()), c_void_p(buf157.data_ptr()), c_void_p(buf159.data_ptr()), c_void_p(buf160.data_ptr()))
    buf161 = reinterpret_tensor(buf157, (128, 196, 32), (6272, 32, 1), 0); del buf157  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_300, reinterpret_tensor(buf160, (128, 196, 32), (6272, 32, 1), 0), out=buf161)
    del permute_300
    buf162 = reinterpret_tensor(buf131, (128, 196, 196), (38416, 196, 1), 0); del buf131  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf160, (128, 196, 32), (6272, 32, 1), 0), permute_301, out=buf162)
    del permute_301
    buf163 = buf130; del buf130  # reuse
    buf164 = reinterpret_tensor(buf162, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf162  # reuse
    cpp_fused__softmax_backward_data_28(c_void_p(buf164.data_ptr()), c_void_p(alias_28.data_ptr()), c_void_p(buf163.data_ptr()))
    del alias_28
    buf165 = reinterpret_tensor(buf160, (128, 32, 196), (6272, 196, 1), 0); del buf160  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_302, reinterpret_tensor(buf164, (128, 196, 196), (38416, 196, 1), 0), out=buf165)
    del permute_302
    buf166 = reinterpret_tensor(buf156, (128, 196, 32), (6272, 32, 1), 0); del buf156  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf164, (128, 196, 196), (38416, 196, 1), 0), permute_303, out=buf166)
    del permute_303
    buf167 = buf134; del buf134  # reuse
    cpp_fused_clone_29(c_void_p(buf166.data_ptr()), c_void_p(buf165.data_ptr()), c_void_p(buf161.data_ptr()), c_void_p(buf167.data_ptr()))
    buf168 = reinterpret_tensor(buf166, (1568, 512), (512, 1), 0); del buf166  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf167, (1568, 1536), (1536, 1), 0), permute_306, out=buf168)
    del permute_306
    buf169 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf167, (1536, 1568), (1, 1536), 0), view_314, out=buf169)
    del view_314
    buf170 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf171 = buf152; del buf152  # reuse
    buf172 = buf151; del buf151  # reuse
    buf173 = empty((512, ), device='cpu', dtype=torch.float32)
    buf174 = empty((512, ), device='cpu', dtype=torch.float32)
    buf175 = buf155; del buf155  # reuse
    buf176 = reinterpret_tensor(buf165, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf165  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_30(c_void_p(buf175.data_ptr()), c_void_p(buf167.data_ptr()), c_void_p(buf168.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(mul_211.data_ptr()), c_void_p(div_81.data_ptr()), c_void_p(bernoulli_35.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(buf171.data_ptr()), c_void_p(buf172.data_ptr()), c_void_p(buf173.data_ptr()), c_void_p(buf174.data_ptr()), c_void_p(buf176.data_ptr()))
    del bernoulli_35
    del div_81
    del mul_211
    del primals_84
    buf177 = reinterpret_tensor(buf147, (1568, 2048), (2048, 1), 0); del buf147  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf176, (1568, 512), (512, 1), 0), permute_310, out=buf177)
    del permute_310
    buf178 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf176, (512, 1568), (1, 512), 0), view_312, out=buf178)
    del view_312
    buf179 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf180 = reinterpret_tensor(buf177, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf177  # reuse
    cpp_fused_gelu_gelu_backward_sum_31(c_void_p(buf180.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(addmm_74.data_ptr()), c_void_p(buf179.data_ptr()))
    del addmm_74
    buf181 = reinterpret_tensor(buf176, (1568, 512), (512, 1), 0); del buf176  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf180, (1568, 2048), (2048, 1), 0), permute_314, out=buf181)
    del permute_314
    buf182 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf180, (2048, 1568), (1, 2048), 0), view_310, out=buf182)
    del view_310
    buf183 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf184 = buf172; del buf172  # reuse
    buf185 = buf171; del buf171  # reuse
    buf186 = empty((512, ), device='cpu', dtype=torch.float32)
    buf187 = empty((512, ), device='cpu', dtype=torch.float32)
    buf188 = buf175; del buf175  # reuse
    buf189 = reinterpret_tensor(buf168, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf168  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_32(c_void_p(buf188.data_ptr()), c_void_p(buf180.data_ptr()), c_void_p(buf181.data_ptr()), c_void_p(primals_82.data_ptr()), c_void_p(mul_205.data_ptr()), c_void_p(div_82.data_ptr()), c_void_p(bernoulli_34.data_ptr()), c_void_p(buf183.data_ptr()), c_void_p(buf184.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf187.data_ptr()), c_void_p(buf189.data_ptr()))
    del bernoulli_34
    del div_82
    del mul_205
    del primals_82
    buf190 = buf181; del buf181  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf189, (1568, 512), (512, 1), 0), permute_318, out=buf190)
    del permute_318
    buf191 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf189, (512, 1568), (1, 512), 0), view_308, out=buf191)
    del view_308
    buf192 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf193 = reinterpret_tensor(buf161, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf161  # reuse
    cpp_fused_clone_sum_33(c_void_p(buf189.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf193.data_ptr()))
    buf194 = reinterpret_tensor(buf190, (128, 196, 32), (6272, 32, 1), 0); del buf190  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_323, reinterpret_tensor(buf193, (128, 196, 32), (6272, 32, 1), 0), out=buf194)
    del permute_323
    buf195 = reinterpret_tensor(buf164, (128, 196, 196), (38416, 196, 1), 0); del buf164  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf193, (128, 196, 32), (6272, 32, 1), 0), permute_324, out=buf195)
    del permute_324
    buf196 = buf163; del buf163  # reuse
    buf197 = reinterpret_tensor(buf195, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf195  # reuse
    cpp_fused__softmax_backward_data_34(c_void_p(buf197.data_ptr()), c_void_p(alias_29.data_ptr()), c_void_p(buf196.data_ptr()))
    del alias_29
    buf198 = reinterpret_tensor(buf193, (128, 32, 196), (6272, 196, 1), 0); del buf193  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_325, reinterpret_tensor(buf197, (128, 196, 196), (38416, 196, 1), 0), out=buf198)
    del permute_325
    buf199 = reinterpret_tensor(buf189, (128, 196, 32), (6272, 32, 1), 0); del buf189  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf197, (128, 196, 196), (38416, 196, 1), 0), permute_326, out=buf199)
    del permute_326
    buf200 = buf167; del buf167  # reuse
    cpp_fused_clone_35(c_void_p(buf199.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf194.data_ptr()), c_void_p(buf200.data_ptr()))
    buf201 = reinterpret_tensor(buf199, (1568, 512), (512, 1), 0); del buf199  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf200, (1568, 1536), (1536, 1), 0), permute_329, out=buf201)
    del permute_329
    buf202 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf200, (1536, 1568), (1, 1536), 0), view_298, out=buf202)
    del view_298
    buf203 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf204 = buf185; del buf185  # reuse
    buf205 = buf184; del buf184  # reuse
    buf206 = empty((512, ), device='cpu', dtype=torch.float32)
    buf207 = empty((512, ), device='cpu', dtype=torch.float32)
    buf208 = buf188; del buf188  # reuse
    buf209 = reinterpret_tensor(buf198, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf198  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_36(c_void_p(buf208.data_ptr()), c_void_p(buf200.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(primals_80.data_ptr()), c_void_p(mul_200.data_ptr()), c_void_p(div_83.data_ptr()), c_void_p(bernoulli_33.data_ptr()), c_void_p(buf203.data_ptr()), c_void_p(buf204.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(buf206.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(buf209.data_ptr()))
    del bernoulli_33
    del div_83
    del mul_200
    del primals_80
    buf210 = reinterpret_tensor(buf180, (1568, 2048), (2048, 1), 0); del buf180  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf209, (1568, 512), (512, 1), 0), permute_333, out=buf210)
    del permute_333
    buf211 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf209, (512, 1568), (1, 512), 0), view_296, out=buf211)
    del view_296
    buf212 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf213 = reinterpret_tensor(buf210, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf210  # reuse
    cpp_fused_gelu_gelu_backward_sum_37(c_void_p(buf213.data_ptr()), c_void_p(buf209.data_ptr()), c_void_p(addmm_70.data_ptr()), c_void_p(buf212.data_ptr()))
    del addmm_70
    buf214 = reinterpret_tensor(buf209, (1568, 512), (512, 1), 0); del buf209  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf213, (1568, 2048), (2048, 1), 0), permute_337, out=buf214)
    del permute_337
    buf215 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf213, (2048, 1568), (1, 2048), 0), view_294, out=buf215)
    del view_294
    buf216 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf217 = buf205; del buf205  # reuse
    buf218 = buf204; del buf204  # reuse
    buf219 = empty((512, ), device='cpu', dtype=torch.float32)
    buf220 = empty((512, ), device='cpu', dtype=torch.float32)
    buf221 = buf208; del buf208  # reuse
    buf222 = reinterpret_tensor(buf201, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf201  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_38(c_void_p(buf221.data_ptr()), c_void_p(buf213.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(primals_78.data_ptr()), c_void_p(mul_194.data_ptr()), c_void_p(div_84.data_ptr()), c_void_p(bernoulli_32.data_ptr()), c_void_p(buf216.data_ptr()), c_void_p(buf217.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf219.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(buf222.data_ptr()))
    del bernoulli_32
    del div_84
    del mul_194
    del primals_78
    buf223 = buf214; del buf214  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf222, (1568, 512), (512, 1), 0), permute_341, out=buf223)
    del permute_341
    buf224 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf222, (512, 1568), (1, 512), 0), view_292, out=buf224)
    del view_292
    buf225 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf226 = reinterpret_tensor(buf194, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf194  # reuse
    cpp_fused_clone_sum_39(c_void_p(buf222.data_ptr()), c_void_p(buf223.data_ptr()), c_void_p(buf225.data_ptr()), c_void_p(buf226.data_ptr()))
    buf227 = reinterpret_tensor(buf223, (128, 196, 32), (6272, 32, 1), 0); del buf223  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_346, reinterpret_tensor(buf226, (128, 196, 32), (6272, 32, 1), 0), out=buf227)
    del permute_346
    buf228 = reinterpret_tensor(buf197, (128, 196, 196), (38416, 196, 1), 0); del buf197  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf226, (128, 196, 32), (6272, 32, 1), 0), permute_347, out=buf228)
    del permute_347
    buf229 = buf196; del buf196  # reuse
    buf230 = reinterpret_tensor(buf228, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf228  # reuse
    cpp_fused__softmax_backward_data_40(c_void_p(buf230.data_ptr()), c_void_p(alias_30.data_ptr()), c_void_p(buf229.data_ptr()))
    del alias_30
    buf231 = reinterpret_tensor(buf226, (128, 32, 196), (6272, 196, 1), 0); del buf226  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_348, reinterpret_tensor(buf230, (128, 196, 196), (38416, 196, 1), 0), out=buf231)
    del permute_348
    buf232 = reinterpret_tensor(buf222, (128, 196, 32), (6272, 32, 1), 0); del buf222  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf230, (128, 196, 196), (38416, 196, 1), 0), permute_349, out=buf232)
    del permute_349
    buf233 = buf200; del buf200  # reuse
    cpp_fused_clone_41(c_void_p(buf232.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(buf233.data_ptr()))
    buf234 = reinterpret_tensor(buf232, (1568, 512), (512, 1), 0); del buf232  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf233, (1568, 1536), (1536, 1), 0), permute_352, out=buf234)
    del permute_352
    buf235 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf233, (1536, 1568), (1, 1536), 0), view_282, out=buf235)
    del view_282
    buf236 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf237 = buf218; del buf218  # reuse
    buf238 = buf217; del buf217  # reuse
    buf239 = empty((512, ), device='cpu', dtype=torch.float32)
    buf240 = empty((512, ), device='cpu', dtype=torch.float32)
    buf241 = buf221; del buf221  # reuse
    buf242 = reinterpret_tensor(buf231, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf231  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_42(c_void_p(buf241.data_ptr()), c_void_p(buf233.data_ptr()), c_void_p(buf234.data_ptr()), c_void_p(primals_76.data_ptr()), c_void_p(mul_189.data_ptr()), c_void_p(div_85.data_ptr()), c_void_p(bernoulli_31.data_ptr()), c_void_p(buf236.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf238.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(buf242.data_ptr()))
    del bernoulli_31
    del div_85
    del mul_189
    del primals_76
    buf243 = reinterpret_tensor(buf213, (1568, 2048), (2048, 1), 0); del buf213  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf242, (1568, 512), (512, 1), 0), permute_356, out=buf243)
    del permute_356
    buf244 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf242, (512, 1568), (1, 512), 0), view_280, out=buf244)
    del view_280
    buf245 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf246 = reinterpret_tensor(buf243, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf243  # reuse
    cpp_fused_gelu_gelu_backward_sum_43(c_void_p(buf246.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(addmm_66.data_ptr()), c_void_p(buf245.data_ptr()))
    del addmm_66
    buf247 = reinterpret_tensor(buf242, (1568, 512), (512, 1), 0); del buf242  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf246, (1568, 2048), (2048, 1), 0), permute_360, out=buf247)
    del permute_360
    buf248 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf246, (2048, 1568), (1, 2048), 0), view_278, out=buf248)
    del view_278
    buf249 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf250 = buf238; del buf238  # reuse
    buf251 = buf237; del buf237  # reuse
    buf252 = empty((512, ), device='cpu', dtype=torch.float32)
    buf253 = empty((512, ), device='cpu', dtype=torch.float32)
    buf254 = buf241; del buf241  # reuse
    buf255 = reinterpret_tensor(buf234, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf234  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_44(c_void_p(buf254.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(buf247.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(mul_183.data_ptr()), c_void_p(div_86.data_ptr()), c_void_p(bernoulli_30.data_ptr()), c_void_p(buf249.data_ptr()), c_void_p(buf250.data_ptr()), c_void_p(buf251.data_ptr()), c_void_p(buf252.data_ptr()), c_void_p(buf253.data_ptr()), c_void_p(buf255.data_ptr()))
    del bernoulli_30
    del div_86
    del mul_183
    del primals_74
    buf256 = buf247; del buf247  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf255, (1568, 512), (512, 1), 0), permute_364, out=buf256)
    del permute_364
    buf257 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf255, (512, 1568), (1, 512), 0), view_276, out=buf257)
    del view_276
    buf258 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf259 = reinterpret_tensor(buf227, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf227  # reuse
    cpp_fused_clone_sum_45(c_void_p(buf255.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(buf258.data_ptr()), c_void_p(buf259.data_ptr()))
    buf260 = reinterpret_tensor(buf256, (128, 196, 32), (6272, 32, 1), 0); del buf256  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_369, reinterpret_tensor(buf259, (128, 196, 32), (6272, 32, 1), 0), out=buf260)
    del permute_369
    buf261 = reinterpret_tensor(buf230, (128, 196, 196), (38416, 196, 1), 0); del buf230  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf259, (128, 196, 32), (6272, 32, 1), 0), permute_370, out=buf261)
    del permute_370
    buf262 = buf229; del buf229  # reuse
    buf263 = reinterpret_tensor(buf261, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf261  # reuse
    cpp_fused__softmax_backward_data_46(c_void_p(buf263.data_ptr()), c_void_p(alias_31.data_ptr()), c_void_p(buf262.data_ptr()))
    del alias_31
    buf264 = reinterpret_tensor(buf259, (128, 32, 196), (6272, 196, 1), 0); del buf259  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_371, reinterpret_tensor(buf263, (128, 196, 196), (38416, 196, 1), 0), out=buf264)
    del permute_371
    buf265 = reinterpret_tensor(buf255, (128, 196, 32), (6272, 32, 1), 0); del buf255  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf263, (128, 196, 196), (38416, 196, 1), 0), permute_372, out=buf265)
    del permute_372
    buf266 = buf233; del buf233  # reuse
    cpp_fused_clone_47(c_void_p(buf265.data_ptr()), c_void_p(buf264.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(buf266.data_ptr()))
    buf267 = reinterpret_tensor(buf265, (1568, 512), (512, 1), 0); del buf265  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf266, (1568, 1536), (1536, 1), 0), permute_375, out=buf267)
    del permute_375
    buf268 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf266, (1536, 1568), (1, 1536), 0), view_266, out=buf268)
    del view_266
    buf269 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf270 = buf251; del buf251  # reuse
    buf271 = buf250; del buf250  # reuse
    buf272 = empty((512, ), device='cpu', dtype=torch.float32)
    buf273 = empty((512, ), device='cpu', dtype=torch.float32)
    buf274 = buf254; del buf254  # reuse
    buf275 = reinterpret_tensor(buf264, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf264  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_48(c_void_p(buf274.data_ptr()), c_void_p(buf266.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(primals_72.data_ptr()), c_void_p(mul_178.data_ptr()), c_void_p(div_87.data_ptr()), c_void_p(bernoulli_29.data_ptr()), c_void_p(buf269.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf275.data_ptr()))
    del bernoulli_29
    del div_87
    del mul_178
    del primals_72
    buf276 = reinterpret_tensor(buf246, (1568, 2048), (2048, 1), 0); del buf246  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf275, (1568, 512), (512, 1), 0), permute_379, out=buf276)
    del permute_379
    buf277 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf275, (512, 1568), (1, 512), 0), view_264, out=buf277)
    del view_264
    buf278 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf279 = reinterpret_tensor(buf276, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf276  # reuse
    cpp_fused_gelu_gelu_backward_sum_49(c_void_p(buf279.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(addmm_62.data_ptr()), c_void_p(buf278.data_ptr()))
    del addmm_62
    buf280 = reinterpret_tensor(buf275, (1568, 512), (512, 1), 0); del buf275  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf279, (1568, 2048), (2048, 1), 0), permute_383, out=buf280)
    del permute_383
    buf281 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf279, (2048, 1568), (1, 2048), 0), view_262, out=buf281)
    del view_262
    buf282 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf283 = buf271; del buf271  # reuse
    buf284 = buf270; del buf270  # reuse
    buf285 = empty((512, ), device='cpu', dtype=torch.float32)
    buf286 = empty((512, ), device='cpu', dtype=torch.float32)
    buf287 = buf274; del buf274  # reuse
    buf288 = reinterpret_tensor(buf267, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf267  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_50(c_void_p(buf287.data_ptr()), c_void_p(buf279.data_ptr()), c_void_p(buf280.data_ptr()), c_void_p(primals_70.data_ptr()), c_void_p(mul_172.data_ptr()), c_void_p(div_88.data_ptr()), c_void_p(bernoulli_28.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(buf283.data_ptr()), c_void_p(buf284.data_ptr()), c_void_p(buf285.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(buf288.data_ptr()))
    del bernoulli_28
    del div_88
    del mul_172
    del primals_70
    buf289 = buf280; del buf280  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf288, (1568, 512), (512, 1), 0), permute_387, out=buf289)
    del permute_387
    buf290 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf288, (512, 1568), (1, 512), 0), view_260, out=buf290)
    del view_260
    buf291 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf292 = reinterpret_tensor(buf260, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf260  # reuse
    cpp_fused_clone_sum_51(c_void_p(buf288.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(buf291.data_ptr()), c_void_p(buf292.data_ptr()))
    buf293 = reinterpret_tensor(buf289, (128, 196, 32), (6272, 32, 1), 0); del buf289  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_392, reinterpret_tensor(buf292, (128, 196, 32), (6272, 32, 1), 0), out=buf293)
    del permute_392
    buf294 = reinterpret_tensor(buf263, (128, 196, 196), (38416, 196, 1), 0); del buf263  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf292, (128, 196, 32), (6272, 32, 1), 0), permute_393, out=buf294)
    del permute_393
    buf295 = buf262; del buf262  # reuse
    buf296 = reinterpret_tensor(buf294, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf294  # reuse
    cpp_fused__softmax_backward_data_52(c_void_p(buf296.data_ptr()), c_void_p(alias_32.data_ptr()), c_void_p(buf295.data_ptr()))
    del alias_32
    buf297 = reinterpret_tensor(buf292, (128, 32, 196), (6272, 196, 1), 0); del buf292  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_394, reinterpret_tensor(buf296, (128, 196, 196), (38416, 196, 1), 0), out=buf297)
    del permute_394
    buf298 = reinterpret_tensor(buf288, (128, 196, 32), (6272, 32, 1), 0); del buf288  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf296, (128, 196, 196), (38416, 196, 1), 0), permute_395, out=buf298)
    del permute_395
    buf299 = buf266; del buf266  # reuse
    cpp_fused_clone_53(c_void_p(buf298.data_ptr()), c_void_p(buf297.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(buf299.data_ptr()))
    buf300 = reinterpret_tensor(buf298, (1568, 512), (512, 1), 0); del buf298  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf299, (1568, 1536), (1536, 1), 0), permute_398, out=buf300)
    del permute_398
    buf301 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf299, (1536, 1568), (1, 1536), 0), view_250, out=buf301)
    del view_250
    buf302 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf303 = buf284; del buf284  # reuse
    buf304 = buf283; del buf283  # reuse
    buf305 = empty((512, ), device='cpu', dtype=torch.float32)
    buf306 = empty((512, ), device='cpu', dtype=torch.float32)
    buf307 = buf287; del buf287  # reuse
    buf308 = reinterpret_tensor(buf297, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf297  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_54(c_void_p(buf307.data_ptr()), c_void_p(buf299.data_ptr()), c_void_p(buf300.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(mul_167.data_ptr()), c_void_p(div_89.data_ptr()), c_void_p(bernoulli_27.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf306.data_ptr()), c_void_p(buf308.data_ptr()))
    del bernoulli_27
    del div_89
    del mul_167
    del primals_68
    buf309 = reinterpret_tensor(buf279, (1568, 2048), (2048, 1), 0); del buf279  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf308, (1568, 512), (512, 1), 0), permute_402, out=buf309)
    del permute_402
    buf310 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf308, (512, 1568), (1, 512), 0), view_248, out=buf310)
    del view_248
    buf311 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf312 = reinterpret_tensor(buf309, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf309  # reuse
    cpp_fused_gelu_gelu_backward_sum_55(c_void_p(buf312.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(addmm_58.data_ptr()), c_void_p(buf311.data_ptr()))
    del addmm_58
    buf313 = reinterpret_tensor(buf308, (1568, 512), (512, 1), 0); del buf308  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf312, (1568, 2048), (2048, 1), 0), permute_406, out=buf313)
    del permute_406
    buf314 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf312, (2048, 1568), (1, 2048), 0), view_246, out=buf314)
    del view_246
    buf315 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf316 = buf304; del buf304  # reuse
    buf317 = buf303; del buf303  # reuse
    buf318 = empty((512, ), device='cpu', dtype=torch.float32)
    buf319 = empty((512, ), device='cpu', dtype=torch.float32)
    buf320 = buf307; del buf307  # reuse
    buf321 = reinterpret_tensor(buf300, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf300  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_56(c_void_p(buf320.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf313.data_ptr()), c_void_p(primals_66.data_ptr()), c_void_p(mul_161.data_ptr()), c_void_p(div_90.data_ptr()), c_void_p(bernoulli_26.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf317.data_ptr()), c_void_p(buf318.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf321.data_ptr()))
    del bernoulli_26
    del div_90
    del mul_161
    del primals_66
    buf322 = buf313; del buf313  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf321, (1568, 512), (512, 1), 0), permute_410, out=buf322)
    del permute_410
    buf323 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf321, (512, 1568), (1, 512), 0), view_244, out=buf323)
    del view_244
    buf324 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf325 = reinterpret_tensor(buf293, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf293  # reuse
    cpp_fused_clone_sum_57(c_void_p(buf321.data_ptr()), c_void_p(buf322.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf325.data_ptr()))
    buf326 = reinterpret_tensor(buf322, (128, 196, 32), (6272, 32, 1), 0); del buf322  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_415, reinterpret_tensor(buf325, (128, 196, 32), (6272, 32, 1), 0), out=buf326)
    del permute_415
    buf327 = reinterpret_tensor(buf296, (128, 196, 196), (38416, 196, 1), 0); del buf296  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf325, (128, 196, 32), (6272, 32, 1), 0), permute_416, out=buf327)
    del permute_416
    buf328 = buf295; del buf295  # reuse
    buf329 = reinterpret_tensor(buf327, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf327  # reuse
    cpp_fused__softmax_backward_data_58(c_void_p(buf329.data_ptr()), c_void_p(alias_33.data_ptr()), c_void_p(buf328.data_ptr()))
    del alias_33
    buf330 = reinterpret_tensor(buf325, (128, 32, 196), (6272, 196, 1), 0); del buf325  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_417, reinterpret_tensor(buf329, (128, 196, 196), (38416, 196, 1), 0), out=buf330)
    del permute_417
    buf331 = reinterpret_tensor(buf321, (128, 196, 32), (6272, 32, 1), 0); del buf321  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf329, (128, 196, 196), (38416, 196, 1), 0), permute_418, out=buf331)
    del permute_418
    buf332 = buf299; del buf299  # reuse
    cpp_fused_clone_59(c_void_p(buf331.data_ptr()), c_void_p(buf330.data_ptr()), c_void_p(buf326.data_ptr()), c_void_p(buf332.data_ptr()))
    buf333 = reinterpret_tensor(buf331, (1568, 512), (512, 1), 0); del buf331  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf332, (1568, 1536), (1536, 1), 0), permute_421, out=buf333)
    del permute_421
    buf334 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf332, (1536, 1568), (1, 1536), 0), view_234, out=buf334)
    del view_234
    buf335 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf336 = buf317; del buf317  # reuse
    buf337 = buf316; del buf316  # reuse
    buf338 = empty((512, ), device='cpu', dtype=torch.float32)
    buf339 = empty((512, ), device='cpu', dtype=torch.float32)
    buf340 = buf320; del buf320  # reuse
    buf341 = reinterpret_tensor(buf330, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf330  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_60(c_void_p(buf340.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(primals_64.data_ptr()), c_void_p(mul_156.data_ptr()), c_void_p(div_91.data_ptr()), c_void_p(bernoulli_25.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(buf336.data_ptr()), c_void_p(buf337.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf341.data_ptr()))
    del bernoulli_25
    del div_91
    del mul_156
    del primals_64
    buf342 = reinterpret_tensor(buf312, (1568, 2048), (2048, 1), 0); del buf312  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf341, (1568, 512), (512, 1), 0), permute_425, out=buf342)
    del permute_425
    buf343 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf341, (512, 1568), (1, 512), 0), view_232, out=buf343)
    del view_232
    buf344 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf345 = reinterpret_tensor(buf342, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf342  # reuse
    cpp_fused_gelu_gelu_backward_sum_61(c_void_p(buf345.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(addmm_54.data_ptr()), c_void_p(buf344.data_ptr()))
    del addmm_54
    buf346 = reinterpret_tensor(buf341, (1568, 512), (512, 1), 0); del buf341  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf345, (1568, 2048), (2048, 1), 0), permute_429, out=buf346)
    del permute_429
    buf347 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf345, (2048, 1568), (1, 2048), 0), view_230, out=buf347)
    del view_230
    buf348 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf349 = buf337; del buf337  # reuse
    buf350 = buf336; del buf336  # reuse
    buf351 = empty((512, ), device='cpu', dtype=torch.float32)
    buf352 = empty((512, ), device='cpu', dtype=torch.float32)
    buf353 = buf340; del buf340  # reuse
    buf354 = reinterpret_tensor(buf333, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf333  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_62(c_void_p(buf353.data_ptr()), c_void_p(buf345.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(mul_150.data_ptr()), c_void_p(div_92.data_ptr()), c_void_p(bernoulli_24.data_ptr()), c_void_p(buf348.data_ptr()), c_void_p(buf349.data_ptr()), c_void_p(buf350.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(buf352.data_ptr()), c_void_p(buf354.data_ptr()))
    del bernoulli_24
    del div_92
    del mul_150
    del primals_62
    buf355 = buf346; del buf346  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf354, (1568, 512), (512, 1), 0), permute_433, out=buf355)
    del permute_433
    buf356 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf354, (512, 1568), (1, 512), 0), view_228, out=buf356)
    del view_228
    buf357 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf358 = reinterpret_tensor(buf326, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf326  # reuse
    cpp_fused_clone_sum_63(c_void_p(buf354.data_ptr()), c_void_p(buf355.data_ptr()), c_void_p(buf357.data_ptr()), c_void_p(buf358.data_ptr()))
    buf359 = reinterpret_tensor(buf355, (128, 196, 32), (6272, 32, 1), 0); del buf355  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_438, reinterpret_tensor(buf358, (128, 196, 32), (6272, 32, 1), 0), out=buf359)
    del permute_438
    buf360 = reinterpret_tensor(buf329, (128, 196, 196), (38416, 196, 1), 0); del buf329  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf358, (128, 196, 32), (6272, 32, 1), 0), permute_439, out=buf360)
    del permute_439
    buf361 = buf328; del buf328  # reuse
    buf362 = reinterpret_tensor(buf360, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf360  # reuse
    cpp_fused__softmax_backward_data_64(c_void_p(buf362.data_ptr()), c_void_p(alias_34.data_ptr()), c_void_p(buf361.data_ptr()))
    del alias_34
    buf363 = reinterpret_tensor(buf358, (128, 32, 196), (6272, 196, 1), 0); del buf358  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_440, reinterpret_tensor(buf362, (128, 196, 196), (38416, 196, 1), 0), out=buf363)
    del permute_440
    buf364 = reinterpret_tensor(buf354, (128, 196, 32), (6272, 32, 1), 0); del buf354  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf362, (128, 196, 196), (38416, 196, 1), 0), permute_441, out=buf364)
    del permute_441
    buf365 = buf332; del buf332  # reuse
    cpp_fused_clone_65(c_void_p(buf364.data_ptr()), c_void_p(buf363.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf365.data_ptr()))
    buf366 = reinterpret_tensor(buf364, (1568, 512), (512, 1), 0); del buf364  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf365, (1568, 1536), (1536, 1), 0), permute_444, out=buf366)
    del permute_444
    buf367 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf365, (1536, 1568), (1, 1536), 0), view_218, out=buf367)
    del view_218
    buf368 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf369 = buf350; del buf350  # reuse
    buf370 = buf349; del buf349  # reuse
    buf371 = empty((512, ), device='cpu', dtype=torch.float32)
    buf372 = empty((512, ), device='cpu', dtype=torch.float32)
    buf373 = buf353; del buf353  # reuse
    buf374 = reinterpret_tensor(buf363, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf363  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_66(c_void_p(buf373.data_ptr()), c_void_p(buf365.data_ptr()), c_void_p(buf366.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(mul_145.data_ptr()), c_void_p(div_93.data_ptr()), c_void_p(bernoulli_23.data_ptr()), c_void_p(buf368.data_ptr()), c_void_p(buf369.data_ptr()), c_void_p(buf370.data_ptr()), c_void_p(buf371.data_ptr()), c_void_p(buf372.data_ptr()), c_void_p(buf374.data_ptr()))
    del bernoulli_23
    del div_93
    del mul_145
    del primals_60
    buf375 = reinterpret_tensor(buf345, (1568, 2048), (2048, 1), 0); del buf345  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf374, (1568, 512), (512, 1), 0), permute_448, out=buf375)
    del permute_448
    buf376 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf374, (512, 1568), (1, 512), 0), view_216, out=buf376)
    del view_216
    buf377 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf378 = reinterpret_tensor(buf375, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf375  # reuse
    cpp_fused_gelu_gelu_backward_sum_67(c_void_p(buf378.data_ptr()), c_void_p(buf374.data_ptr()), c_void_p(addmm_50.data_ptr()), c_void_p(buf377.data_ptr()))
    del addmm_50
    buf379 = reinterpret_tensor(buf374, (1568, 512), (512, 1), 0); del buf374  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf378, (1568, 2048), (2048, 1), 0), permute_452, out=buf379)
    del permute_452
    buf380 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf378, (2048, 1568), (1, 2048), 0), view_214, out=buf380)
    del view_214
    buf381 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf382 = buf370; del buf370  # reuse
    buf383 = buf369; del buf369  # reuse
    buf384 = empty((512, ), device='cpu', dtype=torch.float32)
    buf385 = empty((512, ), device='cpu', dtype=torch.float32)
    buf386 = buf373; del buf373  # reuse
    buf387 = reinterpret_tensor(buf366, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf366  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_68(c_void_p(buf386.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(primals_58.data_ptr()), c_void_p(mul_139.data_ptr()), c_void_p(div_94.data_ptr()), c_void_p(bernoulli_22.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf382.data_ptr()), c_void_p(buf383.data_ptr()), c_void_p(buf384.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf387.data_ptr()))
    del bernoulli_22
    del div_94
    del mul_139
    del primals_58
    buf388 = buf379; del buf379  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf387, (1568, 512), (512, 1), 0), permute_456, out=buf388)
    del permute_456
    buf389 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf387, (512, 1568), (1, 512), 0), view_212, out=buf389)
    del view_212
    buf390 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf391 = reinterpret_tensor(buf359, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf359  # reuse
    cpp_fused_clone_sum_69(c_void_p(buf387.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(buf391.data_ptr()))
    buf392 = reinterpret_tensor(buf388, (128, 196, 32), (6272, 32, 1), 0); del buf388  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_461, reinterpret_tensor(buf391, (128, 196, 32), (6272, 32, 1), 0), out=buf392)
    del permute_461
    buf393 = reinterpret_tensor(buf362, (128, 196, 196), (38416, 196, 1), 0); del buf362  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf391, (128, 196, 32), (6272, 32, 1), 0), permute_462, out=buf393)
    del permute_462
    buf394 = buf361; del buf361  # reuse
    buf395 = reinterpret_tensor(buf393, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf393  # reuse
    cpp_fused__softmax_backward_data_70(c_void_p(buf395.data_ptr()), c_void_p(alias_35.data_ptr()), c_void_p(buf394.data_ptr()))
    del alias_35
    buf396 = reinterpret_tensor(buf391, (128, 32, 196), (6272, 196, 1), 0); del buf391  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_463, reinterpret_tensor(buf395, (128, 196, 196), (38416, 196, 1), 0), out=buf396)
    del permute_463
    buf397 = reinterpret_tensor(buf387, (128, 196, 32), (6272, 32, 1), 0); del buf387  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf395, (128, 196, 196), (38416, 196, 1), 0), permute_464, out=buf397)
    del permute_464
    buf398 = buf365; del buf365  # reuse
    cpp_fused_clone_71(c_void_p(buf397.data_ptr()), c_void_p(buf396.data_ptr()), c_void_p(buf392.data_ptr()), c_void_p(buf398.data_ptr()))
    buf399 = reinterpret_tensor(buf397, (1568, 512), (512, 1), 0); del buf397  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf398, (1568, 1536), (1536, 1), 0), permute_467, out=buf399)
    del permute_467
    buf400 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf398, (1536, 1568), (1, 1536), 0), view_202, out=buf400)
    del view_202
    buf401 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf402 = buf383; del buf383  # reuse
    buf403 = buf382; del buf382  # reuse
    buf404 = empty((512, ), device='cpu', dtype=torch.float32)
    buf405 = empty((512, ), device='cpu', dtype=torch.float32)
    buf406 = buf386; del buf386  # reuse
    buf407 = reinterpret_tensor(buf396, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf396  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_72(c_void_p(buf406.data_ptr()), c_void_p(buf398.data_ptr()), c_void_p(buf399.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(mul_134.data_ptr()), c_void_p(div_95.data_ptr()), c_void_p(bernoulli_21.data_ptr()), c_void_p(buf401.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf403.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf405.data_ptr()), c_void_p(buf407.data_ptr()))
    del bernoulli_21
    del div_95
    del mul_134
    del primals_56
    buf408 = reinterpret_tensor(buf378, (1568, 2048), (2048, 1), 0); del buf378  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf407, (1568, 512), (512, 1), 0), permute_471, out=buf408)
    del permute_471
    buf409 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf407, (512, 1568), (1, 512), 0), view_200, out=buf409)
    del view_200
    buf410 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf411 = reinterpret_tensor(buf408, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf408  # reuse
    cpp_fused_gelu_gelu_backward_sum_73(c_void_p(buf411.data_ptr()), c_void_p(buf407.data_ptr()), c_void_p(addmm_46.data_ptr()), c_void_p(buf410.data_ptr()))
    del addmm_46
    buf412 = reinterpret_tensor(buf407, (1568, 512), (512, 1), 0); del buf407  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf411, (1568, 2048), (2048, 1), 0), permute_475, out=buf412)
    del permute_475
    buf413 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf411, (2048, 1568), (1, 2048), 0), view_198, out=buf413)
    del view_198
    buf414 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf415 = buf403; del buf403  # reuse
    buf416 = buf402; del buf402  # reuse
    buf417 = empty((512, ), device='cpu', dtype=torch.float32)
    buf418 = empty((512, ), device='cpu', dtype=torch.float32)
    buf419 = buf406; del buf406  # reuse
    buf420 = reinterpret_tensor(buf399, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf399  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_74(c_void_p(buf419.data_ptr()), c_void_p(buf411.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(primals_54.data_ptr()), c_void_p(mul_128.data_ptr()), c_void_p(div_96.data_ptr()), c_void_p(bernoulli_20.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(buf418.data_ptr()), c_void_p(buf420.data_ptr()))
    del bernoulli_20
    del div_96
    del mul_128
    del primals_54
    buf421 = buf412; del buf412  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf420, (1568, 512), (512, 1), 0), permute_479, out=buf421)
    del permute_479
    buf422 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf420, (512, 1568), (1, 512), 0), view_196, out=buf422)
    del view_196
    buf423 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf424 = reinterpret_tensor(buf392, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf392  # reuse
    cpp_fused_clone_sum_75(c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf423.data_ptr()), c_void_p(buf424.data_ptr()))
    buf425 = reinterpret_tensor(buf421, (128, 196, 32), (6272, 32, 1), 0); del buf421  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_484, reinterpret_tensor(buf424, (128, 196, 32), (6272, 32, 1), 0), out=buf425)
    del permute_484
    buf426 = reinterpret_tensor(buf395, (128, 196, 196), (38416, 196, 1), 0); del buf395  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf424, (128, 196, 32), (6272, 32, 1), 0), permute_485, out=buf426)
    del permute_485
    buf427 = buf394; del buf394  # reuse
    buf428 = reinterpret_tensor(buf426, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf426  # reuse
    cpp_fused__softmax_backward_data_76(c_void_p(buf428.data_ptr()), c_void_p(alias_36.data_ptr()), c_void_p(buf427.data_ptr()))
    del alias_36
    buf429 = reinterpret_tensor(buf424, (128, 32, 196), (6272, 196, 1), 0); del buf424  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_486, reinterpret_tensor(buf428, (128, 196, 196), (38416, 196, 1), 0), out=buf429)
    del permute_486
    buf430 = reinterpret_tensor(buf420, (128, 196, 32), (6272, 32, 1), 0); del buf420  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf428, (128, 196, 196), (38416, 196, 1), 0), permute_487, out=buf430)
    del permute_487
    buf431 = buf398; del buf398  # reuse
    cpp_fused_clone_77(c_void_p(buf430.data_ptr()), c_void_p(buf429.data_ptr()), c_void_p(buf425.data_ptr()), c_void_p(buf431.data_ptr()))
    buf432 = reinterpret_tensor(buf430, (1568, 512), (512, 1), 0); del buf430  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf431, (1568, 1536), (1536, 1), 0), permute_490, out=buf432)
    del permute_490
    buf433 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf431, (1536, 1568), (1, 1536), 0), view_186, out=buf433)
    del view_186
    buf434 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf435 = buf416; del buf416  # reuse
    buf436 = buf415; del buf415  # reuse
    buf437 = empty((512, ), device='cpu', dtype=torch.float32)
    buf438 = empty((512, ), device='cpu', dtype=torch.float32)
    buf439 = buf419; del buf419  # reuse
    buf440 = reinterpret_tensor(buf429, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf429  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_78(c_void_p(buf439.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(buf432.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(mul_123.data_ptr()), c_void_p(div_97.data_ptr()), c_void_p(bernoulli_19.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(buf435.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf440.data_ptr()))
    del bernoulli_19
    del div_97
    del mul_123
    del primals_52
    buf441 = reinterpret_tensor(buf411, (1568, 2048), (2048, 1), 0); del buf411  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf440, (1568, 512), (512, 1), 0), permute_494, out=buf441)
    del permute_494
    buf442 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf440, (512, 1568), (1, 512), 0), view_184, out=buf442)
    del view_184
    buf443 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf444 = reinterpret_tensor(buf441, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf441  # reuse
    cpp_fused_gelu_gelu_backward_sum_79(c_void_p(buf444.data_ptr()), c_void_p(buf440.data_ptr()), c_void_p(addmm_42.data_ptr()), c_void_p(buf443.data_ptr()))
    del addmm_42
    buf445 = reinterpret_tensor(buf440, (1568, 512), (512, 1), 0); del buf440  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf444, (1568, 2048), (2048, 1), 0), permute_498, out=buf445)
    del permute_498
    buf446 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf444, (2048, 1568), (1, 2048), 0), view_182, out=buf446)
    del view_182
    buf447 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf448 = buf436; del buf436  # reuse
    buf449 = buf435; del buf435  # reuse
    buf450 = empty((512, ), device='cpu', dtype=torch.float32)
    buf451 = empty((512, ), device='cpu', dtype=torch.float32)
    buf452 = buf439; del buf439  # reuse
    buf453 = reinterpret_tensor(buf432, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf432  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_80(c_void_p(buf452.data_ptr()), c_void_p(buf444.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(mul_117.data_ptr()), c_void_p(div_98.data_ptr()), c_void_p(bernoulli_18.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(buf448.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf453.data_ptr()))
    del bernoulli_18
    del div_98
    del mul_117
    del primals_50
    buf454 = buf445; del buf445  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf453, (1568, 512), (512, 1), 0), permute_502, out=buf454)
    del permute_502
    buf455 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf453, (512, 1568), (1, 512), 0), view_180, out=buf455)
    del view_180
    buf456 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf457 = reinterpret_tensor(buf425, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf425  # reuse
    cpp_fused_clone_sum_81(c_void_p(buf453.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf457.data_ptr()))
    buf458 = reinterpret_tensor(buf454, (128, 196, 32), (6272, 32, 1), 0); del buf454  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_507, reinterpret_tensor(buf457, (128, 196, 32), (6272, 32, 1), 0), out=buf458)
    del permute_507
    buf459 = reinterpret_tensor(buf428, (128, 196, 196), (38416, 196, 1), 0); del buf428  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf457, (128, 196, 32), (6272, 32, 1), 0), permute_508, out=buf459)
    del permute_508
    buf460 = buf427; del buf427  # reuse
    buf461 = reinterpret_tensor(buf459, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf459  # reuse
    cpp_fused__softmax_backward_data_82(c_void_p(buf461.data_ptr()), c_void_p(alias_37.data_ptr()), c_void_p(buf460.data_ptr()))
    del alias_37
    buf462 = reinterpret_tensor(buf457, (128, 32, 196), (6272, 196, 1), 0); del buf457  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_509, reinterpret_tensor(buf461, (128, 196, 196), (38416, 196, 1), 0), out=buf462)
    del permute_509
    buf463 = reinterpret_tensor(buf453, (128, 196, 32), (6272, 32, 1), 0); del buf453  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf461, (128, 196, 196), (38416, 196, 1), 0), permute_510, out=buf463)
    del permute_510
    buf464 = buf431; del buf431  # reuse
    cpp_fused_clone_83(c_void_p(buf463.data_ptr()), c_void_p(buf462.data_ptr()), c_void_p(buf458.data_ptr()), c_void_p(buf464.data_ptr()))
    buf465 = reinterpret_tensor(buf463, (1568, 512), (512, 1), 0); del buf463  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf464, (1568, 1536), (1536, 1), 0), permute_513, out=buf465)
    del permute_513
    buf466 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf464, (1536, 1568), (1, 1536), 0), view_170, out=buf466)
    del view_170
    buf467 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf468 = buf449; del buf449  # reuse
    buf469 = buf448; del buf448  # reuse
    buf470 = empty((512, ), device='cpu', dtype=torch.float32)
    buf471 = empty((512, ), device='cpu', dtype=torch.float32)
    buf472 = buf452; del buf452  # reuse
    buf473 = reinterpret_tensor(buf462, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf462  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_84(c_void_p(buf472.data_ptr()), c_void_p(buf464.data_ptr()), c_void_p(buf465.data_ptr()), c_void_p(primals_48.data_ptr()), c_void_p(mul_112.data_ptr()), c_void_p(div_99.data_ptr()), c_void_p(bernoulli_17.data_ptr()), c_void_p(buf467.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(buf469.data_ptr()), c_void_p(buf470.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(buf473.data_ptr()))
    del bernoulli_17
    del div_99
    del mul_112
    del primals_48
    buf474 = reinterpret_tensor(buf444, (1568, 2048), (2048, 1), 0); del buf444  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf473, (1568, 512), (512, 1), 0), permute_517, out=buf474)
    del permute_517
    buf475 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf473, (512, 1568), (1, 512), 0), view_168, out=buf475)
    del view_168
    buf476 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf477 = reinterpret_tensor(buf474, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf474  # reuse
    cpp_fused_gelu_gelu_backward_sum_85(c_void_p(buf477.data_ptr()), c_void_p(buf473.data_ptr()), c_void_p(addmm_38.data_ptr()), c_void_p(buf476.data_ptr()))
    del addmm_38
    buf478 = reinterpret_tensor(buf473, (1568, 512), (512, 1), 0); del buf473  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf477, (1568, 2048), (2048, 1), 0), permute_521, out=buf478)
    del permute_521
    buf479 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf477, (2048, 1568), (1, 2048), 0), view_166, out=buf479)
    del view_166
    buf480 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf481 = buf469; del buf469  # reuse
    buf482 = buf468; del buf468  # reuse
    buf483 = empty((512, ), device='cpu', dtype=torch.float32)
    buf484 = empty((512, ), device='cpu', dtype=torch.float32)
    buf485 = buf472; del buf472  # reuse
    buf486 = reinterpret_tensor(buf465, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf465  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_86(c_void_p(buf485.data_ptr()), c_void_p(buf477.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(primals_46.data_ptr()), c_void_p(mul_106.data_ptr()), c_void_p(div_100.data_ptr()), c_void_p(bernoulli_16.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(buf481.data_ptr()), c_void_p(buf482.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(buf486.data_ptr()))
    del bernoulli_16
    del div_100
    del mul_106
    del primals_46
    buf487 = buf478; del buf478  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf486, (1568, 512), (512, 1), 0), permute_525, out=buf487)
    del permute_525
    buf488 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf486, (512, 1568), (1, 512), 0), view_164, out=buf488)
    del view_164
    buf489 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf490 = reinterpret_tensor(buf458, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf458  # reuse
    cpp_fused_clone_sum_87(c_void_p(buf486.data_ptr()), c_void_p(buf487.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(buf490.data_ptr()))
    buf491 = reinterpret_tensor(buf487, (128, 196, 32), (6272, 32, 1), 0); del buf487  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_530, reinterpret_tensor(buf490, (128, 196, 32), (6272, 32, 1), 0), out=buf491)
    del permute_530
    buf492 = reinterpret_tensor(buf461, (128, 196, 196), (38416, 196, 1), 0); del buf461  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf490, (128, 196, 32), (6272, 32, 1), 0), permute_531, out=buf492)
    del permute_531
    buf493 = buf460; del buf460  # reuse
    buf494 = reinterpret_tensor(buf492, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf492  # reuse
    cpp_fused__softmax_backward_data_88(c_void_p(buf494.data_ptr()), c_void_p(alias_38.data_ptr()), c_void_p(buf493.data_ptr()))
    del alias_38
    buf495 = reinterpret_tensor(buf490, (128, 32, 196), (6272, 196, 1), 0); del buf490  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_532, reinterpret_tensor(buf494, (128, 196, 196), (38416, 196, 1), 0), out=buf495)
    del permute_532
    buf496 = reinterpret_tensor(buf486, (128, 196, 32), (6272, 32, 1), 0); del buf486  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf494, (128, 196, 196), (38416, 196, 1), 0), permute_533, out=buf496)
    del permute_533
    buf497 = buf464; del buf464  # reuse
    cpp_fused_clone_89(c_void_p(buf496.data_ptr()), c_void_p(buf495.data_ptr()), c_void_p(buf491.data_ptr()), c_void_p(buf497.data_ptr()))
    buf498 = reinterpret_tensor(buf496, (1568, 512), (512, 1), 0); del buf496  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf497, (1568, 1536), (1536, 1), 0), permute_536, out=buf498)
    del permute_536
    buf499 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf497, (1536, 1568), (1, 1536), 0), view_154, out=buf499)
    del view_154
    buf500 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf501 = buf482; del buf482  # reuse
    buf502 = buf481; del buf481  # reuse
    buf503 = empty((512, ), device='cpu', dtype=torch.float32)
    buf504 = empty((512, ), device='cpu', dtype=torch.float32)
    buf505 = buf485; del buf485  # reuse
    buf506 = reinterpret_tensor(buf495, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf495  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_90(c_void_p(buf505.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(primals_44.data_ptr()), c_void_p(mul_101.data_ptr()), c_void_p(div_101.data_ptr()), c_void_p(bernoulli_15.data_ptr()), c_void_p(buf500.data_ptr()), c_void_p(buf501.data_ptr()), c_void_p(buf502.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(buf506.data_ptr()))
    del bernoulli_15
    del div_101
    del mul_101
    del primals_44
    buf507 = reinterpret_tensor(buf477, (1568, 2048), (2048, 1), 0); del buf477  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf506, (1568, 512), (512, 1), 0), permute_540, out=buf507)
    del permute_540
    buf508 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf506, (512, 1568), (1, 512), 0), view_152, out=buf508)
    del view_152
    buf509 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf510 = reinterpret_tensor(buf507, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf507  # reuse
    cpp_fused_gelu_gelu_backward_sum_91(c_void_p(buf510.data_ptr()), c_void_p(buf506.data_ptr()), c_void_p(addmm_34.data_ptr()), c_void_p(buf509.data_ptr()))
    del addmm_34
    buf511 = reinterpret_tensor(buf506, (1568, 512), (512, 1), 0); del buf506  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf510, (1568, 2048), (2048, 1), 0), permute_544, out=buf511)
    del permute_544
    buf512 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf510, (2048, 1568), (1, 2048), 0), view_150, out=buf512)
    del view_150
    buf513 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf514 = buf502; del buf502  # reuse
    buf515 = buf501; del buf501  # reuse
    buf516 = empty((512, ), device='cpu', dtype=torch.float32)
    buf517 = empty((512, ), device='cpu', dtype=torch.float32)
    buf518 = buf505; del buf505  # reuse
    buf519 = reinterpret_tensor(buf498, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf498  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_92(c_void_p(buf518.data_ptr()), c_void_p(buf510.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(mul_95.data_ptr()), c_void_p(div_102.data_ptr()), c_void_p(bernoulli_14.data_ptr()), c_void_p(buf513.data_ptr()), c_void_p(buf514.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(buf516.data_ptr()), c_void_p(buf517.data_ptr()), c_void_p(buf519.data_ptr()))
    del bernoulli_14
    del div_102
    del mul_95
    del primals_42
    buf520 = buf511; del buf511  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf519, (1568, 512), (512, 1), 0), permute_548, out=buf520)
    del permute_548
    buf521 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf519, (512, 1568), (1, 512), 0), view_148, out=buf521)
    del view_148
    buf522 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf523 = reinterpret_tensor(buf491, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf491  # reuse
    cpp_fused_clone_sum_93(c_void_p(buf519.data_ptr()), c_void_p(buf520.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf523.data_ptr()))
    buf524 = reinterpret_tensor(buf520, (128, 196, 32), (6272, 32, 1), 0); del buf520  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_553, reinterpret_tensor(buf523, (128, 196, 32), (6272, 32, 1), 0), out=buf524)
    del permute_553
    buf525 = reinterpret_tensor(buf494, (128, 196, 196), (38416, 196, 1), 0); del buf494  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf523, (128, 196, 32), (6272, 32, 1), 0), permute_554, out=buf525)
    del permute_554
    buf526 = buf493; del buf493  # reuse
    buf527 = reinterpret_tensor(buf525, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf525  # reuse
    cpp_fused__softmax_backward_data_94(c_void_p(buf527.data_ptr()), c_void_p(alias_39.data_ptr()), c_void_p(buf526.data_ptr()))
    del alias_39
    buf528 = reinterpret_tensor(buf523, (128, 32, 196), (6272, 196, 1), 0); del buf523  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_555, reinterpret_tensor(buf527, (128, 196, 196), (38416, 196, 1), 0), out=buf528)
    del permute_555
    buf529 = reinterpret_tensor(buf519, (128, 196, 32), (6272, 32, 1), 0); del buf519  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf527, (128, 196, 196), (38416, 196, 1), 0), permute_556, out=buf529)
    del permute_556
    buf530 = buf497; del buf497  # reuse
    cpp_fused_clone_95(c_void_p(buf529.data_ptr()), c_void_p(buf528.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf530.data_ptr()))
    buf531 = reinterpret_tensor(buf529, (1568, 512), (512, 1), 0); del buf529  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf530, (1568, 1536), (1536, 1), 0), permute_559, out=buf531)
    del permute_559
    buf532 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf530, (1536, 1568), (1, 1536), 0), view_138, out=buf532)
    del view_138
    buf533 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf534 = buf515; del buf515  # reuse
    buf535 = buf514; del buf514  # reuse
    buf536 = empty((512, ), device='cpu', dtype=torch.float32)
    buf537 = empty((512, ), device='cpu', dtype=torch.float32)
    buf538 = buf518; del buf518  # reuse
    buf539 = reinterpret_tensor(buf528, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf528  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_96(c_void_p(buf538.data_ptr()), c_void_p(buf530.data_ptr()), c_void_p(buf531.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(mul_90.data_ptr()), c_void_p(div_103.data_ptr()), c_void_p(bernoulli_13.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(buf534.data_ptr()), c_void_p(buf535.data_ptr()), c_void_p(buf536.data_ptr()), c_void_p(buf537.data_ptr()), c_void_p(buf539.data_ptr()))
    del bernoulli_13
    del div_103
    del mul_90
    del primals_40
    buf540 = reinterpret_tensor(buf510, (1568, 2048), (2048, 1), 0); del buf510  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf539, (1568, 512), (512, 1), 0), permute_563, out=buf540)
    del permute_563
    buf541 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf539, (512, 1568), (1, 512), 0), view_136, out=buf541)
    del view_136
    buf542 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf543 = reinterpret_tensor(buf540, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf540  # reuse
    cpp_fused_gelu_gelu_backward_sum_97(c_void_p(buf543.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(addmm_30.data_ptr()), c_void_p(buf542.data_ptr()))
    del addmm_30
    buf544 = reinterpret_tensor(buf539, (1568, 512), (512, 1), 0); del buf539  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf543, (1568, 2048), (2048, 1), 0), permute_567, out=buf544)
    del permute_567
    buf545 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf543, (2048, 1568), (1, 2048), 0), view_134, out=buf545)
    del view_134
    buf546 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf547 = buf535; del buf535  # reuse
    buf548 = buf534; del buf534  # reuse
    buf549 = empty((512, ), device='cpu', dtype=torch.float32)
    buf550 = empty((512, ), device='cpu', dtype=torch.float32)
    buf551 = buf538; del buf538  # reuse
    buf552 = reinterpret_tensor(buf531, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf531  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_98(c_void_p(buf551.data_ptr()), c_void_p(buf543.data_ptr()), c_void_p(buf544.data_ptr()), c_void_p(primals_38.data_ptr()), c_void_p(mul_84.data_ptr()), c_void_p(div_104.data_ptr()), c_void_p(bernoulli_12.data_ptr()), c_void_p(buf546.data_ptr()), c_void_p(buf547.data_ptr()), c_void_p(buf548.data_ptr()), c_void_p(buf549.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(buf552.data_ptr()))
    del bernoulli_12
    del div_104
    del mul_84
    del primals_38
    buf553 = buf544; del buf544  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf552, (1568, 512), (512, 1), 0), permute_571, out=buf553)
    del permute_571
    buf554 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf552, (512, 1568), (1, 512), 0), view_132, out=buf554)
    del view_132
    buf555 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf556 = reinterpret_tensor(buf524, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf524  # reuse
    cpp_fused_clone_sum_99(c_void_p(buf552.data_ptr()), c_void_p(buf553.data_ptr()), c_void_p(buf555.data_ptr()), c_void_p(buf556.data_ptr()))
    buf557 = reinterpret_tensor(buf553, (128, 196, 32), (6272, 32, 1), 0); del buf553  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_576, reinterpret_tensor(buf556, (128, 196, 32), (6272, 32, 1), 0), out=buf557)
    del permute_576
    buf558 = reinterpret_tensor(buf527, (128, 196, 196), (38416, 196, 1), 0); del buf527  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf556, (128, 196, 32), (6272, 32, 1), 0), permute_577, out=buf558)
    del permute_577
    buf559 = buf526; del buf526  # reuse
    buf560 = reinterpret_tensor(buf558, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf558  # reuse
    cpp_fused__softmax_backward_data_100(c_void_p(buf560.data_ptr()), c_void_p(alias_40.data_ptr()), c_void_p(buf559.data_ptr()))
    del alias_40
    buf561 = reinterpret_tensor(buf556, (128, 32, 196), (6272, 196, 1), 0); del buf556  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_578, reinterpret_tensor(buf560, (128, 196, 196), (38416, 196, 1), 0), out=buf561)
    del permute_578
    buf562 = reinterpret_tensor(buf552, (128, 196, 32), (6272, 32, 1), 0); del buf552  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf560, (128, 196, 196), (38416, 196, 1), 0), permute_579, out=buf562)
    del permute_579
    buf563 = buf530; del buf530  # reuse
    cpp_fused_clone_101(c_void_p(buf562.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf557.data_ptr()), c_void_p(buf563.data_ptr()))
    buf564 = reinterpret_tensor(buf562, (1568, 512), (512, 1), 0); del buf562  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf563, (1568, 1536), (1536, 1), 0), permute_582, out=buf564)
    del permute_582
    buf565 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf563, (1536, 1568), (1, 1536), 0), view_122, out=buf565)
    del view_122
    buf566 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf567 = buf548; del buf548  # reuse
    buf568 = buf547; del buf547  # reuse
    buf569 = empty((512, ), device='cpu', dtype=torch.float32)
    buf570 = empty((512, ), device='cpu', dtype=torch.float32)
    buf571 = buf551; del buf551  # reuse
    buf572 = reinterpret_tensor(buf561, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf561  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_102(c_void_p(buf571.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf564.data_ptr()), c_void_p(primals_36.data_ptr()), c_void_p(mul_79.data_ptr()), c_void_p(div_105.data_ptr()), c_void_p(bernoulli_11.data_ptr()), c_void_p(buf566.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(buf568.data_ptr()), c_void_p(buf569.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(buf572.data_ptr()))
    del bernoulli_11
    del div_105
    del mul_79
    del primals_36
    buf573 = reinterpret_tensor(buf543, (1568, 2048), (2048, 1), 0); del buf543  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf572, (1568, 512), (512, 1), 0), permute_586, out=buf573)
    del permute_586
    buf574 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf572, (512, 1568), (1, 512), 0), view_120, out=buf574)
    del view_120
    buf575 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf576 = reinterpret_tensor(buf573, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf573  # reuse
    cpp_fused_gelu_gelu_backward_sum_103(c_void_p(buf576.data_ptr()), c_void_p(buf572.data_ptr()), c_void_p(addmm_26.data_ptr()), c_void_p(buf575.data_ptr()))
    del addmm_26
    buf577 = reinterpret_tensor(buf572, (1568, 512), (512, 1), 0); del buf572  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf576, (1568, 2048), (2048, 1), 0), permute_590, out=buf577)
    del permute_590
    buf578 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf576, (2048, 1568), (1, 2048), 0), view_118, out=buf578)
    del view_118
    buf579 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf580 = buf568; del buf568  # reuse
    buf581 = buf567; del buf567  # reuse
    buf582 = empty((512, ), device='cpu', dtype=torch.float32)
    buf583 = empty((512, ), device='cpu', dtype=torch.float32)
    buf584 = buf571; del buf571  # reuse
    buf585 = reinterpret_tensor(buf564, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf564  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_104(c_void_p(buf584.data_ptr()), c_void_p(buf576.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(primals_34.data_ptr()), c_void_p(mul_73.data_ptr()), c_void_p(div_106.data_ptr()), c_void_p(bernoulli_10.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(buf580.data_ptr()), c_void_p(buf581.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(buf585.data_ptr()))
    del bernoulli_10
    del div_106
    del mul_73
    del primals_34
    buf586 = buf577; del buf577  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf585, (1568, 512), (512, 1), 0), permute_594, out=buf586)
    del permute_594
    buf587 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf585, (512, 1568), (1, 512), 0), view_116, out=buf587)
    del view_116
    buf588 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf589 = reinterpret_tensor(buf557, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf557  # reuse
    cpp_fused_clone_sum_105(c_void_p(buf585.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(buf589.data_ptr()))
    buf590 = reinterpret_tensor(buf586, (128, 196, 32), (6272, 32, 1), 0); del buf586  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_599, reinterpret_tensor(buf589, (128, 196, 32), (6272, 32, 1), 0), out=buf590)
    del permute_599
    buf591 = reinterpret_tensor(buf560, (128, 196, 196), (38416, 196, 1), 0); del buf560  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf589, (128, 196, 32), (6272, 32, 1), 0), permute_600, out=buf591)
    del permute_600
    buf592 = buf559; del buf559  # reuse
    buf593 = reinterpret_tensor(buf591, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf591  # reuse
    cpp_fused__softmax_backward_data_106(c_void_p(buf593.data_ptr()), c_void_p(alias_41.data_ptr()), c_void_p(buf592.data_ptr()))
    del alias_41
    buf594 = reinterpret_tensor(buf589, (128, 32, 196), (6272, 196, 1), 0); del buf589  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_601, reinterpret_tensor(buf593, (128, 196, 196), (38416, 196, 1), 0), out=buf594)
    del permute_601
    buf595 = reinterpret_tensor(buf585, (128, 196, 32), (6272, 32, 1), 0); del buf585  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf593, (128, 196, 196), (38416, 196, 1), 0), permute_602, out=buf595)
    del permute_602
    buf596 = buf563; del buf563  # reuse
    cpp_fused_clone_107(c_void_p(buf595.data_ptr()), c_void_p(buf594.data_ptr()), c_void_p(buf590.data_ptr()), c_void_p(buf596.data_ptr()))
    buf597 = reinterpret_tensor(buf595, (1568, 512), (512, 1), 0); del buf595  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf596, (1568, 1536), (1536, 1), 0), permute_605, out=buf597)
    del permute_605
    buf598 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf596, (1536, 1568), (1, 1536), 0), view_106, out=buf598)
    del view_106
    buf599 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf600 = buf581; del buf581  # reuse
    buf601 = buf580; del buf580  # reuse
    buf602 = empty((512, ), device='cpu', dtype=torch.float32)
    buf603 = empty((512, ), device='cpu', dtype=torch.float32)
    buf604 = buf584; del buf584  # reuse
    buf605 = reinterpret_tensor(buf594, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf594  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_108(c_void_p(buf604.data_ptr()), c_void_p(buf596.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(mul_68.data_ptr()), c_void_p(div_107.data_ptr()), c_void_p(bernoulli_9.data_ptr()), c_void_p(buf599.data_ptr()), c_void_p(buf600.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(buf605.data_ptr()))
    del bernoulli_9
    del div_107
    del mul_68
    del primals_32
    buf606 = reinterpret_tensor(buf576, (1568, 2048), (2048, 1), 0); del buf576  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf605, (1568, 512), (512, 1), 0), permute_609, out=buf606)
    del permute_609
    buf607 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf605, (512, 1568), (1, 512), 0), view_104, out=buf607)
    del view_104
    buf608 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf609 = reinterpret_tensor(buf606, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf606  # reuse
    cpp_fused_gelu_gelu_backward_sum_109(c_void_p(buf609.data_ptr()), c_void_p(buf605.data_ptr()), c_void_p(addmm_22.data_ptr()), c_void_p(buf608.data_ptr()))
    del addmm_22
    buf610 = reinterpret_tensor(buf605, (1568, 512), (512, 1), 0); del buf605  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf609, (1568, 2048), (2048, 1), 0), permute_613, out=buf610)
    del permute_613
    buf611 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf609, (2048, 1568), (1, 2048), 0), view_102, out=buf611)
    del view_102
    buf612 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf613 = buf601; del buf601  # reuse
    buf614 = buf600; del buf600  # reuse
    buf615 = empty((512, ), device='cpu', dtype=torch.float32)
    buf616 = empty((512, ), device='cpu', dtype=torch.float32)
    buf617 = buf604; del buf604  # reuse
    buf618 = reinterpret_tensor(buf597, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf597  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_110(c_void_p(buf617.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(buf610.data_ptr()), c_void_p(primals_30.data_ptr()), c_void_p(mul_62.data_ptr()), c_void_p(div_108.data_ptr()), c_void_p(bernoulli_8.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(buf613.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(buf615.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf618.data_ptr()))
    del bernoulli_8
    del div_108
    del mul_62
    del primals_30
    buf619 = buf610; del buf610  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf618, (1568, 512), (512, 1), 0), permute_617, out=buf619)
    del permute_617
    buf620 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf618, (512, 1568), (1, 512), 0), view_100, out=buf620)
    del view_100
    buf621 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf622 = reinterpret_tensor(buf590, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf590  # reuse
    cpp_fused_clone_sum_111(c_void_p(buf618.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf622.data_ptr()))
    buf623 = reinterpret_tensor(buf619, (128, 196, 32), (6272, 32, 1), 0); del buf619  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_622, reinterpret_tensor(buf622, (128, 196, 32), (6272, 32, 1), 0), out=buf623)
    del permute_622
    buf624 = reinterpret_tensor(buf593, (128, 196, 196), (38416, 196, 1), 0); del buf593  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf622, (128, 196, 32), (6272, 32, 1), 0), permute_623, out=buf624)
    del permute_623
    buf625 = buf592; del buf592  # reuse
    buf626 = reinterpret_tensor(buf624, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf624  # reuse
    cpp_fused__softmax_backward_data_112(c_void_p(buf626.data_ptr()), c_void_p(alias_42.data_ptr()), c_void_p(buf625.data_ptr()))
    del alias_42
    buf627 = reinterpret_tensor(buf622, (128, 32, 196), (6272, 196, 1), 0); del buf622  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_624, reinterpret_tensor(buf626, (128, 196, 196), (38416, 196, 1), 0), out=buf627)
    del permute_624
    buf628 = reinterpret_tensor(buf618, (128, 196, 32), (6272, 32, 1), 0); del buf618  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf626, (128, 196, 196), (38416, 196, 1), 0), permute_625, out=buf628)
    del permute_625
    buf629 = buf596; del buf596  # reuse
    cpp_fused_clone_113(c_void_p(buf628.data_ptr()), c_void_p(buf627.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(buf629.data_ptr()))
    buf630 = reinterpret_tensor(buf628, (1568, 512), (512, 1), 0); del buf628  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf629, (1568, 1536), (1536, 1), 0), permute_628, out=buf630)
    del permute_628
    buf631 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf629, (1536, 1568), (1, 1536), 0), view_90, out=buf631)
    del view_90
    buf632 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf633 = buf614; del buf614  # reuse
    buf634 = buf613; del buf613  # reuse
    buf635 = empty((512, ), device='cpu', dtype=torch.float32)
    buf636 = empty((512, ), device='cpu', dtype=torch.float32)
    buf637 = buf617; del buf617  # reuse
    buf638 = reinterpret_tensor(buf627, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf627  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_114(c_void_p(buf637.data_ptr()), c_void_p(buf629.data_ptr()), c_void_p(buf630.data_ptr()), c_void_p(primals_28.data_ptr()), c_void_p(mul_57.data_ptr()), c_void_p(div_109.data_ptr()), c_void_p(bernoulli_7.data_ptr()), c_void_p(buf632.data_ptr()), c_void_p(buf633.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf638.data_ptr()))
    del bernoulli_7
    del div_109
    del mul_57
    del primals_28
    buf639 = reinterpret_tensor(buf609, (1568, 2048), (2048, 1), 0); del buf609  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf638, (1568, 512), (512, 1), 0), permute_632, out=buf639)
    del permute_632
    buf640 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf638, (512, 1568), (1, 512), 0), view_88, out=buf640)
    del view_88
    buf641 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf642 = reinterpret_tensor(buf639, (8, 1, 196, 2048), (401408, 401408, 2048, 1), 0); del buf639  # reuse
    cpp_fused_gelu_gelu_backward_sum_115(c_void_p(buf642.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(addmm_18.data_ptr()), c_void_p(buf641.data_ptr()))
    del addmm_18
    buf643 = reinterpret_tensor(buf638, (1568, 512), (512, 1), 0); del buf638  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf642, (1568, 2048), (2048, 1), 0), permute_636, out=buf643)
    del permute_636
    buf644 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf642, (2048, 1568), (1, 2048), 0), view_86, out=buf644)
    del view_86
    buf645 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf646 = buf634; del buf634  # reuse
    buf647 = buf633; del buf633  # reuse
    buf648 = empty((512, ), device='cpu', dtype=torch.float32)
    buf649 = empty((512, ), device='cpu', dtype=torch.float32)
    buf650 = buf637; del buf637  # reuse
    buf651 = reinterpret_tensor(buf630, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf630  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_116(c_void_p(buf650.data_ptr()), c_void_p(buf642.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(mul_51.data_ptr()), c_void_p(div_110.data_ptr()), c_void_p(bernoulli_6.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf647.data_ptr()), c_void_p(buf648.data_ptr()), c_void_p(buf649.data_ptr()), c_void_p(buf651.data_ptr()))
    del bernoulli_6
    del div_110
    del mul_51
    del primals_26
    buf652 = buf643; del buf643  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf651, (1568, 512), (512, 1), 0), permute_640, out=buf652)
    del permute_640
    buf653 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf651, (512, 1568), (1, 512), 0), view_84, out=buf653)
    del view_84
    buf654 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf655 = reinterpret_tensor(buf623, (8, 16, 1, 196, 32), (100352, 6272, 6272, 32, 1), 0); del buf623  # reuse
    cpp_fused_clone_sum_117(c_void_p(buf651.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(buf654.data_ptr()), c_void_p(buf655.data_ptr()))
    buf656 = reinterpret_tensor(buf652, (128, 196, 32), (6272, 32, 1), 0); del buf652  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_645, reinterpret_tensor(buf655, (128, 196, 32), (6272, 32, 1), 0), out=buf656)
    del permute_645
    buf657 = reinterpret_tensor(buf626, (128, 196, 196), (38416, 196, 1), 0); del buf626  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf655, (128, 196, 32), (6272, 32, 1), 0), permute_646, out=buf657)
    del permute_646
    buf658 = buf625; del buf625  # reuse
    buf659 = reinterpret_tensor(buf657, (8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), 0); del buf657  # reuse
    cpp_fused__softmax_backward_data_118(c_void_p(buf659.data_ptr()), c_void_p(alias_43.data_ptr()), c_void_p(buf658.data_ptr()))
    del alias_43
    buf660 = reinterpret_tensor(buf655, (128, 32, 196), (6272, 196, 1), 0); del buf655  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_647, reinterpret_tensor(buf659, (128, 196, 196), (38416, 196, 1), 0), out=buf660)
    del permute_647
    buf661 = reinterpret_tensor(buf651, (128, 196, 32), (6272, 32, 1), 0); del buf651  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf659, (128, 196, 196), (38416, 196, 1), 0), permute_648, out=buf661)
    del buf659
    del permute_648
    buf662 = buf629; del buf629  # reuse
    cpp_fused_clone_119(c_void_p(buf661.data_ptr()), c_void_p(buf660.data_ptr()), c_void_p(buf656.data_ptr()), c_void_p(buf662.data_ptr()))
    del buf656
    del buf660
    buf663 = reinterpret_tensor(buf661, (1568, 512), (512, 1), 0); del buf661  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf662, (1568, 1536), (1536, 1), 0), permute_651, out=buf663)
    del permute_651
    buf664 = empty((1536, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf662, (1536, 1568), (1, 1536), 0), view_74, out=buf664)
    del view_74
    buf665 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf666 = buf647; del buf647  # reuse
    buf667 = buf646; del buf646  # reuse
    buf668 = empty((512, ), device='cpu', dtype=torch.float32)
    buf669 = empty((512, ), device='cpu', dtype=torch.float32)
    buf670 = reinterpret_tensor(buf650, (8, 1, 196, 512), (100352, 100352, 512, 1), 0); del buf650  # reuse
    buf671 = empty((1, 1, 196, 512), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_sum_120(c_void_p(buf670.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf663.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(mul_46.data_ptr()), c_void_p(div_111.data_ptr()), c_void_p(buf665.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf671.data_ptr()))
    del buf662
    del buf663
    del buf666
    del buf667
    del div_111
    del mul_46
    del primals_24
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf672 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf670, (8, 512, 14, 14), (100352, 1, 7168, 512), 0), constant_pad_nd_1, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_35)
    del buf670
    del constant_pad_nd_1
    del getitem_35
    buf673 = buf672
    del buf672
    buf674 = empty_strided((8, 28, 28, 1), (784, 28, 1, 6272), device='cpu', dtype=torch.float32)
    buf675 = empty_strided((8, 28, 28, 1), (784, 28, 1, 6272), device='cpu', dtype=torch.float32)
    buf676 = empty((512, ), device='cpu', dtype=torch.float32)
    buf677 = empty((512, ), device='cpu', dtype=torch.float32)
    buf678 = reinterpret_tensor(buf642, (8, 512, 28, 28), (401408, 1, 512, 14336), 0); del buf642  # reuse
    cpp_fused_convolution_backward_native_layer_norm_native_layer_norm_backward_121(c_void_p(buf673.data_ptr()), c_void_p(primals_21.data_ptr()), c_void_p(convolution_2.data_ptr()), c_void_p(getitem_33.data_ptr()), c_void_p(rsqrt_9.data_ptr()), c_void_p(buf674.data_ptr()), c_void_p(buf675.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(buf678.data_ptr()))
    del buf673
    del convolution_2
    del getitem_33
    del primals_21
    del rsqrt_9
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf679 = aten.convolution_backward(buf678, permute_37, primals_142, [512], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del permute_37
    del primals_142
    buf680 = buf679[0]
    buf681 = buf679[1]
    buf682 = buf679[2]
    del buf679
    buf683 = empty((8, 4, 196, 256), device='cpu', dtype=torch.float32)
    cpp_fused_div_mul_122(c_void_p(buf680.data_ptr()), c_void_p(bernoulli_5.data_ptr()), c_void_p(buf683.data_ptr()))
    del bernoulli_5
    buf684 = empty((6272, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf683, (6272, 256), (256, 1), 0), permute_661, out=buf684)
    del permute_661
    buf685 = empty((256, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf683, (256, 6272), (1, 256), 0), view_68, out=buf685)
    del view_68
    buf686 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf687 = reinterpret_tensor(buf684, (8, 4, 196, 1024), (802816, 200704, 1024, 1), 0); del buf684  # reuse
    cpp_fused_gelu_gelu_backward_sum_123(c_void_p(buf687.data_ptr()), c_void_p(buf683.data_ptr()), c_void_p(addmm_14.data_ptr()), c_void_p(buf686.data_ptr()))
    del addmm_14
    buf688 = reinterpret_tensor(buf683, (6272, 256), (256, 1), 0); del buf683  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf687, (6272, 1024), (1024, 1), 0), permute_665, out=buf688)
    del permute_665
    buf689 = empty((1024, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf687, (1024, 6272), (1, 1024), 0), view_66, out=buf689)
    del view_66
    buf690 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf691 = reinterpret_tensor(buf675, (8, 4, 196, 1), (784, 196, 1, 6272), 0); del buf675  # reuse
    buf692 = reinterpret_tensor(buf674, (8, 4, 196, 1), (784, 196, 1, 6272), 0); del buf674  # reuse
    buf693 = empty((256, ), device='cpu', dtype=torch.float32)
    buf694 = empty((256, ), device='cpu', dtype=torch.float32)
    buf695 = reinterpret_tensor(buf688, (8, 4, 196, 256), (200704, 50176, 256, 1), 0); del buf688  # reuse
    buf696 = empty((8, 4, 196, 256), device='cpu', dtype=torch.float32)
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_124(c_void_p(buf695.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(primals_19.data_ptr()), c_void_p(mul_38.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(div_113.data_ptr()), c_void_p(bernoulli_4.data_ptr()), c_void_p(buf690.data_ptr()), c_void_p(buf691.data_ptr()), c_void_p(buf692.data_ptr()), c_void_p(buf693.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf696.data_ptr()))
    del bernoulli_4
    del div_113
    del mul_38
    del primals_19
    buf697 = reinterpret_tensor(buf680, (6272, 256), (256, 1), 0); del buf680  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf696, (6272, 256), (256, 1), 0), permute_669, out=buf697)
    del permute_669
    buf698 = empty((256, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf696, (256, 6272), (1, 256), 0), view_64, out=buf698)
    del view_64
    buf699 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf700 = empty((8, 8, 4, 196, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_sum_125(c_void_p(buf696.data_ptr()), c_void_p(buf697.data_ptr()), c_void_p(buf699.data_ptr()), c_void_p(buf700.data_ptr()))
    buf701 = reinterpret_tensor(buf697, (256, 196, 32), (6272, 32, 1), 0); del buf697  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_674, reinterpret_tensor(buf700, (256, 196, 32), (6272, 32, 1), 0), out=buf701)
    del permute_674
    buf702 = empty((256, 196, 196), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf700, (256, 196, 32), (6272, 32, 1), 0), permute_675, out=buf702)
    del permute_675
    buf703 = empty_strided((8, 8, 4, 196, 1), (6272, 784, 196, 1, 50176), device='cpu', dtype=torch.float32)
    buf704 = reinterpret_tensor(buf702, (8, 8, 4, 196, 196), (1229312, 153664, 38416, 196, 1), 0); del buf702  # reuse
    cpp_fused__softmax_backward_data_126(c_void_p(buf704.data_ptr()), c_void_p(alias_44.data_ptr()), c_void_p(buf703.data_ptr()))
    del alias_44
    buf705 = reinterpret_tensor(buf700, (256, 32, 196), (6272, 196, 1), 0); del buf700  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_676, reinterpret_tensor(buf704, (256, 196, 196), (38416, 196, 1), 0), out=buf705)
    del permute_676
    buf706 = reinterpret_tensor(buf696, (256, 196, 32), (6272, 32, 1), 0); del buf696  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf704, (256, 196, 196), (38416, 196, 1), 0), permute_677, out=buf706)
    del permute_677
    buf707 = empty((8, 4, 196, 3, 8, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_127(c_void_p(buf706.data_ptr()), c_void_p(buf705.data_ptr()), c_void_p(buf701.data_ptr()), c_void_p(buf707.data_ptr()))
    buf708 = reinterpret_tensor(buf706, (6272, 256), (256, 1), 0); del buf706  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf707, (6272, 768), (768, 1), 0), permute_680, out=buf708)
    del permute_680
    buf709 = empty((768, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf707, (768, 6272), (1, 768), 0), view_54, out=buf709)
    del view_54
    buf710 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf711 = buf692; del buf692  # reuse
    buf712 = buf691; del buf691  # reuse
    buf713 = empty((256, ), device='cpu', dtype=torch.float32)
    buf714 = empty((256, ), device='cpu', dtype=torch.float32)
    buf715 = buf695; del buf695  # reuse
    buf716 = reinterpret_tensor(buf705, (8, 4, 196, 256), (200704, 50176, 256, 1), 0); del buf705  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_128(c_void_p(buf715.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(buf708.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(mul_33.data_ptr()), c_void_p(div_114.data_ptr()), c_void_p(bernoulli_3.data_ptr()), c_void_p(buf710.data_ptr()), c_void_p(buf711.data_ptr()), c_void_p(buf712.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(buf714.data_ptr()), c_void_p(buf716.data_ptr()))
    del bernoulli_3
    del div_114
    del mul_33
    del primals_17
    buf717 = reinterpret_tensor(buf687, (6272, 1024), (1024, 1), 0); del buf687  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf716, (6272, 256), (256, 1), 0), permute_684, out=buf717)
    del permute_684
    buf718 = empty((256, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf716, (256, 6272), (1, 256), 0), view_52, out=buf718)
    del view_52
    buf719 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf720 = reinterpret_tensor(buf717, (8, 4, 196, 1024), (802816, 200704, 1024, 1), 0); del buf717  # reuse
    cpp_fused_gelu_gelu_backward_sum_129(c_void_p(buf720.data_ptr()), c_void_p(buf716.data_ptr()), c_void_p(addmm_10.data_ptr()), c_void_p(buf719.data_ptr()))
    del addmm_10
    buf721 = reinterpret_tensor(buf716, (6272, 256), (256, 1), 0); del buf716  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf720, (6272, 1024), (1024, 1), 0), permute_688, out=buf721)
    del permute_688
    buf722 = empty((1024, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf720, (1024, 6272), (1, 1024), 0), view_50, out=buf722)
    del view_50
    buf723 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf724 = buf712; del buf712  # reuse
    buf725 = buf711; del buf711  # reuse
    buf726 = empty((256, ), device='cpu', dtype=torch.float32)
    buf727 = empty((256, ), device='cpu', dtype=torch.float32)
    buf728 = buf715; del buf715  # reuse
    buf729 = reinterpret_tensor(buf708, (8, 4, 196, 256), (200704, 50176, 256, 1), 0); del buf708  # reuse
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_130(c_void_p(buf728.data_ptr()), c_void_p(buf720.data_ptr()), c_void_p(buf721.data_ptr()), c_void_p(primals_15.data_ptr()), c_void_p(mul_27.data_ptr()), c_void_p(div_115.data_ptr()), c_void_p(bernoulli_2.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(buf726.data_ptr()), c_void_p(buf727.data_ptr()), c_void_p(buf729.data_ptr()))
    del bernoulli_2
    del div_115
    del mul_27
    del primals_15
    buf730 = buf721; del buf721  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf729, (6272, 256), (256, 1), 0), permute_692, out=buf730)
    del permute_692
    buf731 = empty((256, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf729, (256, 6272), (1, 256), 0), view_48, out=buf731)
    del view_48
    buf732 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf733 = reinterpret_tensor(buf701, (8, 8, 4, 196, 32), (200704, 25088, 6272, 32, 1), 0); del buf701  # reuse
    cpp_fused_clone_sum_131(c_void_p(buf729.data_ptr()), c_void_p(buf730.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf733.data_ptr()))
    buf734 = reinterpret_tensor(buf730, (256, 196, 32), (6272, 32, 1), 0); del buf730  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_697, reinterpret_tensor(buf733, (256, 196, 32), (6272, 32, 1), 0), out=buf734)
    del permute_697
    buf735 = reinterpret_tensor(buf704, (256, 196, 196), (38416, 196, 1), 0); del buf704  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf733, (256, 196, 32), (6272, 32, 1), 0), permute_698, out=buf735)
    del permute_698
    buf736 = buf703; del buf703  # reuse
    buf737 = reinterpret_tensor(buf735, (8, 8, 4, 196, 196), (1229312, 153664, 38416, 196, 1), 0); del buf735  # reuse
    cpp_fused__softmax_backward_data_132(c_void_p(buf737.data_ptr()), c_void_p(alias_45.data_ptr()), c_void_p(buf736.data_ptr()))
    del alias_45
    del buf736
    buf738 = reinterpret_tensor(buf733, (256, 32, 196), (6272, 196, 1), 0); del buf733  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_699, reinterpret_tensor(buf737, (256, 196, 196), (38416, 196, 1), 0), out=buf738)
    del permute_699
    buf739 = reinterpret_tensor(buf729, (256, 196, 32), (6272, 32, 1), 0); del buf729  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf737, (256, 196, 196), (38416, 196, 1), 0), permute_700, out=buf739)
    del buf737
    del permute_700
    buf740 = buf707; del buf707  # reuse
    cpp_fused_clone_133(c_void_p(buf739.data_ptr()), c_void_p(buf738.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf740.data_ptr()))
    del buf734
    buf741 = reinterpret_tensor(buf739, (6272, 256), (256, 1), 0); del buf739  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf740, (6272, 768), (768, 1), 0), permute_703, out=buf741)
    del permute_703
    buf742 = empty((768, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf740, (768, 6272), (1, 768), 0), view_38, out=buf742)
    del view_38
    buf743 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf744 = buf725; del buf725  # reuse
    buf745 = buf724; del buf724  # reuse
    buf746 = empty((256, ), device='cpu', dtype=torch.float32)
    buf747 = empty((256, ), device='cpu', dtype=torch.float32)
    buf748 = buf728; del buf728  # reuse
    buf749 = empty((1, 4, 196, 256), device='cpu', dtype=torch.float32)
    buf750 = reinterpret_tensor(buf738, (8, 2, 14, 2, 14, 256), (200704, 100352, 7168, 3584, 256, 1), 0); del buf738  # reuse
    cpp_fused_add_clone_native_layer_norm_backward_sum_134(c_void_p(buf748.data_ptr()), c_void_p(buf740.data_ptr()), c_void_p(buf741.data_ptr()), c_void_p(primals_13.data_ptr()), c_void_p(mul_22.data_ptr()), c_void_p(div_116.data_ptr()), c_void_p(buf743.data_ptr()), c_void_p(buf744.data_ptr()), c_void_p(buf745.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf747.data_ptr()), c_void_p(buf749.data_ptr()), c_void_p(buf750.data_ptr()))
    del buf740
    del buf741
    del buf744
    del buf745
    del buf748
    del div_116
    del mul_22
    del primals_13
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf751 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf750, (8, 256, 28, 28), (200704, 1, 7168, 256), 0), constant_pad_nd, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_17)
    del buf750
    del constant_pad_nd
    del getitem_17
    buf752 = buf751
    del buf751
    buf753 = reinterpret_tensor(buf658, (8, 56, 56, 1), (3136, 56, 1, 25088), 0); del buf658  # reuse
    buf754 = empty_strided((8, 56, 56, 1), (3136, 56, 1, 25088), device='cpu', dtype=torch.float32)
    buf755 = empty((256, ), device='cpu', dtype=torch.float32)
    buf756 = empty((256, ), device='cpu', dtype=torch.float32)
    buf757 = reinterpret_tensor(buf720, (8, 256, 56, 56), (802816, 1, 256, 14336), 0); del buf720  # reuse
    cpp_fused_convolution_backward_native_layer_norm_native_layer_norm_backward_135(c_void_p(buf752.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(convolution_1.data_ptr()), c_void_p(getitem_15.data_ptr()), c_void_p(rsqrt_4.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(buf756.data_ptr()), c_void_p(buf757.data_ptr()))
    del buf752
    del convolution_1
    del getitem_15
    del primals_10
    del rsqrt_4
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf758 = aten.convolution_backward(buf757, permute_17, primals_124, [256], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf757
    del permute_17
    del primals_124
    buf759 = buf758[0]
    buf760 = buf758[1]
    buf761 = buf758[2]
    del buf758
    buf762 = reinterpret_tensor(buf678, (8, 16, 196, 128), (401408, 25088, 128, 1), 0); del buf678  # reuse
    cpp_fused_div_mul_136(c_void_p(buf759.data_ptr()), c_void_p(bernoulli_1.data_ptr()), c_void_p(buf762.data_ptr()))
    del bernoulli_1
    buf763 = empty((25088, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf762, (25088, 128), (128, 1), 0), permute_713, out=buf763)
    del permute_713
    buf764 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf762, (128, 25088), (1, 128), 0), view_32, out=buf764)
    del view_32
    buf765 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf766 = reinterpret_tensor(buf763, (8, 16, 196, 512), (1605632, 100352, 512, 1), 0); del buf763  # reuse
    cpp_fused_gelu_gelu_backward_sum_137(c_void_p(buf766.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(addmm_6.data_ptr()), c_void_p(buf765.data_ptr()))
    del addmm_6
    buf767 = reinterpret_tensor(buf762, (25088, 128), (128, 1), 0); del buf762  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (25088, 512), (512, 1), 0), permute_717, out=buf767)
    del permute_717
    buf768 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (512, 25088), (1, 512), 0), view_30, out=buf768)
    del view_30
    buf769 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf770 = reinterpret_tensor(buf754, (8, 16, 196, 1), (3136, 196, 1, 25088), 0); del buf754  # reuse
    buf771 = reinterpret_tensor(buf753, (8, 16, 196, 1), (3136, 196, 1, 25088), 0); del buf753  # reuse
    buf772 = empty((128, ), device='cpu', dtype=torch.float32)
    buf773 = empty((128, ), device='cpu', dtype=torch.float32)
    buf774 = reinterpret_tensor(buf767, (8, 16, 196, 128), (401408, 25088, 128, 1), 0); del buf767  # reuse
    buf775 = empty((8, 16, 196, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_div_mul_native_layer_norm_backward_sum_138(c_void_p(buf774.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(primals_8.data_ptr()), c_void_p(mul_14.data_ptr()), c_void_p(buf759.data_ptr()), c_void_p(div_118.data_ptr()), c_void_p(bernoulli.data_ptr()), c_void_p(buf769.data_ptr()), c_void_p(buf770.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(buf772.data_ptr()), c_void_p(buf773.data_ptr()), c_void_p(buf775.data_ptr()))
    del bernoulli
    del div_118
    del mul_14
    del primals_8
    buf776 = reinterpret_tensor(buf759, (25088, 128), (128, 1), 0); del buf759  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf775, (25088, 128), (128, 1), 0), permute_721, out=buf776)
    del permute_721
    buf777 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf775, (128, 25088), (1, 128), 0), view_28, out=buf777)
    del view_28
    buf778 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf779 = empty((8, 4, 16, 196, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_sum_139(c_void_p(buf775.data_ptr()), c_void_p(buf776.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(buf779.data_ptr()))
    buf780 = reinterpret_tensor(buf776, (512, 196, 32), (6272, 32, 1), 0); del buf776  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_726, reinterpret_tensor(buf779, (512, 196, 32), (6272, 32, 1), 0), out=buf780)
    del permute_726
    buf781 = empty((512, 196, 196), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf779, (512, 196, 32), (6272, 32, 1), 0), permute_727, out=buf781)
    del permute_727
    buf782 = empty_strided((8, 4, 16, 196, 1), (12544, 3136, 196, 1, 100352), device='cpu', dtype=torch.float32)
    buf783 = reinterpret_tensor(buf781, (8, 4, 16, 196, 196), (2458624, 614656, 38416, 196, 1), 0); del buf781  # reuse
    cpp_fused__softmax_backward_data_140(c_void_p(buf783.data_ptr()), c_void_p(alias_46.data_ptr()), c_void_p(buf782.data_ptr()))
    del alias_46
    buf784 = reinterpret_tensor(buf779, (512, 32, 196), (6272, 196, 1), 0); del buf779  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_728, reinterpret_tensor(buf783, (512, 196, 196), (38416, 196, 1), 0), out=buf784)
    del permute_728
    buf785 = reinterpret_tensor(buf775, (512, 196, 32), (6272, 32, 1), 0); del buf775  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf783, (512, 196, 196), (38416, 196, 1), 0), permute_729, out=buf785)
    del permute_729
    buf786 = empty((8, 16, 196, 3, 4, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_141(c_void_p(buf785.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf780.data_ptr()), c_void_p(buf786.data_ptr()))
    buf787 = reinterpret_tensor(buf785, (25088, 128), (128, 1), 0); del buf785  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf786, (25088, 384), (384, 1), 0), permute_732, out=buf787)
    del permute_732
    buf788 = empty((384, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf786, (384, 25088), (1, 384), 0), view_18, out=buf788)
    del view_18
    buf789 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf790 = buf771; del buf771  # reuse
    buf791 = buf770; del buf770  # reuse
    buf792 = empty((128, ), device='cpu', dtype=torch.float32)
    buf793 = empty((128, ), device='cpu', dtype=torch.float32)
    buf794 = buf774; del buf774  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_142(c_void_p(buf794.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(buf787.data_ptr()), c_void_p(primals_6.data_ptr()), c_void_p(mul_9.data_ptr()), c_void_p(div_119.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(buf791.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(buf793.data_ptr()))
    del div_119
    del mul_9
    del primals_6
    buf795 = reinterpret_tensor(buf766, (25088, 512), (512, 1), 0); del buf766  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf794, (25088, 128), (128, 1), 0), permute_736, out=buf795)
    del permute_736
    buf796 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf794, (128, 25088), (1, 128), 0), view_16, out=buf796)
    del view_16
    buf797 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf798 = reinterpret_tensor(buf795, (8, 16, 196, 512), (1605632, 100352, 512, 1), 0); del buf795  # reuse
    cpp_fused_gelu_gelu_backward_sum_143(c_void_p(buf798.data_ptr()), c_void_p(buf794.data_ptr()), c_void_p(addmm_2.data_ptr()), c_void_p(buf797.data_ptr()))
    del addmm_2
    buf799 = buf787; del buf787  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf798, (25088, 512), (512, 1), 0), permute_740, out=buf799)
    del permute_740
    buf800 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf798, (512, 25088), (1, 512), 0), view_14, out=buf800)
    del view_14
    buf801 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf802 = buf791; del buf791  # reuse
    buf803 = buf790; del buf790  # reuse
    buf804 = empty((128, ), device='cpu', dtype=torch.float32)
    buf805 = empty((128, ), device='cpu', dtype=torch.float32)
    buf806 = buf794; del buf794  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_144(c_void_p(buf806.data_ptr()), c_void_p(buf798.data_ptr()), c_void_p(buf799.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(mul_4.data_ptr()), c_void_p(div_120.data_ptr()), c_void_p(buf801.data_ptr()), c_void_p(buf802.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(buf804.data_ptr()), c_void_p(buf805.data_ptr()))
    del buf798
    del div_120
    del mul_4
    del primals_4
    buf807 = buf799; del buf799  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf806, (25088, 128), (128, 1), 0), permute_744, out=buf807)
    del permute_744
    buf808 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf806, (128, 25088), (1, 128), 0), view_12, out=buf808)
    del view_12
    buf809 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf810 = reinterpret_tensor(buf784, (8, 4, 16, 196, 32), (401408, 100352, 6272, 32, 1), 0); del buf784  # reuse
    cpp_fused_clone_sum_145(c_void_p(buf806.data_ptr()), c_void_p(buf807.data_ptr()), c_void_p(buf809.data_ptr()), c_void_p(buf810.data_ptr()))
    buf811 = reinterpret_tensor(buf807, (512, 196, 32), (6272, 32, 1), 0); del buf807  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_749, reinterpret_tensor(buf810, (512, 196, 32), (6272, 32, 1), 0), out=buf811)
    del permute_749
    buf812 = reinterpret_tensor(buf783, (512, 196, 196), (38416, 196, 1), 0); del buf783  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf810, (512, 196, 32), (6272, 32, 1), 0), permute_750, out=buf812)
    del permute_750
    buf813 = buf782; del buf782  # reuse
    buf814 = reinterpret_tensor(buf812, (8, 4, 16, 196, 196), (2458624, 614656, 38416, 196, 1), 0); del buf812  # reuse
    cpp_fused__softmax_backward_data_146(c_void_p(buf814.data_ptr()), c_void_p(alias_47.data_ptr()), c_void_p(buf813.data_ptr()))
    del alias_47
    del buf813
    buf815 = reinterpret_tensor(buf810, (512, 32, 196), (6272, 196, 1), 0); del buf810  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_751, reinterpret_tensor(buf814, (512, 196, 196), (38416, 196, 1), 0), out=buf815)
    del permute_751
    buf816 = buf780; del buf780  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf814, (512, 196, 196), (38416, 196, 1), 0), permute_752, out=buf816)
    del buf814
    del permute_752
    buf817 = buf786; del buf786  # reuse
    cpp_fused_clone_147(c_void_p(buf816.data_ptr()), c_void_p(buf815.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf817.data_ptr()))
    del buf811
    buf818 = reinterpret_tensor(buf816, (25088, 128), (128, 1), 0); del buf816  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf817, (25088, 384), (384, 1), 0), permute_755, out=buf818)
    del permute_755
    buf819 = empty((384, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf817, (384, 25088), (1, 384), 0), view_2, out=buf819)
    del view_2
    buf820 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf821 = buf803; del buf803  # reuse
    buf822 = buf802; del buf802  # reuse
    buf823 = empty((128, ), device='cpu', dtype=torch.float32)
    buf824 = empty((128, ), device='cpu', dtype=torch.float32)
    buf825 = buf806; del buf806  # reuse
    buf826 = empty((1, 16, 196, 128), device='cpu', dtype=torch.float32)
    buf827 = reinterpret_tensor(buf815, (8, 128, 56, 56), (401408, 1, 7168, 128), 0); del buf815  # reuse
    cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_148(c_void_p(buf825.data_ptr()), c_void_p(buf817.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(mul.data_ptr()), c_void_p(div_121.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf821.data_ptr()), c_void_p(buf822.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(buf824.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(buf827.data_ptr()))
    del buf817
    del buf818
    del buf821
    del buf822
    del buf825
    del div_121
    del mul
    del primals_2
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf828 = aten.convolution_backward(buf827, primals_306, primals_106, [128], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True])
    del buf827
    del primals_106
    del primals_306
    buf829 = buf828[1]
    buf830 = buf828[2]
    return (buf826, buf823, buf824, buf804, buf805, buf792, buf793, buf772, buf773, buf755, buf756, buf749, buf746, buf747, buf726, buf727, buf713, buf714, buf693, buf694, buf676, buf677, buf671, buf668, buf669, buf648, buf649, buf635, buf636, buf615, buf616, buf602, buf603, buf582, buf583, buf569, buf570, buf549, buf550, buf536, buf537, buf516, buf517, buf503, buf504, buf483, buf484, buf470, buf471, buf450, buf451, buf437, buf438, buf417, buf418, buf404, buf405, buf384, buf385, buf371, buf372, buf351, buf352, buf338, buf339, buf318, buf319, buf305, buf306, buf285, buf286, buf272, buf273, buf252, buf253, buf239, buf240, buf219, buf220, buf206, buf207, buf186, buf187, buf173, buf174, buf153, buf154, buf140, buf141, buf120, buf121, buf107, buf108, buf87, buf88, buf74, buf75, buf54, buf55, buf41, buf42, buf21, buf22, buf8, buf9, buf829, buf830, reinterpret_tensor(buf819, (384, 128), (128, 1), 0), reinterpret_tensor(buf820, (384, ), (1, ), 0), reinterpret_tensor(buf808, (128, 128), (128, 1), 0), reinterpret_tensor(buf809, (128, ), (1, ), 0), reinterpret_tensor(buf800, (512, 128), (128, 1), 0), reinterpret_tensor(buf801, (512, ), (1, ), 0), reinterpret_tensor(buf796, (128, 512), (512, 1), 0), reinterpret_tensor(buf797, (128, ), (1, ), 0), reinterpret_tensor(buf788, (384, 128), (128, 1), 0), reinterpret_tensor(buf789, (384, ), (1, ), 0), reinterpret_tensor(buf777, (128, 128), (128, 1), 0), reinterpret_tensor(buf778, (128, ), (1, ), 0), reinterpret_tensor(buf768, (512, 128), (128, 1), 0), reinterpret_tensor(buf769, (512, ), (1, ), 0), reinterpret_tensor(buf764, (128, 512), (512, 1), 0), reinterpret_tensor(buf765, (128, ), (1, ), 0), buf760, buf761, reinterpret_tensor(buf742, (768, 256), (256, 1), 0), reinterpret_tensor(buf743, (768, ), (1, ), 0), reinterpret_tensor(buf731, (256, 256), (256, 1), 0), reinterpret_tensor(buf732, (256, ), (1, ), 0), reinterpret_tensor(buf722, (1024, 256), (256, 1), 0), reinterpret_tensor(buf723, (1024, ), (1, ), 0), reinterpret_tensor(buf718, (256, 1024), (1024, 1), 0), reinterpret_tensor(buf719, (256, ), (1, ), 0), reinterpret_tensor(buf709, (768, 256), (256, 1), 0), reinterpret_tensor(buf710, (768, ), (1, ), 0), reinterpret_tensor(buf698, (256, 256), (256, 1), 0), reinterpret_tensor(buf699, (256, ), (1, ), 0), reinterpret_tensor(buf689, (1024, 256), (256, 1), 0), reinterpret_tensor(buf690, (1024, ), (1, ), 0), reinterpret_tensor(buf685, (256, 1024), (1024, 1), 0), reinterpret_tensor(buf686, (256, ), (1, ), 0), buf681, buf682, reinterpret_tensor(buf664, (1536, 512), (512, 1), 0), reinterpret_tensor(buf665, (1536, ), (1, ), 0), reinterpret_tensor(buf653, (512, 512), (512, 1), 0), reinterpret_tensor(buf654, (512, ), (1, ), 0), reinterpret_tensor(buf644, (2048, 512), (512, 1), 0), reinterpret_tensor(buf645, (2048, ), (1, ), 0), reinterpret_tensor(buf640, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf641, (512, ), (1, ), 0), reinterpret_tensor(buf631, (1536, 512), (512, 1), 0), reinterpret_tensor(buf632, (1536, ), (1, ), 0), reinterpret_tensor(buf620, (512, 512), (512, 1), 0), reinterpret_tensor(buf621, (512, ), (1, ), 0), reinterpret_tensor(buf611, (2048, 512), (512, 1), 0), reinterpret_tensor(buf612, (2048, ), (1, ), 0), reinterpret_tensor(buf607, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf608, (512, ), (1, ), 0), reinterpret_tensor(buf598, (1536, 512), (512, 1), 0), reinterpret_tensor(buf599, (1536, ), (1, ), 0), reinterpret_tensor(buf587, (512, 512), (512, 1), 0), reinterpret_tensor(buf588, (512, ), (1, ), 0), reinterpret_tensor(buf578, (2048, 512), (512, 1), 0), reinterpret_tensor(buf579, (2048, ), (1, ), 0), reinterpret_tensor(buf574, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf575, (512, ), (1, ), 0), reinterpret_tensor(buf565, (1536, 512), (512, 1), 0), reinterpret_tensor(buf566, (1536, ), (1, ), 0), reinterpret_tensor(buf554, (512, 512), (512, 1), 0), reinterpret_tensor(buf555, (512, ), (1, ), 0), reinterpret_tensor(buf545, (2048, 512), (512, 1), 0), reinterpret_tensor(buf546, (2048, ), (1, ), 0), reinterpret_tensor(buf541, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf542, (512, ), (1, ), 0), reinterpret_tensor(buf532, (1536, 512), (512, 1), 0), reinterpret_tensor(buf533, (1536, ), (1, ), 0), reinterpret_tensor(buf521, (512, 512), (512, 1), 0), reinterpret_tensor(buf522, (512, ), (1, ), 0), reinterpret_tensor(buf512, (2048, 512), (512, 1), 0), reinterpret_tensor(buf513, (2048, ), (1, ), 0), reinterpret_tensor(buf508, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf509, (512, ), (1, ), 0), reinterpret_tensor(buf499, (1536, 512), (512, 1), 0), reinterpret_tensor(buf500, (1536, ), (1, ), 0), reinterpret_tensor(buf488, (512, 512), (512, 1), 0), reinterpret_tensor(buf489, (512, ), (1, ), 0), reinterpret_tensor(buf479, (2048, 512), (512, 1), 0), reinterpret_tensor(buf480, (2048, ), (1, ), 0), reinterpret_tensor(buf475, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf476, (512, ), (1, ), 0), reinterpret_tensor(buf466, (1536, 512), (512, 1), 0), reinterpret_tensor(buf467, (1536, ), (1, ), 0), reinterpret_tensor(buf455, (512, 512), (512, 1), 0), reinterpret_tensor(buf456, (512, ), (1, ), 0), reinterpret_tensor(buf446, (2048, 512), (512, 1), 0), reinterpret_tensor(buf447, (2048, ), (1, ), 0), reinterpret_tensor(buf442, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf443, (512, ), (1, ), 0), reinterpret_tensor(buf433, (1536, 512), (512, 1), 0), reinterpret_tensor(buf434, (1536, ), (1, ), 0), reinterpret_tensor(buf422, (512, 512), (512, 1), 0), reinterpret_tensor(buf423, (512, ), (1, ), 0), reinterpret_tensor(buf413, (2048, 512), (512, 1), 0), reinterpret_tensor(buf414, (2048, ), (1, ), 0), reinterpret_tensor(buf409, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf410, (512, ), (1, ), 0), reinterpret_tensor(buf400, (1536, 512), (512, 1), 0), reinterpret_tensor(buf401, (1536, ), (1, ), 0), reinterpret_tensor(buf389, (512, 512), (512, 1), 0), reinterpret_tensor(buf390, (512, ), (1, ), 0), reinterpret_tensor(buf380, (2048, 512), (512, 1), 0), reinterpret_tensor(buf381, (2048, ), (1, ), 0), reinterpret_tensor(buf376, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf377, (512, ), (1, ), 0), reinterpret_tensor(buf367, (1536, 512), (512, 1), 0), reinterpret_tensor(buf368, (1536, ), (1, ), 0), reinterpret_tensor(buf356, (512, 512), (512, 1), 0), reinterpret_tensor(buf357, (512, ), (1, ), 0), reinterpret_tensor(buf347, (2048, 512), (512, 1), 0), reinterpret_tensor(buf348, (2048, ), (1, ), 0), reinterpret_tensor(buf343, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf344, (512, ), (1, ), 0), reinterpret_tensor(buf334, (1536, 512), (512, 1), 0), reinterpret_tensor(buf335, (1536, ), (1, ), 0), reinterpret_tensor(buf323, (512, 512), (512, 1), 0), reinterpret_tensor(buf324, (512, ), (1, ), 0), reinterpret_tensor(buf314, (2048, 512), (512, 1), 0), reinterpret_tensor(buf315, (2048, ), (1, ), 0), reinterpret_tensor(buf310, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf311, (512, ), (1, ), 0), reinterpret_tensor(buf301, (1536, 512), (512, 1), 0), reinterpret_tensor(buf302, (1536, ), (1, ), 0), reinterpret_tensor(buf290, (512, 512), (512, 1), 0), reinterpret_tensor(buf291, (512, ), (1, ), 0), reinterpret_tensor(buf281, (2048, 512), (512, 1), 0), reinterpret_tensor(buf282, (2048, ), (1, ), 0), reinterpret_tensor(buf277, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf278, (512, ), (1, ), 0), reinterpret_tensor(buf268, (1536, 512), (512, 1), 0), reinterpret_tensor(buf269, (1536, ), (1, ), 0), reinterpret_tensor(buf257, (512, 512), (512, 1), 0), reinterpret_tensor(buf258, (512, ), (1, ), 0), reinterpret_tensor(buf248, (2048, 512), (512, 1), 0), reinterpret_tensor(buf249, (2048, ), (1, ), 0), reinterpret_tensor(buf244, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf245, (512, ), (1, ), 0), reinterpret_tensor(buf235, (1536, 512), (512, 1), 0), reinterpret_tensor(buf236, (1536, ), (1, ), 0), reinterpret_tensor(buf224, (512, 512), (512, 1), 0), reinterpret_tensor(buf225, (512, ), (1, ), 0), reinterpret_tensor(buf215, (2048, 512), (512, 1), 0), reinterpret_tensor(buf216, (2048, ), (1, ), 0), reinterpret_tensor(buf211, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf212, (512, ), (1, ), 0), reinterpret_tensor(buf202, (1536, 512), (512, 1), 0), reinterpret_tensor(buf203, (1536, ), (1, ), 0), reinterpret_tensor(buf191, (512, 512), (512, 1), 0), reinterpret_tensor(buf192, (512, ), (1, ), 0), reinterpret_tensor(buf182, (2048, 512), (512, 1), 0), reinterpret_tensor(buf183, (2048, ), (1, ), 0), reinterpret_tensor(buf178, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf179, (512, ), (1, ), 0), reinterpret_tensor(buf169, (1536, 512), (512, 1), 0), reinterpret_tensor(buf170, (1536, ), (1, ), 0), reinterpret_tensor(buf158, (512, 512), (512, 1), 0), reinterpret_tensor(buf159, (512, ), (1, ), 0), reinterpret_tensor(buf149, (2048, 512), (512, 1), 0), reinterpret_tensor(buf150, (2048, ), (1, ), 0), reinterpret_tensor(buf145, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf146, (512, ), (1, ), 0), reinterpret_tensor(buf136, (1536, 512), (512, 1), 0), reinterpret_tensor(buf137, (1536, ), (1, ), 0), reinterpret_tensor(buf125, (512, 512), (512, 1), 0), reinterpret_tensor(buf126, (512, ), (1, ), 0), reinterpret_tensor(buf116, (2048, 512), (512, 1), 0), reinterpret_tensor(buf117, (2048, ), (1, ), 0), reinterpret_tensor(buf112, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf113, (512, ), (1, ), 0), reinterpret_tensor(buf103, (1536, 512), (512, 1), 0), reinterpret_tensor(buf104, (1536, ), (1, ), 0), reinterpret_tensor(buf92, (512, 512), (512, 1), 0), reinterpret_tensor(buf93, (512, ), (1, ), 0), reinterpret_tensor(buf83, (2048, 512), (512, 1), 0), reinterpret_tensor(buf84, (2048, ), (1, ), 0), reinterpret_tensor(buf79, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf80, (512, ), (1, ), 0), reinterpret_tensor(buf70, (1536, 512), (512, 1), 0), reinterpret_tensor(buf71, (1536, ), (1, ), 0), reinterpret_tensor(buf59, (512, 512), (512, 1), 0), reinterpret_tensor(buf60, (512, ), (1, ), 0), reinterpret_tensor(buf50, (2048, 512), (512, 1), 0), reinterpret_tensor(buf51, (2048, ), (1, ), 0), reinterpret_tensor(buf46, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf47, (512, ), (1, ), 0), reinterpret_tensor(buf37, (1536, 512), (512, 1), 0), reinterpret_tensor(buf38, (1536, ), (1, ), 0), reinterpret_tensor(buf26, (512, 512), (512, 1), 0), reinterpret_tensor(buf27, (512, ), (1, ), 0), reinterpret_tensor(buf17, (2048, 512), (512, 1), 0), reinterpret_tensor(buf18, (2048, ), (1, ), 0), reinterpret_tensor(buf13, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf14, (512, ), (1, ), 0), reinterpret_tensor(buf1, (1000, 512), (512, 1), 0), reinterpret_tensor(buf2, (1000, ), (1, ), 0), None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_2 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_6 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_8 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_15 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_21 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_24 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_26 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_30 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_32 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_36 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_38 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_42 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_44 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_48 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_50 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_54 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_60 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_64 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_66 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_70 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_72 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_76 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_78 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_80 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_84 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_86 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_88 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_90 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_92 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_96 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_98 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_102 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_104 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((128, 3, 4, 4), (48, 1, 12, 3), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((256, 128, 3, 3), (1152, 1, 384, 128), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((512, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    primals_306 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    mul = rand_strided((8, 16, 196, 128), (401408, 1, 2048, 16), device='cpu', dtype=torch.float32)
    view_2 = rand_strided((25088, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_12 = rand_strided((25088, 128), (128, 1), device='cpu', dtype=torch.float32)
    mul_4 = rand_strided((8, 16, 196, 128), (401408, 1, 2048, 16), device='cpu', dtype=torch.float32)
    view_14 = rand_strided((25088, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_2 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_16 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    mul_9 = rand_strided((8, 16, 196, 128), (401408, 1, 2048, 16), device='cpu', dtype=torch.float32)
    view_18 = rand_strided((25088, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_28 = rand_strided((25088, 128), (128, 1), device='cpu', dtype=torch.float32)
    bernoulli = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_14 = rand_strided((8, 16, 196, 128), (401408, 1, 2048, 16), device='cpu', dtype=torch.float32)
    view_30 = rand_strided((25088, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_6 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_32 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_1 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_17 = rand_strided((8, 128, 56, 56), (401408, 1, 7168, 128), device='cpu', dtype=torch.float32)
    convolution_1 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    getitem_15 = rand_strided((8, 56, 56, 1), (3136, 1, 56, 56), device='cpu', dtype=torch.float32)
    rsqrt_4 = rand_strided((8, 56, 56, 1), (3136, 1, 56, 56), device='cpu', dtype=torch.float32)
    constant_pad_nd = rand_strided((8, 256, 57, 57), (831744, 1, 14592, 256), device='cpu', dtype=torch.float32)
    getitem_17 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.int64)
    mul_22 = rand_strided((8, 4, 196, 256), (200704, 1, 1024, 4), device='cpu', dtype=torch.float32)
    view_38 = rand_strided((6272, 256), (256, 1), device='cpu', dtype=torch.float32)
    view_48 = rand_strided((6272, 256), (256, 1), device='cpu', dtype=torch.float32)
    bernoulli_2 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_27 = rand_strided((8, 4, 196, 256), (200704, 1, 1024, 4), device='cpu', dtype=torch.float32)
    view_50 = rand_strided((6272, 256), (256, 1), device='cpu', dtype=torch.float32)
    addmm_10 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    view_52 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    bernoulli_3 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_33 = rand_strided((8, 4, 196, 256), (200704, 1, 1024, 4), device='cpu', dtype=torch.float32)
    view_54 = rand_strided((6272, 256), (256, 1), device='cpu', dtype=torch.float32)
    view_64 = rand_strided((6272, 256), (256, 1), device='cpu', dtype=torch.float32)
    bernoulli_4 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_38 = rand_strided((8, 4, 196, 256), (200704, 1, 1024, 4), device='cpu', dtype=torch.float32)
    view_66 = rand_strided((6272, 256), (256, 1), device='cpu', dtype=torch.float32)
    addmm_14 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    view_68 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    bernoulli_5 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_37 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    convolution_2 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    getitem_33 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    rsqrt_9 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    constant_pad_nd_1 = rand_strided((8, 512, 29, 29), (430592, 1, 14848, 512), device='cpu', dtype=torch.float32)
    getitem_35 = rand_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.int64)
    mul_46 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_74 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_84 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_6 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_51 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_86 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_18 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_88 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_7 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_57 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_90 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_100 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_8 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_62 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_102 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_22 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_104 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_9 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_68 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_106 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_116 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_10 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_73 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_118 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_26 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_120 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_11 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_79 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_122 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_132 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_12 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_84 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_134 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_30 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_136 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_13 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_90 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_138 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_148 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_14 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_95 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_150 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_34 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_152 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_15 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_101 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_154 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_164 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_16 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_106 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_166 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_38 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_168 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_17 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_112 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_170 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_180 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_18 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_117 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_182 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_42 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_184 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_19 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_123 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_186 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_196 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_20 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_128 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_198 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_46 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_200 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_21 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_134 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_202 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_212 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_22 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_139 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_214 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_50 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_216 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_23 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_145 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_218 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_228 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_24 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_150 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_230 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_54 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_232 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_25 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_156 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_234 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_244 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_26 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_161 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_246 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_58 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_248 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_27 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_167 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_250 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_260 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_28 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_172 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_262 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_62 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_264 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_29 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_178 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_266 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_276 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_30 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_183 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_278 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_66 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_280 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_31 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_189 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_282 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_292 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_32 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_194 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_294 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_70 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_296 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_33 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_200 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_298 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_308 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_34 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_205 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_310 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_74 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_312 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_35 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_211 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_314 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_324 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_36 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_216 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_326 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_78 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_328 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_37 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_222 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_330 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_340 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_38 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_227 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_342 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_82 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_344 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_39 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_233 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_346 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_356 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_40 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_238 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_358 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_86 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_360 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_41 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_244 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_362 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_372 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_42 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_249 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_374 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_90 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_376 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_43 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_255 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_378 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_388 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    bernoulli_44 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_260 = rand_strided((8, 1, 196, 512), (100352, 1, 512, 1), device='cpu', dtype=torch.float32)
    view_390 = rand_strided((1568, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_94 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_392 = rand_strided((1568, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    bernoulli_45 = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    mul_266 = rand_strided((8, 14, 14, 512), (100352, 1, 7168, 14), device='cpu', dtype=torch.float32)
    clone_172 = rand_strided((8, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_187 = rand_strided((1000, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_71 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_195 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_199 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_72 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_203 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_208 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_209 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_24 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_210 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_211 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_214 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_73 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_218 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_222 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_74 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_226 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_231 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_232 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_25 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_233 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_234 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_237 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_75 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_241 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_245 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_76 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_249 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_254 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_255 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_26 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_256 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_257 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_260 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_77 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_264 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_268 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_78 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_272 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_277 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_278 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_27 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_279 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_280 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_283 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_79 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_287 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_291 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_80 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_295 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_300 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_301 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_28 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_302 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_303 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_306 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_81 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_310 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_314 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_82 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_318 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_323 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_324 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_29 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_325 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_326 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_329 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_83 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_333 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_337 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_84 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_341 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_346 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_347 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_30 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_348 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_349 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_352 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_85 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_356 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_360 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_86 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_364 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_369 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_370 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_31 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_371 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_372 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_375 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_87 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_379 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_383 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_88 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_387 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_392 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_393 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_32 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_394 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_395 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_398 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_89 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_402 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_406 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_90 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_410 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_415 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_416 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_33 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_417 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_418 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_421 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_91 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_425 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_429 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_92 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_433 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_438 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_439 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_34 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_440 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_441 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_444 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_93 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_448 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_452 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_94 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_456 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_461 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_462 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_35 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_463 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_464 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_467 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_95 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_471 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_475 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_96 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_479 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_484 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_485 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_36 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_486 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_487 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_490 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_97 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_494 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_498 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_98 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_502 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_507 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_508 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_37 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_509 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_510 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_513 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_99 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_517 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_521 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_100 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_525 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_530 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_531 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_38 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_532 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_533 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_536 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_101 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_540 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_544 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_102 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_548 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_553 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_554 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_39 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_555 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_556 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_559 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_103 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_563 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_567 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_104 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_571 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_576 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_577 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_40 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_578 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_579 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_582 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_105 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_586 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_590 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_106 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_594 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_599 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_600 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_41 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_601 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_602 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_605 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_107 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_609 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_613 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_108 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_617 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_622 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_623 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_42 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_624 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_625 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_628 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_109 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_632 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_636 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_110 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_640 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_645 = rand_strided((128, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_646 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_43 = rand_strided((8, 16, 1, 196, 196), (614656, 38416, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_647 = rand_strided((128, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_648 = rand_strided((128, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_651 = rand_strided((1536, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_111 = rand_strided((8, 1, 196, 1), (196, 1, 1, 1), device='cpu', dtype=torch.float32)
    permute_661 = rand_strided((256, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    permute_665 = rand_strided((1024, 256), (256, 1), device='cpu', dtype=torch.float32)
    div_113 = rand_strided((8, 4, 196, 1), (784, 1, 4, 4), device='cpu', dtype=torch.float32)
    permute_669 = rand_strided((256, 256), (256, 1), device='cpu', dtype=torch.float32)
    permute_674 = rand_strided((256, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_675 = rand_strided((256, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_44 = rand_strided((8, 8, 4, 196, 196), (1229312, 153664, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_676 = rand_strided((256, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_677 = rand_strided((256, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_680 = rand_strided((768, 256), (256, 1), device='cpu', dtype=torch.float32)
    div_114 = rand_strided((8, 4, 196, 1), (784, 1, 4, 4), device='cpu', dtype=torch.float32)
    permute_684 = rand_strided((256, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    permute_688 = rand_strided((1024, 256), (256, 1), device='cpu', dtype=torch.float32)
    div_115 = rand_strided((8, 4, 196, 1), (784, 1, 4, 4), device='cpu', dtype=torch.float32)
    permute_692 = rand_strided((256, 256), (256, 1), device='cpu', dtype=torch.float32)
    permute_697 = rand_strided((256, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_698 = rand_strided((256, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_45 = rand_strided((8, 8, 4, 196, 196), (1229312, 153664, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_699 = rand_strided((256, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_700 = rand_strided((256, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_703 = rand_strided((768, 256), (256, 1), device='cpu', dtype=torch.float32)
    div_116 = rand_strided((8, 4, 196, 1), (784, 1, 4, 4), device='cpu', dtype=torch.float32)
    permute_713 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_717 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_118 = rand_strided((8, 16, 196, 1), (3136, 1, 16, 16), device='cpu', dtype=torch.float32)
    permute_721 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_726 = rand_strided((512, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_727 = rand_strided((512, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_46 = rand_strided((8, 4, 16, 196, 196), (2458624, 614656, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_728 = rand_strided((512, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_729 = rand_strided((512, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_732 = rand_strided((384, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_119 = rand_strided((8, 16, 196, 1), (3136, 1, 16, 16), device='cpu', dtype=torch.float32)
    permute_736 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_740 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_120 = rand_strided((8, 16, 196, 1), (3136, 1, 16, 16), device='cpu', dtype=torch.float32)
    permute_744 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_749 = rand_strided((512, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_750 = rand_strided((512, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_47 = rand_strided((8, 4, 16, 196, 196), (2458624, 614656, 38416, 196, 1), device='cpu', dtype=torch.float32)
    permute_751 = rand_strided((512, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_752 = rand_strided((512, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_755 = rand_strided((384, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_121 = rand_strided((8, 16, 196, 1), (3136, 1, 16, 16), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_2, primals_4, primals_6, primals_8, primals_10, primals_13, primals_15, primals_17, primals_19, primals_21, primals_24, primals_26, primals_28, primals_30, primals_32, primals_34, primals_36, primals_38, primals_40, primals_42, primals_44, primals_46, primals_48, primals_50, primals_52, primals_54, primals_56, primals_58, primals_60, primals_62, primals_64, primals_66, primals_68, primals_70, primals_72, primals_74, primals_76, primals_78, primals_80, primals_82, primals_84, primals_86, primals_88, primals_90, primals_92, primals_94, primals_96, primals_98, primals_100, primals_102, primals_104, primals_106, primals_124, primals_142, primals_306, mul, view_2, view_12, mul_4, view_14, addmm_2, view_16, mul_9, view_18, view_28, bernoulli, mul_14, view_30, addmm_6, view_32, bernoulli_1, permute_17, convolution_1, getitem_15, rsqrt_4, constant_pad_nd, getitem_17, mul_22, view_38, view_48, bernoulli_2, mul_27, view_50, addmm_10, view_52, bernoulli_3, mul_33, view_54, view_64, bernoulli_4, mul_38, view_66, addmm_14, view_68, bernoulli_5, permute_37, convolution_2, getitem_33, rsqrt_9, constant_pad_nd_1, getitem_35, mul_46, view_74, view_84, bernoulli_6, mul_51, view_86, addmm_18, view_88, bernoulli_7, mul_57, view_90, view_100, bernoulli_8, mul_62, view_102, addmm_22, view_104, bernoulli_9, mul_68, view_106, view_116, bernoulli_10, mul_73, view_118, addmm_26, view_120, bernoulli_11, mul_79, view_122, view_132, bernoulli_12, mul_84, view_134, addmm_30, view_136, bernoulli_13, mul_90, view_138, view_148, bernoulli_14, mul_95, view_150, addmm_34, view_152, bernoulli_15, mul_101, view_154, view_164, bernoulli_16, mul_106, view_166, addmm_38, view_168, bernoulli_17, mul_112, view_170, view_180, bernoulli_18, mul_117, view_182, addmm_42, view_184, bernoulli_19, mul_123, view_186, view_196, bernoulli_20, mul_128, view_198, addmm_46, view_200, bernoulli_21, mul_134, view_202, view_212, bernoulli_22, mul_139, view_214, addmm_50, view_216, bernoulli_23, mul_145, view_218, view_228, bernoulli_24, mul_150, view_230, addmm_54, view_232, bernoulli_25, mul_156, view_234, view_244, bernoulli_26, mul_161, view_246, addmm_58, view_248, bernoulli_27, mul_167, view_250, view_260, bernoulli_28, mul_172, view_262, addmm_62, view_264, bernoulli_29, mul_178, view_266, view_276, bernoulli_30, mul_183, view_278, addmm_66, view_280, bernoulli_31, mul_189, view_282, view_292, bernoulli_32, mul_194, view_294, addmm_70, view_296, bernoulli_33, mul_200, view_298, view_308, bernoulli_34, mul_205, view_310, addmm_74, view_312, bernoulli_35, mul_211, view_314, view_324, bernoulli_36, mul_216, view_326, addmm_78, view_328, bernoulli_37, mul_222, view_330, view_340, bernoulli_38, mul_227, view_342, addmm_82, view_344, bernoulli_39, mul_233, view_346, view_356, bernoulli_40, mul_238, view_358, addmm_86, view_360, bernoulli_41, mul_244, view_362, view_372, bernoulli_42, mul_249, view_374, addmm_90, view_376, bernoulli_43, mul_255, view_378, view_388, bernoulli_44, mul_260, view_390, addmm_94, view_392, bernoulli_45, mul_266, clone_172, permute_187, div_71, permute_195, permute_199, div_72, permute_203, permute_208, permute_209, alias_24, permute_210, permute_211, permute_214, div_73, permute_218, permute_222, div_74, permute_226, permute_231, permute_232, alias_25, permute_233, permute_234, permute_237, div_75, permute_241, permute_245, div_76, permute_249, permute_254, permute_255, alias_26, permute_256, permute_257, permute_260, div_77, permute_264, permute_268, div_78, permute_272, permute_277, permute_278, alias_27, permute_279, permute_280, permute_283, div_79, permute_287, permute_291, div_80, permute_295, permute_300, permute_301, alias_28, permute_302, permute_303, permute_306, div_81, permute_310, permute_314, div_82, permute_318, permute_323, permute_324, alias_29, permute_325, permute_326, permute_329, div_83, permute_333, permute_337, div_84, permute_341, permute_346, permute_347, alias_30, permute_348, permute_349, permute_352, div_85, permute_356, permute_360, div_86, permute_364, permute_369, permute_370, alias_31, permute_371, permute_372, permute_375, div_87, permute_379, permute_383, div_88, permute_387, permute_392, permute_393, alias_32, permute_394, permute_395, permute_398, div_89, permute_402, permute_406, div_90, permute_410, permute_415, permute_416, alias_33, permute_417, permute_418, permute_421, div_91, permute_425, permute_429, div_92, permute_433, permute_438, permute_439, alias_34, permute_440, permute_441, permute_444, div_93, permute_448, permute_452, div_94, permute_456, permute_461, permute_462, alias_35, permute_463, permute_464, permute_467, div_95, permute_471, permute_475, div_96, permute_479, permute_484, permute_485, alias_36, permute_486, permute_487, permute_490, div_97, permute_494, permute_498, div_98, permute_502, permute_507, permute_508, alias_37, permute_509, permute_510, permute_513, div_99, permute_517, permute_521, div_100, permute_525, permute_530, permute_531, alias_38, permute_532, permute_533, permute_536, div_101, permute_540, permute_544, div_102, permute_548, permute_553, permute_554, alias_39, permute_555, permute_556, permute_559, div_103, permute_563, permute_567, div_104, permute_571, permute_576, permute_577, alias_40, permute_578, permute_579, permute_582, div_105, permute_586, permute_590, div_106, permute_594, permute_599, permute_600, alias_41, permute_601, permute_602, permute_605, div_107, permute_609, permute_613, div_108, permute_617, permute_622, permute_623, alias_42, permute_624, permute_625, permute_628, div_109, permute_632, permute_636, div_110, permute_640, permute_645, permute_646, alias_43, permute_647, permute_648, permute_651, div_111, permute_661, permute_665, div_113, permute_669, permute_674, permute_675, alias_44, permute_676, permute_677, permute_680, div_114, permute_684, permute_688, div_115, permute_692, permute_697, permute_698, alias_45, permute_699, permute_700, permute_703, div_116, permute_713, permute_717, div_118, permute_721, permute_726, permute_727, alias_46, permute_728, permute_729, permute_732, div_119, permute_736, permute_740, div_120, permute_744, permute_749, permute_750, alias_47, permute_751, permute_752, permute_755, div_121, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('jx_nest_base', benchmark_compiled_module)
