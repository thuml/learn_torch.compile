
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_convolution_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(147456L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (147456L*x1) + (442368L*x0))];
                        out_ptr0[static_cast<long>(x1 + (3L*x2) + (442368L*x0))] = tmp0;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x2 + (256L*x1) + (768L*x0))];
                        out_ptr1[static_cast<long>(x1 + (3L*x2) + (768L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                        #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                        Welford<float> tmp_acc0 = Welford<float>();
                        Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                        out_ptr0[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.mean);
                        out_ptr1[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.m2);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                        auto tmp3 = out_ptr0[static_cast<long>(x1 + (576L*x0))];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + (576L*x0))];
                        auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(768.0);
                        auto tmp8 = tmp6 / tmp7;
                        auto tmp9 = static_cast<float>(1e-06);
                        auto tmp10 = decltype(tmp8)(tmp8 + tmp9);
                        auto tmp11 = 1 / std::sqrt(tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp15 = tmp13 * tmp14;
                        auto tmp17 = tmp15 + tmp16;
                        tmp17.store(out_ptr2 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                        #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                        Welford<float> tmp_acc0 = Welford<float>();
                        Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                            auto tmp2 = tmp0 + tmp1;
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = tmp2 + tmp5;
                            tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp6);
                        }
                        tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                        out_ptr0[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.mean);
                        out_ptr1[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.m2);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp7 = out_ptr0[static_cast<long>(x1 + (576L*x0))];
                        auto tmp10 = out_ptr1[static_cast<long>(x1 + (576L*x0))];
                        auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = tmp3 * tmp4;
                        auto tmp6 = tmp2 + tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 - tmp8;
                        auto tmp11 = static_cast<float>(768.0);
                        auto tmp12 = tmp10 / tmp11;
                        auto tmp13 = static_cast<float>(1e-06);
                        auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                        auto tmp15 = 1 / std::sqrt(tmp14);
                        auto tmp16 = at::vec::Vectorized<float>(tmp15);
                        auto tmp17 = tmp9 * tmp16;
                        auto tmp19 = tmp17 * tmp18;
                        auto tmp21 = tmp19 + tmp20;
                        tmp21.store(out_ptr2 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = tmp3 * tmp4;
                        auto tmp6 = tmp2 + tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp6 + tmp9;
                        tmp10.store(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_219 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_220 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_221 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_222 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_223 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_224 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_225 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_226 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_227 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_228 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_229 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_230 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_231 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_232 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_233 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_234 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_235 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_236 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_237 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_238 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_239 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_240 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_241 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_242 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_243 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_244 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_245 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_246 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_247 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_248 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_249 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_250 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_251 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_252 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_253 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_254 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_255 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_256 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_257 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_258 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_259 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_260 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_261 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_262 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_263 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_264 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_265 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_266 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_267 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_268 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_269 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_270 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_271 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_272 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_273 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_274 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_275 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_276 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_277 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_278 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_279 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_280 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_281 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr0[static_cast<long>(x0)];
                    auto tmp4 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_282 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_283 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(331776L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (331776L*x2) + (5308416L*x0)), static_cast<long>(331776L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr0 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_clone_284 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr1 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_285 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_286 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (27648L*x2) + (442368L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (768L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_287 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_288 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_cat_mul_native_layer_norm_289 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x2 + (768L*x1) + (443136L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        tmp0.store(out_ptr1 + static_cast<long>(x1 + (443136L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = out_ptr3[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_290 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                Welford<float> tmp_acc0 = Welford<float>();
                Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                }
                tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                auto tmp5 = out_ptr0[static_cast<long>(x0)];
                auto tmp8 = out_ptr1[static_cast<long>(x0)];
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = tmp0 + tmp3;
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 - tmp6;
                auto tmp9 = static_cast<float>(768.0);
                auto tmp10 = tmp8 / tmp9;
                auto tmp11 = static_cast<float>(1e-06);
                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                auto tmp13 = 1 / std::sqrt(tmp12);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp7 * tmp14;
                auto tmp17 = tmp15 * tmp16;
                auto tmp19 = tmp17 + tmp18;
                tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
            }
        }
    }
}
''')


cpp_fused_gelu_291 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(24576L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.5);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            auto tmp4 = static_cast<float>(0.7071067811865476);
            auto tmp5 = at::vec::Vectorized<float>(tmp4);
            auto tmp6 = tmp0 * tmp5;
            auto tmp7 = tmp6.erf();
            auto tmp8 = static_cast<float>(1.0);
            auto tmp9 = at::vec::Vectorized<float>(tmp8);
            auto tmp10 = tmp7 + tmp9;
            auto tmp11 = tmp3 * tmp10;
            tmp11.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_mul_native_layer_norm_292 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = tmp0 + tmp3;
                auto tmp7 = tmp5 * tmp6;
                auto tmp8 = tmp4 + tmp7;
                tmp8.store(out_ptr0 + static_cast<long>(x1 + (443136L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(442368L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (443136L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (443136L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = out_ptr3[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_293 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                Welford<float> tmp_acc0 = Welford<float>();
                Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (443136L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                }
                tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (443136L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                auto tmp5 = out_ptr0[static_cast<long>(x0)];
                auto tmp8 = out_ptr1[static_cast<long>(x0)];
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = tmp0 + tmp3;
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 - tmp6;
                auto tmp9 = static_cast<float>(768.0);
                auto tmp10 = tmp8 / tmp9;
                auto tmp11 = static_cast<float>(1e-06);
                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                auto tmp13 = 1 / std::sqrt(tmp12);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp7 * tmp14;
                auto tmp17 = tmp15 * tmp16;
                auto tmp19 = tmp17 + tmp18;
                tmp19.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
            }
        }
    }
}
''')


cpp_fused_gelu_294 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(24576L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.5);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            auto tmp4 = static_cast<float>(0.7071067811865476);
            auto tmp5 = at::vec::Vectorized<float>(tmp4);
            auto tmp6 = tmp0 * tmp5;
            auto tmp7 = tmp6.erf();
            auto tmp8 = static_cast<float>(1.0);
            auto tmp9 = at::vec::Vectorized<float>(tmp8);
            auto tmp10 = tmp7 + tmp9;
            auto tmp11 = tmp3 * tmp10;
            tmp11.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_clone_native_layer_norm_295 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(577L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(1);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x2 + (443136L*x0)), to_float_mask(tmp4));
                            auto tmp7 = masked_load(in_ptr1 + static_cast<long>(x2), to_float_mask(tmp4));
                            auto tmp8 = masked_load(in_ptr2 + static_cast<long>(x2 + (768L*x0)), to_float_mask(tmp4));
                            auto tmp9 = tmp7 * tmp8;
                            auto tmp10 = tmp6 + tmp9;
                            auto tmp11 = masked_load(in_ptr3 + static_cast<long>(x2), to_float_mask(tmp4));
                            auto tmp12 = masked_load(in_ptr4 + static_cast<long>(x2 + (768L*x0)), to_float_mask(tmp4));
                            auto tmp13 = tmp11 * tmp12;
                            auto tmp14 = tmp10 + tmp13;
                            return tmp14;
                        }
                        ;
                        auto tmp15 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp16 = tmp0 >= tmp3;
                        auto tmp17 = static_cast<int>(577);
                        auto tmp18 = tmp0 < tmp17;
                        auto tmp19 = [&]
                        {
                            auto tmp20 = masked_load(in_ptr5 + static_cast<long>((-768L) + x2 + (768L*x1) + (443136L*x0)), to_float_mask(tmp16));
                            return tmp20;
                        }
                        ;
                        auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                        auto tmp22 = to_float_mask(tmp4);
                        auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                        tmp23.store(out_ptr0 + static_cast<long>(x2 + (768L*x1) + (443136L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (443136L*x0)));
                        auto tmp1 = out_ptr1[static_cast<long>(577L*x0)];
                        auto tmp4 = out_ptr2[static_cast<long>(577L*x0)];
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                        auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = tmp0 - tmp2;
                        auto tmp5 = static_cast<float>(768.0);
                        auto tmp6 = tmp4 / tmp5;
                        auto tmp7 = static_cast<float>(1e-06);
                        auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                        auto tmp9 = 1 / std::sqrt(tmp8);
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp3 * tmp10;
                        auto tmp13 = tmp11 * tmp12;
                        auto tmp15 = tmp13 + tmp14;
                        tmp15.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1, arg200_1, arg201_1, arg202_1, arg203_1, arg204_1, arg205_1, arg206_1, arg207_1, arg208_1, arg209_1, arg210_1, arg211_1, arg212_1, arg213_1, arg214_1, arg215_1, arg216_1, arg217_1, arg218_1, arg219_1, arg220_1, arg221_1, arg222_1, arg223_1, arg224_1, arg225_1, arg226_1, arg227_1, arg228_1, arg229_1, arg230_1, arg231_1, arg232_1, arg233_1, arg234_1, arg235_1, arg236_1, arg237_1, arg238_1, arg239_1, arg240_1, arg241_1, arg242_1, arg243_1, arg244_1, arg245_1, arg246_1, arg247_1, arg248_1, arg249_1, arg250_1, arg251_1, arg252_1, arg253_1, arg254_1, arg255_1, arg256_1, arg257_1, arg258_1, arg259_1, arg260_1, arg261_1, arg262_1, arg263_1, arg264_1, arg265_1, arg266_1, arg267_1, arg268_1, arg269_1, arg270_1, arg271_1, arg272_1, arg273_1, arg274_1, arg275_1, arg276_1, arg277_1, arg278_1, arg279_1, arg280_1, arg281_1, arg282_1, arg283_1, arg284_1, arg285_1, arg286_1, arg287_1, arg288_1, arg289_1, arg290_1, arg291_1, arg292_1, arg293_1, arg294_1, arg295_1, arg296_1, arg297_1, arg298_1, arg299_1, arg300_1, arg301_1, arg302_1, arg303_1, arg304_1, arg305_1, arg306_1, arg307_1, arg308_1, arg309_1, arg310_1, arg311_1, arg312_1, arg313_1, arg314_1, arg315_1, arg316_1, arg317_1, arg318_1, arg319_1, arg320_1, arg321_1, arg322_1, arg323_1, arg324_1, arg325_1, arg326_1, arg327_1, arg328_1, arg329_1, arg330_1, arg331_1, arg332_1, arg333_1, arg334_1, arg335_1, arg336_1, arg337_1, arg338_1, arg339_1, arg340_1, arg341_1, arg342_1, arg343_1, arg344_1, arg345_1, arg346_1, arg347_1, arg348_1, arg349_1, arg350_1, arg351_1, arg352_1, arg353_1, arg354_1, arg355_1, arg356_1, arg357_1, arg358_1, arg359_1, arg360_1, arg361_1, arg362_1, arg363_1, arg364_1, arg365_1, arg366_1, arg367_1, arg368_1, arg369_1, arg370_1, arg371_1, arg372_1, arg373_1, arg374_1, arg375_1, arg376_1, arg377_1, arg378_1, arg379_1, arg380_1, arg381_1, arg382_1, arg383_1, arg384_1, arg385_1, arg386_1, arg387_1, arg388_1, arg389_1, arg390_1, arg391_1, arg392_1, arg393_1, arg394_1, arg395_1, arg396_1, arg397_1, arg398_1, arg399_1, arg400_1, arg401_1, arg402_1, arg403_1, arg404_1, arg405_1, arg406_1, arg407_1, arg408_1, arg409_1, arg410_1, arg411_1, arg412_1, arg413_1, arg414_1, arg415_1, arg416_1, arg417_1, arg418_1, arg419_1, arg420_1, arg421_1, arg422_1, arg423_1, arg424_1, arg425_1, arg426_1, arg427_1, arg428_1, arg429_1, arg430_1, arg431_1, arg432_1, arg433_1, arg434_1, arg435_1, arg436_1, arg437_1, arg438_1, arg439_1, arg440_1, arg441_1, arg442_1, arg443_1, arg444_1, arg445_1, arg446_1, arg447_1, arg448_1, arg449_1, arg450_1, arg451_1, arg452_1, arg453_1, arg454_1, arg455_1, arg456_1, arg457_1, arg458_1, arg459_1, arg460_1, arg461_1, arg462_1, arg463_1, arg464_1, arg465_1, arg466_1, arg467_1, arg468_1, arg469_1, arg470_1, arg471_1, arg472_1, arg473_1, arg474_1, arg475_1, arg476_1, arg477_1, arg478_1, arg479_1, arg480_1, arg481_1, arg482_1, arg483_1, arg484_1, arg485_1, arg486_1, arg487_1, arg488_1, arg489_1, arg490_1, arg491_1, arg492_1, arg493_1, arg494_1, arg495_1, arg496_1, arg497_1, arg498_1, arg499_1, arg500_1, arg501_1, arg502_1, arg503_1, arg504_1, arg505_1, arg506_1, arg507_1, arg508_1, arg509_1, arg510_1, arg511_1, arg512_1, arg513_1, arg514_1, arg515_1, arg516_1, arg517_1, arg518_1, arg519_1, arg520_1, arg521_1, arg522_1, arg523_1, arg524_1, arg525_1, arg526_1, arg527_1, arg528_1, arg529_1, arg530_1, arg531_1, arg532_1, arg533_1, arg534_1, arg535_1, arg536_1, arg537_1, arg538_1, arg539_1, arg540_1, arg541_1, arg542_1, arg543_1, arg544_1, arg545_1, arg546_1, arg547_1, arg548_1, arg549_1, arg550_1, arg551_1, arg552_1, arg553_1, arg554_1, arg555_1, arg556_1, arg557_1, arg558_1, arg559_1, arg560_1, arg561_1, arg562_1, arg563_1, arg564_1, arg565_1, arg566_1, arg567_1, arg568_1, arg569_1, arg570_1, arg571_1, arg572_1, arg573_1, arg574_1, arg575_1, arg576_1, arg577_1, arg578_1, arg579_1, arg580_1, arg581_1, arg582_1, arg583_1, arg584_1, arg585_1, arg586_1, arg587_1, arg588_1, arg589_1, arg590_1, arg591_1, arg592_1, arg593_1, arg594_1, arg595_1, arg596_1, arg597_1, arg598_1, arg599_1, arg600_1, arg601_1, arg602_1, arg603_1, arg604_1, arg605_1, arg606_1, arg607_1, arg608_1, arg609_1, arg610_1, arg611_1, arg612_1, arg613_1, arg614_1, arg615_1, arg616_1, arg617_1, arg618_1, arg619_1, arg620_1, arg621_1, arg622_1, arg623_1, arg624_1, arg625_1, arg626_1, arg627_1, arg628_1, arg629_1, arg630_1, arg631_1, arg632_1, arg633_1, arg634_1, arg635_1, arg636_1, arg637_1, arg638_1, arg639_1, arg640_1, arg641_1, arg642_1, arg643_1, arg644_1, arg645_1, arg646_1, arg647_1, arg648_1, arg649_1, arg650_1, arg651_1, arg652_1, arg653_1, arg654_1, arg655_1, arg656_1, arg657_1, arg658_1, arg659_1, arg660_1, arg661_1, arg662_1, arg663_1, arg664_1, arg665_1, arg666_1, arg667_1, arg668_1, arg669_1, arg670_1, arg671_1, arg672_1, arg673_1, arg674_1, arg675_1, arg676_1, arg677_1, arg678_1, arg679_1, arg680_1, arg681_1, arg682_1, arg683_1, arg684_1, arg685_1, arg686_1, arg687_1, arg688_1, arg689_1, arg690_1, arg691_1, arg692_1 = args
    args.clear()
    assert_size_stride(arg0_1, (1, 576, 768), (442368, 768, 1))
    assert_size_stride(arg1_1, (768, ), (1, ))
    assert_size_stride(arg2_1, (768, ), (1, ))
    assert_size_stride(arg3_1, (768, ), (1, ))
    assert_size_stride(arg4_1, (768, ), (1, ))
    assert_size_stride(arg5_1, (768, ), (1, ))
    assert_size_stride(arg6_1, (768, ), (1, ))
    assert_size_stride(arg7_1, (768, ), (1, ))
    assert_size_stride(arg8_1, (768, ), (1, ))
    assert_size_stride(arg9_1, (768, ), (1, ))
    assert_size_stride(arg10_1, (768, ), (1, ))
    assert_size_stride(arg11_1, (768, ), (1, ))
    assert_size_stride(arg12_1, (768, ), (1, ))
    assert_size_stride(arg13_1, (768, ), (1, ))
    assert_size_stride(arg14_1, (768, ), (1, ))
    assert_size_stride(arg15_1, (768, ), (1, ))
    assert_size_stride(arg16_1, (768, ), (1, ))
    assert_size_stride(arg17_1, (768, ), (1, ))
    assert_size_stride(arg18_1, (768, ), (1, ))
    assert_size_stride(arg19_1, (768, ), (1, ))
    assert_size_stride(arg20_1, (768, ), (1, ))
    assert_size_stride(arg21_1, (768, ), (1, ))
    assert_size_stride(arg22_1, (768, ), (1, ))
    assert_size_stride(arg23_1, (768, ), (1, ))
    assert_size_stride(arg24_1, (768, ), (1, ))
    assert_size_stride(arg25_1, (768, ), (1, ))
    assert_size_stride(arg26_1, (768, ), (1, ))
    assert_size_stride(arg27_1, (768, ), (1, ))
    assert_size_stride(arg28_1, (768, ), (1, ))
    assert_size_stride(arg29_1, (768, ), (1, ))
    assert_size_stride(arg30_1, (768, ), (1, ))
    assert_size_stride(arg31_1, (768, ), (1, ))
    assert_size_stride(arg32_1, (768, ), (1, ))
    assert_size_stride(arg33_1, (768, ), (1, ))
    assert_size_stride(arg34_1, (768, ), (1, ))
    assert_size_stride(arg35_1, (768, ), (1, ))
    assert_size_stride(arg36_1, (768, ), (1, ))
    assert_size_stride(arg37_1, (768, ), (1, ))
    assert_size_stride(arg38_1, (768, ), (1, ))
    assert_size_stride(arg39_1, (768, ), (1, ))
    assert_size_stride(arg40_1, (768, ), (1, ))
    assert_size_stride(arg41_1, (768, ), (1, ))
    assert_size_stride(arg42_1, (768, ), (1, ))
    assert_size_stride(arg43_1, (768, ), (1, ))
    assert_size_stride(arg44_1, (768, ), (1, ))
    assert_size_stride(arg45_1, (768, ), (1, ))
    assert_size_stride(arg46_1, (768, ), (1, ))
    assert_size_stride(arg47_1, (768, ), (1, ))
    assert_size_stride(arg48_1, (768, ), (1, ))
    assert_size_stride(arg49_1, (768, ), (1, ))
    assert_size_stride(arg50_1, (768, ), (1, ))
    assert_size_stride(arg51_1, (768, ), (1, ))
    assert_size_stride(arg52_1, (768, ), (1, ))
    assert_size_stride(arg53_1, (768, ), (1, ))
    assert_size_stride(arg54_1, (768, ), (1, ))
    assert_size_stride(arg55_1, (768, ), (1, ))
    assert_size_stride(arg56_1, (768, ), (1, ))
    assert_size_stride(arg57_1, (768, ), (1, ))
    assert_size_stride(arg58_1, (768, ), (1, ))
    assert_size_stride(arg59_1, (768, ), (1, ))
    assert_size_stride(arg60_1, (768, ), (1, ))
    assert_size_stride(arg61_1, (768, ), (1, ))
    assert_size_stride(arg62_1, (768, ), (1, ))
    assert_size_stride(arg63_1, (768, ), (1, ))
    assert_size_stride(arg64_1, (768, ), (1, ))
    assert_size_stride(arg65_1, (768, ), (1, ))
    assert_size_stride(arg66_1, (768, ), (1, ))
    assert_size_stride(arg67_1, (768, ), (1, ))
    assert_size_stride(arg68_1, (768, ), (1, ))
    assert_size_stride(arg69_1, (768, ), (1, ))
    assert_size_stride(arg70_1, (768, ), (1, ))
    assert_size_stride(arg71_1, (768, ), (1, ))
    assert_size_stride(arg72_1, (768, ), (1, ))
    assert_size_stride(arg73_1, (1, 1, 768), (768, 768, 1))
    assert_size_stride(arg74_1, (768, ), (1, ))
    assert_size_stride(arg75_1, (768, ), (1, ))
    assert_size_stride(arg76_1, (768, ), (1, ))
    assert_size_stride(arg77_1, (768, ), (1, ))
    assert_size_stride(arg78_1, (768, 3, 16, 16), (768, 256, 16, 1))
    assert_size_stride(arg79_1, (768, ), (1, ))
    assert_size_stride(arg80_1, (768, ), (1, ))
    assert_size_stride(arg81_1, (768, ), (1, ))
    assert_size_stride(arg82_1, (2304, 768), (768, 1))
    assert_size_stride(arg83_1, (2304, ), (1, ))
    assert_size_stride(arg84_1, (16, 16), (16, 1))
    assert_size_stride(arg85_1, (16, ), (1, ))
    assert_size_stride(arg86_1, (16, 16), (16, 1))
    assert_size_stride(arg87_1, (16, ), (1, ))
    assert_size_stride(arg88_1, (768, 768), (768, 1))
    assert_size_stride(arg89_1, (768, ), (1, ))
    assert_size_stride(arg90_1, (768, ), (1, ))
    assert_size_stride(arg91_1, (768, ), (1, ))
    assert_size_stride(arg92_1, (3072, 768), (768, 1))
    assert_size_stride(arg93_1, (3072, ), (1, ))
    assert_size_stride(arg94_1, (768, 3072), (3072, 1))
    assert_size_stride(arg95_1, (768, ), (1, ))
    assert_size_stride(arg96_1, (768, ), (1, ))
    assert_size_stride(arg97_1, (768, ), (1, ))
    assert_size_stride(arg98_1, (2304, 768), (768, 1))
    assert_size_stride(arg99_1, (2304, ), (1, ))
    assert_size_stride(arg100_1, (16, 16), (16, 1))
    assert_size_stride(arg101_1, (16, ), (1, ))
    assert_size_stride(arg102_1, (16, 16), (16, 1))
    assert_size_stride(arg103_1, (16, ), (1, ))
    assert_size_stride(arg104_1, (768, 768), (768, 1))
    assert_size_stride(arg105_1, (768, ), (1, ))
    assert_size_stride(arg106_1, (768, ), (1, ))
    assert_size_stride(arg107_1, (768, ), (1, ))
    assert_size_stride(arg108_1, (3072, 768), (768, 1))
    assert_size_stride(arg109_1, (3072, ), (1, ))
    assert_size_stride(arg110_1, (768, 3072), (3072, 1))
    assert_size_stride(arg111_1, (768, ), (1, ))
    assert_size_stride(arg112_1, (768, ), (1, ))
    assert_size_stride(arg113_1, (768, ), (1, ))
    assert_size_stride(arg114_1, (2304, 768), (768, 1))
    assert_size_stride(arg115_1, (2304, ), (1, ))
    assert_size_stride(arg116_1, (16, 16), (16, 1))
    assert_size_stride(arg117_1, (16, ), (1, ))
    assert_size_stride(arg118_1, (16, 16), (16, 1))
    assert_size_stride(arg119_1, (16, ), (1, ))
    assert_size_stride(arg120_1, (768, 768), (768, 1))
    assert_size_stride(arg121_1, (768, ), (1, ))
    assert_size_stride(arg122_1, (768, ), (1, ))
    assert_size_stride(arg123_1, (768, ), (1, ))
    assert_size_stride(arg124_1, (3072, 768), (768, 1))
    assert_size_stride(arg125_1, (3072, ), (1, ))
    assert_size_stride(arg126_1, (768, 3072), (3072, 1))
    assert_size_stride(arg127_1, (768, ), (1, ))
    assert_size_stride(arg128_1, (768, ), (1, ))
    assert_size_stride(arg129_1, (768, ), (1, ))
    assert_size_stride(arg130_1, (2304, 768), (768, 1))
    assert_size_stride(arg131_1, (2304, ), (1, ))
    assert_size_stride(arg132_1, (16, 16), (16, 1))
    assert_size_stride(arg133_1, (16, ), (1, ))
    assert_size_stride(arg134_1, (16, 16), (16, 1))
    assert_size_stride(arg135_1, (16, ), (1, ))
    assert_size_stride(arg136_1, (768, 768), (768, 1))
    assert_size_stride(arg137_1, (768, ), (1, ))
    assert_size_stride(arg138_1, (768, ), (1, ))
    assert_size_stride(arg139_1, (768, ), (1, ))
    assert_size_stride(arg140_1, (3072, 768), (768, 1))
    assert_size_stride(arg141_1, (3072, ), (1, ))
    assert_size_stride(arg142_1, (768, 3072), (3072, 1))
    assert_size_stride(arg143_1, (768, ), (1, ))
    assert_size_stride(arg144_1, (768, ), (1, ))
    assert_size_stride(arg145_1, (768, ), (1, ))
    assert_size_stride(arg146_1, (2304, 768), (768, 1))
    assert_size_stride(arg147_1, (2304, ), (1, ))
    assert_size_stride(arg148_1, (16, 16), (16, 1))
    assert_size_stride(arg149_1, (16, ), (1, ))
    assert_size_stride(arg150_1, (16, 16), (16, 1))
    assert_size_stride(arg151_1, (16, ), (1, ))
    assert_size_stride(arg152_1, (768, 768), (768, 1))
    assert_size_stride(arg153_1, (768, ), (1, ))
    assert_size_stride(arg154_1, (768, ), (1, ))
    assert_size_stride(arg155_1, (768, ), (1, ))
    assert_size_stride(arg156_1, (3072, 768), (768, 1))
    assert_size_stride(arg157_1, (3072, ), (1, ))
    assert_size_stride(arg158_1, (768, 3072), (3072, 1))
    assert_size_stride(arg159_1, (768, ), (1, ))
    assert_size_stride(arg160_1, (768, ), (1, ))
    assert_size_stride(arg161_1, (768, ), (1, ))
    assert_size_stride(arg162_1, (2304, 768), (768, 1))
    assert_size_stride(arg163_1, (2304, ), (1, ))
    assert_size_stride(arg164_1, (16, 16), (16, 1))
    assert_size_stride(arg165_1, (16, ), (1, ))
    assert_size_stride(arg166_1, (16, 16), (16, 1))
    assert_size_stride(arg167_1, (16, ), (1, ))
    assert_size_stride(arg168_1, (768, 768), (768, 1))
    assert_size_stride(arg169_1, (768, ), (1, ))
    assert_size_stride(arg170_1, (768, ), (1, ))
    assert_size_stride(arg171_1, (768, ), (1, ))
    assert_size_stride(arg172_1, (3072, 768), (768, 1))
    assert_size_stride(arg173_1, (3072, ), (1, ))
    assert_size_stride(arg174_1, (768, 3072), (3072, 1))
    assert_size_stride(arg175_1, (768, ), (1, ))
    assert_size_stride(arg176_1, (768, ), (1, ))
    assert_size_stride(arg177_1, (768, ), (1, ))
    assert_size_stride(arg178_1, (2304, 768), (768, 1))
    assert_size_stride(arg179_1, (2304, ), (1, ))
    assert_size_stride(arg180_1, (16, 16), (16, 1))
    assert_size_stride(arg181_1, (16, ), (1, ))
    assert_size_stride(arg182_1, (16, 16), (16, 1))
    assert_size_stride(arg183_1, (16, ), (1, ))
    assert_size_stride(arg184_1, (768, 768), (768, 1))
    assert_size_stride(arg185_1, (768, ), (1, ))
    assert_size_stride(arg186_1, (768, ), (1, ))
    assert_size_stride(arg187_1, (768, ), (1, ))
    assert_size_stride(arg188_1, (3072, 768), (768, 1))
    assert_size_stride(arg189_1, (3072, ), (1, ))
    assert_size_stride(arg190_1, (768, 3072), (3072, 1))
    assert_size_stride(arg191_1, (768, ), (1, ))
    assert_size_stride(arg192_1, (768, ), (1, ))
    assert_size_stride(arg193_1, (768, ), (1, ))
    assert_size_stride(arg194_1, (2304, 768), (768, 1))
    assert_size_stride(arg195_1, (2304, ), (1, ))
    assert_size_stride(arg196_1, (16, 16), (16, 1))
    assert_size_stride(arg197_1, (16, ), (1, ))
    assert_size_stride(arg198_1, (16, 16), (16, 1))
    assert_size_stride(arg199_1, (16, ), (1, ))
    assert_size_stride(arg200_1, (768, 768), (768, 1))
    assert_size_stride(arg201_1, (768, ), (1, ))
    assert_size_stride(arg202_1, (768, ), (1, ))
    assert_size_stride(arg203_1, (768, ), (1, ))
    assert_size_stride(arg204_1, (3072, 768), (768, 1))
    assert_size_stride(arg205_1, (3072, ), (1, ))
    assert_size_stride(arg206_1, (768, 3072), (3072, 1))
    assert_size_stride(arg207_1, (768, ), (1, ))
    assert_size_stride(arg208_1, (768, ), (1, ))
    assert_size_stride(arg209_1, (768, ), (1, ))
    assert_size_stride(arg210_1, (2304, 768), (768, 1))
    assert_size_stride(arg211_1, (2304, ), (1, ))
    assert_size_stride(arg212_1, (16, 16), (16, 1))
    assert_size_stride(arg213_1, (16, ), (1, ))
    assert_size_stride(arg214_1, (16, 16), (16, 1))
    assert_size_stride(arg215_1, (16, ), (1, ))
    assert_size_stride(arg216_1, (768, 768), (768, 1))
    assert_size_stride(arg217_1, (768, ), (1, ))
    assert_size_stride(arg218_1, (768, ), (1, ))
    assert_size_stride(arg219_1, (768, ), (1, ))
    assert_size_stride(arg220_1, (3072, 768), (768, 1))
    assert_size_stride(arg221_1, (3072, ), (1, ))
    assert_size_stride(arg222_1, (768, 3072), (3072, 1))
    assert_size_stride(arg223_1, (768, ), (1, ))
    assert_size_stride(arg224_1, (768, ), (1, ))
    assert_size_stride(arg225_1, (768, ), (1, ))
    assert_size_stride(arg226_1, (2304, 768), (768, 1))
    assert_size_stride(arg227_1, (2304, ), (1, ))
    assert_size_stride(arg228_1, (16, 16), (16, 1))
    assert_size_stride(arg229_1, (16, ), (1, ))
    assert_size_stride(arg230_1, (16, 16), (16, 1))
    assert_size_stride(arg231_1, (16, ), (1, ))
    assert_size_stride(arg232_1, (768, 768), (768, 1))
    assert_size_stride(arg233_1, (768, ), (1, ))
    assert_size_stride(arg234_1, (768, ), (1, ))
    assert_size_stride(arg235_1, (768, ), (1, ))
    assert_size_stride(arg236_1, (3072, 768), (768, 1))
    assert_size_stride(arg237_1, (3072, ), (1, ))
    assert_size_stride(arg238_1, (768, 3072), (3072, 1))
    assert_size_stride(arg239_1, (768, ), (1, ))
    assert_size_stride(arg240_1, (768, ), (1, ))
    assert_size_stride(arg241_1, (768, ), (1, ))
    assert_size_stride(arg242_1, (2304, 768), (768, 1))
    assert_size_stride(arg243_1, (2304, ), (1, ))
    assert_size_stride(arg244_1, (16, 16), (16, 1))
    assert_size_stride(arg245_1, (16, ), (1, ))
    assert_size_stride(arg246_1, (16, 16), (16, 1))
    assert_size_stride(arg247_1, (16, ), (1, ))
    assert_size_stride(arg248_1, (768, 768), (768, 1))
    assert_size_stride(arg249_1, (768, ), (1, ))
    assert_size_stride(arg250_1, (768, ), (1, ))
    assert_size_stride(arg251_1, (768, ), (1, ))
    assert_size_stride(arg252_1, (3072, 768), (768, 1))
    assert_size_stride(arg253_1, (3072, ), (1, ))
    assert_size_stride(arg254_1, (768, 3072), (3072, 1))
    assert_size_stride(arg255_1, (768, ), (1, ))
    assert_size_stride(arg256_1, (768, ), (1, ))
    assert_size_stride(arg257_1, (768, ), (1, ))
    assert_size_stride(arg258_1, (2304, 768), (768, 1))
    assert_size_stride(arg259_1, (2304, ), (1, ))
    assert_size_stride(arg260_1, (16, 16), (16, 1))
    assert_size_stride(arg261_1, (16, ), (1, ))
    assert_size_stride(arg262_1, (16, 16), (16, 1))
    assert_size_stride(arg263_1, (16, ), (1, ))
    assert_size_stride(arg264_1, (768, 768), (768, 1))
    assert_size_stride(arg265_1, (768, ), (1, ))
    assert_size_stride(arg266_1, (768, ), (1, ))
    assert_size_stride(arg267_1, (768, ), (1, ))
    assert_size_stride(arg268_1, (3072, 768), (768, 1))
    assert_size_stride(arg269_1, (3072, ), (1, ))
    assert_size_stride(arg270_1, (768, 3072), (3072, 1))
    assert_size_stride(arg271_1, (768, ), (1, ))
    assert_size_stride(arg272_1, (768, ), (1, ))
    assert_size_stride(arg273_1, (768, ), (1, ))
    assert_size_stride(arg274_1, (2304, 768), (768, 1))
    assert_size_stride(arg275_1, (2304, ), (1, ))
    assert_size_stride(arg276_1, (16, 16), (16, 1))
    assert_size_stride(arg277_1, (16, ), (1, ))
    assert_size_stride(arg278_1, (16, 16), (16, 1))
    assert_size_stride(arg279_1, (16, ), (1, ))
    assert_size_stride(arg280_1, (768, 768), (768, 1))
    assert_size_stride(arg281_1, (768, ), (1, ))
    assert_size_stride(arg282_1, (768, ), (1, ))
    assert_size_stride(arg283_1, (768, ), (1, ))
    assert_size_stride(arg284_1, (3072, 768), (768, 1))
    assert_size_stride(arg285_1, (3072, ), (1, ))
    assert_size_stride(arg286_1, (768, 3072), (3072, 1))
    assert_size_stride(arg287_1, (768, ), (1, ))
    assert_size_stride(arg288_1, (768, ), (1, ))
    assert_size_stride(arg289_1, (768, ), (1, ))
    assert_size_stride(arg290_1, (2304, 768), (768, 1))
    assert_size_stride(arg291_1, (2304, ), (1, ))
    assert_size_stride(arg292_1, (16, 16), (16, 1))
    assert_size_stride(arg293_1, (16, ), (1, ))
    assert_size_stride(arg294_1, (16, 16), (16, 1))
    assert_size_stride(arg295_1, (16, ), (1, ))
    assert_size_stride(arg296_1, (768, 768), (768, 1))
    assert_size_stride(arg297_1, (768, ), (1, ))
    assert_size_stride(arg298_1, (768, ), (1, ))
    assert_size_stride(arg299_1, (768, ), (1, ))
    assert_size_stride(arg300_1, (3072, 768), (768, 1))
    assert_size_stride(arg301_1, (3072, ), (1, ))
    assert_size_stride(arg302_1, (768, 3072), (3072, 1))
    assert_size_stride(arg303_1, (768, ), (1, ))
    assert_size_stride(arg304_1, (768, ), (1, ))
    assert_size_stride(arg305_1, (768, ), (1, ))
    assert_size_stride(arg306_1, (2304, 768), (768, 1))
    assert_size_stride(arg307_1, (2304, ), (1, ))
    assert_size_stride(arg308_1, (16, 16), (16, 1))
    assert_size_stride(arg309_1, (16, ), (1, ))
    assert_size_stride(arg310_1, (16, 16), (16, 1))
    assert_size_stride(arg311_1, (16, ), (1, ))
    assert_size_stride(arg312_1, (768, 768), (768, 1))
    assert_size_stride(arg313_1, (768, ), (1, ))
    assert_size_stride(arg314_1, (768, ), (1, ))
    assert_size_stride(arg315_1, (768, ), (1, ))
    assert_size_stride(arg316_1, (3072, 768), (768, 1))
    assert_size_stride(arg317_1, (3072, ), (1, ))
    assert_size_stride(arg318_1, (768, 3072), (3072, 1))
    assert_size_stride(arg319_1, (768, ), (1, ))
    assert_size_stride(arg320_1, (768, ), (1, ))
    assert_size_stride(arg321_1, (768, ), (1, ))
    assert_size_stride(arg322_1, (2304, 768), (768, 1))
    assert_size_stride(arg323_1, (2304, ), (1, ))
    assert_size_stride(arg324_1, (16, 16), (16, 1))
    assert_size_stride(arg325_1, (16, ), (1, ))
    assert_size_stride(arg326_1, (16, 16), (16, 1))
    assert_size_stride(arg327_1, (16, ), (1, ))
    assert_size_stride(arg328_1, (768, 768), (768, 1))
    assert_size_stride(arg329_1, (768, ), (1, ))
    assert_size_stride(arg330_1, (768, ), (1, ))
    assert_size_stride(arg331_1, (768, ), (1, ))
    assert_size_stride(arg332_1, (3072, 768), (768, 1))
    assert_size_stride(arg333_1, (3072, ), (1, ))
    assert_size_stride(arg334_1, (768, 3072), (3072, 1))
    assert_size_stride(arg335_1, (768, ), (1, ))
    assert_size_stride(arg336_1, (768, ), (1, ))
    assert_size_stride(arg337_1, (768, ), (1, ))
    assert_size_stride(arg338_1, (2304, 768), (768, 1))
    assert_size_stride(arg339_1, (2304, ), (1, ))
    assert_size_stride(arg340_1, (16, 16), (16, 1))
    assert_size_stride(arg341_1, (16, ), (1, ))
    assert_size_stride(arg342_1, (16, 16), (16, 1))
    assert_size_stride(arg343_1, (16, ), (1, ))
    assert_size_stride(arg344_1, (768, 768), (768, 1))
    assert_size_stride(arg345_1, (768, ), (1, ))
    assert_size_stride(arg346_1, (768, ), (1, ))
    assert_size_stride(arg347_1, (768, ), (1, ))
    assert_size_stride(arg348_1, (3072, 768), (768, 1))
    assert_size_stride(arg349_1, (3072, ), (1, ))
    assert_size_stride(arg350_1, (768, 3072), (3072, 1))
    assert_size_stride(arg351_1, (768, ), (1, ))
    assert_size_stride(arg352_1, (768, ), (1, ))
    assert_size_stride(arg353_1, (768, ), (1, ))
    assert_size_stride(arg354_1, (2304, 768), (768, 1))
    assert_size_stride(arg355_1, (2304, ), (1, ))
    assert_size_stride(arg356_1, (16, 16), (16, 1))
    assert_size_stride(arg357_1, (16, ), (1, ))
    assert_size_stride(arg358_1, (16, 16), (16, 1))
    assert_size_stride(arg359_1, (16, ), (1, ))
    assert_size_stride(arg360_1, (768, 768), (768, 1))
    assert_size_stride(arg361_1, (768, ), (1, ))
    assert_size_stride(arg362_1, (768, ), (1, ))
    assert_size_stride(arg363_1, (768, ), (1, ))
    assert_size_stride(arg364_1, (3072, 768), (768, 1))
    assert_size_stride(arg365_1, (3072, ), (1, ))
    assert_size_stride(arg366_1, (768, 3072), (3072, 1))
    assert_size_stride(arg367_1, (768, ), (1, ))
    assert_size_stride(arg368_1, (768, ), (1, ))
    assert_size_stride(arg369_1, (768, ), (1, ))
    assert_size_stride(arg370_1, (2304, 768), (768, 1))
    assert_size_stride(arg371_1, (2304, ), (1, ))
    assert_size_stride(arg372_1, (16, 16), (16, 1))
    assert_size_stride(arg373_1, (16, ), (1, ))
    assert_size_stride(arg374_1, (16, 16), (16, 1))
    assert_size_stride(arg375_1, (16, ), (1, ))
    assert_size_stride(arg376_1, (768, 768), (768, 1))
    assert_size_stride(arg377_1, (768, ), (1, ))
    assert_size_stride(arg378_1, (768, ), (1, ))
    assert_size_stride(arg379_1, (768, ), (1, ))
    assert_size_stride(arg380_1, (3072, 768), (768, 1))
    assert_size_stride(arg381_1, (3072, ), (1, ))
    assert_size_stride(arg382_1, (768, 3072), (3072, 1))
    assert_size_stride(arg383_1, (768, ), (1, ))
    assert_size_stride(arg384_1, (768, ), (1, ))
    assert_size_stride(arg385_1, (768, ), (1, ))
    assert_size_stride(arg386_1, (2304, 768), (768, 1))
    assert_size_stride(arg387_1, (2304, ), (1, ))
    assert_size_stride(arg388_1, (16, 16), (16, 1))
    assert_size_stride(arg389_1, (16, ), (1, ))
    assert_size_stride(arg390_1, (16, 16), (16, 1))
    assert_size_stride(arg391_1, (16, ), (1, ))
    assert_size_stride(arg392_1, (768, 768), (768, 1))
    assert_size_stride(arg393_1, (768, ), (1, ))
    assert_size_stride(arg394_1, (768, ), (1, ))
    assert_size_stride(arg395_1, (768, ), (1, ))
    assert_size_stride(arg396_1, (3072, 768), (768, 1))
    assert_size_stride(arg397_1, (3072, ), (1, ))
    assert_size_stride(arg398_1, (768, 3072), (3072, 1))
    assert_size_stride(arg399_1, (768, ), (1, ))
    assert_size_stride(arg400_1, (768, ), (1, ))
    assert_size_stride(arg401_1, (768, ), (1, ))
    assert_size_stride(arg402_1, (2304, 768), (768, 1))
    assert_size_stride(arg403_1, (2304, ), (1, ))
    assert_size_stride(arg404_1, (16, 16), (16, 1))
    assert_size_stride(arg405_1, (16, ), (1, ))
    assert_size_stride(arg406_1, (16, 16), (16, 1))
    assert_size_stride(arg407_1, (16, ), (1, ))
    assert_size_stride(arg408_1, (768, 768), (768, 1))
    assert_size_stride(arg409_1, (768, ), (1, ))
    assert_size_stride(arg410_1, (768, ), (1, ))
    assert_size_stride(arg411_1, (768, ), (1, ))
    assert_size_stride(arg412_1, (3072, 768), (768, 1))
    assert_size_stride(arg413_1, (3072, ), (1, ))
    assert_size_stride(arg414_1, (768, 3072), (3072, 1))
    assert_size_stride(arg415_1, (768, ), (1, ))
    assert_size_stride(arg416_1, (768, ), (1, ))
    assert_size_stride(arg417_1, (768, ), (1, ))
    assert_size_stride(arg418_1, (2304, 768), (768, 1))
    assert_size_stride(arg419_1, (2304, ), (1, ))
    assert_size_stride(arg420_1, (16, 16), (16, 1))
    assert_size_stride(arg421_1, (16, ), (1, ))
    assert_size_stride(arg422_1, (16, 16), (16, 1))
    assert_size_stride(arg423_1, (16, ), (1, ))
    assert_size_stride(arg424_1, (768, 768), (768, 1))
    assert_size_stride(arg425_1, (768, ), (1, ))
    assert_size_stride(arg426_1, (768, ), (1, ))
    assert_size_stride(arg427_1, (768, ), (1, ))
    assert_size_stride(arg428_1, (3072, 768), (768, 1))
    assert_size_stride(arg429_1, (3072, ), (1, ))
    assert_size_stride(arg430_1, (768, 3072), (3072, 1))
    assert_size_stride(arg431_1, (768, ), (1, ))
    assert_size_stride(arg432_1, (768, ), (1, ))
    assert_size_stride(arg433_1, (768, ), (1, ))
    assert_size_stride(arg434_1, (2304, 768), (768, 1))
    assert_size_stride(arg435_1, (2304, ), (1, ))
    assert_size_stride(arg436_1, (16, 16), (16, 1))
    assert_size_stride(arg437_1, (16, ), (1, ))
    assert_size_stride(arg438_1, (16, 16), (16, 1))
    assert_size_stride(arg439_1, (16, ), (1, ))
    assert_size_stride(arg440_1, (768, 768), (768, 1))
    assert_size_stride(arg441_1, (768, ), (1, ))
    assert_size_stride(arg442_1, (768, ), (1, ))
    assert_size_stride(arg443_1, (768, ), (1, ))
    assert_size_stride(arg444_1, (3072, 768), (768, 1))
    assert_size_stride(arg445_1, (3072, ), (1, ))
    assert_size_stride(arg446_1, (768, 3072), (3072, 1))
    assert_size_stride(arg447_1, (768, ), (1, ))
    assert_size_stride(arg448_1, (768, ), (1, ))
    assert_size_stride(arg449_1, (768, ), (1, ))
    assert_size_stride(arg450_1, (2304, 768), (768, 1))
    assert_size_stride(arg451_1, (2304, ), (1, ))
    assert_size_stride(arg452_1, (16, 16), (16, 1))
    assert_size_stride(arg453_1, (16, ), (1, ))
    assert_size_stride(arg454_1, (16, 16), (16, 1))
    assert_size_stride(arg455_1, (16, ), (1, ))
    assert_size_stride(arg456_1, (768, 768), (768, 1))
    assert_size_stride(arg457_1, (768, ), (1, ))
    assert_size_stride(arg458_1, (768, ), (1, ))
    assert_size_stride(arg459_1, (768, ), (1, ))
    assert_size_stride(arg460_1, (3072, 768), (768, 1))
    assert_size_stride(arg461_1, (3072, ), (1, ))
    assert_size_stride(arg462_1, (768, 3072), (3072, 1))
    assert_size_stride(arg463_1, (768, ), (1, ))
    assert_size_stride(arg464_1, (768, ), (1, ))
    assert_size_stride(arg465_1, (768, ), (1, ))
    assert_size_stride(arg466_1, (2304, 768), (768, 1))
    assert_size_stride(arg467_1, (2304, ), (1, ))
    assert_size_stride(arg468_1, (16, 16), (16, 1))
    assert_size_stride(arg469_1, (16, ), (1, ))
    assert_size_stride(arg470_1, (16, 16), (16, 1))
    assert_size_stride(arg471_1, (16, ), (1, ))
    assert_size_stride(arg472_1, (768, 768), (768, 1))
    assert_size_stride(arg473_1, (768, ), (1, ))
    assert_size_stride(arg474_1, (768, ), (1, ))
    assert_size_stride(arg475_1, (768, ), (1, ))
    assert_size_stride(arg476_1, (3072, 768), (768, 1))
    assert_size_stride(arg477_1, (3072, ), (1, ))
    assert_size_stride(arg478_1, (768, 3072), (3072, 1))
    assert_size_stride(arg479_1, (768, ), (1, ))
    assert_size_stride(arg480_1, (768, ), (1, ))
    assert_size_stride(arg481_1, (768, ), (1, ))
    assert_size_stride(arg482_1, (2304, 768), (768, 1))
    assert_size_stride(arg483_1, (2304, ), (1, ))
    assert_size_stride(arg484_1, (16, 16), (16, 1))
    assert_size_stride(arg485_1, (16, ), (1, ))
    assert_size_stride(arg486_1, (16, 16), (16, 1))
    assert_size_stride(arg487_1, (16, ), (1, ))
    assert_size_stride(arg488_1, (768, 768), (768, 1))
    assert_size_stride(arg489_1, (768, ), (1, ))
    assert_size_stride(arg490_1, (768, ), (1, ))
    assert_size_stride(arg491_1, (768, ), (1, ))
    assert_size_stride(arg492_1, (3072, 768), (768, 1))
    assert_size_stride(arg493_1, (3072, ), (1, ))
    assert_size_stride(arg494_1, (768, 3072), (3072, 1))
    assert_size_stride(arg495_1, (768, ), (1, ))
    assert_size_stride(arg496_1, (768, ), (1, ))
    assert_size_stride(arg497_1, (768, ), (1, ))
    assert_size_stride(arg498_1, (2304, 768), (768, 1))
    assert_size_stride(arg499_1, (2304, ), (1, ))
    assert_size_stride(arg500_1, (16, 16), (16, 1))
    assert_size_stride(arg501_1, (16, ), (1, ))
    assert_size_stride(arg502_1, (16, 16), (16, 1))
    assert_size_stride(arg503_1, (16, ), (1, ))
    assert_size_stride(arg504_1, (768, 768), (768, 1))
    assert_size_stride(arg505_1, (768, ), (1, ))
    assert_size_stride(arg506_1, (768, ), (1, ))
    assert_size_stride(arg507_1, (768, ), (1, ))
    assert_size_stride(arg508_1, (3072, 768), (768, 1))
    assert_size_stride(arg509_1, (3072, ), (1, ))
    assert_size_stride(arg510_1, (768, 3072), (3072, 1))
    assert_size_stride(arg511_1, (768, ), (1, ))
    assert_size_stride(arg512_1, (768, ), (1, ))
    assert_size_stride(arg513_1, (768, ), (1, ))
    assert_size_stride(arg514_1, (2304, 768), (768, 1))
    assert_size_stride(arg515_1, (2304, ), (1, ))
    assert_size_stride(arg516_1, (16, 16), (16, 1))
    assert_size_stride(arg517_1, (16, ), (1, ))
    assert_size_stride(arg518_1, (16, 16), (16, 1))
    assert_size_stride(arg519_1, (16, ), (1, ))
    assert_size_stride(arg520_1, (768, 768), (768, 1))
    assert_size_stride(arg521_1, (768, ), (1, ))
    assert_size_stride(arg522_1, (768, ), (1, ))
    assert_size_stride(arg523_1, (768, ), (1, ))
    assert_size_stride(arg524_1, (3072, 768), (768, 1))
    assert_size_stride(arg525_1, (3072, ), (1, ))
    assert_size_stride(arg526_1, (768, 3072), (3072, 1))
    assert_size_stride(arg527_1, (768, ), (1, ))
    assert_size_stride(arg528_1, (768, ), (1, ))
    assert_size_stride(arg529_1, (768, ), (1, ))
    assert_size_stride(arg530_1, (2304, 768), (768, 1))
    assert_size_stride(arg531_1, (2304, ), (1, ))
    assert_size_stride(arg532_1, (16, 16), (16, 1))
    assert_size_stride(arg533_1, (16, ), (1, ))
    assert_size_stride(arg534_1, (16, 16), (16, 1))
    assert_size_stride(arg535_1, (16, ), (1, ))
    assert_size_stride(arg536_1, (768, 768), (768, 1))
    assert_size_stride(arg537_1, (768, ), (1, ))
    assert_size_stride(arg538_1, (768, ), (1, ))
    assert_size_stride(arg539_1, (768, ), (1, ))
    assert_size_stride(arg540_1, (3072, 768), (768, 1))
    assert_size_stride(arg541_1, (3072, ), (1, ))
    assert_size_stride(arg542_1, (768, 3072), (3072, 1))
    assert_size_stride(arg543_1, (768, ), (1, ))
    assert_size_stride(arg544_1, (768, ), (1, ))
    assert_size_stride(arg545_1, (768, ), (1, ))
    assert_size_stride(arg546_1, (2304, 768), (768, 1))
    assert_size_stride(arg547_1, (2304, ), (1, ))
    assert_size_stride(arg548_1, (16, 16), (16, 1))
    assert_size_stride(arg549_1, (16, ), (1, ))
    assert_size_stride(arg550_1, (16, 16), (16, 1))
    assert_size_stride(arg551_1, (16, ), (1, ))
    assert_size_stride(arg552_1, (768, 768), (768, 1))
    assert_size_stride(arg553_1, (768, ), (1, ))
    assert_size_stride(arg554_1, (768, ), (1, ))
    assert_size_stride(arg555_1, (768, ), (1, ))
    assert_size_stride(arg556_1, (3072, 768), (768, 1))
    assert_size_stride(arg557_1, (3072, ), (1, ))
    assert_size_stride(arg558_1, (768, 3072), (3072, 1))
    assert_size_stride(arg559_1, (768, ), (1, ))
    assert_size_stride(arg560_1, (768, ), (1, ))
    assert_size_stride(arg561_1, (768, ), (1, ))
    assert_size_stride(arg562_1, (2304, 768), (768, 1))
    assert_size_stride(arg563_1, (2304, ), (1, ))
    assert_size_stride(arg564_1, (16, 16), (16, 1))
    assert_size_stride(arg565_1, (16, ), (1, ))
    assert_size_stride(arg566_1, (16, 16), (16, 1))
    assert_size_stride(arg567_1, (16, ), (1, ))
    assert_size_stride(arg568_1, (768, 768), (768, 1))
    assert_size_stride(arg569_1, (768, ), (1, ))
    assert_size_stride(arg570_1, (768, ), (1, ))
    assert_size_stride(arg571_1, (768, ), (1, ))
    assert_size_stride(arg572_1, (3072, 768), (768, 1))
    assert_size_stride(arg573_1, (3072, ), (1, ))
    assert_size_stride(arg574_1, (768, 3072), (3072, 1))
    assert_size_stride(arg575_1, (768, ), (1, ))
    assert_size_stride(arg576_1, (768, ), (1, ))
    assert_size_stride(arg577_1, (768, ), (1, ))
    assert_size_stride(arg578_1, (2304, 768), (768, 1))
    assert_size_stride(arg579_1, (2304, ), (1, ))
    assert_size_stride(arg580_1, (16, 16), (16, 1))
    assert_size_stride(arg581_1, (16, ), (1, ))
    assert_size_stride(arg582_1, (16, 16), (16, 1))
    assert_size_stride(arg583_1, (16, ), (1, ))
    assert_size_stride(arg584_1, (768, 768), (768, 1))
    assert_size_stride(arg585_1, (768, ), (1, ))
    assert_size_stride(arg586_1, (768, ), (1, ))
    assert_size_stride(arg587_1, (768, ), (1, ))
    assert_size_stride(arg588_1, (3072, 768), (768, 1))
    assert_size_stride(arg589_1, (3072, ), (1, ))
    assert_size_stride(arg590_1, (768, 3072), (3072, 1))
    assert_size_stride(arg591_1, (768, ), (1, ))
    assert_size_stride(arg592_1, (768, ), (1, ))
    assert_size_stride(arg593_1, (768, ), (1, ))
    assert_size_stride(arg594_1, (2304, 768), (768, 1))
    assert_size_stride(arg595_1, (2304, ), (1, ))
    assert_size_stride(arg596_1, (16, 16), (16, 1))
    assert_size_stride(arg597_1, (16, ), (1, ))
    assert_size_stride(arg598_1, (16, 16), (16, 1))
    assert_size_stride(arg599_1, (16, ), (1, ))
    assert_size_stride(arg600_1, (768, 768), (768, 1))
    assert_size_stride(arg601_1, (768, ), (1, ))
    assert_size_stride(arg602_1, (768, ), (1, ))
    assert_size_stride(arg603_1, (768, ), (1, ))
    assert_size_stride(arg604_1, (3072, 768), (768, 1))
    assert_size_stride(arg605_1, (3072, ), (1, ))
    assert_size_stride(arg606_1, (768, 3072), (3072, 1))
    assert_size_stride(arg607_1, (768, ), (1, ))
    assert_size_stride(arg608_1, (768, ), (1, ))
    assert_size_stride(arg609_1, (768, ), (1, ))
    assert_size_stride(arg610_1, (2304, 768), (768, 1))
    assert_size_stride(arg611_1, (2304, ), (1, ))
    assert_size_stride(arg612_1, (16, 16), (16, 1))
    assert_size_stride(arg613_1, (16, ), (1, ))
    assert_size_stride(arg614_1, (16, 16), (16, 1))
    assert_size_stride(arg615_1, (16, ), (1, ))
    assert_size_stride(arg616_1, (768, 768), (768, 1))
    assert_size_stride(arg617_1, (768, ), (1, ))
    assert_size_stride(arg618_1, (768, ), (1, ))
    assert_size_stride(arg619_1, (768, ), (1, ))
    assert_size_stride(arg620_1, (3072, 768), (768, 1))
    assert_size_stride(arg621_1, (3072, ), (1, ))
    assert_size_stride(arg622_1, (768, 3072), (3072, 1))
    assert_size_stride(arg623_1, (768, ), (1, ))
    assert_size_stride(arg624_1, (768, ), (1, ))
    assert_size_stride(arg625_1, (768, ), (1, ))
    assert_size_stride(arg626_1, (2304, 768), (768, 1))
    assert_size_stride(arg627_1, (2304, ), (1, ))
    assert_size_stride(arg628_1, (16, 16), (16, 1))
    assert_size_stride(arg629_1, (16, ), (1, ))
    assert_size_stride(arg630_1, (16, 16), (16, 1))
    assert_size_stride(arg631_1, (16, ), (1, ))
    assert_size_stride(arg632_1, (768, 768), (768, 1))
    assert_size_stride(arg633_1, (768, ), (1, ))
    assert_size_stride(arg634_1, (768, ), (1, ))
    assert_size_stride(arg635_1, (768, ), (1, ))
    assert_size_stride(arg636_1, (3072, 768), (768, 1))
    assert_size_stride(arg637_1, (3072, ), (1, ))
    assert_size_stride(arg638_1, (768, 3072), (3072, 1))
    assert_size_stride(arg639_1, (768, ), (1, ))
    assert_size_stride(arg640_1, (768, ), (1, ))
    assert_size_stride(arg641_1, (768, ), (1, ))
    assert_size_stride(arg642_1, (2304, 768), (768, 1))
    assert_size_stride(arg643_1, (2304, ), (1, ))
    assert_size_stride(arg644_1, (16, 16), (16, 1))
    assert_size_stride(arg645_1, (16, ), (1, ))
    assert_size_stride(arg646_1, (16, 16), (16, 1))
    assert_size_stride(arg647_1, (16, ), (1, ))
    assert_size_stride(arg648_1, (768, 768), (768, 1))
    assert_size_stride(arg649_1, (768, ), (1, ))
    assert_size_stride(arg650_1, (768, ), (1, ))
    assert_size_stride(arg651_1, (768, ), (1, ))
    assert_size_stride(arg652_1, (3072, 768), (768, 1))
    assert_size_stride(arg653_1, (3072, ), (1, ))
    assert_size_stride(arg654_1, (768, 3072), (3072, 1))
    assert_size_stride(arg655_1, (768, ), (1, ))
    assert_size_stride(arg656_1, (768, ), (1, ))
    assert_size_stride(arg657_1, (768, ), (1, ))
    assert_size_stride(arg658_1, (768, 768), (768, 1))
    assert_size_stride(arg659_1, (768, ), (1, ))
    assert_size_stride(arg660_1, (768, 768), (768, 1))
    assert_size_stride(arg661_1, (768, ), (1, ))
    assert_size_stride(arg662_1, (768, 768), (768, 1))
    assert_size_stride(arg663_1, (768, ), (1, ))
    assert_size_stride(arg664_1, (768, 768), (768, 1))
    assert_size_stride(arg665_1, (768, ), (1, ))
    assert_size_stride(arg666_1, (768, ), (1, ))
    assert_size_stride(arg667_1, (768, ), (1, ))
    assert_size_stride(arg668_1, (3072, 768), (768, 1))
    assert_size_stride(arg669_1, (3072, ), (1, ))
    assert_size_stride(arg670_1, (768, 3072), (3072, 1))
    assert_size_stride(arg671_1, (768, ), (1, ))
    assert_size_stride(arg672_1, (768, ), (1, ))
    assert_size_stride(arg673_1, (768, ), (1, ))
    assert_size_stride(arg674_1, (768, 768), (768, 1))
    assert_size_stride(arg675_1, (768, ), (1, ))
    assert_size_stride(arg676_1, (768, 768), (768, 1))
    assert_size_stride(arg677_1, (768, ), (1, ))
    assert_size_stride(arg678_1, (768, 768), (768, 1))
    assert_size_stride(arg679_1, (768, ), (1, ))
    assert_size_stride(arg680_1, (768, 768), (768, 1))
    assert_size_stride(arg681_1, (768, ), (1, ))
    assert_size_stride(arg682_1, (768, ), (1, ))
    assert_size_stride(arg683_1, (768, ), (1, ))
    assert_size_stride(arg684_1, (3072, 768), (768, 1))
    assert_size_stride(arg685_1, (3072, ), (1, ))
    assert_size_stride(arg686_1, (768, 3072), (3072, 1))
    assert_size_stride(arg687_1, (768, ), (1, ))
    assert_size_stride(arg688_1, (768, ), (1, ))
    assert_size_stride(arg689_1, (768, ), (1, ))
    assert_size_stride(arg690_1, (1000, 768), (768, 1))
    assert_size_stride(arg691_1, (1000, ), (1, ))
    assert_size_stride(arg692_1, (8, 3, 384, 384), (442368, 147456, 384, 1))
    buf0 = empty_strided((8, 3, 384, 384), (442368, 1, 1152, 3), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((768, 3, 16, 16), (768, 1, 48, 3), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_0(c_void_p(arg692_1.data_ptr()), c_void_p(arg78_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del arg692_1
    del arg78_1
    # Source Nodes: [x], Original ATen: [aten.convolution]
    buf2 = extern_kernels.convolution(buf0, buf1, arg79_1, stride=(16, 16), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1)
    assert_size_stride(buf2, (8, 768, 24, 24), (442368, 1, 18432, 768))
    del arg79_1
    del buf1
    buf3 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf6 = reinterpret_tensor(buf0, (8, 576, 768), (442368, 768, 1), 0); del buf0  # reuse
    cpp_fused_add_native_layer_norm_1(c_void_p(buf2.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(arg80_1.data_ptr()), c_void_p(arg81_1.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf6.data_ptr()))
    del arg80_1
    del arg81_1
    buf7 = empty((4608, 2304), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___0___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg83_1, reinterpret_tensor(buf6, (4608, 768), (768, 1), 0), reinterpret_tensor(arg82_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf7)
    del arg82_1
    del arg83_1
    buf8 = reinterpret_tensor(buf6, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf6  # reuse
    buf9 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_2(c_void_p(buf7.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()))
    buf10 = empty((128, 576, 576), device='cpu', dtype=torch.float32)
    # Source Nodes: [attn], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf8, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf9, (128, 48, 576), (27648, 576, 1), 0), out=buf10)
    buf11 = empty((8, 576, 576, 16), device='cpu', dtype=torch.float32)
    cpp_fused_clone_3(c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()))
    buf12 = reinterpret_tensor(buf10, (2654208, 16), (16, 1), 0); del buf10  # reuse
    # Source Nodes: [getattr_l__mod___blocks___0___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf11, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg84_1, (16, 16), (1, 16), 0), out=buf12)
    del arg84_1
    buf13 = empty_strided((8, 16, 576, 1), (9216, 1, 16, 73728), device='cpu', dtype=torch.float32)
    buf14 = reinterpret_tensor(buf12, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf12  # reuse
    buf15 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf16 = reinterpret_tensor(buf14, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf14  # reuse
    cpp_fused__softmax_clone_4(c_void_p(buf16.data_ptr()), c_void_p(arg85_1.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf15.data_ptr()))
    del arg85_1
    buf17 = reinterpret_tensor(buf11, (2654208, 16), (16, 1), 0); del buf11  # reuse
    # Source Nodes: [getattr_l__mod___blocks___0___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf16, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg86_1, (16, 16), (1, 16), 0), out=buf17)
    del arg86_1
    buf18 = reinterpret_tensor(buf16, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf16  # reuse
    buf19 = reinterpret_tensor(buf9, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf9  # reuse
    cpp_fused_clone_5(c_void_p(buf17.data_ptr()), c_void_p(arg87_1.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf18.data_ptr()), c_void_p(buf19.data_ptr()))
    del arg87_1
    buf20 = reinterpret_tensor(buf8, (128, 576, 48), (27648, 48, 1), 0); del buf8  # reuse
    # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf18, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf19, (128, 576, 48), (27648, 48, 1), 0), out=buf20)
    buf21 = reinterpret_tensor(buf19, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf19  # reuse
    cpp_fused_clone_6(c_void_p(buf20.data_ptr()), c_void_p(buf21.data_ptr()))
    buf22 = reinterpret_tensor(buf20, (4608, 768), (768, 1), 0); del buf20  # reuse
    # Source Nodes: [x_7], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg89_1, reinterpret_tensor(buf21, (4608, 768), (768, 1), 0), reinterpret_tensor(arg88_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf22)
    del arg88_1
    del arg89_1
    buf23 = buf4; del buf4  # reuse
    buf24 = buf3; del buf3  # reuse
    buf26 = reinterpret_tensor(buf21, (8, 576, 768), (442368, 768, 1), 0); del buf21  # reuse
    cpp_fused_add_mul_native_layer_norm_7(c_void_p(buf2.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(arg1_1.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(arg90_1.data_ptr()), c_void_p(arg91_1.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf26.data_ptr()))
    del arg90_1
    del arg91_1
    buf27 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_10], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg93_1, reinterpret_tensor(buf26, (4608, 768), (768, 1), 0), reinterpret_tensor(arg92_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf27)
    del arg92_1
    del arg93_1
    buf28 = reinterpret_tensor(buf27, (8, 576, 3072), (1769472, 3072, 1), 0); del buf27  # reuse
    cpp_fused_gelu_8(c_void_p(buf28.data_ptr()))
    buf29 = reinterpret_tensor(buf26, (4608, 768), (768, 1), 0); del buf26  # reuse
    # Source Nodes: [x_14], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg95_1, reinterpret_tensor(buf28, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg94_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf29)
    del arg94_1
    del arg95_1
    buf30 = reinterpret_tensor(buf29, (8, 576, 768), (442368, 768, 1), 0); del buf29  # reuse
    buf31 = buf24; del buf24  # reuse
    buf32 = buf23; del buf23  # reuse
    buf34 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_9(c_void_p(buf30.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(arg1_1.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(arg2_1.data_ptr()), c_void_p(arg96_1.data_ptr()), c_void_p(arg97_1.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(buf34.data_ptr()))
    del arg0_1
    del arg1_1
    del arg2_1
    del arg96_1
    del arg97_1
    buf35 = buf7; del buf7  # reuse
    # Source Nodes: [getattr_l__mod___blocks___1___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg99_1, reinterpret_tensor(buf34, (4608, 768), (768, 1), 0), reinterpret_tensor(arg98_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf35)
    del arg98_1
    del arg99_1
    buf36 = reinterpret_tensor(buf34, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf34  # reuse
    buf37 = reinterpret_tensor(buf22, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf22  # reuse
    cpp_fused_clone_mul_10(c_void_p(buf35.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(buf37.data_ptr()))
    buf38 = reinterpret_tensor(buf18, (128, 576, 576), (331776, 576, 1), 0); del buf18  # reuse
    # Source Nodes: [attn_5], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf36, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf37, (128, 48, 576), (27648, 576, 1), 0), out=buf38)
    buf39 = reinterpret_tensor(buf17, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf17  # reuse
    cpp_fused_clone_11(c_void_p(buf38.data_ptr()), c_void_p(buf39.data_ptr()))
    buf40 = reinterpret_tensor(buf38, (2654208, 16), (16, 1), 0); del buf38  # reuse
    # Source Nodes: [getattr_l__mod___blocks___1___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf39, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg100_1, (16, 16), (1, 16), 0), out=buf40)
    del arg100_1
    buf41 = reinterpret_tensor(buf15, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf15  # reuse
    buf42 = reinterpret_tensor(buf40, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf40  # reuse
    buf43 = reinterpret_tensor(buf13, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf13  # reuse
    buf44 = reinterpret_tensor(buf42, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf42  # reuse
    cpp_fused__softmax_clone_12(c_void_p(buf44.data_ptr()), c_void_p(arg101_1.data_ptr()), c_void_p(buf41.data_ptr()), c_void_p(buf43.data_ptr()))
    del arg101_1
    buf45 = reinterpret_tensor(buf39, (2654208, 16), (16, 1), 0); del buf39  # reuse
    # Source Nodes: [getattr_l__mod___blocks___1___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf44, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg102_1, (16, 16), (1, 16), 0), out=buf45)
    del arg102_1
    buf46 = reinterpret_tensor(buf44, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf44  # reuse
    buf47 = reinterpret_tensor(buf37, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf37  # reuse
    cpp_fused_clone_13(c_void_p(buf45.data_ptr()), c_void_p(arg103_1.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf47.data_ptr()))
    del arg103_1
    buf48 = reinterpret_tensor(buf36, (128, 576, 48), (27648, 48, 1), 0); del buf36  # reuse
    # Source Nodes: [matmul_3], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf46, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf47, (128, 576, 48), (27648, 48, 1), 0), out=buf48)
    buf49 = reinterpret_tensor(buf47, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf47  # reuse
    cpp_fused_clone_14(c_void_p(buf48.data_ptr()), c_void_p(buf49.data_ptr()))
    buf50 = reinterpret_tensor(buf48, (4608, 768), (768, 1), 0); del buf48  # reuse
    # Source Nodes: [x_18], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg105_1, reinterpret_tensor(buf49, (4608, 768), (768, 1), 0), reinterpret_tensor(arg104_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf50)
    del arg104_1
    del arg105_1
    buf51 = buf32; del buf32  # reuse
    buf52 = buf31; del buf31  # reuse
    buf54 = reinterpret_tensor(buf49, (8, 576, 768), (442368, 768, 1), 0); del buf49  # reuse
    cpp_fused_add_mul_native_layer_norm_15(c_void_p(buf30.data_ptr()), c_void_p(arg3_1.data_ptr()), c_void_p(buf50.data_ptr()), c_void_p(arg106_1.data_ptr()), c_void_p(arg107_1.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(buf54.data_ptr()))
    del arg106_1
    del arg107_1
    buf55 = reinterpret_tensor(buf28, (4608, 3072), (3072, 1), 0); del buf28  # reuse
    # Source Nodes: [x_21], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg109_1, reinterpret_tensor(buf54, (4608, 768), (768, 1), 0), reinterpret_tensor(arg108_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf55)
    del arg108_1
    del arg109_1
    buf56 = reinterpret_tensor(buf55, (8, 576, 3072), (1769472, 3072, 1), 0); del buf55  # reuse
    cpp_fused_gelu_16(c_void_p(buf56.data_ptr()))
    buf57 = reinterpret_tensor(buf54, (4608, 768), (768, 1), 0); del buf54  # reuse
    # Source Nodes: [x_25], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg111_1, reinterpret_tensor(buf56, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg110_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf57)
    del arg110_1
    del arg111_1
    buf58 = reinterpret_tensor(buf57, (8, 576, 768), (442368, 768, 1), 0); del buf57  # reuse
    buf59 = buf52; del buf52  # reuse
    buf60 = buf51; del buf51  # reuse
    buf62 = reinterpret_tensor(buf2, (8, 576, 768), (442368, 768, 1), 0); del buf2  # reuse
    cpp_fused_add_mul_native_layer_norm_17(c_void_p(buf58.data_ptr()), c_void_p(buf30.data_ptr()), c_void_p(arg3_1.data_ptr()), c_void_p(buf50.data_ptr()), c_void_p(arg4_1.data_ptr()), c_void_p(arg112_1.data_ptr()), c_void_p(arg113_1.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf60.data_ptr()), c_void_p(buf62.data_ptr()))
    del arg112_1
    del arg113_1
    del arg3_1
    del arg4_1
    buf63 = buf35; del buf35  # reuse
    # Source Nodes: [getattr_l__mod___blocks___2___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg115_1, reinterpret_tensor(buf62, (4608, 768), (768, 1), 0), reinterpret_tensor(arg114_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf63)
    del arg114_1
    del arg115_1
    buf64 = reinterpret_tensor(buf62, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf62  # reuse
    buf65 = reinterpret_tensor(buf50, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf50  # reuse
    cpp_fused_clone_mul_18(c_void_p(buf63.data_ptr()), c_void_p(buf64.data_ptr()), c_void_p(buf65.data_ptr()))
    buf66 = reinterpret_tensor(buf46, (128, 576, 576), (331776, 576, 1), 0); del buf46  # reuse
    # Source Nodes: [attn_10], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf64, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf65, (128, 48, 576), (27648, 576, 1), 0), out=buf66)
    buf67 = reinterpret_tensor(buf45, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf45  # reuse
    cpp_fused_clone_19(c_void_p(buf66.data_ptr()), c_void_p(buf67.data_ptr()))
    buf68 = reinterpret_tensor(buf66, (2654208, 16), (16, 1), 0); del buf66  # reuse
    # Source Nodes: [getattr_l__mod___blocks___2___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf67, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg116_1, (16, 16), (1, 16), 0), out=buf68)
    del arg116_1
    buf69 = reinterpret_tensor(buf43, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf43  # reuse
    buf70 = reinterpret_tensor(buf68, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf68  # reuse
    buf71 = reinterpret_tensor(buf41, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf41  # reuse
    buf72 = reinterpret_tensor(buf70, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf70  # reuse
    cpp_fused__softmax_clone_20(c_void_p(buf72.data_ptr()), c_void_p(arg117_1.data_ptr()), c_void_p(buf69.data_ptr()), c_void_p(buf71.data_ptr()))
    del arg117_1
    buf73 = reinterpret_tensor(buf67, (2654208, 16), (16, 1), 0); del buf67  # reuse
    # Source Nodes: [getattr_l__mod___blocks___2___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf72, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg118_1, (16, 16), (1, 16), 0), out=buf73)
    del arg118_1
    buf74 = reinterpret_tensor(buf72, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf72  # reuse
    buf75 = reinterpret_tensor(buf65, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf65  # reuse
    cpp_fused_clone_21(c_void_p(buf73.data_ptr()), c_void_p(arg119_1.data_ptr()), c_void_p(buf63.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf75.data_ptr()))
    del arg119_1
    buf76 = reinterpret_tensor(buf64, (128, 576, 48), (27648, 48, 1), 0); del buf64  # reuse
    # Source Nodes: [matmul_5], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf74, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf75, (128, 576, 48), (27648, 48, 1), 0), out=buf76)
    buf77 = reinterpret_tensor(buf75, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf75  # reuse
    cpp_fused_clone_22(c_void_p(buf76.data_ptr()), c_void_p(buf77.data_ptr()))
    buf78 = reinterpret_tensor(buf76, (4608, 768), (768, 1), 0); del buf76  # reuse
    # Source Nodes: [x_29], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg121_1, reinterpret_tensor(buf77, (4608, 768), (768, 1), 0), reinterpret_tensor(arg120_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf78)
    del arg120_1
    del arg121_1
    buf79 = buf60; del buf60  # reuse
    buf80 = buf59; del buf59  # reuse
    buf82 = reinterpret_tensor(buf77, (8, 576, 768), (442368, 768, 1), 0); del buf77  # reuse
    cpp_fused_add_mul_native_layer_norm_23(c_void_p(buf58.data_ptr()), c_void_p(arg5_1.data_ptr()), c_void_p(buf78.data_ptr()), c_void_p(arg122_1.data_ptr()), c_void_p(arg123_1.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf80.data_ptr()), c_void_p(buf82.data_ptr()))
    del arg122_1
    del arg123_1
    buf83 = reinterpret_tensor(buf56, (4608, 3072), (3072, 1), 0); del buf56  # reuse
    # Source Nodes: [x_32], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg125_1, reinterpret_tensor(buf82, (4608, 768), (768, 1), 0), reinterpret_tensor(arg124_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf83)
    del arg124_1
    del arg125_1
    buf84 = reinterpret_tensor(buf83, (8, 576, 3072), (1769472, 3072, 1), 0); del buf83  # reuse
    cpp_fused_gelu_24(c_void_p(buf84.data_ptr()))
    buf85 = reinterpret_tensor(buf82, (4608, 768), (768, 1), 0); del buf82  # reuse
    # Source Nodes: [x_36], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg127_1, reinterpret_tensor(buf84, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg126_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf85)
    del arg126_1
    del arg127_1
    buf86 = reinterpret_tensor(buf85, (8, 576, 768), (442368, 768, 1), 0); del buf85  # reuse
    buf87 = buf80; del buf80  # reuse
    buf88 = buf79; del buf79  # reuse
    buf90 = buf30; del buf30  # reuse
    cpp_fused_add_mul_native_layer_norm_25(c_void_p(buf86.data_ptr()), c_void_p(buf58.data_ptr()), c_void_p(arg5_1.data_ptr()), c_void_p(buf78.data_ptr()), c_void_p(arg6_1.data_ptr()), c_void_p(arg128_1.data_ptr()), c_void_p(arg129_1.data_ptr()), c_void_p(buf87.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(buf90.data_ptr()))
    del arg128_1
    del arg129_1
    del arg5_1
    del arg6_1
    buf91 = buf63; del buf63  # reuse
    # Source Nodes: [getattr_l__mod___blocks___3___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg131_1, reinterpret_tensor(buf90, (4608, 768), (768, 1), 0), reinterpret_tensor(arg130_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf91)
    del arg130_1
    del arg131_1
    buf92 = reinterpret_tensor(buf90, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf90  # reuse
    buf93 = reinterpret_tensor(buf78, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf78  # reuse
    cpp_fused_clone_mul_26(c_void_p(buf91.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf93.data_ptr()))
    buf94 = reinterpret_tensor(buf74, (128, 576, 576), (331776, 576, 1), 0); del buf74  # reuse
    # Source Nodes: [attn_15], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf92, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf93, (128, 48, 576), (27648, 576, 1), 0), out=buf94)
    buf95 = reinterpret_tensor(buf73, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf73  # reuse
    cpp_fused_clone_27(c_void_p(buf94.data_ptr()), c_void_p(buf95.data_ptr()))
    buf96 = reinterpret_tensor(buf94, (2654208, 16), (16, 1), 0); del buf94  # reuse
    # Source Nodes: [getattr_l__mod___blocks___3___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf95, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg132_1, (16, 16), (1, 16), 0), out=buf96)
    del arg132_1
    buf97 = reinterpret_tensor(buf71, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf71  # reuse
    buf98 = reinterpret_tensor(buf96, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf96  # reuse
    buf99 = reinterpret_tensor(buf69, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf69  # reuse
    buf100 = reinterpret_tensor(buf98, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf98  # reuse
    cpp_fused__softmax_clone_28(c_void_p(buf100.data_ptr()), c_void_p(arg133_1.data_ptr()), c_void_p(buf97.data_ptr()), c_void_p(buf99.data_ptr()))
    del arg133_1
    buf101 = reinterpret_tensor(buf95, (2654208, 16), (16, 1), 0); del buf95  # reuse
    # Source Nodes: [getattr_l__mod___blocks___3___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf100, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg134_1, (16, 16), (1, 16), 0), out=buf101)
    del arg134_1
    buf102 = reinterpret_tensor(buf100, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf100  # reuse
    buf103 = reinterpret_tensor(buf93, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf93  # reuse
    cpp_fused_clone_29(c_void_p(buf101.data_ptr()), c_void_p(arg135_1.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf102.data_ptr()), c_void_p(buf103.data_ptr()))
    del arg135_1
    buf104 = reinterpret_tensor(buf92, (128, 576, 48), (27648, 48, 1), 0); del buf92  # reuse
    # Source Nodes: [matmul_7], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf102, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf103, (128, 576, 48), (27648, 48, 1), 0), out=buf104)
    buf105 = reinterpret_tensor(buf103, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf103  # reuse
    cpp_fused_clone_30(c_void_p(buf104.data_ptr()), c_void_p(buf105.data_ptr()))
    buf106 = reinterpret_tensor(buf104, (4608, 768), (768, 1), 0); del buf104  # reuse
    # Source Nodes: [x_40], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg137_1, reinterpret_tensor(buf105, (4608, 768), (768, 1), 0), reinterpret_tensor(arg136_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf106)
    del arg136_1
    del arg137_1
    buf107 = buf88; del buf88  # reuse
    buf108 = buf87; del buf87  # reuse
    buf110 = reinterpret_tensor(buf105, (8, 576, 768), (442368, 768, 1), 0); del buf105  # reuse
    cpp_fused_add_mul_native_layer_norm_31(c_void_p(buf86.data_ptr()), c_void_p(arg7_1.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(arg138_1.data_ptr()), c_void_p(arg139_1.data_ptr()), c_void_p(buf107.data_ptr()), c_void_p(buf108.data_ptr()), c_void_p(buf110.data_ptr()))
    del arg138_1
    del arg139_1
    buf111 = reinterpret_tensor(buf84, (4608, 3072), (3072, 1), 0); del buf84  # reuse
    # Source Nodes: [x_43], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg141_1, reinterpret_tensor(buf110, (4608, 768), (768, 1), 0), reinterpret_tensor(arg140_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf111)
    del arg140_1
    del arg141_1
    buf112 = reinterpret_tensor(buf111, (8, 576, 3072), (1769472, 3072, 1), 0); del buf111  # reuse
    cpp_fused_gelu_32(c_void_p(buf112.data_ptr()))
    buf113 = reinterpret_tensor(buf110, (4608, 768), (768, 1), 0); del buf110  # reuse
    # Source Nodes: [x_47], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg143_1, reinterpret_tensor(buf112, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg142_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf113)
    del arg142_1
    del arg143_1
    buf114 = reinterpret_tensor(buf113, (8, 576, 768), (442368, 768, 1), 0); del buf113  # reuse
    buf115 = buf108; del buf108  # reuse
    buf116 = buf107; del buf107  # reuse
    buf118 = buf58; del buf58  # reuse
    cpp_fused_add_mul_native_layer_norm_33(c_void_p(buf114.data_ptr()), c_void_p(buf86.data_ptr()), c_void_p(arg7_1.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(arg8_1.data_ptr()), c_void_p(arg144_1.data_ptr()), c_void_p(arg145_1.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(buf116.data_ptr()), c_void_p(buf118.data_ptr()))
    del arg144_1
    del arg145_1
    del arg7_1
    del arg8_1
    buf119 = buf91; del buf91  # reuse
    # Source Nodes: [getattr_l__mod___blocks___4___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg147_1, reinterpret_tensor(buf118, (4608, 768), (768, 1), 0), reinterpret_tensor(arg146_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf119)
    del arg146_1
    del arg147_1
    buf120 = reinterpret_tensor(buf118, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf118  # reuse
    buf121 = reinterpret_tensor(buf86, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf86  # reuse
    cpp_fused_clone_mul_34(c_void_p(buf119.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()))
    buf122 = reinterpret_tensor(buf102, (128, 576, 576), (331776, 576, 1), 0); del buf102  # reuse
    # Source Nodes: [attn_20], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf120, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf121, (128, 48, 576), (27648, 576, 1), 0), out=buf122)
    buf123 = reinterpret_tensor(buf101, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf101  # reuse
    cpp_fused_clone_35(c_void_p(buf122.data_ptr()), c_void_p(buf123.data_ptr()))
    buf124 = reinterpret_tensor(buf122, (2654208, 16), (16, 1), 0); del buf122  # reuse
    # Source Nodes: [getattr_l__mod___blocks___4___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf123, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg148_1, (16, 16), (1, 16), 0), out=buf124)
    del arg148_1
    buf125 = reinterpret_tensor(buf99, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf99  # reuse
    buf126 = reinterpret_tensor(buf124, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf124  # reuse
    buf127 = reinterpret_tensor(buf97, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf97  # reuse
    buf128 = reinterpret_tensor(buf126, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf126  # reuse
    cpp_fused__softmax_clone_36(c_void_p(buf128.data_ptr()), c_void_p(arg149_1.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(buf127.data_ptr()))
    del arg149_1
    buf129 = reinterpret_tensor(buf123, (2654208, 16), (16, 1), 0); del buf123  # reuse
    # Source Nodes: [getattr_l__mod___blocks___4___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf128, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg150_1, (16, 16), (1, 16), 0), out=buf129)
    del arg150_1
    buf130 = reinterpret_tensor(buf128, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf128  # reuse
    buf131 = reinterpret_tensor(buf121, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf121  # reuse
    cpp_fused_clone_37(c_void_p(buf129.data_ptr()), c_void_p(arg151_1.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf130.data_ptr()), c_void_p(buf131.data_ptr()))
    del arg151_1
    buf132 = reinterpret_tensor(buf120, (128, 576, 48), (27648, 48, 1), 0); del buf120  # reuse
    # Source Nodes: [matmul_9], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf130, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf131, (128, 576, 48), (27648, 48, 1), 0), out=buf132)
    buf133 = reinterpret_tensor(buf131, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf131  # reuse
    cpp_fused_clone_38(c_void_p(buf132.data_ptr()), c_void_p(buf133.data_ptr()))
    buf134 = reinterpret_tensor(buf132, (4608, 768), (768, 1), 0); del buf132  # reuse
    # Source Nodes: [x_51], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg153_1, reinterpret_tensor(buf133, (4608, 768), (768, 1), 0), reinterpret_tensor(arg152_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf134)
    del arg152_1
    del arg153_1
    buf135 = buf116; del buf116  # reuse
    buf136 = buf115; del buf115  # reuse
    buf138 = reinterpret_tensor(buf133, (8, 576, 768), (442368, 768, 1), 0); del buf133  # reuse
    cpp_fused_add_mul_native_layer_norm_39(c_void_p(buf114.data_ptr()), c_void_p(arg9_1.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(arg154_1.data_ptr()), c_void_p(arg155_1.data_ptr()), c_void_p(buf135.data_ptr()), c_void_p(buf136.data_ptr()), c_void_p(buf138.data_ptr()))
    del arg154_1
    del arg155_1
    buf139 = reinterpret_tensor(buf112, (4608, 3072), (3072, 1), 0); del buf112  # reuse
    # Source Nodes: [x_54], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg157_1, reinterpret_tensor(buf138, (4608, 768), (768, 1), 0), reinterpret_tensor(arg156_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf139)
    del arg156_1
    del arg157_1
    buf140 = reinterpret_tensor(buf139, (8, 576, 3072), (1769472, 3072, 1), 0); del buf139  # reuse
    cpp_fused_gelu_40(c_void_p(buf140.data_ptr()))
    buf141 = reinterpret_tensor(buf138, (4608, 768), (768, 1), 0); del buf138  # reuse
    # Source Nodes: [x_58], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg159_1, reinterpret_tensor(buf140, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg158_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf141)
    del arg158_1
    del arg159_1
    buf142 = reinterpret_tensor(buf141, (8, 576, 768), (442368, 768, 1), 0); del buf141  # reuse
    buf143 = buf136; del buf136  # reuse
    buf144 = buf135; del buf135  # reuse
    buf146 = reinterpret_tensor(buf106, (8, 576, 768), (442368, 768, 1), 0); del buf106  # reuse
    cpp_fused_add_mul_native_layer_norm_41(c_void_p(buf142.data_ptr()), c_void_p(buf114.data_ptr()), c_void_p(arg9_1.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(arg10_1.data_ptr()), c_void_p(arg160_1.data_ptr()), c_void_p(arg161_1.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(buf144.data_ptr()), c_void_p(buf146.data_ptr()))
    del arg10_1
    del arg160_1
    del arg161_1
    del arg9_1
    buf147 = buf119; del buf119  # reuse
    # Source Nodes: [getattr_l__mod___blocks___5___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg163_1, reinterpret_tensor(buf146, (4608, 768), (768, 1), 0), reinterpret_tensor(arg162_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf147)
    del arg162_1
    del arg163_1
    buf148 = reinterpret_tensor(buf146, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf146  # reuse
    buf149 = reinterpret_tensor(buf134, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf134  # reuse
    cpp_fused_clone_mul_42(c_void_p(buf147.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(buf149.data_ptr()))
    buf150 = reinterpret_tensor(buf130, (128, 576, 576), (331776, 576, 1), 0); del buf130  # reuse
    # Source Nodes: [attn_25], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf148, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf149, (128, 48, 576), (27648, 576, 1), 0), out=buf150)
    buf151 = reinterpret_tensor(buf129, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf129  # reuse
    cpp_fused_clone_43(c_void_p(buf150.data_ptr()), c_void_p(buf151.data_ptr()))
    buf152 = reinterpret_tensor(buf150, (2654208, 16), (16, 1), 0); del buf150  # reuse
    # Source Nodes: [getattr_l__mod___blocks___5___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf151, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg164_1, (16, 16), (1, 16), 0), out=buf152)
    del arg164_1
    buf153 = reinterpret_tensor(buf127, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf127  # reuse
    buf154 = reinterpret_tensor(buf152, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf152  # reuse
    buf155 = reinterpret_tensor(buf125, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf125  # reuse
    buf156 = reinterpret_tensor(buf154, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf154  # reuse
    cpp_fused__softmax_clone_44(c_void_p(buf156.data_ptr()), c_void_p(arg165_1.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(buf155.data_ptr()))
    del arg165_1
    buf157 = reinterpret_tensor(buf151, (2654208, 16), (16, 1), 0); del buf151  # reuse
    # Source Nodes: [getattr_l__mod___blocks___5___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf156, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg166_1, (16, 16), (1, 16), 0), out=buf157)
    del arg166_1
    buf158 = reinterpret_tensor(buf156, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf156  # reuse
    buf159 = reinterpret_tensor(buf149, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf149  # reuse
    cpp_fused_clone_45(c_void_p(buf157.data_ptr()), c_void_p(arg167_1.data_ptr()), c_void_p(buf147.data_ptr()), c_void_p(buf158.data_ptr()), c_void_p(buf159.data_ptr()))
    del arg167_1
    buf160 = reinterpret_tensor(buf148, (128, 576, 48), (27648, 48, 1), 0); del buf148  # reuse
    # Source Nodes: [matmul_11], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf158, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf159, (128, 576, 48), (27648, 48, 1), 0), out=buf160)
    buf161 = reinterpret_tensor(buf159, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf159  # reuse
    cpp_fused_clone_46(c_void_p(buf160.data_ptr()), c_void_p(buf161.data_ptr()))
    buf162 = reinterpret_tensor(buf160, (4608, 768), (768, 1), 0); del buf160  # reuse
    # Source Nodes: [x_62], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg169_1, reinterpret_tensor(buf161, (4608, 768), (768, 1), 0), reinterpret_tensor(arg168_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf162)
    del arg168_1
    del arg169_1
    buf163 = buf144; del buf144  # reuse
    buf164 = buf143; del buf143  # reuse
    buf166 = reinterpret_tensor(buf161, (8, 576, 768), (442368, 768, 1), 0); del buf161  # reuse
    cpp_fused_add_mul_native_layer_norm_47(c_void_p(buf142.data_ptr()), c_void_p(arg11_1.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(arg170_1.data_ptr()), c_void_p(arg171_1.data_ptr()), c_void_p(buf163.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf166.data_ptr()))
    del arg170_1
    del arg171_1
    buf167 = reinterpret_tensor(buf140, (4608, 3072), (3072, 1), 0); del buf140  # reuse
    # Source Nodes: [x_65], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg173_1, reinterpret_tensor(buf166, (4608, 768), (768, 1), 0), reinterpret_tensor(arg172_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf167)
    del arg172_1
    del arg173_1
    buf168 = reinterpret_tensor(buf167, (8, 576, 3072), (1769472, 3072, 1), 0); del buf167  # reuse
    cpp_fused_gelu_48(c_void_p(buf168.data_ptr()))
    buf169 = reinterpret_tensor(buf166, (4608, 768), (768, 1), 0); del buf166  # reuse
    # Source Nodes: [x_69], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg175_1, reinterpret_tensor(buf168, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg174_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf169)
    del arg174_1
    del arg175_1
    buf170 = reinterpret_tensor(buf169, (8, 576, 768), (442368, 768, 1), 0); del buf169  # reuse
    buf171 = buf164; del buf164  # reuse
    buf172 = buf163; del buf163  # reuse
    buf174 = buf114; del buf114  # reuse
    cpp_fused_add_mul_native_layer_norm_49(c_void_p(buf170.data_ptr()), c_void_p(buf142.data_ptr()), c_void_p(arg11_1.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(arg12_1.data_ptr()), c_void_p(arg176_1.data_ptr()), c_void_p(arg177_1.data_ptr()), c_void_p(buf171.data_ptr()), c_void_p(buf172.data_ptr()), c_void_p(buf174.data_ptr()))
    del arg11_1
    del arg12_1
    del arg176_1
    del arg177_1
    buf175 = buf147; del buf147  # reuse
    # Source Nodes: [getattr_l__mod___blocks___6___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg179_1, reinterpret_tensor(buf174, (4608, 768), (768, 1), 0), reinterpret_tensor(arg178_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf175)
    del arg178_1
    del arg179_1
    buf176 = reinterpret_tensor(buf174, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf174  # reuse
    buf177 = reinterpret_tensor(buf162, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf162  # reuse
    cpp_fused_clone_mul_50(c_void_p(buf175.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(buf177.data_ptr()))
    buf178 = reinterpret_tensor(buf158, (128, 576, 576), (331776, 576, 1), 0); del buf158  # reuse
    # Source Nodes: [attn_30], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf176, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf177, (128, 48, 576), (27648, 576, 1), 0), out=buf178)
    buf179 = reinterpret_tensor(buf157, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf157  # reuse
    cpp_fused_clone_51(c_void_p(buf178.data_ptr()), c_void_p(buf179.data_ptr()))
    buf180 = reinterpret_tensor(buf178, (2654208, 16), (16, 1), 0); del buf178  # reuse
    # Source Nodes: [getattr_l__mod___blocks___6___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf179, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg180_1, (16, 16), (1, 16), 0), out=buf180)
    del arg180_1
    buf181 = reinterpret_tensor(buf155, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf155  # reuse
    buf182 = reinterpret_tensor(buf180, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf180  # reuse
    buf183 = reinterpret_tensor(buf153, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf153  # reuse
    buf184 = reinterpret_tensor(buf182, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf182  # reuse
    cpp_fused__softmax_clone_52(c_void_p(buf184.data_ptr()), c_void_p(arg181_1.data_ptr()), c_void_p(buf181.data_ptr()), c_void_p(buf183.data_ptr()))
    del arg181_1
    buf185 = reinterpret_tensor(buf179, (2654208, 16), (16, 1), 0); del buf179  # reuse
    # Source Nodes: [getattr_l__mod___blocks___6___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf184, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg182_1, (16, 16), (1, 16), 0), out=buf185)
    del arg182_1
    buf186 = reinterpret_tensor(buf184, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf184  # reuse
    buf187 = reinterpret_tensor(buf177, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf177  # reuse
    cpp_fused_clone_53(c_void_p(buf185.data_ptr()), c_void_p(arg183_1.data_ptr()), c_void_p(buf175.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf187.data_ptr()))
    del arg183_1
    buf188 = reinterpret_tensor(buf176, (128, 576, 48), (27648, 48, 1), 0); del buf176  # reuse
    # Source Nodes: [matmul_13], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf186, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf187, (128, 576, 48), (27648, 48, 1), 0), out=buf188)
    buf189 = reinterpret_tensor(buf187, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf187  # reuse
    cpp_fused_clone_54(c_void_p(buf188.data_ptr()), c_void_p(buf189.data_ptr()))
    buf190 = reinterpret_tensor(buf188, (4608, 768), (768, 1), 0); del buf188  # reuse
    # Source Nodes: [x_73], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg185_1, reinterpret_tensor(buf189, (4608, 768), (768, 1), 0), reinterpret_tensor(arg184_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf190)
    del arg184_1
    del arg185_1
    buf191 = buf172; del buf172  # reuse
    buf192 = buf171; del buf171  # reuse
    buf194 = reinterpret_tensor(buf189, (8, 576, 768), (442368, 768, 1), 0); del buf189  # reuse
    cpp_fused_add_mul_native_layer_norm_55(c_void_p(buf170.data_ptr()), c_void_p(arg13_1.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(arg186_1.data_ptr()), c_void_p(arg187_1.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf194.data_ptr()))
    del arg186_1
    del arg187_1
    buf195 = reinterpret_tensor(buf168, (4608, 3072), (3072, 1), 0); del buf168  # reuse
    # Source Nodes: [x_76], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg189_1, reinterpret_tensor(buf194, (4608, 768), (768, 1), 0), reinterpret_tensor(arg188_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf195)
    del arg188_1
    del arg189_1
    buf196 = reinterpret_tensor(buf195, (8, 576, 3072), (1769472, 3072, 1), 0); del buf195  # reuse
    cpp_fused_gelu_56(c_void_p(buf196.data_ptr()))
    buf197 = reinterpret_tensor(buf194, (4608, 768), (768, 1), 0); del buf194  # reuse
    # Source Nodes: [x_80], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg191_1, reinterpret_tensor(buf196, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg190_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf197)
    del arg190_1
    del arg191_1
    buf198 = reinterpret_tensor(buf197, (8, 576, 768), (442368, 768, 1), 0); del buf197  # reuse
    buf199 = buf192; del buf192  # reuse
    buf200 = buf191; del buf191  # reuse
    buf202 = buf142; del buf142  # reuse
    cpp_fused_add_mul_native_layer_norm_57(c_void_p(buf198.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(arg13_1.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(arg14_1.data_ptr()), c_void_p(arg192_1.data_ptr()), c_void_p(arg193_1.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf200.data_ptr()), c_void_p(buf202.data_ptr()))
    del arg13_1
    del arg14_1
    del arg192_1
    del arg193_1
    buf203 = buf175; del buf175  # reuse
    # Source Nodes: [getattr_l__mod___blocks___7___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg195_1, reinterpret_tensor(buf202, (4608, 768), (768, 1), 0), reinterpret_tensor(arg194_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf203)
    del arg194_1
    del arg195_1
    buf204 = reinterpret_tensor(buf202, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf202  # reuse
    buf205 = reinterpret_tensor(buf190, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf190  # reuse
    cpp_fused_clone_mul_58(c_void_p(buf203.data_ptr()), c_void_p(buf204.data_ptr()), c_void_p(buf205.data_ptr()))
    buf206 = reinterpret_tensor(buf186, (128, 576, 576), (331776, 576, 1), 0); del buf186  # reuse
    # Source Nodes: [attn_35], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf204, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf205, (128, 48, 576), (27648, 576, 1), 0), out=buf206)
    buf207 = reinterpret_tensor(buf185, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf185  # reuse
    cpp_fused_clone_59(c_void_p(buf206.data_ptr()), c_void_p(buf207.data_ptr()))
    buf208 = reinterpret_tensor(buf206, (2654208, 16), (16, 1), 0); del buf206  # reuse
    # Source Nodes: [getattr_l__mod___blocks___7___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf207, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg196_1, (16, 16), (1, 16), 0), out=buf208)
    del arg196_1
    buf209 = reinterpret_tensor(buf183, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf183  # reuse
    buf210 = reinterpret_tensor(buf208, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf208  # reuse
    buf211 = reinterpret_tensor(buf181, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf181  # reuse
    buf212 = reinterpret_tensor(buf210, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf210  # reuse
    cpp_fused__softmax_clone_60(c_void_p(buf212.data_ptr()), c_void_p(arg197_1.data_ptr()), c_void_p(buf209.data_ptr()), c_void_p(buf211.data_ptr()))
    del arg197_1
    buf213 = reinterpret_tensor(buf207, (2654208, 16), (16, 1), 0); del buf207  # reuse
    # Source Nodes: [getattr_l__mod___blocks___7___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf212, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg198_1, (16, 16), (1, 16), 0), out=buf213)
    del arg198_1
    buf214 = reinterpret_tensor(buf212, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf212  # reuse
    buf215 = reinterpret_tensor(buf205, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf205  # reuse
    cpp_fused_clone_61(c_void_p(buf213.data_ptr()), c_void_p(arg199_1.data_ptr()), c_void_p(buf203.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf215.data_ptr()))
    del arg199_1
    buf216 = reinterpret_tensor(buf204, (128, 576, 48), (27648, 48, 1), 0); del buf204  # reuse
    # Source Nodes: [matmul_15], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf214, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf215, (128, 576, 48), (27648, 48, 1), 0), out=buf216)
    buf217 = reinterpret_tensor(buf215, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf215  # reuse
    cpp_fused_clone_62(c_void_p(buf216.data_ptr()), c_void_p(buf217.data_ptr()))
    buf218 = reinterpret_tensor(buf216, (4608, 768), (768, 1), 0); del buf216  # reuse
    # Source Nodes: [x_84], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg201_1, reinterpret_tensor(buf217, (4608, 768), (768, 1), 0), reinterpret_tensor(arg200_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf218)
    del arg200_1
    del arg201_1
    buf219 = buf200; del buf200  # reuse
    buf220 = buf199; del buf199  # reuse
    buf222 = reinterpret_tensor(buf217, (8, 576, 768), (442368, 768, 1), 0); del buf217  # reuse
    cpp_fused_add_mul_native_layer_norm_63(c_void_p(buf198.data_ptr()), c_void_p(arg15_1.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(arg202_1.data_ptr()), c_void_p(arg203_1.data_ptr()), c_void_p(buf219.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(buf222.data_ptr()))
    del arg202_1
    del arg203_1
    buf223 = reinterpret_tensor(buf196, (4608, 3072), (3072, 1), 0); del buf196  # reuse
    # Source Nodes: [x_87], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg205_1, reinterpret_tensor(buf222, (4608, 768), (768, 1), 0), reinterpret_tensor(arg204_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf223)
    del arg204_1
    del arg205_1
    buf224 = reinterpret_tensor(buf223, (8, 576, 3072), (1769472, 3072, 1), 0); del buf223  # reuse
    cpp_fused_gelu_64(c_void_p(buf224.data_ptr()))
    buf225 = reinterpret_tensor(buf222, (4608, 768), (768, 1), 0); del buf222  # reuse
    # Source Nodes: [x_91], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg207_1, reinterpret_tensor(buf224, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg206_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf225)
    del arg206_1
    del arg207_1
    buf226 = reinterpret_tensor(buf225, (8, 576, 768), (442368, 768, 1), 0); del buf225  # reuse
    buf227 = buf220; del buf220  # reuse
    buf228 = buf219; del buf219  # reuse
    buf230 = buf170; del buf170  # reuse
    cpp_fused_add_mul_native_layer_norm_65(c_void_p(buf226.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(arg15_1.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(arg16_1.data_ptr()), c_void_p(arg208_1.data_ptr()), c_void_p(arg209_1.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(buf230.data_ptr()))
    del arg15_1
    del arg16_1
    del arg208_1
    del arg209_1
    buf231 = buf203; del buf203  # reuse
    # Source Nodes: [getattr_l__mod___blocks___8___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg211_1, reinterpret_tensor(buf230, (4608, 768), (768, 1), 0), reinterpret_tensor(arg210_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf231)
    del arg210_1
    del arg211_1
    buf232 = reinterpret_tensor(buf230, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf230  # reuse
    buf233 = reinterpret_tensor(buf218, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf218  # reuse
    cpp_fused_clone_mul_66(c_void_p(buf231.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf233.data_ptr()))
    buf234 = reinterpret_tensor(buf214, (128, 576, 576), (331776, 576, 1), 0); del buf214  # reuse
    # Source Nodes: [attn_40], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf232, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf233, (128, 48, 576), (27648, 576, 1), 0), out=buf234)
    buf235 = reinterpret_tensor(buf213, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf213  # reuse
    cpp_fused_clone_67(c_void_p(buf234.data_ptr()), c_void_p(buf235.data_ptr()))
    buf236 = reinterpret_tensor(buf234, (2654208, 16), (16, 1), 0); del buf234  # reuse
    # Source Nodes: [getattr_l__mod___blocks___8___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf235, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg212_1, (16, 16), (1, 16), 0), out=buf236)
    del arg212_1
    buf237 = reinterpret_tensor(buf211, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf211  # reuse
    buf238 = reinterpret_tensor(buf236, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf236  # reuse
    buf239 = reinterpret_tensor(buf209, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf209  # reuse
    buf240 = reinterpret_tensor(buf238, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf238  # reuse
    cpp_fused__softmax_clone_68(c_void_p(buf240.data_ptr()), c_void_p(arg213_1.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf239.data_ptr()))
    del arg213_1
    buf241 = reinterpret_tensor(buf235, (2654208, 16), (16, 1), 0); del buf235  # reuse
    # Source Nodes: [getattr_l__mod___blocks___8___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf240, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg214_1, (16, 16), (1, 16), 0), out=buf241)
    del arg214_1
    buf242 = reinterpret_tensor(buf240, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf240  # reuse
    buf243 = reinterpret_tensor(buf233, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf233  # reuse
    cpp_fused_clone_69(c_void_p(buf241.data_ptr()), c_void_p(arg215_1.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(buf243.data_ptr()))
    del arg215_1
    buf244 = reinterpret_tensor(buf232, (128, 576, 48), (27648, 48, 1), 0); del buf232  # reuse
    # Source Nodes: [matmul_17], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf242, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf243, (128, 576, 48), (27648, 48, 1), 0), out=buf244)
    buf245 = reinterpret_tensor(buf243, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf243  # reuse
    cpp_fused_clone_70(c_void_p(buf244.data_ptr()), c_void_p(buf245.data_ptr()))
    buf246 = reinterpret_tensor(buf244, (4608, 768), (768, 1), 0); del buf244  # reuse
    # Source Nodes: [x_95], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg217_1, reinterpret_tensor(buf245, (4608, 768), (768, 1), 0), reinterpret_tensor(arg216_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf246)
    del arg216_1
    del arg217_1
    buf247 = buf228; del buf228  # reuse
    buf248 = buf227; del buf227  # reuse
    buf250 = reinterpret_tensor(buf245, (8, 576, 768), (442368, 768, 1), 0); del buf245  # reuse
    cpp_fused_add_mul_native_layer_norm_71(c_void_p(buf226.data_ptr()), c_void_p(arg17_1.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(arg218_1.data_ptr()), c_void_p(arg219_1.data_ptr()), c_void_p(buf247.data_ptr()), c_void_p(buf248.data_ptr()), c_void_p(buf250.data_ptr()))
    del arg218_1
    del arg219_1
    buf251 = reinterpret_tensor(buf224, (4608, 3072), (3072, 1), 0); del buf224  # reuse
    # Source Nodes: [x_98], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg221_1, reinterpret_tensor(buf250, (4608, 768), (768, 1), 0), reinterpret_tensor(arg220_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf251)
    del arg220_1
    del arg221_1
    buf252 = reinterpret_tensor(buf251, (8, 576, 3072), (1769472, 3072, 1), 0); del buf251  # reuse
    cpp_fused_gelu_72(c_void_p(buf252.data_ptr()))
    buf253 = reinterpret_tensor(buf250, (4608, 768), (768, 1), 0); del buf250  # reuse
    # Source Nodes: [x_102], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg223_1, reinterpret_tensor(buf252, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg222_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf253)
    del arg222_1
    del arg223_1
    buf254 = reinterpret_tensor(buf253, (8, 576, 768), (442368, 768, 1), 0); del buf253  # reuse
    buf255 = buf248; del buf248  # reuse
    buf256 = buf247; del buf247  # reuse
    buf258 = buf198; del buf198  # reuse
    cpp_fused_add_mul_native_layer_norm_73(c_void_p(buf254.data_ptr()), c_void_p(buf226.data_ptr()), c_void_p(arg17_1.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(arg18_1.data_ptr()), c_void_p(arg224_1.data_ptr()), c_void_p(arg225_1.data_ptr()), c_void_p(buf255.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(buf258.data_ptr()))
    del arg17_1
    del arg18_1
    del arg224_1
    del arg225_1
    buf259 = buf231; del buf231  # reuse
    # Source Nodes: [getattr_l__mod___blocks___9___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg227_1, reinterpret_tensor(buf258, (4608, 768), (768, 1), 0), reinterpret_tensor(arg226_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf259)
    del arg226_1
    del arg227_1
    buf260 = reinterpret_tensor(buf258, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf258  # reuse
    buf261 = reinterpret_tensor(buf246, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf246  # reuse
    cpp_fused_clone_mul_74(c_void_p(buf259.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(buf261.data_ptr()))
    buf262 = reinterpret_tensor(buf242, (128, 576, 576), (331776, 576, 1), 0); del buf242  # reuse
    # Source Nodes: [attn_45], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf260, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf261, (128, 48, 576), (27648, 576, 1), 0), out=buf262)
    buf263 = reinterpret_tensor(buf241, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf241  # reuse
    cpp_fused_clone_75(c_void_p(buf262.data_ptr()), c_void_p(buf263.data_ptr()))
    buf264 = reinterpret_tensor(buf262, (2654208, 16), (16, 1), 0); del buf262  # reuse
    # Source Nodes: [getattr_l__mod___blocks___9___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf263, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg228_1, (16, 16), (1, 16), 0), out=buf264)
    del arg228_1
    buf265 = reinterpret_tensor(buf239, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf239  # reuse
    buf266 = reinterpret_tensor(buf264, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf264  # reuse
    buf267 = reinterpret_tensor(buf237, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf237  # reuse
    buf268 = reinterpret_tensor(buf266, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf266  # reuse
    cpp_fused__softmax_clone_76(c_void_p(buf268.data_ptr()), c_void_p(arg229_1.data_ptr()), c_void_p(buf265.data_ptr()), c_void_p(buf267.data_ptr()))
    del arg229_1
    buf269 = reinterpret_tensor(buf263, (2654208, 16), (16, 1), 0); del buf263  # reuse
    # Source Nodes: [getattr_l__mod___blocks___9___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf268, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg230_1, (16, 16), (1, 16), 0), out=buf269)
    del arg230_1
    buf270 = reinterpret_tensor(buf268, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf268  # reuse
    buf271 = reinterpret_tensor(buf261, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf261  # reuse
    cpp_fused_clone_77(c_void_p(buf269.data_ptr()), c_void_p(arg231_1.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(buf271.data_ptr()))
    del arg231_1
    buf272 = reinterpret_tensor(buf260, (128, 576, 48), (27648, 48, 1), 0); del buf260  # reuse
    # Source Nodes: [matmul_19], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf270, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf271, (128, 576, 48), (27648, 48, 1), 0), out=buf272)
    buf273 = reinterpret_tensor(buf271, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf271  # reuse
    cpp_fused_clone_78(c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()))
    buf274 = reinterpret_tensor(buf272, (4608, 768), (768, 1), 0); del buf272  # reuse
    # Source Nodes: [x_106], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg233_1, reinterpret_tensor(buf273, (4608, 768), (768, 1), 0), reinterpret_tensor(arg232_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf274)
    del arg232_1
    del arg233_1
    buf275 = buf256; del buf256  # reuse
    buf276 = buf255; del buf255  # reuse
    buf278 = reinterpret_tensor(buf273, (8, 576, 768), (442368, 768, 1), 0); del buf273  # reuse
    cpp_fused_add_mul_native_layer_norm_79(c_void_p(buf254.data_ptr()), c_void_p(arg19_1.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(arg234_1.data_ptr()), c_void_p(arg235_1.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(buf276.data_ptr()), c_void_p(buf278.data_ptr()))
    del arg234_1
    del arg235_1
    buf279 = reinterpret_tensor(buf252, (4608, 3072), (3072, 1), 0); del buf252  # reuse
    # Source Nodes: [x_109], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg237_1, reinterpret_tensor(buf278, (4608, 768), (768, 1), 0), reinterpret_tensor(arg236_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf279)
    del arg236_1
    del arg237_1
    buf280 = reinterpret_tensor(buf279, (8, 576, 3072), (1769472, 3072, 1), 0); del buf279  # reuse
    cpp_fused_gelu_80(c_void_p(buf280.data_ptr()))
    buf281 = reinterpret_tensor(buf278, (4608, 768), (768, 1), 0); del buf278  # reuse
    # Source Nodes: [x_113], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg239_1, reinterpret_tensor(buf280, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg238_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf281)
    del arg238_1
    del arg239_1
    buf282 = reinterpret_tensor(buf281, (8, 576, 768), (442368, 768, 1), 0); del buf281  # reuse
    buf283 = buf276; del buf276  # reuse
    buf284 = buf275; del buf275  # reuse
    buf286 = buf226; del buf226  # reuse
    cpp_fused_add_mul_native_layer_norm_81(c_void_p(buf282.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(arg19_1.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(arg20_1.data_ptr()), c_void_p(arg240_1.data_ptr()), c_void_p(arg241_1.data_ptr()), c_void_p(buf283.data_ptr()), c_void_p(buf284.data_ptr()), c_void_p(buf286.data_ptr()))
    del arg19_1
    del arg20_1
    del arg240_1
    del arg241_1
    buf287 = buf259; del buf259  # reuse
    # Source Nodes: [getattr_l__mod___blocks___10___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg243_1, reinterpret_tensor(buf286, (4608, 768), (768, 1), 0), reinterpret_tensor(arg242_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf287)
    del arg242_1
    del arg243_1
    buf288 = reinterpret_tensor(buf286, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf286  # reuse
    buf289 = reinterpret_tensor(buf274, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf274  # reuse
    cpp_fused_clone_mul_82(c_void_p(buf287.data_ptr()), c_void_p(buf288.data_ptr()), c_void_p(buf289.data_ptr()))
    buf290 = reinterpret_tensor(buf270, (128, 576, 576), (331776, 576, 1), 0); del buf270  # reuse
    # Source Nodes: [attn_50], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf288, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf289, (128, 48, 576), (27648, 576, 1), 0), out=buf290)
    buf291 = reinterpret_tensor(buf269, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf269  # reuse
    cpp_fused_clone_83(c_void_p(buf290.data_ptr()), c_void_p(buf291.data_ptr()))
    buf292 = reinterpret_tensor(buf290, (2654208, 16), (16, 1), 0); del buf290  # reuse
    # Source Nodes: [getattr_l__mod___blocks___10___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf291, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg244_1, (16, 16), (1, 16), 0), out=buf292)
    del arg244_1
    buf293 = reinterpret_tensor(buf267, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf267  # reuse
    buf294 = reinterpret_tensor(buf292, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf292  # reuse
    buf295 = reinterpret_tensor(buf265, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf265  # reuse
    buf296 = reinterpret_tensor(buf294, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf294  # reuse
    cpp_fused__softmax_clone_84(c_void_p(buf296.data_ptr()), c_void_p(arg245_1.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(buf295.data_ptr()))
    del arg245_1
    buf297 = reinterpret_tensor(buf291, (2654208, 16), (16, 1), 0); del buf291  # reuse
    # Source Nodes: [getattr_l__mod___blocks___10___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf296, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg246_1, (16, 16), (1, 16), 0), out=buf297)
    del arg246_1
    buf298 = reinterpret_tensor(buf296, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf296  # reuse
    buf299 = reinterpret_tensor(buf289, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf289  # reuse
    cpp_fused_clone_85(c_void_p(buf297.data_ptr()), c_void_p(arg247_1.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(buf298.data_ptr()), c_void_p(buf299.data_ptr()))
    del arg247_1
    buf300 = reinterpret_tensor(buf288, (128, 576, 48), (27648, 48, 1), 0); del buf288  # reuse
    # Source Nodes: [matmul_21], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf298, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf299, (128, 576, 48), (27648, 48, 1), 0), out=buf300)
    buf301 = reinterpret_tensor(buf299, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf299  # reuse
    cpp_fused_clone_86(c_void_p(buf300.data_ptr()), c_void_p(buf301.data_ptr()))
    buf302 = reinterpret_tensor(buf300, (4608, 768), (768, 1), 0); del buf300  # reuse
    # Source Nodes: [x_117], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg249_1, reinterpret_tensor(buf301, (4608, 768), (768, 1), 0), reinterpret_tensor(arg248_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf302)
    del arg248_1
    del arg249_1
    buf303 = buf284; del buf284  # reuse
    buf304 = buf283; del buf283  # reuse
    buf306 = reinterpret_tensor(buf301, (8, 576, 768), (442368, 768, 1), 0); del buf301  # reuse
    cpp_fused_add_mul_native_layer_norm_87(c_void_p(buf282.data_ptr()), c_void_p(arg21_1.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(arg250_1.data_ptr()), c_void_p(arg251_1.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf306.data_ptr()))
    del arg250_1
    del arg251_1
    buf307 = reinterpret_tensor(buf280, (4608, 3072), (3072, 1), 0); del buf280  # reuse
    # Source Nodes: [x_120], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg253_1, reinterpret_tensor(buf306, (4608, 768), (768, 1), 0), reinterpret_tensor(arg252_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf307)
    del arg252_1
    del arg253_1
    buf308 = reinterpret_tensor(buf307, (8, 576, 3072), (1769472, 3072, 1), 0); del buf307  # reuse
    cpp_fused_gelu_88(c_void_p(buf308.data_ptr()))
    buf309 = reinterpret_tensor(buf306, (4608, 768), (768, 1), 0); del buf306  # reuse
    # Source Nodes: [x_124], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg255_1, reinterpret_tensor(buf308, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg254_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf309)
    del arg254_1
    del arg255_1
    buf310 = reinterpret_tensor(buf309, (8, 576, 768), (442368, 768, 1), 0); del buf309  # reuse
    buf311 = buf304; del buf304  # reuse
    buf312 = buf303; del buf303  # reuse
    buf314 = buf254; del buf254  # reuse
    cpp_fused_add_mul_native_layer_norm_89(c_void_p(buf310.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(arg21_1.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(arg22_1.data_ptr()), c_void_p(arg256_1.data_ptr()), c_void_p(arg257_1.data_ptr()), c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf314.data_ptr()))
    del arg21_1
    del arg22_1
    del arg256_1
    del arg257_1
    buf315 = buf287; del buf287  # reuse
    # Source Nodes: [getattr_l__mod___blocks___11___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg259_1, reinterpret_tensor(buf314, (4608, 768), (768, 1), 0), reinterpret_tensor(arg258_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf315)
    del arg258_1
    del arg259_1
    buf316 = reinterpret_tensor(buf314, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf314  # reuse
    buf317 = reinterpret_tensor(buf302, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf302  # reuse
    cpp_fused_clone_mul_90(c_void_p(buf315.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf317.data_ptr()))
    buf318 = reinterpret_tensor(buf298, (128, 576, 576), (331776, 576, 1), 0); del buf298  # reuse
    # Source Nodes: [attn_55], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf316, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf317, (128, 48, 576), (27648, 576, 1), 0), out=buf318)
    buf319 = reinterpret_tensor(buf297, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf297  # reuse
    cpp_fused_clone_91(c_void_p(buf318.data_ptr()), c_void_p(buf319.data_ptr()))
    buf320 = reinterpret_tensor(buf318, (2654208, 16), (16, 1), 0); del buf318  # reuse
    # Source Nodes: [getattr_l__mod___blocks___11___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf319, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg260_1, (16, 16), (1, 16), 0), out=buf320)
    del arg260_1
    buf321 = reinterpret_tensor(buf295, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf295  # reuse
    buf322 = reinterpret_tensor(buf320, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf320  # reuse
    buf323 = reinterpret_tensor(buf293, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf293  # reuse
    buf324 = reinterpret_tensor(buf322, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf322  # reuse
    cpp_fused__softmax_clone_92(c_void_p(buf324.data_ptr()), c_void_p(arg261_1.data_ptr()), c_void_p(buf321.data_ptr()), c_void_p(buf323.data_ptr()))
    del arg261_1
    buf325 = reinterpret_tensor(buf319, (2654208, 16), (16, 1), 0); del buf319  # reuse
    # Source Nodes: [getattr_l__mod___blocks___11___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf324, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg262_1, (16, 16), (1, 16), 0), out=buf325)
    del arg262_1
    buf326 = reinterpret_tensor(buf324, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf324  # reuse
    buf327 = reinterpret_tensor(buf317, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf317  # reuse
    cpp_fused_clone_93(c_void_p(buf325.data_ptr()), c_void_p(arg263_1.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(buf326.data_ptr()), c_void_p(buf327.data_ptr()))
    del arg263_1
    buf328 = reinterpret_tensor(buf316, (128, 576, 48), (27648, 48, 1), 0); del buf316  # reuse
    # Source Nodes: [matmul_23], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf326, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf327, (128, 576, 48), (27648, 48, 1), 0), out=buf328)
    buf329 = reinterpret_tensor(buf327, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf327  # reuse
    cpp_fused_clone_94(c_void_p(buf328.data_ptr()), c_void_p(buf329.data_ptr()))
    buf330 = reinterpret_tensor(buf328, (4608, 768), (768, 1), 0); del buf328  # reuse
    # Source Nodes: [x_128], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg265_1, reinterpret_tensor(buf329, (4608, 768), (768, 1), 0), reinterpret_tensor(arg264_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf330)
    del arg264_1
    del arg265_1
    buf331 = buf312; del buf312  # reuse
    buf332 = buf311; del buf311  # reuse
    buf334 = reinterpret_tensor(buf329, (8, 576, 768), (442368, 768, 1), 0); del buf329  # reuse
    cpp_fused_add_mul_native_layer_norm_95(c_void_p(buf310.data_ptr()), c_void_p(arg23_1.data_ptr()), c_void_p(buf330.data_ptr()), c_void_p(arg266_1.data_ptr()), c_void_p(arg267_1.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf334.data_ptr()))
    del arg266_1
    del arg267_1
    buf335 = reinterpret_tensor(buf308, (4608, 3072), (3072, 1), 0); del buf308  # reuse
    # Source Nodes: [x_131], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg269_1, reinterpret_tensor(buf334, (4608, 768), (768, 1), 0), reinterpret_tensor(arg268_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf335)
    del arg268_1
    del arg269_1
    buf336 = reinterpret_tensor(buf335, (8, 576, 3072), (1769472, 3072, 1), 0); del buf335  # reuse
    cpp_fused_gelu_96(c_void_p(buf336.data_ptr()))
    buf337 = reinterpret_tensor(buf334, (4608, 768), (768, 1), 0); del buf334  # reuse
    # Source Nodes: [x_135], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg271_1, reinterpret_tensor(buf336, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg270_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf337)
    del arg270_1
    del arg271_1
    buf338 = reinterpret_tensor(buf337, (8, 576, 768), (442368, 768, 1), 0); del buf337  # reuse
    buf339 = buf332; del buf332  # reuse
    buf340 = buf331; del buf331  # reuse
    buf342 = buf282; del buf282  # reuse
    cpp_fused_add_mul_native_layer_norm_97(c_void_p(buf338.data_ptr()), c_void_p(buf310.data_ptr()), c_void_p(arg23_1.data_ptr()), c_void_p(buf330.data_ptr()), c_void_p(arg24_1.data_ptr()), c_void_p(arg272_1.data_ptr()), c_void_p(arg273_1.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(buf342.data_ptr()))
    del arg23_1
    del arg24_1
    del arg272_1
    del arg273_1
    buf343 = buf315; del buf315  # reuse
    # Source Nodes: [getattr_l__mod___blocks___12___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg275_1, reinterpret_tensor(buf342, (4608, 768), (768, 1), 0), reinterpret_tensor(arg274_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf343)
    del arg274_1
    del arg275_1
    buf344 = reinterpret_tensor(buf342, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf342  # reuse
    buf345 = reinterpret_tensor(buf330, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf330  # reuse
    cpp_fused_clone_mul_98(c_void_p(buf343.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf345.data_ptr()))
    buf346 = reinterpret_tensor(buf326, (128, 576, 576), (331776, 576, 1), 0); del buf326  # reuse
    # Source Nodes: [attn_60], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf344, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf345, (128, 48, 576), (27648, 576, 1), 0), out=buf346)
    buf347 = reinterpret_tensor(buf325, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf325  # reuse
    cpp_fused_clone_99(c_void_p(buf346.data_ptr()), c_void_p(buf347.data_ptr()))
    buf348 = reinterpret_tensor(buf346, (2654208, 16), (16, 1), 0); del buf346  # reuse
    # Source Nodes: [getattr_l__mod___blocks___12___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf347, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg276_1, (16, 16), (1, 16), 0), out=buf348)
    del arg276_1
    buf349 = reinterpret_tensor(buf323, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf323  # reuse
    buf350 = reinterpret_tensor(buf348, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf348  # reuse
    buf351 = reinterpret_tensor(buf321, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf321  # reuse
    buf352 = reinterpret_tensor(buf350, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf350  # reuse
    cpp_fused__softmax_clone_100(c_void_p(buf352.data_ptr()), c_void_p(arg277_1.data_ptr()), c_void_p(buf349.data_ptr()), c_void_p(buf351.data_ptr()))
    del arg277_1
    buf353 = reinterpret_tensor(buf347, (2654208, 16), (16, 1), 0); del buf347  # reuse
    # Source Nodes: [getattr_l__mod___blocks___12___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf352, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg278_1, (16, 16), (1, 16), 0), out=buf353)
    del arg278_1
    buf354 = reinterpret_tensor(buf352, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf352  # reuse
    buf355 = reinterpret_tensor(buf345, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf345  # reuse
    cpp_fused_clone_101(c_void_p(buf353.data_ptr()), c_void_p(arg279_1.data_ptr()), c_void_p(buf343.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(buf355.data_ptr()))
    del arg279_1
    buf356 = reinterpret_tensor(buf344, (128, 576, 48), (27648, 48, 1), 0); del buf344  # reuse
    # Source Nodes: [matmul_25], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf354, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf355, (128, 576, 48), (27648, 48, 1), 0), out=buf356)
    buf357 = reinterpret_tensor(buf355, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf355  # reuse
    cpp_fused_clone_102(c_void_p(buf356.data_ptr()), c_void_p(buf357.data_ptr()))
    buf358 = reinterpret_tensor(buf356, (4608, 768), (768, 1), 0); del buf356  # reuse
    # Source Nodes: [x_139], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg281_1, reinterpret_tensor(buf357, (4608, 768), (768, 1), 0), reinterpret_tensor(arg280_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf358)
    del arg280_1
    del arg281_1
    buf359 = buf340; del buf340  # reuse
    buf360 = buf339; del buf339  # reuse
    buf362 = reinterpret_tensor(buf357, (8, 576, 768), (442368, 768, 1), 0); del buf357  # reuse
    cpp_fused_add_mul_native_layer_norm_103(c_void_p(buf338.data_ptr()), c_void_p(arg25_1.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(arg282_1.data_ptr()), c_void_p(arg283_1.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(buf362.data_ptr()))
    del arg282_1
    del arg283_1
    buf363 = reinterpret_tensor(buf336, (4608, 3072), (3072, 1), 0); del buf336  # reuse
    # Source Nodes: [x_142], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg285_1, reinterpret_tensor(buf362, (4608, 768), (768, 1), 0), reinterpret_tensor(arg284_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf363)
    del arg284_1
    del arg285_1
    buf364 = reinterpret_tensor(buf363, (8, 576, 3072), (1769472, 3072, 1), 0); del buf363  # reuse
    cpp_fused_gelu_104(c_void_p(buf364.data_ptr()))
    buf365 = reinterpret_tensor(buf362, (4608, 768), (768, 1), 0); del buf362  # reuse
    # Source Nodes: [x_146], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg287_1, reinterpret_tensor(buf364, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg286_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf365)
    del arg286_1
    del arg287_1
    buf366 = reinterpret_tensor(buf365, (8, 576, 768), (442368, 768, 1), 0); del buf365  # reuse
    buf367 = buf360; del buf360  # reuse
    buf368 = buf359; del buf359  # reuse
    buf370 = buf310; del buf310  # reuse
    cpp_fused_add_mul_native_layer_norm_105(c_void_p(buf366.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(arg25_1.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(arg26_1.data_ptr()), c_void_p(arg288_1.data_ptr()), c_void_p(arg289_1.data_ptr()), c_void_p(buf367.data_ptr()), c_void_p(buf368.data_ptr()), c_void_p(buf370.data_ptr()))
    del arg25_1
    del arg26_1
    del arg288_1
    del arg289_1
    buf371 = buf343; del buf343  # reuse
    # Source Nodes: [getattr_l__mod___blocks___13___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg291_1, reinterpret_tensor(buf370, (4608, 768), (768, 1), 0), reinterpret_tensor(arg290_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf371)
    del arg290_1
    del arg291_1
    buf372 = reinterpret_tensor(buf370, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf370  # reuse
    buf373 = reinterpret_tensor(buf358, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf358  # reuse
    cpp_fused_clone_mul_106(c_void_p(buf371.data_ptr()), c_void_p(buf372.data_ptr()), c_void_p(buf373.data_ptr()))
    buf374 = reinterpret_tensor(buf354, (128, 576, 576), (331776, 576, 1), 0); del buf354  # reuse
    # Source Nodes: [attn_65], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf372, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf373, (128, 48, 576), (27648, 576, 1), 0), out=buf374)
    buf375 = reinterpret_tensor(buf353, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf353  # reuse
    cpp_fused_clone_107(c_void_p(buf374.data_ptr()), c_void_p(buf375.data_ptr()))
    buf376 = reinterpret_tensor(buf374, (2654208, 16), (16, 1), 0); del buf374  # reuse
    # Source Nodes: [getattr_l__mod___blocks___13___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf375, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg292_1, (16, 16), (1, 16), 0), out=buf376)
    del arg292_1
    buf377 = reinterpret_tensor(buf351, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf351  # reuse
    buf378 = reinterpret_tensor(buf376, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf376  # reuse
    buf379 = reinterpret_tensor(buf349, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf349  # reuse
    buf380 = reinterpret_tensor(buf378, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf378  # reuse
    cpp_fused__softmax_clone_108(c_void_p(buf380.data_ptr()), c_void_p(arg293_1.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf379.data_ptr()))
    del arg293_1
    buf381 = reinterpret_tensor(buf375, (2654208, 16), (16, 1), 0); del buf375  # reuse
    # Source Nodes: [getattr_l__mod___blocks___13___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf380, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg294_1, (16, 16), (1, 16), 0), out=buf381)
    del arg294_1
    buf382 = reinterpret_tensor(buf380, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf380  # reuse
    buf383 = reinterpret_tensor(buf373, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf373  # reuse
    cpp_fused_clone_109(c_void_p(buf381.data_ptr()), c_void_p(arg295_1.data_ptr()), c_void_p(buf371.data_ptr()), c_void_p(buf382.data_ptr()), c_void_p(buf383.data_ptr()))
    del arg295_1
    buf384 = reinterpret_tensor(buf372, (128, 576, 48), (27648, 48, 1), 0); del buf372  # reuse
    # Source Nodes: [matmul_27], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf382, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf383, (128, 576, 48), (27648, 48, 1), 0), out=buf384)
    buf385 = reinterpret_tensor(buf383, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf383  # reuse
    cpp_fused_clone_110(c_void_p(buf384.data_ptr()), c_void_p(buf385.data_ptr()))
    buf386 = reinterpret_tensor(buf384, (4608, 768), (768, 1), 0); del buf384  # reuse
    # Source Nodes: [x_150], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg297_1, reinterpret_tensor(buf385, (4608, 768), (768, 1), 0), reinterpret_tensor(arg296_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf386)
    del arg296_1
    del arg297_1
    buf387 = buf368; del buf368  # reuse
    buf388 = buf367; del buf367  # reuse
    buf390 = reinterpret_tensor(buf385, (8, 576, 768), (442368, 768, 1), 0); del buf385  # reuse
    cpp_fused_add_mul_native_layer_norm_111(c_void_p(buf366.data_ptr()), c_void_p(arg27_1.data_ptr()), c_void_p(buf386.data_ptr()), c_void_p(arg298_1.data_ptr()), c_void_p(arg299_1.data_ptr()), c_void_p(buf387.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(buf390.data_ptr()))
    del arg298_1
    del arg299_1
    buf391 = reinterpret_tensor(buf364, (4608, 3072), (3072, 1), 0); del buf364  # reuse
    # Source Nodes: [x_153], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg301_1, reinterpret_tensor(buf390, (4608, 768), (768, 1), 0), reinterpret_tensor(arg300_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf391)
    del arg300_1
    del arg301_1
    buf392 = reinterpret_tensor(buf391, (8, 576, 3072), (1769472, 3072, 1), 0); del buf391  # reuse
    cpp_fused_gelu_112(c_void_p(buf392.data_ptr()))
    buf393 = reinterpret_tensor(buf390, (4608, 768), (768, 1), 0); del buf390  # reuse
    # Source Nodes: [x_157], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg303_1, reinterpret_tensor(buf392, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg302_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf393)
    del arg302_1
    del arg303_1
    buf394 = reinterpret_tensor(buf393, (8, 576, 768), (442368, 768, 1), 0); del buf393  # reuse
    buf395 = buf388; del buf388  # reuse
    buf396 = buf387; del buf387  # reuse
    buf398 = buf338; del buf338  # reuse
    cpp_fused_add_mul_native_layer_norm_113(c_void_p(buf394.data_ptr()), c_void_p(buf366.data_ptr()), c_void_p(arg27_1.data_ptr()), c_void_p(buf386.data_ptr()), c_void_p(arg28_1.data_ptr()), c_void_p(arg304_1.data_ptr()), c_void_p(arg305_1.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(buf396.data_ptr()), c_void_p(buf398.data_ptr()))
    del arg27_1
    del arg28_1
    del arg304_1
    del arg305_1
    buf399 = buf371; del buf371  # reuse
    # Source Nodes: [getattr_l__mod___blocks___14___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg307_1, reinterpret_tensor(buf398, (4608, 768), (768, 1), 0), reinterpret_tensor(arg306_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf399)
    del arg306_1
    del arg307_1
    buf400 = reinterpret_tensor(buf398, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf398  # reuse
    buf401 = reinterpret_tensor(buf386, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf386  # reuse
    cpp_fused_clone_mul_114(c_void_p(buf399.data_ptr()), c_void_p(buf400.data_ptr()), c_void_p(buf401.data_ptr()))
    buf402 = reinterpret_tensor(buf382, (128, 576, 576), (331776, 576, 1), 0); del buf382  # reuse
    # Source Nodes: [attn_70], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf400, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf401, (128, 48, 576), (27648, 576, 1), 0), out=buf402)
    buf403 = reinterpret_tensor(buf381, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf381  # reuse
    cpp_fused_clone_115(c_void_p(buf402.data_ptr()), c_void_p(buf403.data_ptr()))
    buf404 = reinterpret_tensor(buf402, (2654208, 16), (16, 1), 0); del buf402  # reuse
    # Source Nodes: [getattr_l__mod___blocks___14___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf403, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg308_1, (16, 16), (1, 16), 0), out=buf404)
    del arg308_1
    buf405 = reinterpret_tensor(buf379, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf379  # reuse
    buf406 = reinterpret_tensor(buf404, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf404  # reuse
    buf407 = reinterpret_tensor(buf377, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf377  # reuse
    buf408 = reinterpret_tensor(buf406, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf406  # reuse
    cpp_fused__softmax_clone_116(c_void_p(buf408.data_ptr()), c_void_p(arg309_1.data_ptr()), c_void_p(buf405.data_ptr()), c_void_p(buf407.data_ptr()))
    del arg309_1
    buf409 = reinterpret_tensor(buf403, (2654208, 16), (16, 1), 0); del buf403  # reuse
    # Source Nodes: [getattr_l__mod___blocks___14___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf408, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg310_1, (16, 16), (1, 16), 0), out=buf409)
    del arg310_1
    buf410 = reinterpret_tensor(buf408, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf408  # reuse
    buf411 = reinterpret_tensor(buf401, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf401  # reuse
    cpp_fused_clone_117(c_void_p(buf409.data_ptr()), c_void_p(arg311_1.data_ptr()), c_void_p(buf399.data_ptr()), c_void_p(buf410.data_ptr()), c_void_p(buf411.data_ptr()))
    del arg311_1
    buf412 = reinterpret_tensor(buf400, (128, 576, 48), (27648, 48, 1), 0); del buf400  # reuse
    # Source Nodes: [matmul_29], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf410, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf411, (128, 576, 48), (27648, 48, 1), 0), out=buf412)
    buf413 = reinterpret_tensor(buf411, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf411  # reuse
    cpp_fused_clone_118(c_void_p(buf412.data_ptr()), c_void_p(buf413.data_ptr()))
    buf414 = reinterpret_tensor(buf412, (4608, 768), (768, 1), 0); del buf412  # reuse
    # Source Nodes: [x_161], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg313_1, reinterpret_tensor(buf413, (4608, 768), (768, 1), 0), reinterpret_tensor(arg312_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf414)
    del arg312_1
    del arg313_1
    buf415 = buf396; del buf396  # reuse
    buf416 = buf395; del buf395  # reuse
    buf418 = reinterpret_tensor(buf413, (8, 576, 768), (442368, 768, 1), 0); del buf413  # reuse
    cpp_fused_add_mul_native_layer_norm_119(c_void_p(buf394.data_ptr()), c_void_p(arg29_1.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(arg314_1.data_ptr()), c_void_p(arg315_1.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(buf418.data_ptr()))
    del arg314_1
    del arg315_1
    buf419 = reinterpret_tensor(buf392, (4608, 3072), (3072, 1), 0); del buf392  # reuse
    # Source Nodes: [x_164], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg317_1, reinterpret_tensor(buf418, (4608, 768), (768, 1), 0), reinterpret_tensor(arg316_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf419)
    del arg316_1
    del arg317_1
    buf420 = reinterpret_tensor(buf419, (8, 576, 3072), (1769472, 3072, 1), 0); del buf419  # reuse
    cpp_fused_gelu_120(c_void_p(buf420.data_ptr()))
    buf421 = reinterpret_tensor(buf418, (4608, 768), (768, 1), 0); del buf418  # reuse
    # Source Nodes: [x_168], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg319_1, reinterpret_tensor(buf420, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg318_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf421)
    del arg318_1
    del arg319_1
    buf422 = reinterpret_tensor(buf421, (8, 576, 768), (442368, 768, 1), 0); del buf421  # reuse
    buf423 = buf416; del buf416  # reuse
    buf424 = buf415; del buf415  # reuse
    buf426 = buf366; del buf366  # reuse
    cpp_fused_add_mul_native_layer_norm_121(c_void_p(buf422.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(arg29_1.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(arg30_1.data_ptr()), c_void_p(arg320_1.data_ptr()), c_void_p(arg321_1.data_ptr()), c_void_p(buf423.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(buf426.data_ptr()))
    del arg29_1
    del arg30_1
    del arg320_1
    del arg321_1
    buf427 = buf399; del buf399  # reuse
    # Source Nodes: [getattr_l__mod___blocks___15___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg323_1, reinterpret_tensor(buf426, (4608, 768), (768, 1), 0), reinterpret_tensor(arg322_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf427)
    del arg322_1
    del arg323_1
    buf428 = reinterpret_tensor(buf426, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf426  # reuse
    buf429 = reinterpret_tensor(buf414, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf414  # reuse
    cpp_fused_clone_mul_122(c_void_p(buf427.data_ptr()), c_void_p(buf428.data_ptr()), c_void_p(buf429.data_ptr()))
    buf430 = reinterpret_tensor(buf410, (128, 576, 576), (331776, 576, 1), 0); del buf410  # reuse
    # Source Nodes: [attn_75], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf428, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf429, (128, 48, 576), (27648, 576, 1), 0), out=buf430)
    buf431 = reinterpret_tensor(buf409, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf409  # reuse
    cpp_fused_clone_123(c_void_p(buf430.data_ptr()), c_void_p(buf431.data_ptr()))
    buf432 = reinterpret_tensor(buf430, (2654208, 16), (16, 1), 0); del buf430  # reuse
    # Source Nodes: [getattr_l__mod___blocks___15___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf431, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg324_1, (16, 16), (1, 16), 0), out=buf432)
    del arg324_1
    buf433 = reinterpret_tensor(buf407, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf407  # reuse
    buf434 = reinterpret_tensor(buf432, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf432  # reuse
    buf435 = reinterpret_tensor(buf405, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf405  # reuse
    buf436 = reinterpret_tensor(buf434, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf434  # reuse
    cpp_fused__softmax_clone_124(c_void_p(buf436.data_ptr()), c_void_p(arg325_1.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf435.data_ptr()))
    del arg325_1
    buf437 = reinterpret_tensor(buf431, (2654208, 16), (16, 1), 0); del buf431  # reuse
    # Source Nodes: [getattr_l__mod___blocks___15___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf436, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg326_1, (16, 16), (1, 16), 0), out=buf437)
    del arg326_1
    buf438 = reinterpret_tensor(buf436, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf436  # reuse
    buf439 = reinterpret_tensor(buf429, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf429  # reuse
    cpp_fused_clone_125(c_void_p(buf437.data_ptr()), c_void_p(arg327_1.data_ptr()), c_void_p(buf427.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf439.data_ptr()))
    del arg327_1
    buf440 = reinterpret_tensor(buf428, (128, 576, 48), (27648, 48, 1), 0); del buf428  # reuse
    # Source Nodes: [matmul_31], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf438, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf439, (128, 576, 48), (27648, 48, 1), 0), out=buf440)
    buf441 = reinterpret_tensor(buf439, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf439  # reuse
    cpp_fused_clone_126(c_void_p(buf440.data_ptr()), c_void_p(buf441.data_ptr()))
    buf442 = reinterpret_tensor(buf440, (4608, 768), (768, 1), 0); del buf440  # reuse
    # Source Nodes: [x_172], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg329_1, reinterpret_tensor(buf441, (4608, 768), (768, 1), 0), reinterpret_tensor(arg328_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf442)
    del arg328_1
    del arg329_1
    buf443 = buf424; del buf424  # reuse
    buf444 = buf423; del buf423  # reuse
    buf446 = reinterpret_tensor(buf441, (8, 576, 768), (442368, 768, 1), 0); del buf441  # reuse
    cpp_fused_add_mul_native_layer_norm_127(c_void_p(buf422.data_ptr()), c_void_p(arg31_1.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(arg330_1.data_ptr()), c_void_p(arg331_1.data_ptr()), c_void_p(buf443.data_ptr()), c_void_p(buf444.data_ptr()), c_void_p(buf446.data_ptr()))
    del arg330_1
    del arg331_1
    buf447 = reinterpret_tensor(buf420, (4608, 3072), (3072, 1), 0); del buf420  # reuse
    # Source Nodes: [x_175], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg333_1, reinterpret_tensor(buf446, (4608, 768), (768, 1), 0), reinterpret_tensor(arg332_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf447)
    del arg332_1
    del arg333_1
    buf448 = reinterpret_tensor(buf447, (8, 576, 3072), (1769472, 3072, 1), 0); del buf447  # reuse
    cpp_fused_gelu_128(c_void_p(buf448.data_ptr()))
    buf449 = reinterpret_tensor(buf446, (4608, 768), (768, 1), 0); del buf446  # reuse
    # Source Nodes: [x_179], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg335_1, reinterpret_tensor(buf448, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg334_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf449)
    del arg334_1
    del arg335_1
    buf450 = reinterpret_tensor(buf449, (8, 576, 768), (442368, 768, 1), 0); del buf449  # reuse
    buf451 = buf444; del buf444  # reuse
    buf452 = buf443; del buf443  # reuse
    buf454 = buf394; del buf394  # reuse
    cpp_fused_add_mul_native_layer_norm_129(c_void_p(buf450.data_ptr()), c_void_p(buf422.data_ptr()), c_void_p(arg31_1.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(arg32_1.data_ptr()), c_void_p(arg336_1.data_ptr()), c_void_p(arg337_1.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf452.data_ptr()), c_void_p(buf454.data_ptr()))
    del arg31_1
    del arg32_1
    del arg336_1
    del arg337_1
    buf455 = buf427; del buf427  # reuse
    # Source Nodes: [getattr_l__mod___blocks___16___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg339_1, reinterpret_tensor(buf454, (4608, 768), (768, 1), 0), reinterpret_tensor(arg338_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf455)
    del arg338_1
    del arg339_1
    buf456 = reinterpret_tensor(buf454, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf454  # reuse
    buf457 = reinterpret_tensor(buf442, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf442  # reuse
    cpp_fused_clone_mul_130(c_void_p(buf455.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf457.data_ptr()))
    buf458 = reinterpret_tensor(buf438, (128, 576, 576), (331776, 576, 1), 0); del buf438  # reuse
    # Source Nodes: [attn_80], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf456, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf457, (128, 48, 576), (27648, 576, 1), 0), out=buf458)
    buf459 = reinterpret_tensor(buf437, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf437  # reuse
    cpp_fused_clone_131(c_void_p(buf458.data_ptr()), c_void_p(buf459.data_ptr()))
    buf460 = reinterpret_tensor(buf458, (2654208, 16), (16, 1), 0); del buf458  # reuse
    # Source Nodes: [getattr_l__mod___blocks___16___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf459, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg340_1, (16, 16), (1, 16), 0), out=buf460)
    del arg340_1
    buf461 = reinterpret_tensor(buf435, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf435  # reuse
    buf462 = reinterpret_tensor(buf460, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf460  # reuse
    buf463 = reinterpret_tensor(buf433, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf433  # reuse
    buf464 = reinterpret_tensor(buf462, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf462  # reuse
    cpp_fused__softmax_clone_132(c_void_p(buf464.data_ptr()), c_void_p(arg341_1.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(buf463.data_ptr()))
    del arg341_1
    buf465 = reinterpret_tensor(buf459, (2654208, 16), (16, 1), 0); del buf459  # reuse
    # Source Nodes: [getattr_l__mod___blocks___16___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf464, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg342_1, (16, 16), (1, 16), 0), out=buf465)
    del arg342_1
    buf466 = reinterpret_tensor(buf464, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf464  # reuse
    buf467 = reinterpret_tensor(buf457, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf457  # reuse
    cpp_fused_clone_133(c_void_p(buf465.data_ptr()), c_void_p(arg343_1.data_ptr()), c_void_p(buf455.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(buf467.data_ptr()))
    del arg343_1
    buf468 = reinterpret_tensor(buf456, (128, 576, 48), (27648, 48, 1), 0); del buf456  # reuse
    # Source Nodes: [matmul_33], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf466, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf467, (128, 576, 48), (27648, 48, 1), 0), out=buf468)
    buf469 = reinterpret_tensor(buf467, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf467  # reuse
    cpp_fused_clone_134(c_void_p(buf468.data_ptr()), c_void_p(buf469.data_ptr()))
    buf470 = reinterpret_tensor(buf468, (4608, 768), (768, 1), 0); del buf468  # reuse
    # Source Nodes: [x_183], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg345_1, reinterpret_tensor(buf469, (4608, 768), (768, 1), 0), reinterpret_tensor(arg344_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf470)
    del arg344_1
    del arg345_1
    buf471 = buf452; del buf452  # reuse
    buf472 = buf451; del buf451  # reuse
    buf474 = reinterpret_tensor(buf469, (8, 576, 768), (442368, 768, 1), 0); del buf469  # reuse
    cpp_fused_add_mul_native_layer_norm_135(c_void_p(buf450.data_ptr()), c_void_p(arg33_1.data_ptr()), c_void_p(buf470.data_ptr()), c_void_p(arg346_1.data_ptr()), c_void_p(arg347_1.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(buf472.data_ptr()), c_void_p(buf474.data_ptr()))
    del arg346_1
    del arg347_1
    buf475 = reinterpret_tensor(buf448, (4608, 3072), (3072, 1), 0); del buf448  # reuse
    # Source Nodes: [x_186], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg349_1, reinterpret_tensor(buf474, (4608, 768), (768, 1), 0), reinterpret_tensor(arg348_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf475)
    del arg348_1
    del arg349_1
    buf476 = reinterpret_tensor(buf475, (8, 576, 3072), (1769472, 3072, 1), 0); del buf475  # reuse
    cpp_fused_gelu_136(c_void_p(buf476.data_ptr()))
    buf477 = reinterpret_tensor(buf474, (4608, 768), (768, 1), 0); del buf474  # reuse
    # Source Nodes: [x_190], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg351_1, reinterpret_tensor(buf476, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg350_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf477)
    del arg350_1
    del arg351_1
    buf478 = reinterpret_tensor(buf477, (8, 576, 768), (442368, 768, 1), 0); del buf477  # reuse
    buf479 = buf472; del buf472  # reuse
    buf480 = buf471; del buf471  # reuse
    buf482 = buf422; del buf422  # reuse
    cpp_fused_add_mul_native_layer_norm_137(c_void_p(buf478.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(arg33_1.data_ptr()), c_void_p(buf470.data_ptr()), c_void_p(arg34_1.data_ptr()), c_void_p(arg352_1.data_ptr()), c_void_p(arg353_1.data_ptr()), c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(buf482.data_ptr()))
    del arg33_1
    del arg34_1
    del arg352_1
    del arg353_1
    buf483 = buf455; del buf455  # reuse
    # Source Nodes: [getattr_l__mod___blocks___17___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg355_1, reinterpret_tensor(buf482, (4608, 768), (768, 1), 0), reinterpret_tensor(arg354_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf483)
    del arg354_1
    del arg355_1
    buf484 = reinterpret_tensor(buf482, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf482  # reuse
    buf485 = reinterpret_tensor(buf470, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf470  # reuse
    cpp_fused_clone_mul_138(c_void_p(buf483.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(buf485.data_ptr()))
    buf486 = reinterpret_tensor(buf466, (128, 576, 576), (331776, 576, 1), 0); del buf466  # reuse
    # Source Nodes: [attn_85], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf484, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf485, (128, 48, 576), (27648, 576, 1), 0), out=buf486)
    buf487 = reinterpret_tensor(buf465, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf465  # reuse
    cpp_fused_clone_139(c_void_p(buf486.data_ptr()), c_void_p(buf487.data_ptr()))
    buf488 = reinterpret_tensor(buf486, (2654208, 16), (16, 1), 0); del buf486  # reuse
    # Source Nodes: [getattr_l__mod___blocks___17___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf487, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg356_1, (16, 16), (1, 16), 0), out=buf488)
    del arg356_1
    buf489 = reinterpret_tensor(buf463, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf463  # reuse
    buf490 = reinterpret_tensor(buf488, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf488  # reuse
    buf491 = reinterpret_tensor(buf461, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf461  # reuse
    buf492 = reinterpret_tensor(buf490, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf490  # reuse
    cpp_fused__softmax_clone_140(c_void_p(buf492.data_ptr()), c_void_p(arg357_1.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(buf491.data_ptr()))
    del arg357_1
    buf493 = reinterpret_tensor(buf487, (2654208, 16), (16, 1), 0); del buf487  # reuse
    # Source Nodes: [getattr_l__mod___blocks___17___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf492, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg358_1, (16, 16), (1, 16), 0), out=buf493)
    del arg358_1
    buf494 = reinterpret_tensor(buf492, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf492  # reuse
    buf495 = reinterpret_tensor(buf485, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf485  # reuse
    cpp_fused_clone_141(c_void_p(buf493.data_ptr()), c_void_p(arg359_1.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf495.data_ptr()))
    del arg359_1
    buf496 = reinterpret_tensor(buf484, (128, 576, 48), (27648, 48, 1), 0); del buf484  # reuse
    # Source Nodes: [matmul_35], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf494, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf495, (128, 576, 48), (27648, 48, 1), 0), out=buf496)
    buf497 = reinterpret_tensor(buf495, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf495  # reuse
    cpp_fused_clone_142(c_void_p(buf496.data_ptr()), c_void_p(buf497.data_ptr()))
    buf498 = reinterpret_tensor(buf496, (4608, 768), (768, 1), 0); del buf496  # reuse
    # Source Nodes: [x_194], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg361_1, reinterpret_tensor(buf497, (4608, 768), (768, 1), 0), reinterpret_tensor(arg360_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf498)
    del arg360_1
    del arg361_1
    buf499 = buf480; del buf480  # reuse
    buf500 = buf479; del buf479  # reuse
    buf502 = reinterpret_tensor(buf497, (8, 576, 768), (442368, 768, 1), 0); del buf497  # reuse
    cpp_fused_add_mul_native_layer_norm_143(c_void_p(buf478.data_ptr()), c_void_p(arg35_1.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(arg362_1.data_ptr()), c_void_p(arg363_1.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf500.data_ptr()), c_void_p(buf502.data_ptr()))
    del arg362_1
    del arg363_1
    buf503 = reinterpret_tensor(buf476, (4608, 3072), (3072, 1), 0); del buf476  # reuse
    # Source Nodes: [x_197], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg365_1, reinterpret_tensor(buf502, (4608, 768), (768, 1), 0), reinterpret_tensor(arg364_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf503)
    del arg364_1
    del arg365_1
    buf504 = reinterpret_tensor(buf503, (8, 576, 3072), (1769472, 3072, 1), 0); del buf503  # reuse
    cpp_fused_gelu_144(c_void_p(buf504.data_ptr()))
    buf505 = reinterpret_tensor(buf502, (4608, 768), (768, 1), 0); del buf502  # reuse
    # Source Nodes: [x_201], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg367_1, reinterpret_tensor(buf504, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg366_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf505)
    del arg366_1
    del arg367_1
    buf506 = reinterpret_tensor(buf505, (8, 576, 768), (442368, 768, 1), 0); del buf505  # reuse
    buf507 = buf500; del buf500  # reuse
    buf508 = buf499; del buf499  # reuse
    buf510 = buf450; del buf450  # reuse
    cpp_fused_add_mul_native_layer_norm_145(c_void_p(buf506.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(arg35_1.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(arg36_1.data_ptr()), c_void_p(arg368_1.data_ptr()), c_void_p(arg369_1.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(buf508.data_ptr()), c_void_p(buf510.data_ptr()))
    del arg35_1
    del arg368_1
    del arg369_1
    del arg36_1
    buf511 = buf483; del buf483  # reuse
    # Source Nodes: [getattr_l__mod___blocks___18___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg371_1, reinterpret_tensor(buf510, (4608, 768), (768, 1), 0), reinterpret_tensor(arg370_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf511)
    del arg370_1
    del arg371_1
    buf512 = reinterpret_tensor(buf510, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf510  # reuse
    buf513 = reinterpret_tensor(buf498, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf498  # reuse
    cpp_fused_clone_mul_146(c_void_p(buf511.data_ptr()), c_void_p(buf512.data_ptr()), c_void_p(buf513.data_ptr()))
    buf514 = reinterpret_tensor(buf494, (128, 576, 576), (331776, 576, 1), 0); del buf494  # reuse
    # Source Nodes: [attn_90], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf512, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf513, (128, 48, 576), (27648, 576, 1), 0), out=buf514)
    buf515 = reinterpret_tensor(buf493, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf493  # reuse
    cpp_fused_clone_147(c_void_p(buf514.data_ptr()), c_void_p(buf515.data_ptr()))
    buf516 = reinterpret_tensor(buf514, (2654208, 16), (16, 1), 0); del buf514  # reuse
    # Source Nodes: [getattr_l__mod___blocks___18___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf515, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg372_1, (16, 16), (1, 16), 0), out=buf516)
    del arg372_1
    buf517 = reinterpret_tensor(buf491, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf491  # reuse
    buf518 = reinterpret_tensor(buf516, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf516  # reuse
    buf519 = reinterpret_tensor(buf489, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf489  # reuse
    buf520 = reinterpret_tensor(buf518, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf518  # reuse
    cpp_fused__softmax_clone_148(c_void_p(buf520.data_ptr()), c_void_p(arg373_1.data_ptr()), c_void_p(buf517.data_ptr()), c_void_p(buf519.data_ptr()))
    del arg373_1
    buf521 = reinterpret_tensor(buf515, (2654208, 16), (16, 1), 0); del buf515  # reuse
    # Source Nodes: [getattr_l__mod___blocks___18___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf520, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg374_1, (16, 16), (1, 16), 0), out=buf521)
    del arg374_1
    buf522 = reinterpret_tensor(buf520, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf520  # reuse
    buf523 = reinterpret_tensor(buf513, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf513  # reuse
    cpp_fused_clone_149(c_void_p(buf521.data_ptr()), c_void_p(arg375_1.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf523.data_ptr()))
    del arg375_1
    buf524 = reinterpret_tensor(buf512, (128, 576, 48), (27648, 48, 1), 0); del buf512  # reuse
    # Source Nodes: [matmul_37], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf522, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf523, (128, 576, 48), (27648, 48, 1), 0), out=buf524)
    buf525 = reinterpret_tensor(buf523, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf523  # reuse
    cpp_fused_clone_150(c_void_p(buf524.data_ptr()), c_void_p(buf525.data_ptr()))
    buf526 = reinterpret_tensor(buf524, (4608, 768), (768, 1), 0); del buf524  # reuse
    # Source Nodes: [x_205], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg377_1, reinterpret_tensor(buf525, (4608, 768), (768, 1), 0), reinterpret_tensor(arg376_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf526)
    del arg376_1
    del arg377_1
    buf527 = buf508; del buf508  # reuse
    buf528 = buf507; del buf507  # reuse
    buf530 = reinterpret_tensor(buf525, (8, 576, 768), (442368, 768, 1), 0); del buf525  # reuse
    cpp_fused_add_mul_native_layer_norm_151(c_void_p(buf506.data_ptr()), c_void_p(arg37_1.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(arg378_1.data_ptr()), c_void_p(arg379_1.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(buf528.data_ptr()), c_void_p(buf530.data_ptr()))
    del arg378_1
    del arg379_1
    buf531 = reinterpret_tensor(buf504, (4608, 3072), (3072, 1), 0); del buf504  # reuse
    # Source Nodes: [x_208], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg381_1, reinterpret_tensor(buf530, (4608, 768), (768, 1), 0), reinterpret_tensor(arg380_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf531)
    del arg380_1
    del arg381_1
    buf532 = reinterpret_tensor(buf531, (8, 576, 3072), (1769472, 3072, 1), 0); del buf531  # reuse
    cpp_fused_gelu_152(c_void_p(buf532.data_ptr()))
    buf533 = reinterpret_tensor(buf530, (4608, 768), (768, 1), 0); del buf530  # reuse
    # Source Nodes: [x_212], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg383_1, reinterpret_tensor(buf532, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg382_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf533)
    del arg382_1
    del arg383_1
    buf534 = reinterpret_tensor(buf533, (8, 576, 768), (442368, 768, 1), 0); del buf533  # reuse
    buf535 = buf528; del buf528  # reuse
    buf536 = buf527; del buf527  # reuse
    buf538 = buf478; del buf478  # reuse
    cpp_fused_add_mul_native_layer_norm_153(c_void_p(buf534.data_ptr()), c_void_p(buf506.data_ptr()), c_void_p(arg37_1.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(arg38_1.data_ptr()), c_void_p(arg384_1.data_ptr()), c_void_p(arg385_1.data_ptr()), c_void_p(buf535.data_ptr()), c_void_p(buf536.data_ptr()), c_void_p(buf538.data_ptr()))
    del arg37_1
    del arg384_1
    del arg385_1
    del arg38_1
    buf539 = buf511; del buf511  # reuse
    # Source Nodes: [getattr_l__mod___blocks___19___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg387_1, reinterpret_tensor(buf538, (4608, 768), (768, 1), 0), reinterpret_tensor(arg386_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf539)
    del arg386_1
    del arg387_1
    buf540 = reinterpret_tensor(buf538, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf538  # reuse
    buf541 = reinterpret_tensor(buf526, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf526  # reuse
    cpp_fused_clone_mul_154(c_void_p(buf539.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf541.data_ptr()))
    buf542 = reinterpret_tensor(buf522, (128, 576, 576), (331776, 576, 1), 0); del buf522  # reuse
    # Source Nodes: [attn_95], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf540, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf541, (128, 48, 576), (27648, 576, 1), 0), out=buf542)
    buf543 = reinterpret_tensor(buf521, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf521  # reuse
    cpp_fused_clone_155(c_void_p(buf542.data_ptr()), c_void_p(buf543.data_ptr()))
    buf544 = reinterpret_tensor(buf542, (2654208, 16), (16, 1), 0); del buf542  # reuse
    # Source Nodes: [getattr_l__mod___blocks___19___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf543, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg388_1, (16, 16), (1, 16), 0), out=buf544)
    del arg388_1
    buf545 = reinterpret_tensor(buf519, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf519  # reuse
    buf546 = reinterpret_tensor(buf544, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf544  # reuse
    buf547 = reinterpret_tensor(buf517, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf517  # reuse
    buf548 = reinterpret_tensor(buf546, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf546  # reuse
    cpp_fused__softmax_clone_156(c_void_p(buf548.data_ptr()), c_void_p(arg389_1.data_ptr()), c_void_p(buf545.data_ptr()), c_void_p(buf547.data_ptr()))
    del arg389_1
    buf549 = reinterpret_tensor(buf543, (2654208, 16), (16, 1), 0); del buf543  # reuse
    # Source Nodes: [getattr_l__mod___blocks___19___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf548, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg390_1, (16, 16), (1, 16), 0), out=buf549)
    del arg390_1
    buf550 = reinterpret_tensor(buf548, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf548  # reuse
    buf551 = reinterpret_tensor(buf541, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf541  # reuse
    cpp_fused_clone_157(c_void_p(buf549.data_ptr()), c_void_p(arg391_1.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(buf551.data_ptr()))
    del arg391_1
    buf552 = reinterpret_tensor(buf540, (128, 576, 48), (27648, 48, 1), 0); del buf540  # reuse
    # Source Nodes: [matmul_39], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf550, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf551, (128, 576, 48), (27648, 48, 1), 0), out=buf552)
    buf553 = reinterpret_tensor(buf551, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf551  # reuse
    cpp_fused_clone_158(c_void_p(buf552.data_ptr()), c_void_p(buf553.data_ptr()))
    buf554 = reinterpret_tensor(buf552, (4608, 768), (768, 1), 0); del buf552  # reuse
    # Source Nodes: [x_216], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg393_1, reinterpret_tensor(buf553, (4608, 768), (768, 1), 0), reinterpret_tensor(arg392_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf554)
    del arg392_1
    del arg393_1
    buf555 = buf536; del buf536  # reuse
    buf556 = buf535; del buf535  # reuse
    buf558 = reinterpret_tensor(buf553, (8, 576, 768), (442368, 768, 1), 0); del buf553  # reuse
    cpp_fused_add_mul_native_layer_norm_159(c_void_p(buf534.data_ptr()), c_void_p(arg39_1.data_ptr()), c_void_p(buf554.data_ptr()), c_void_p(arg394_1.data_ptr()), c_void_p(arg395_1.data_ptr()), c_void_p(buf555.data_ptr()), c_void_p(buf556.data_ptr()), c_void_p(buf558.data_ptr()))
    del arg394_1
    del arg395_1
    buf559 = reinterpret_tensor(buf532, (4608, 3072), (3072, 1), 0); del buf532  # reuse
    # Source Nodes: [x_219], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg397_1, reinterpret_tensor(buf558, (4608, 768), (768, 1), 0), reinterpret_tensor(arg396_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf559)
    del arg396_1
    del arg397_1
    buf560 = reinterpret_tensor(buf559, (8, 576, 3072), (1769472, 3072, 1), 0); del buf559  # reuse
    cpp_fused_gelu_160(c_void_p(buf560.data_ptr()))
    buf561 = reinterpret_tensor(buf558, (4608, 768), (768, 1), 0); del buf558  # reuse
    # Source Nodes: [x_223], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg399_1, reinterpret_tensor(buf560, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg398_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf561)
    del arg398_1
    del arg399_1
    buf562 = reinterpret_tensor(buf561, (8, 576, 768), (442368, 768, 1), 0); del buf561  # reuse
    buf563 = buf556; del buf556  # reuse
    buf564 = buf555; del buf555  # reuse
    buf566 = buf506; del buf506  # reuse
    cpp_fused_add_mul_native_layer_norm_161(c_void_p(buf562.data_ptr()), c_void_p(buf534.data_ptr()), c_void_p(arg39_1.data_ptr()), c_void_p(buf554.data_ptr()), c_void_p(arg40_1.data_ptr()), c_void_p(arg400_1.data_ptr()), c_void_p(arg401_1.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf564.data_ptr()), c_void_p(buf566.data_ptr()))
    del arg39_1
    del arg400_1
    del arg401_1
    del arg40_1
    buf567 = buf539; del buf539  # reuse
    # Source Nodes: [getattr_l__mod___blocks___20___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg403_1, reinterpret_tensor(buf566, (4608, 768), (768, 1), 0), reinterpret_tensor(arg402_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf567)
    del arg402_1
    del arg403_1
    buf568 = reinterpret_tensor(buf566, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf566  # reuse
    buf569 = reinterpret_tensor(buf554, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf554  # reuse
    cpp_fused_clone_mul_162(c_void_p(buf567.data_ptr()), c_void_p(buf568.data_ptr()), c_void_p(buf569.data_ptr()))
    buf570 = reinterpret_tensor(buf550, (128, 576, 576), (331776, 576, 1), 0); del buf550  # reuse
    # Source Nodes: [attn_100], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf568, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf569, (128, 48, 576), (27648, 576, 1), 0), out=buf570)
    buf571 = reinterpret_tensor(buf549, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf549  # reuse
    cpp_fused_clone_163(c_void_p(buf570.data_ptr()), c_void_p(buf571.data_ptr()))
    buf572 = reinterpret_tensor(buf570, (2654208, 16), (16, 1), 0); del buf570  # reuse
    # Source Nodes: [getattr_l__mod___blocks___20___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf571, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg404_1, (16, 16), (1, 16), 0), out=buf572)
    del arg404_1
    buf573 = reinterpret_tensor(buf547, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf547  # reuse
    buf574 = reinterpret_tensor(buf572, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf572  # reuse
    buf575 = reinterpret_tensor(buf545, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf545  # reuse
    buf576 = reinterpret_tensor(buf574, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf574  # reuse
    cpp_fused__softmax_clone_164(c_void_p(buf576.data_ptr()), c_void_p(arg405_1.data_ptr()), c_void_p(buf573.data_ptr()), c_void_p(buf575.data_ptr()))
    del arg405_1
    buf577 = reinterpret_tensor(buf571, (2654208, 16), (16, 1), 0); del buf571  # reuse
    # Source Nodes: [getattr_l__mod___blocks___20___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf576, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg406_1, (16, 16), (1, 16), 0), out=buf577)
    del arg406_1
    buf578 = reinterpret_tensor(buf576, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf576  # reuse
    buf579 = reinterpret_tensor(buf569, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf569  # reuse
    cpp_fused_clone_165(c_void_p(buf577.data_ptr()), c_void_p(arg407_1.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(buf579.data_ptr()))
    del arg407_1
    buf580 = reinterpret_tensor(buf568, (128, 576, 48), (27648, 48, 1), 0); del buf568  # reuse
    # Source Nodes: [matmul_41], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf578, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf579, (128, 576, 48), (27648, 48, 1), 0), out=buf580)
    buf581 = reinterpret_tensor(buf579, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf579  # reuse
    cpp_fused_clone_166(c_void_p(buf580.data_ptr()), c_void_p(buf581.data_ptr()))
    buf582 = reinterpret_tensor(buf580, (4608, 768), (768, 1), 0); del buf580  # reuse
    # Source Nodes: [x_227], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg409_1, reinterpret_tensor(buf581, (4608, 768), (768, 1), 0), reinterpret_tensor(arg408_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf582)
    del arg408_1
    del arg409_1
    buf583 = buf564; del buf564  # reuse
    buf584 = buf563; del buf563  # reuse
    buf586 = reinterpret_tensor(buf581, (8, 576, 768), (442368, 768, 1), 0); del buf581  # reuse
    cpp_fused_add_mul_native_layer_norm_167(c_void_p(buf562.data_ptr()), c_void_p(arg41_1.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(arg410_1.data_ptr()), c_void_p(arg411_1.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(buf584.data_ptr()), c_void_p(buf586.data_ptr()))
    del arg410_1
    del arg411_1
    buf587 = reinterpret_tensor(buf560, (4608, 3072), (3072, 1), 0); del buf560  # reuse
    # Source Nodes: [x_230], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg413_1, reinterpret_tensor(buf586, (4608, 768), (768, 1), 0), reinterpret_tensor(arg412_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf587)
    del arg412_1
    del arg413_1
    buf588 = reinterpret_tensor(buf587, (8, 576, 3072), (1769472, 3072, 1), 0); del buf587  # reuse
    cpp_fused_gelu_168(c_void_p(buf588.data_ptr()))
    buf589 = reinterpret_tensor(buf586, (4608, 768), (768, 1), 0); del buf586  # reuse
    # Source Nodes: [x_234], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg415_1, reinterpret_tensor(buf588, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg414_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf589)
    del arg414_1
    del arg415_1
    buf590 = reinterpret_tensor(buf589, (8, 576, 768), (442368, 768, 1), 0); del buf589  # reuse
    buf591 = buf584; del buf584  # reuse
    buf592 = buf583; del buf583  # reuse
    buf594 = buf534; del buf534  # reuse
    cpp_fused_add_mul_native_layer_norm_169(c_void_p(buf590.data_ptr()), c_void_p(buf562.data_ptr()), c_void_p(arg41_1.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(arg42_1.data_ptr()), c_void_p(arg416_1.data_ptr()), c_void_p(arg417_1.data_ptr()), c_void_p(buf591.data_ptr()), c_void_p(buf592.data_ptr()), c_void_p(buf594.data_ptr()))
    del arg416_1
    del arg417_1
    del arg41_1
    del arg42_1
    buf595 = buf567; del buf567  # reuse
    # Source Nodes: [getattr_l__mod___blocks___21___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg419_1, reinterpret_tensor(buf594, (4608, 768), (768, 1), 0), reinterpret_tensor(arg418_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf595)
    del arg418_1
    del arg419_1
    buf596 = reinterpret_tensor(buf594, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf594  # reuse
    buf597 = reinterpret_tensor(buf582, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf582  # reuse
    cpp_fused_clone_mul_170(c_void_p(buf595.data_ptr()), c_void_p(buf596.data_ptr()), c_void_p(buf597.data_ptr()))
    buf598 = reinterpret_tensor(buf578, (128, 576, 576), (331776, 576, 1), 0); del buf578  # reuse
    # Source Nodes: [attn_105], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf596, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf597, (128, 48, 576), (27648, 576, 1), 0), out=buf598)
    buf599 = reinterpret_tensor(buf577, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf577  # reuse
    cpp_fused_clone_171(c_void_p(buf598.data_ptr()), c_void_p(buf599.data_ptr()))
    buf600 = reinterpret_tensor(buf598, (2654208, 16), (16, 1), 0); del buf598  # reuse
    # Source Nodes: [getattr_l__mod___blocks___21___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf599, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg420_1, (16, 16), (1, 16), 0), out=buf600)
    del arg420_1
    buf601 = reinterpret_tensor(buf575, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf575  # reuse
    buf602 = reinterpret_tensor(buf600, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf600  # reuse
    buf603 = reinterpret_tensor(buf573, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf573  # reuse
    buf604 = reinterpret_tensor(buf602, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf602  # reuse
    cpp_fused__softmax_clone_172(c_void_p(buf604.data_ptr()), c_void_p(arg421_1.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(buf603.data_ptr()))
    del arg421_1
    buf605 = reinterpret_tensor(buf599, (2654208, 16), (16, 1), 0); del buf599  # reuse
    # Source Nodes: [getattr_l__mod___blocks___21___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf604, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg422_1, (16, 16), (1, 16), 0), out=buf605)
    del arg422_1
    buf606 = reinterpret_tensor(buf604, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf604  # reuse
    buf607 = reinterpret_tensor(buf597, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf597  # reuse
    cpp_fused_clone_173(c_void_p(buf605.data_ptr()), c_void_p(arg423_1.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(buf607.data_ptr()))
    del arg423_1
    buf608 = reinterpret_tensor(buf596, (128, 576, 48), (27648, 48, 1), 0); del buf596  # reuse
    # Source Nodes: [matmul_43], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf606, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf607, (128, 576, 48), (27648, 48, 1), 0), out=buf608)
    buf609 = reinterpret_tensor(buf607, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf607  # reuse
    cpp_fused_clone_174(c_void_p(buf608.data_ptr()), c_void_p(buf609.data_ptr()))
    buf610 = reinterpret_tensor(buf608, (4608, 768), (768, 1), 0); del buf608  # reuse
    # Source Nodes: [x_238], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg425_1, reinterpret_tensor(buf609, (4608, 768), (768, 1), 0), reinterpret_tensor(arg424_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf610)
    del arg424_1
    del arg425_1
    buf611 = buf592; del buf592  # reuse
    buf612 = buf591; del buf591  # reuse
    buf614 = reinterpret_tensor(buf609, (8, 576, 768), (442368, 768, 1), 0); del buf609  # reuse
    cpp_fused_add_mul_native_layer_norm_175(c_void_p(buf590.data_ptr()), c_void_p(arg43_1.data_ptr()), c_void_p(buf610.data_ptr()), c_void_p(arg426_1.data_ptr()), c_void_p(arg427_1.data_ptr()), c_void_p(buf611.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(buf614.data_ptr()))
    del arg426_1
    del arg427_1
    buf615 = reinterpret_tensor(buf588, (4608, 3072), (3072, 1), 0); del buf588  # reuse
    # Source Nodes: [x_241], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg429_1, reinterpret_tensor(buf614, (4608, 768), (768, 1), 0), reinterpret_tensor(arg428_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf615)
    del arg428_1
    del arg429_1
    buf616 = reinterpret_tensor(buf615, (8, 576, 3072), (1769472, 3072, 1), 0); del buf615  # reuse
    cpp_fused_gelu_176(c_void_p(buf616.data_ptr()))
    buf617 = reinterpret_tensor(buf614, (4608, 768), (768, 1), 0); del buf614  # reuse
    # Source Nodes: [x_245], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg431_1, reinterpret_tensor(buf616, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg430_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf617)
    del arg430_1
    del arg431_1
    buf618 = reinterpret_tensor(buf617, (8, 576, 768), (442368, 768, 1), 0); del buf617  # reuse
    buf619 = buf612; del buf612  # reuse
    buf620 = buf611; del buf611  # reuse
    buf622 = buf562; del buf562  # reuse
    cpp_fused_add_mul_native_layer_norm_177(c_void_p(buf618.data_ptr()), c_void_p(buf590.data_ptr()), c_void_p(arg43_1.data_ptr()), c_void_p(buf610.data_ptr()), c_void_p(arg44_1.data_ptr()), c_void_p(arg432_1.data_ptr()), c_void_p(arg433_1.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf620.data_ptr()), c_void_p(buf622.data_ptr()))
    del arg432_1
    del arg433_1
    del arg43_1
    del arg44_1
    buf623 = buf595; del buf595  # reuse
    # Source Nodes: [getattr_l__mod___blocks___22___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg435_1, reinterpret_tensor(buf622, (4608, 768), (768, 1), 0), reinterpret_tensor(arg434_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf623)
    del arg434_1
    del arg435_1
    buf624 = reinterpret_tensor(buf622, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf622  # reuse
    buf625 = reinterpret_tensor(buf610, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf610  # reuse
    cpp_fused_clone_mul_178(c_void_p(buf623.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(buf625.data_ptr()))
    buf626 = reinterpret_tensor(buf606, (128, 576, 576), (331776, 576, 1), 0); del buf606  # reuse
    # Source Nodes: [attn_110], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf624, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf625, (128, 48, 576), (27648, 576, 1), 0), out=buf626)
    buf627 = reinterpret_tensor(buf605, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf605  # reuse
    cpp_fused_clone_179(c_void_p(buf626.data_ptr()), c_void_p(buf627.data_ptr()))
    buf628 = reinterpret_tensor(buf626, (2654208, 16), (16, 1), 0); del buf626  # reuse
    # Source Nodes: [getattr_l__mod___blocks___22___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf627, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg436_1, (16, 16), (1, 16), 0), out=buf628)
    del arg436_1
    buf629 = reinterpret_tensor(buf603, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf603  # reuse
    buf630 = reinterpret_tensor(buf628, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf628  # reuse
    buf631 = reinterpret_tensor(buf601, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf601  # reuse
    buf632 = reinterpret_tensor(buf630, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf630  # reuse
    cpp_fused__softmax_clone_180(c_void_p(buf632.data_ptr()), c_void_p(arg437_1.data_ptr()), c_void_p(buf629.data_ptr()), c_void_p(buf631.data_ptr()))
    del arg437_1
    buf633 = reinterpret_tensor(buf627, (2654208, 16), (16, 1), 0); del buf627  # reuse
    # Source Nodes: [getattr_l__mod___blocks___22___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf632, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg438_1, (16, 16), (1, 16), 0), out=buf633)
    del arg438_1
    buf634 = reinterpret_tensor(buf632, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf632  # reuse
    buf635 = reinterpret_tensor(buf625, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf625  # reuse
    cpp_fused_clone_181(c_void_p(buf633.data_ptr()), c_void_p(arg439_1.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(buf635.data_ptr()))
    del arg439_1
    buf636 = reinterpret_tensor(buf624, (128, 576, 48), (27648, 48, 1), 0); del buf624  # reuse
    # Source Nodes: [matmul_45], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf634, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf635, (128, 576, 48), (27648, 48, 1), 0), out=buf636)
    buf637 = reinterpret_tensor(buf635, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf635  # reuse
    cpp_fused_clone_182(c_void_p(buf636.data_ptr()), c_void_p(buf637.data_ptr()))
    buf638 = reinterpret_tensor(buf636, (4608, 768), (768, 1), 0); del buf636  # reuse
    # Source Nodes: [x_249], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg441_1, reinterpret_tensor(buf637, (4608, 768), (768, 1), 0), reinterpret_tensor(arg440_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf638)
    del arg440_1
    del arg441_1
    buf639 = buf620; del buf620  # reuse
    buf640 = buf619; del buf619  # reuse
    buf642 = reinterpret_tensor(buf637, (8, 576, 768), (442368, 768, 1), 0); del buf637  # reuse
    cpp_fused_add_mul_native_layer_norm_183(c_void_p(buf618.data_ptr()), c_void_p(arg45_1.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(arg442_1.data_ptr()), c_void_p(arg443_1.data_ptr()), c_void_p(buf639.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(buf642.data_ptr()))
    del arg442_1
    del arg443_1
    buf643 = reinterpret_tensor(buf616, (4608, 3072), (3072, 1), 0); del buf616  # reuse
    # Source Nodes: [x_252], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg445_1, reinterpret_tensor(buf642, (4608, 768), (768, 1), 0), reinterpret_tensor(arg444_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf643)
    del arg444_1
    del arg445_1
    buf644 = reinterpret_tensor(buf643, (8, 576, 3072), (1769472, 3072, 1), 0); del buf643  # reuse
    cpp_fused_gelu_184(c_void_p(buf644.data_ptr()))
    buf645 = reinterpret_tensor(buf642, (4608, 768), (768, 1), 0); del buf642  # reuse
    # Source Nodes: [x_256], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg447_1, reinterpret_tensor(buf644, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg446_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf645)
    del arg446_1
    del arg447_1
    buf646 = reinterpret_tensor(buf645, (8, 576, 768), (442368, 768, 1), 0); del buf645  # reuse
    buf647 = buf640; del buf640  # reuse
    buf648 = buf639; del buf639  # reuse
    buf650 = buf590; del buf590  # reuse
    cpp_fused_add_mul_native_layer_norm_185(c_void_p(buf646.data_ptr()), c_void_p(buf618.data_ptr()), c_void_p(arg45_1.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(arg46_1.data_ptr()), c_void_p(arg448_1.data_ptr()), c_void_p(arg449_1.data_ptr()), c_void_p(buf647.data_ptr()), c_void_p(buf648.data_ptr()), c_void_p(buf650.data_ptr()))
    del arg448_1
    del arg449_1
    del arg45_1
    del arg46_1
    buf651 = buf623; del buf623  # reuse
    # Source Nodes: [getattr_l__mod___blocks___23___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg451_1, reinterpret_tensor(buf650, (4608, 768), (768, 1), 0), reinterpret_tensor(arg450_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf651)
    del arg450_1
    del arg451_1
    buf652 = reinterpret_tensor(buf650, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf650  # reuse
    buf653 = reinterpret_tensor(buf638, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf638  # reuse
    cpp_fused_clone_mul_186(c_void_p(buf651.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(buf653.data_ptr()))
    buf654 = reinterpret_tensor(buf634, (128, 576, 576), (331776, 576, 1), 0); del buf634  # reuse
    # Source Nodes: [attn_115], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf652, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf653, (128, 48, 576), (27648, 576, 1), 0), out=buf654)
    buf655 = reinterpret_tensor(buf633, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf633  # reuse
    cpp_fused_clone_187(c_void_p(buf654.data_ptr()), c_void_p(buf655.data_ptr()))
    buf656 = reinterpret_tensor(buf654, (2654208, 16), (16, 1), 0); del buf654  # reuse
    # Source Nodes: [getattr_l__mod___blocks___23___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf655, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg452_1, (16, 16), (1, 16), 0), out=buf656)
    del arg452_1
    buf657 = reinterpret_tensor(buf631, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf631  # reuse
    buf658 = reinterpret_tensor(buf656, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf656  # reuse
    buf659 = reinterpret_tensor(buf629, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf629  # reuse
    buf660 = reinterpret_tensor(buf658, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf658  # reuse
    cpp_fused__softmax_clone_188(c_void_p(buf660.data_ptr()), c_void_p(arg453_1.data_ptr()), c_void_p(buf657.data_ptr()), c_void_p(buf659.data_ptr()))
    del arg453_1
    buf661 = reinterpret_tensor(buf655, (2654208, 16), (16, 1), 0); del buf655  # reuse
    # Source Nodes: [getattr_l__mod___blocks___23___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf660, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg454_1, (16, 16), (1, 16), 0), out=buf661)
    del arg454_1
    buf662 = reinterpret_tensor(buf660, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf660  # reuse
    buf663 = reinterpret_tensor(buf653, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf653  # reuse
    cpp_fused_clone_189(c_void_p(buf661.data_ptr()), c_void_p(arg455_1.data_ptr()), c_void_p(buf651.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf663.data_ptr()))
    del arg455_1
    buf664 = reinterpret_tensor(buf652, (128, 576, 48), (27648, 48, 1), 0); del buf652  # reuse
    # Source Nodes: [matmul_47], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf662, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf663, (128, 576, 48), (27648, 48, 1), 0), out=buf664)
    buf665 = reinterpret_tensor(buf663, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf663  # reuse
    cpp_fused_clone_190(c_void_p(buf664.data_ptr()), c_void_p(buf665.data_ptr()))
    buf666 = reinterpret_tensor(buf664, (4608, 768), (768, 1), 0); del buf664  # reuse
    # Source Nodes: [x_260], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg457_1, reinterpret_tensor(buf665, (4608, 768), (768, 1), 0), reinterpret_tensor(arg456_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf666)
    del arg456_1
    del arg457_1
    buf667 = buf648; del buf648  # reuse
    buf668 = buf647; del buf647  # reuse
    buf670 = reinterpret_tensor(buf665, (8, 576, 768), (442368, 768, 1), 0); del buf665  # reuse
    cpp_fused_add_mul_native_layer_norm_191(c_void_p(buf646.data_ptr()), c_void_p(arg47_1.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(arg458_1.data_ptr()), c_void_p(arg459_1.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf670.data_ptr()))
    del arg458_1
    del arg459_1
    buf671 = reinterpret_tensor(buf644, (4608, 3072), (3072, 1), 0); del buf644  # reuse
    # Source Nodes: [x_263], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg461_1, reinterpret_tensor(buf670, (4608, 768), (768, 1), 0), reinterpret_tensor(arg460_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf671)
    del arg460_1
    del arg461_1
    buf672 = reinterpret_tensor(buf671, (8, 576, 3072), (1769472, 3072, 1), 0); del buf671  # reuse
    cpp_fused_gelu_192(c_void_p(buf672.data_ptr()))
    buf673 = reinterpret_tensor(buf670, (4608, 768), (768, 1), 0); del buf670  # reuse
    # Source Nodes: [x_267], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg463_1, reinterpret_tensor(buf672, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg462_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf673)
    del arg462_1
    del arg463_1
    buf674 = reinterpret_tensor(buf673, (8, 576, 768), (442368, 768, 1), 0); del buf673  # reuse
    buf675 = buf668; del buf668  # reuse
    buf676 = buf667; del buf667  # reuse
    buf678 = buf618; del buf618  # reuse
    cpp_fused_add_mul_native_layer_norm_193(c_void_p(buf674.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(arg47_1.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(arg48_1.data_ptr()), c_void_p(arg464_1.data_ptr()), c_void_p(arg465_1.data_ptr()), c_void_p(buf675.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(buf678.data_ptr()))
    del arg464_1
    del arg465_1
    del arg47_1
    del arg48_1
    buf679 = buf651; del buf651  # reuse
    # Source Nodes: [getattr_l__mod___blocks___24___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg467_1, reinterpret_tensor(buf678, (4608, 768), (768, 1), 0), reinterpret_tensor(arg466_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf679)
    del arg466_1
    del arg467_1
    buf680 = reinterpret_tensor(buf678, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf678  # reuse
    buf681 = reinterpret_tensor(buf666, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf666  # reuse
    cpp_fused_clone_mul_194(c_void_p(buf679.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(buf681.data_ptr()))
    buf682 = reinterpret_tensor(buf662, (128, 576, 576), (331776, 576, 1), 0); del buf662  # reuse
    # Source Nodes: [attn_120], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf680, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf681, (128, 48, 576), (27648, 576, 1), 0), out=buf682)
    buf683 = reinterpret_tensor(buf661, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf661  # reuse
    cpp_fused_clone_195(c_void_p(buf682.data_ptr()), c_void_p(buf683.data_ptr()))
    buf684 = reinterpret_tensor(buf682, (2654208, 16), (16, 1), 0); del buf682  # reuse
    # Source Nodes: [getattr_l__mod___blocks___24___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf683, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg468_1, (16, 16), (1, 16), 0), out=buf684)
    del arg468_1
    buf685 = reinterpret_tensor(buf659, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf659  # reuse
    buf686 = reinterpret_tensor(buf684, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf684  # reuse
    buf687 = reinterpret_tensor(buf657, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf657  # reuse
    buf688 = reinterpret_tensor(buf686, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf686  # reuse
    cpp_fused__softmax_clone_196(c_void_p(buf688.data_ptr()), c_void_p(arg469_1.data_ptr()), c_void_p(buf685.data_ptr()), c_void_p(buf687.data_ptr()))
    del arg469_1
    buf689 = reinterpret_tensor(buf683, (2654208, 16), (16, 1), 0); del buf683  # reuse
    # Source Nodes: [getattr_l__mod___blocks___24___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf688, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg470_1, (16, 16), (1, 16), 0), out=buf689)
    del arg470_1
    buf690 = reinterpret_tensor(buf688, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf688  # reuse
    buf691 = reinterpret_tensor(buf681, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf681  # reuse
    cpp_fused_clone_197(c_void_p(buf689.data_ptr()), c_void_p(arg471_1.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(buf690.data_ptr()), c_void_p(buf691.data_ptr()))
    del arg471_1
    buf692 = reinterpret_tensor(buf680, (128, 576, 48), (27648, 48, 1), 0); del buf680  # reuse
    # Source Nodes: [matmul_49], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf690, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf691, (128, 576, 48), (27648, 48, 1), 0), out=buf692)
    buf693 = reinterpret_tensor(buf691, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf691  # reuse
    cpp_fused_clone_198(c_void_p(buf692.data_ptr()), c_void_p(buf693.data_ptr()))
    buf694 = reinterpret_tensor(buf692, (4608, 768), (768, 1), 0); del buf692  # reuse
    # Source Nodes: [x_271], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg473_1, reinterpret_tensor(buf693, (4608, 768), (768, 1), 0), reinterpret_tensor(arg472_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf694)
    del arg472_1
    del arg473_1
    buf695 = buf676; del buf676  # reuse
    buf696 = buf675; del buf675  # reuse
    buf698 = reinterpret_tensor(buf693, (8, 576, 768), (442368, 768, 1), 0); del buf693  # reuse
    cpp_fused_add_mul_native_layer_norm_199(c_void_p(buf674.data_ptr()), c_void_p(arg49_1.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(arg474_1.data_ptr()), c_void_p(arg475_1.data_ptr()), c_void_p(buf695.data_ptr()), c_void_p(buf696.data_ptr()), c_void_p(buf698.data_ptr()))
    del arg474_1
    del arg475_1
    buf699 = reinterpret_tensor(buf672, (4608, 3072), (3072, 1), 0); del buf672  # reuse
    # Source Nodes: [x_274], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg477_1, reinterpret_tensor(buf698, (4608, 768), (768, 1), 0), reinterpret_tensor(arg476_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf699)
    del arg476_1
    del arg477_1
    buf700 = reinterpret_tensor(buf699, (8, 576, 3072), (1769472, 3072, 1), 0); del buf699  # reuse
    cpp_fused_gelu_200(c_void_p(buf700.data_ptr()))
    buf701 = reinterpret_tensor(buf698, (4608, 768), (768, 1), 0); del buf698  # reuse
    # Source Nodes: [x_278], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg479_1, reinterpret_tensor(buf700, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg478_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf701)
    del arg478_1
    del arg479_1
    buf702 = reinterpret_tensor(buf701, (8, 576, 768), (442368, 768, 1), 0); del buf701  # reuse
    buf703 = buf696; del buf696  # reuse
    buf704 = buf695; del buf695  # reuse
    buf706 = buf646; del buf646  # reuse
    cpp_fused_add_mul_native_layer_norm_201(c_void_p(buf702.data_ptr()), c_void_p(buf674.data_ptr()), c_void_p(arg49_1.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(arg50_1.data_ptr()), c_void_p(arg480_1.data_ptr()), c_void_p(arg481_1.data_ptr()), c_void_p(buf703.data_ptr()), c_void_p(buf704.data_ptr()), c_void_p(buf706.data_ptr()))
    del arg480_1
    del arg481_1
    del arg49_1
    del arg50_1
    buf707 = buf679; del buf679  # reuse
    # Source Nodes: [getattr_l__mod___blocks___25___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg483_1, reinterpret_tensor(buf706, (4608, 768), (768, 1), 0), reinterpret_tensor(arg482_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf707)
    del arg482_1
    del arg483_1
    buf708 = reinterpret_tensor(buf706, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf706  # reuse
    buf709 = reinterpret_tensor(buf694, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf694  # reuse
    cpp_fused_clone_mul_202(c_void_p(buf707.data_ptr()), c_void_p(buf708.data_ptr()), c_void_p(buf709.data_ptr()))
    buf710 = reinterpret_tensor(buf690, (128, 576, 576), (331776, 576, 1), 0); del buf690  # reuse
    # Source Nodes: [attn_125], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf708, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf709, (128, 48, 576), (27648, 576, 1), 0), out=buf710)
    buf711 = reinterpret_tensor(buf689, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf689  # reuse
    cpp_fused_clone_203(c_void_p(buf710.data_ptr()), c_void_p(buf711.data_ptr()))
    buf712 = reinterpret_tensor(buf710, (2654208, 16), (16, 1), 0); del buf710  # reuse
    # Source Nodes: [getattr_l__mod___blocks___25___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf711, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg484_1, (16, 16), (1, 16), 0), out=buf712)
    del arg484_1
    buf713 = reinterpret_tensor(buf687, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf687  # reuse
    buf714 = reinterpret_tensor(buf712, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf712  # reuse
    buf715 = reinterpret_tensor(buf685, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf685  # reuse
    buf716 = reinterpret_tensor(buf714, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf714  # reuse
    cpp_fused__softmax_clone_204(c_void_p(buf716.data_ptr()), c_void_p(arg485_1.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(buf715.data_ptr()))
    del arg485_1
    buf717 = reinterpret_tensor(buf711, (2654208, 16), (16, 1), 0); del buf711  # reuse
    # Source Nodes: [getattr_l__mod___blocks___25___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf716, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg486_1, (16, 16), (1, 16), 0), out=buf717)
    del arg486_1
    buf718 = reinterpret_tensor(buf716, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf716  # reuse
    buf719 = reinterpret_tensor(buf709, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf709  # reuse
    cpp_fused_clone_205(c_void_p(buf717.data_ptr()), c_void_p(arg487_1.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(buf718.data_ptr()), c_void_p(buf719.data_ptr()))
    del arg487_1
    buf720 = reinterpret_tensor(buf708, (128, 576, 48), (27648, 48, 1), 0); del buf708  # reuse
    # Source Nodes: [matmul_51], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf718, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf719, (128, 576, 48), (27648, 48, 1), 0), out=buf720)
    buf721 = reinterpret_tensor(buf719, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf719  # reuse
    cpp_fused_clone_206(c_void_p(buf720.data_ptr()), c_void_p(buf721.data_ptr()))
    buf722 = reinterpret_tensor(buf720, (4608, 768), (768, 1), 0); del buf720  # reuse
    # Source Nodes: [x_282], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg489_1, reinterpret_tensor(buf721, (4608, 768), (768, 1), 0), reinterpret_tensor(arg488_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf722)
    del arg488_1
    del arg489_1
    buf723 = buf704; del buf704  # reuse
    buf724 = buf703; del buf703  # reuse
    buf726 = reinterpret_tensor(buf721, (8, 576, 768), (442368, 768, 1), 0); del buf721  # reuse
    cpp_fused_add_mul_native_layer_norm_207(c_void_p(buf702.data_ptr()), c_void_p(arg51_1.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(arg490_1.data_ptr()), c_void_p(arg491_1.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf726.data_ptr()))
    del arg490_1
    del arg491_1
    buf727 = reinterpret_tensor(buf700, (4608, 3072), (3072, 1), 0); del buf700  # reuse
    # Source Nodes: [x_285], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg493_1, reinterpret_tensor(buf726, (4608, 768), (768, 1), 0), reinterpret_tensor(arg492_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf727)
    del arg492_1
    del arg493_1
    buf728 = reinterpret_tensor(buf727, (8, 576, 3072), (1769472, 3072, 1), 0); del buf727  # reuse
    cpp_fused_gelu_208(c_void_p(buf728.data_ptr()))
    buf729 = reinterpret_tensor(buf726, (4608, 768), (768, 1), 0); del buf726  # reuse
    # Source Nodes: [x_289], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg495_1, reinterpret_tensor(buf728, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg494_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf729)
    del arg494_1
    del arg495_1
    buf730 = reinterpret_tensor(buf729, (8, 576, 768), (442368, 768, 1), 0); del buf729  # reuse
    buf731 = buf724; del buf724  # reuse
    buf732 = buf723; del buf723  # reuse
    buf734 = buf674; del buf674  # reuse
    cpp_fused_add_mul_native_layer_norm_209(c_void_p(buf730.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(arg51_1.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(arg52_1.data_ptr()), c_void_p(arg496_1.data_ptr()), c_void_p(arg497_1.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf734.data_ptr()))
    del arg496_1
    del arg497_1
    del arg51_1
    del arg52_1
    buf735 = buf707; del buf707  # reuse
    # Source Nodes: [getattr_l__mod___blocks___26___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg499_1, reinterpret_tensor(buf734, (4608, 768), (768, 1), 0), reinterpret_tensor(arg498_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf735)
    del arg498_1
    del arg499_1
    buf736 = reinterpret_tensor(buf734, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf734  # reuse
    buf737 = reinterpret_tensor(buf722, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf722  # reuse
    cpp_fused_clone_mul_210(c_void_p(buf735.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(buf737.data_ptr()))
    buf738 = reinterpret_tensor(buf718, (128, 576, 576), (331776, 576, 1), 0); del buf718  # reuse
    # Source Nodes: [attn_130], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf736, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf737, (128, 48, 576), (27648, 576, 1), 0), out=buf738)
    buf739 = reinterpret_tensor(buf717, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf717  # reuse
    cpp_fused_clone_211(c_void_p(buf738.data_ptr()), c_void_p(buf739.data_ptr()))
    buf740 = reinterpret_tensor(buf738, (2654208, 16), (16, 1), 0); del buf738  # reuse
    # Source Nodes: [getattr_l__mod___blocks___26___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf739, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg500_1, (16, 16), (1, 16), 0), out=buf740)
    del arg500_1
    buf741 = reinterpret_tensor(buf715, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf715  # reuse
    buf742 = reinterpret_tensor(buf740, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf740  # reuse
    buf743 = reinterpret_tensor(buf713, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf713  # reuse
    buf744 = reinterpret_tensor(buf742, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf742  # reuse
    cpp_fused__softmax_clone_212(c_void_p(buf744.data_ptr()), c_void_p(arg501_1.data_ptr()), c_void_p(buf741.data_ptr()), c_void_p(buf743.data_ptr()))
    del arg501_1
    buf745 = reinterpret_tensor(buf739, (2654208, 16), (16, 1), 0); del buf739  # reuse
    # Source Nodes: [getattr_l__mod___blocks___26___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf744, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg502_1, (16, 16), (1, 16), 0), out=buf745)
    del arg502_1
    buf746 = reinterpret_tensor(buf744, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf744  # reuse
    buf747 = reinterpret_tensor(buf737, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf737  # reuse
    cpp_fused_clone_213(c_void_p(buf745.data_ptr()), c_void_p(arg503_1.data_ptr()), c_void_p(buf735.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf747.data_ptr()))
    del arg503_1
    buf748 = reinterpret_tensor(buf736, (128, 576, 48), (27648, 48, 1), 0); del buf736  # reuse
    # Source Nodes: [matmul_53], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf746, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf747, (128, 576, 48), (27648, 48, 1), 0), out=buf748)
    buf749 = reinterpret_tensor(buf747, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf747  # reuse
    cpp_fused_clone_214(c_void_p(buf748.data_ptr()), c_void_p(buf749.data_ptr()))
    buf750 = reinterpret_tensor(buf748, (4608, 768), (768, 1), 0); del buf748  # reuse
    # Source Nodes: [x_293], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg505_1, reinterpret_tensor(buf749, (4608, 768), (768, 1), 0), reinterpret_tensor(arg504_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf750)
    del arg504_1
    del arg505_1
    buf751 = buf732; del buf732  # reuse
    buf752 = buf731; del buf731  # reuse
    buf754 = reinterpret_tensor(buf749, (8, 576, 768), (442368, 768, 1), 0); del buf749  # reuse
    cpp_fused_add_mul_native_layer_norm_215(c_void_p(buf730.data_ptr()), c_void_p(arg53_1.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(arg506_1.data_ptr()), c_void_p(arg507_1.data_ptr()), c_void_p(buf751.data_ptr()), c_void_p(buf752.data_ptr()), c_void_p(buf754.data_ptr()))
    del arg506_1
    del arg507_1
    buf755 = reinterpret_tensor(buf728, (4608, 3072), (3072, 1), 0); del buf728  # reuse
    # Source Nodes: [x_296], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg509_1, reinterpret_tensor(buf754, (4608, 768), (768, 1), 0), reinterpret_tensor(arg508_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf755)
    del arg508_1
    del arg509_1
    buf756 = reinterpret_tensor(buf755, (8, 576, 3072), (1769472, 3072, 1), 0); del buf755  # reuse
    cpp_fused_gelu_216(c_void_p(buf756.data_ptr()))
    buf757 = reinterpret_tensor(buf754, (4608, 768), (768, 1), 0); del buf754  # reuse
    # Source Nodes: [x_300], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg511_1, reinterpret_tensor(buf756, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg510_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf757)
    del arg510_1
    del arg511_1
    buf758 = reinterpret_tensor(buf757, (8, 576, 768), (442368, 768, 1), 0); del buf757  # reuse
    buf759 = buf752; del buf752  # reuse
    buf760 = buf751; del buf751  # reuse
    buf762 = buf702; del buf702  # reuse
    cpp_fused_add_mul_native_layer_norm_217(c_void_p(buf758.data_ptr()), c_void_p(buf730.data_ptr()), c_void_p(arg53_1.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(arg54_1.data_ptr()), c_void_p(arg512_1.data_ptr()), c_void_p(arg513_1.data_ptr()), c_void_p(buf759.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(buf762.data_ptr()))
    del arg512_1
    del arg513_1
    del arg53_1
    del arg54_1
    buf763 = buf735; del buf735  # reuse
    # Source Nodes: [getattr_l__mod___blocks___27___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg515_1, reinterpret_tensor(buf762, (4608, 768), (768, 1), 0), reinterpret_tensor(arg514_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf763)
    del arg514_1
    del arg515_1
    buf764 = reinterpret_tensor(buf762, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf762  # reuse
    buf765 = reinterpret_tensor(buf750, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf750  # reuse
    cpp_fused_clone_mul_218(c_void_p(buf763.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf765.data_ptr()))
    buf766 = reinterpret_tensor(buf746, (128, 576, 576), (331776, 576, 1), 0); del buf746  # reuse
    # Source Nodes: [attn_135], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf764, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf765, (128, 48, 576), (27648, 576, 1), 0), out=buf766)
    buf767 = reinterpret_tensor(buf745, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf745  # reuse
    cpp_fused_clone_219(c_void_p(buf766.data_ptr()), c_void_p(buf767.data_ptr()))
    buf768 = reinterpret_tensor(buf766, (2654208, 16), (16, 1), 0); del buf766  # reuse
    # Source Nodes: [getattr_l__mod___blocks___27___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf767, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg516_1, (16, 16), (1, 16), 0), out=buf768)
    del arg516_1
    buf769 = reinterpret_tensor(buf743, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf743  # reuse
    buf770 = reinterpret_tensor(buf768, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf768  # reuse
    buf771 = reinterpret_tensor(buf741, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf741  # reuse
    buf772 = reinterpret_tensor(buf770, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf770  # reuse
    cpp_fused__softmax_clone_220(c_void_p(buf772.data_ptr()), c_void_p(arg517_1.data_ptr()), c_void_p(buf769.data_ptr()), c_void_p(buf771.data_ptr()))
    del arg517_1
    buf773 = reinterpret_tensor(buf767, (2654208, 16), (16, 1), 0); del buf767  # reuse
    # Source Nodes: [getattr_l__mod___blocks___27___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf772, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg518_1, (16, 16), (1, 16), 0), out=buf773)
    del arg518_1
    buf774 = reinterpret_tensor(buf772, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf772  # reuse
    buf775 = reinterpret_tensor(buf765, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf765  # reuse
    cpp_fused_clone_221(c_void_p(buf773.data_ptr()), c_void_p(arg519_1.data_ptr()), c_void_p(buf763.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(buf775.data_ptr()))
    del arg519_1
    buf776 = reinterpret_tensor(buf764, (128, 576, 48), (27648, 48, 1), 0); del buf764  # reuse
    # Source Nodes: [matmul_55], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf774, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf775, (128, 576, 48), (27648, 48, 1), 0), out=buf776)
    buf777 = reinterpret_tensor(buf775, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf775  # reuse
    cpp_fused_clone_222(c_void_p(buf776.data_ptr()), c_void_p(buf777.data_ptr()))
    buf778 = reinterpret_tensor(buf776, (4608, 768), (768, 1), 0); del buf776  # reuse
    # Source Nodes: [x_304], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg521_1, reinterpret_tensor(buf777, (4608, 768), (768, 1), 0), reinterpret_tensor(arg520_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf778)
    del arg520_1
    del arg521_1
    buf779 = buf760; del buf760  # reuse
    buf780 = buf759; del buf759  # reuse
    buf782 = reinterpret_tensor(buf777, (8, 576, 768), (442368, 768, 1), 0); del buf777  # reuse
    cpp_fused_add_mul_native_layer_norm_223(c_void_p(buf758.data_ptr()), c_void_p(arg55_1.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(arg522_1.data_ptr()), c_void_p(arg523_1.data_ptr()), c_void_p(buf779.data_ptr()), c_void_p(buf780.data_ptr()), c_void_p(buf782.data_ptr()))
    del arg522_1
    del arg523_1
    buf783 = reinterpret_tensor(buf756, (4608, 3072), (3072, 1), 0); del buf756  # reuse
    # Source Nodes: [x_307], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg525_1, reinterpret_tensor(buf782, (4608, 768), (768, 1), 0), reinterpret_tensor(arg524_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf783)
    del arg524_1
    del arg525_1
    buf784 = reinterpret_tensor(buf783, (8, 576, 3072), (1769472, 3072, 1), 0); del buf783  # reuse
    cpp_fused_gelu_224(c_void_p(buf784.data_ptr()))
    buf785 = reinterpret_tensor(buf782, (4608, 768), (768, 1), 0); del buf782  # reuse
    # Source Nodes: [x_311], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg527_1, reinterpret_tensor(buf784, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg526_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf785)
    del arg526_1
    del arg527_1
    buf786 = reinterpret_tensor(buf785, (8, 576, 768), (442368, 768, 1), 0); del buf785  # reuse
    buf787 = buf780; del buf780  # reuse
    buf788 = buf779; del buf779  # reuse
    buf790 = buf730; del buf730  # reuse
    cpp_fused_add_mul_native_layer_norm_225(c_void_p(buf786.data_ptr()), c_void_p(buf758.data_ptr()), c_void_p(arg55_1.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(arg56_1.data_ptr()), c_void_p(arg528_1.data_ptr()), c_void_p(arg529_1.data_ptr()), c_void_p(buf787.data_ptr()), c_void_p(buf788.data_ptr()), c_void_p(buf790.data_ptr()))
    del arg528_1
    del arg529_1
    del arg55_1
    del arg56_1
    buf791 = buf763; del buf763  # reuse
    # Source Nodes: [getattr_l__mod___blocks___28___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg531_1, reinterpret_tensor(buf790, (4608, 768), (768, 1), 0), reinterpret_tensor(arg530_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf791)
    del arg530_1
    del arg531_1
    buf792 = reinterpret_tensor(buf790, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf790  # reuse
    buf793 = reinterpret_tensor(buf778, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf778  # reuse
    cpp_fused_clone_mul_226(c_void_p(buf791.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(buf793.data_ptr()))
    buf794 = reinterpret_tensor(buf774, (128, 576, 576), (331776, 576, 1), 0); del buf774  # reuse
    # Source Nodes: [attn_140], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf792, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf793, (128, 48, 576), (27648, 576, 1), 0), out=buf794)
    buf795 = reinterpret_tensor(buf773, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf773  # reuse
    cpp_fused_clone_227(c_void_p(buf794.data_ptr()), c_void_p(buf795.data_ptr()))
    buf796 = reinterpret_tensor(buf794, (2654208, 16), (16, 1), 0); del buf794  # reuse
    # Source Nodes: [getattr_l__mod___blocks___28___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf795, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg532_1, (16, 16), (1, 16), 0), out=buf796)
    del arg532_1
    buf797 = reinterpret_tensor(buf771, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf771  # reuse
    buf798 = reinterpret_tensor(buf796, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf796  # reuse
    buf799 = reinterpret_tensor(buf769, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf769  # reuse
    buf800 = reinterpret_tensor(buf798, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf798  # reuse
    cpp_fused__softmax_clone_228(c_void_p(buf800.data_ptr()), c_void_p(arg533_1.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(buf799.data_ptr()))
    del arg533_1
    buf801 = reinterpret_tensor(buf795, (2654208, 16), (16, 1), 0); del buf795  # reuse
    # Source Nodes: [getattr_l__mod___blocks___28___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf800, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg534_1, (16, 16), (1, 16), 0), out=buf801)
    del arg534_1
    buf802 = reinterpret_tensor(buf800, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf800  # reuse
    buf803 = reinterpret_tensor(buf793, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf793  # reuse
    cpp_fused_clone_229(c_void_p(buf801.data_ptr()), c_void_p(arg535_1.data_ptr()), c_void_p(buf791.data_ptr()), c_void_p(buf802.data_ptr()), c_void_p(buf803.data_ptr()))
    del arg535_1
    buf804 = reinterpret_tensor(buf792, (128, 576, 48), (27648, 48, 1), 0); del buf792  # reuse
    # Source Nodes: [matmul_57], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf802, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf803, (128, 576, 48), (27648, 48, 1), 0), out=buf804)
    buf805 = reinterpret_tensor(buf803, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf803  # reuse
    cpp_fused_clone_230(c_void_p(buf804.data_ptr()), c_void_p(buf805.data_ptr()))
    buf806 = reinterpret_tensor(buf804, (4608, 768), (768, 1), 0); del buf804  # reuse
    # Source Nodes: [x_315], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg537_1, reinterpret_tensor(buf805, (4608, 768), (768, 1), 0), reinterpret_tensor(arg536_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf806)
    del arg536_1
    del arg537_1
    buf807 = buf788; del buf788  # reuse
    buf808 = buf787; del buf787  # reuse
    buf810 = reinterpret_tensor(buf805, (8, 576, 768), (442368, 768, 1), 0); del buf805  # reuse
    cpp_fused_add_mul_native_layer_norm_231(c_void_p(buf786.data_ptr()), c_void_p(arg57_1.data_ptr()), c_void_p(buf806.data_ptr()), c_void_p(arg538_1.data_ptr()), c_void_p(arg539_1.data_ptr()), c_void_p(buf807.data_ptr()), c_void_p(buf808.data_ptr()), c_void_p(buf810.data_ptr()))
    del arg538_1
    del arg539_1
    buf811 = reinterpret_tensor(buf784, (4608, 3072), (3072, 1), 0); del buf784  # reuse
    # Source Nodes: [x_318], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg541_1, reinterpret_tensor(buf810, (4608, 768), (768, 1), 0), reinterpret_tensor(arg540_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf811)
    del arg540_1
    del arg541_1
    buf812 = reinterpret_tensor(buf811, (8, 576, 3072), (1769472, 3072, 1), 0); del buf811  # reuse
    cpp_fused_gelu_232(c_void_p(buf812.data_ptr()))
    buf813 = reinterpret_tensor(buf810, (4608, 768), (768, 1), 0); del buf810  # reuse
    # Source Nodes: [x_322], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg543_1, reinterpret_tensor(buf812, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg542_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf813)
    del arg542_1
    del arg543_1
    buf814 = reinterpret_tensor(buf813, (8, 576, 768), (442368, 768, 1), 0); del buf813  # reuse
    buf815 = buf808; del buf808  # reuse
    buf816 = buf807; del buf807  # reuse
    buf818 = buf758; del buf758  # reuse
    cpp_fused_add_mul_native_layer_norm_233(c_void_p(buf814.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(arg57_1.data_ptr()), c_void_p(buf806.data_ptr()), c_void_p(arg58_1.data_ptr()), c_void_p(arg544_1.data_ptr()), c_void_p(arg545_1.data_ptr()), c_void_p(buf815.data_ptr()), c_void_p(buf816.data_ptr()), c_void_p(buf818.data_ptr()))
    del arg544_1
    del arg545_1
    del arg57_1
    del arg58_1
    buf819 = buf791; del buf791  # reuse
    # Source Nodes: [getattr_l__mod___blocks___29___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg547_1, reinterpret_tensor(buf818, (4608, 768), (768, 1), 0), reinterpret_tensor(arg546_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf819)
    del arg546_1
    del arg547_1
    buf820 = reinterpret_tensor(buf818, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf818  # reuse
    buf821 = reinterpret_tensor(buf806, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf806  # reuse
    cpp_fused_clone_mul_234(c_void_p(buf819.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf821.data_ptr()))
    buf822 = reinterpret_tensor(buf802, (128, 576, 576), (331776, 576, 1), 0); del buf802  # reuse
    # Source Nodes: [attn_145], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf820, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf821, (128, 48, 576), (27648, 576, 1), 0), out=buf822)
    buf823 = reinterpret_tensor(buf801, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf801  # reuse
    cpp_fused_clone_235(c_void_p(buf822.data_ptr()), c_void_p(buf823.data_ptr()))
    buf824 = reinterpret_tensor(buf822, (2654208, 16), (16, 1), 0); del buf822  # reuse
    # Source Nodes: [getattr_l__mod___blocks___29___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf823, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg548_1, (16, 16), (1, 16), 0), out=buf824)
    del arg548_1
    buf825 = reinterpret_tensor(buf799, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf799  # reuse
    buf826 = reinterpret_tensor(buf824, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf824  # reuse
    buf827 = reinterpret_tensor(buf797, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf797  # reuse
    buf828 = reinterpret_tensor(buf826, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf826  # reuse
    cpp_fused__softmax_clone_236(c_void_p(buf828.data_ptr()), c_void_p(arg549_1.data_ptr()), c_void_p(buf825.data_ptr()), c_void_p(buf827.data_ptr()))
    del arg549_1
    buf829 = reinterpret_tensor(buf823, (2654208, 16), (16, 1), 0); del buf823  # reuse
    # Source Nodes: [getattr_l__mod___blocks___29___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf828, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg550_1, (16, 16), (1, 16), 0), out=buf829)
    del arg550_1
    buf830 = reinterpret_tensor(buf828, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf828  # reuse
    buf831 = reinterpret_tensor(buf821, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf821  # reuse
    cpp_fused_clone_237(c_void_p(buf829.data_ptr()), c_void_p(arg551_1.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf830.data_ptr()), c_void_p(buf831.data_ptr()))
    del arg551_1
    buf832 = reinterpret_tensor(buf820, (128, 576, 48), (27648, 48, 1), 0); del buf820  # reuse
    # Source Nodes: [matmul_59], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf830, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf831, (128, 576, 48), (27648, 48, 1), 0), out=buf832)
    buf833 = reinterpret_tensor(buf831, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf831  # reuse
    cpp_fused_clone_238(c_void_p(buf832.data_ptr()), c_void_p(buf833.data_ptr()))
    buf834 = reinterpret_tensor(buf832, (4608, 768), (768, 1), 0); del buf832  # reuse
    # Source Nodes: [x_326], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg553_1, reinterpret_tensor(buf833, (4608, 768), (768, 1), 0), reinterpret_tensor(arg552_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf834)
    del arg552_1
    del arg553_1
    buf835 = buf816; del buf816  # reuse
    buf836 = buf815; del buf815  # reuse
    buf838 = reinterpret_tensor(buf833, (8, 576, 768), (442368, 768, 1), 0); del buf833  # reuse
    cpp_fused_add_mul_native_layer_norm_239(c_void_p(buf814.data_ptr()), c_void_p(arg59_1.data_ptr()), c_void_p(buf834.data_ptr()), c_void_p(arg554_1.data_ptr()), c_void_p(arg555_1.data_ptr()), c_void_p(buf835.data_ptr()), c_void_p(buf836.data_ptr()), c_void_p(buf838.data_ptr()))
    del arg554_1
    del arg555_1
    buf839 = reinterpret_tensor(buf812, (4608, 3072), (3072, 1), 0); del buf812  # reuse
    # Source Nodes: [x_329], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg557_1, reinterpret_tensor(buf838, (4608, 768), (768, 1), 0), reinterpret_tensor(arg556_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf839)
    del arg556_1
    del arg557_1
    buf840 = reinterpret_tensor(buf839, (8, 576, 3072), (1769472, 3072, 1), 0); del buf839  # reuse
    cpp_fused_gelu_240(c_void_p(buf840.data_ptr()))
    buf841 = reinterpret_tensor(buf838, (4608, 768), (768, 1), 0); del buf838  # reuse
    # Source Nodes: [x_333], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg559_1, reinterpret_tensor(buf840, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg558_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf841)
    del arg558_1
    del arg559_1
    buf842 = reinterpret_tensor(buf841, (8, 576, 768), (442368, 768, 1), 0); del buf841  # reuse
    buf843 = buf836; del buf836  # reuse
    buf844 = buf835; del buf835  # reuse
    buf846 = buf786; del buf786  # reuse
    cpp_fused_add_mul_native_layer_norm_241(c_void_p(buf842.data_ptr()), c_void_p(buf814.data_ptr()), c_void_p(arg59_1.data_ptr()), c_void_p(buf834.data_ptr()), c_void_p(arg60_1.data_ptr()), c_void_p(arg560_1.data_ptr()), c_void_p(arg561_1.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf844.data_ptr()), c_void_p(buf846.data_ptr()))
    del arg560_1
    del arg561_1
    del arg59_1
    del arg60_1
    buf847 = buf819; del buf819  # reuse
    # Source Nodes: [getattr_l__mod___blocks___30___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg563_1, reinterpret_tensor(buf846, (4608, 768), (768, 1), 0), reinterpret_tensor(arg562_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf847)
    del arg562_1
    del arg563_1
    buf848 = reinterpret_tensor(buf846, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf846  # reuse
    buf849 = reinterpret_tensor(buf834, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf834  # reuse
    cpp_fused_clone_mul_242(c_void_p(buf847.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf849.data_ptr()))
    buf850 = reinterpret_tensor(buf830, (128, 576, 576), (331776, 576, 1), 0); del buf830  # reuse
    # Source Nodes: [attn_150], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf848, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf849, (128, 48, 576), (27648, 576, 1), 0), out=buf850)
    buf851 = reinterpret_tensor(buf829, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf829  # reuse
    cpp_fused_clone_243(c_void_p(buf850.data_ptr()), c_void_p(buf851.data_ptr()))
    buf852 = reinterpret_tensor(buf850, (2654208, 16), (16, 1), 0); del buf850  # reuse
    # Source Nodes: [getattr_l__mod___blocks___30___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf851, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg564_1, (16, 16), (1, 16), 0), out=buf852)
    del arg564_1
    buf853 = reinterpret_tensor(buf827, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf827  # reuse
    buf854 = reinterpret_tensor(buf852, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf852  # reuse
    buf855 = reinterpret_tensor(buf825, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf825  # reuse
    buf856 = reinterpret_tensor(buf854, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf854  # reuse
    cpp_fused__softmax_clone_244(c_void_p(buf856.data_ptr()), c_void_p(arg565_1.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(buf855.data_ptr()))
    del arg565_1
    buf857 = reinterpret_tensor(buf851, (2654208, 16), (16, 1), 0); del buf851  # reuse
    # Source Nodes: [getattr_l__mod___blocks___30___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf856, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg566_1, (16, 16), (1, 16), 0), out=buf857)
    del arg566_1
    buf858 = reinterpret_tensor(buf856, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf856  # reuse
    buf859 = reinterpret_tensor(buf849, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf849  # reuse
    cpp_fused_clone_245(c_void_p(buf857.data_ptr()), c_void_p(arg567_1.data_ptr()), c_void_p(buf847.data_ptr()), c_void_p(buf858.data_ptr()), c_void_p(buf859.data_ptr()))
    del arg567_1
    buf860 = reinterpret_tensor(buf848, (128, 576, 48), (27648, 48, 1), 0); del buf848  # reuse
    # Source Nodes: [matmul_61], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf858, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf859, (128, 576, 48), (27648, 48, 1), 0), out=buf860)
    buf861 = reinterpret_tensor(buf859, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf859  # reuse
    cpp_fused_clone_246(c_void_p(buf860.data_ptr()), c_void_p(buf861.data_ptr()))
    buf862 = reinterpret_tensor(buf860, (4608, 768), (768, 1), 0); del buf860  # reuse
    # Source Nodes: [x_337], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg569_1, reinterpret_tensor(buf861, (4608, 768), (768, 1), 0), reinterpret_tensor(arg568_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf862)
    del arg568_1
    del arg569_1
    buf863 = buf844; del buf844  # reuse
    buf864 = buf843; del buf843  # reuse
    buf866 = reinterpret_tensor(buf861, (8, 576, 768), (442368, 768, 1), 0); del buf861  # reuse
    cpp_fused_add_mul_native_layer_norm_247(c_void_p(buf842.data_ptr()), c_void_p(arg61_1.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(arg570_1.data_ptr()), c_void_p(arg571_1.data_ptr()), c_void_p(buf863.data_ptr()), c_void_p(buf864.data_ptr()), c_void_p(buf866.data_ptr()))
    del arg570_1
    del arg571_1
    buf867 = reinterpret_tensor(buf840, (4608, 3072), (3072, 1), 0); del buf840  # reuse
    # Source Nodes: [x_340], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg573_1, reinterpret_tensor(buf866, (4608, 768), (768, 1), 0), reinterpret_tensor(arg572_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf867)
    del arg572_1
    del arg573_1
    buf868 = reinterpret_tensor(buf867, (8, 576, 3072), (1769472, 3072, 1), 0); del buf867  # reuse
    cpp_fused_gelu_248(c_void_p(buf868.data_ptr()))
    buf869 = reinterpret_tensor(buf866, (4608, 768), (768, 1), 0); del buf866  # reuse
    # Source Nodes: [x_344], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg575_1, reinterpret_tensor(buf868, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg574_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf869)
    del arg574_1
    del arg575_1
    buf870 = reinterpret_tensor(buf869, (8, 576, 768), (442368, 768, 1), 0); del buf869  # reuse
    buf871 = buf864; del buf864  # reuse
    buf872 = buf863; del buf863  # reuse
    buf874 = buf814; del buf814  # reuse
    cpp_fused_add_mul_native_layer_norm_249(c_void_p(buf870.data_ptr()), c_void_p(buf842.data_ptr()), c_void_p(arg61_1.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(arg62_1.data_ptr()), c_void_p(arg576_1.data_ptr()), c_void_p(arg577_1.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf872.data_ptr()), c_void_p(buf874.data_ptr()))
    del arg576_1
    del arg577_1
    del arg61_1
    del arg62_1
    buf875 = buf847; del buf847  # reuse
    # Source Nodes: [getattr_l__mod___blocks___31___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg579_1, reinterpret_tensor(buf874, (4608, 768), (768, 1), 0), reinterpret_tensor(arg578_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf875)
    del arg578_1
    del arg579_1
    buf876 = reinterpret_tensor(buf874, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf874  # reuse
    buf877 = reinterpret_tensor(buf862, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf862  # reuse
    cpp_fused_clone_mul_250(c_void_p(buf875.data_ptr()), c_void_p(buf876.data_ptr()), c_void_p(buf877.data_ptr()))
    buf878 = reinterpret_tensor(buf858, (128, 576, 576), (331776, 576, 1), 0); del buf858  # reuse
    # Source Nodes: [attn_155], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf876, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf877, (128, 48, 576), (27648, 576, 1), 0), out=buf878)
    buf879 = reinterpret_tensor(buf857, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf857  # reuse
    cpp_fused_clone_251(c_void_p(buf878.data_ptr()), c_void_p(buf879.data_ptr()))
    buf880 = reinterpret_tensor(buf878, (2654208, 16), (16, 1), 0); del buf878  # reuse
    # Source Nodes: [getattr_l__mod___blocks___31___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf879, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg580_1, (16, 16), (1, 16), 0), out=buf880)
    del arg580_1
    buf881 = reinterpret_tensor(buf855, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf855  # reuse
    buf882 = reinterpret_tensor(buf880, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf880  # reuse
    buf883 = reinterpret_tensor(buf853, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf853  # reuse
    buf884 = reinterpret_tensor(buf882, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf882  # reuse
    cpp_fused__softmax_clone_252(c_void_p(buf884.data_ptr()), c_void_p(arg581_1.data_ptr()), c_void_p(buf881.data_ptr()), c_void_p(buf883.data_ptr()))
    del arg581_1
    buf885 = reinterpret_tensor(buf879, (2654208, 16), (16, 1), 0); del buf879  # reuse
    # Source Nodes: [getattr_l__mod___blocks___31___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf884, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg582_1, (16, 16), (1, 16), 0), out=buf885)
    del arg582_1
    buf886 = reinterpret_tensor(buf884, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf884  # reuse
    buf887 = reinterpret_tensor(buf877, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf877  # reuse
    cpp_fused_clone_253(c_void_p(buf885.data_ptr()), c_void_p(arg583_1.data_ptr()), c_void_p(buf875.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf887.data_ptr()))
    del arg583_1
    buf888 = reinterpret_tensor(buf876, (128, 576, 48), (27648, 48, 1), 0); del buf876  # reuse
    # Source Nodes: [matmul_63], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf886, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf887, (128, 576, 48), (27648, 48, 1), 0), out=buf888)
    buf889 = reinterpret_tensor(buf887, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf887  # reuse
    cpp_fused_clone_254(c_void_p(buf888.data_ptr()), c_void_p(buf889.data_ptr()))
    buf890 = reinterpret_tensor(buf888, (4608, 768), (768, 1), 0); del buf888  # reuse
    # Source Nodes: [x_348], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg585_1, reinterpret_tensor(buf889, (4608, 768), (768, 1), 0), reinterpret_tensor(arg584_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf890)
    del arg584_1
    del arg585_1
    buf891 = buf872; del buf872  # reuse
    buf892 = buf871; del buf871  # reuse
    buf894 = reinterpret_tensor(buf889, (8, 576, 768), (442368, 768, 1), 0); del buf889  # reuse
    cpp_fused_add_mul_native_layer_norm_255(c_void_p(buf870.data_ptr()), c_void_p(arg63_1.data_ptr()), c_void_p(buf890.data_ptr()), c_void_p(arg586_1.data_ptr()), c_void_p(arg587_1.data_ptr()), c_void_p(buf891.data_ptr()), c_void_p(buf892.data_ptr()), c_void_p(buf894.data_ptr()))
    del arg586_1
    del arg587_1
    buf895 = reinterpret_tensor(buf868, (4608, 3072), (3072, 1), 0); del buf868  # reuse
    # Source Nodes: [x_351], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg589_1, reinterpret_tensor(buf894, (4608, 768), (768, 1), 0), reinterpret_tensor(arg588_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf895)
    del arg588_1
    del arg589_1
    buf896 = reinterpret_tensor(buf895, (8, 576, 3072), (1769472, 3072, 1), 0); del buf895  # reuse
    cpp_fused_gelu_256(c_void_p(buf896.data_ptr()))
    buf897 = reinterpret_tensor(buf894, (4608, 768), (768, 1), 0); del buf894  # reuse
    # Source Nodes: [x_355], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg591_1, reinterpret_tensor(buf896, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg590_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf897)
    del arg590_1
    del arg591_1
    buf898 = reinterpret_tensor(buf897, (8, 576, 768), (442368, 768, 1), 0); del buf897  # reuse
    buf899 = buf892; del buf892  # reuse
    buf900 = buf891; del buf891  # reuse
    buf902 = buf842; del buf842  # reuse
    cpp_fused_add_mul_native_layer_norm_257(c_void_p(buf898.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(arg63_1.data_ptr()), c_void_p(buf890.data_ptr()), c_void_p(arg64_1.data_ptr()), c_void_p(arg592_1.data_ptr()), c_void_p(arg593_1.data_ptr()), c_void_p(buf899.data_ptr()), c_void_p(buf900.data_ptr()), c_void_p(buf902.data_ptr()))
    del arg592_1
    del arg593_1
    del arg63_1
    del arg64_1
    buf903 = buf875; del buf875  # reuse
    # Source Nodes: [getattr_l__mod___blocks___32___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg595_1, reinterpret_tensor(buf902, (4608, 768), (768, 1), 0), reinterpret_tensor(arg594_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf903)
    del arg594_1
    del arg595_1
    buf904 = reinterpret_tensor(buf902, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf902  # reuse
    buf905 = reinterpret_tensor(buf890, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf890  # reuse
    cpp_fused_clone_mul_258(c_void_p(buf903.data_ptr()), c_void_p(buf904.data_ptr()), c_void_p(buf905.data_ptr()))
    buf906 = reinterpret_tensor(buf886, (128, 576, 576), (331776, 576, 1), 0); del buf886  # reuse
    # Source Nodes: [attn_160], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf904, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf905, (128, 48, 576), (27648, 576, 1), 0), out=buf906)
    buf907 = reinterpret_tensor(buf885, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf885  # reuse
    cpp_fused_clone_259(c_void_p(buf906.data_ptr()), c_void_p(buf907.data_ptr()))
    buf908 = reinterpret_tensor(buf906, (2654208, 16), (16, 1), 0); del buf906  # reuse
    # Source Nodes: [getattr_l__mod___blocks___32___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf907, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg596_1, (16, 16), (1, 16), 0), out=buf908)
    del arg596_1
    buf909 = reinterpret_tensor(buf883, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf883  # reuse
    buf910 = reinterpret_tensor(buf908, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf908  # reuse
    buf911 = reinterpret_tensor(buf881, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf881  # reuse
    buf912 = reinterpret_tensor(buf910, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf910  # reuse
    cpp_fused__softmax_clone_260(c_void_p(buf912.data_ptr()), c_void_p(arg597_1.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf911.data_ptr()))
    del arg597_1
    buf913 = reinterpret_tensor(buf907, (2654208, 16), (16, 1), 0); del buf907  # reuse
    # Source Nodes: [getattr_l__mod___blocks___32___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf912, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg598_1, (16, 16), (1, 16), 0), out=buf913)
    del arg598_1
    buf914 = reinterpret_tensor(buf912, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf912  # reuse
    buf915 = reinterpret_tensor(buf905, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf905  # reuse
    cpp_fused_clone_261(c_void_p(buf913.data_ptr()), c_void_p(arg599_1.data_ptr()), c_void_p(buf903.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()))
    del arg599_1
    buf916 = reinterpret_tensor(buf904, (128, 576, 48), (27648, 48, 1), 0); del buf904  # reuse
    # Source Nodes: [matmul_65], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf914, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf915, (128, 576, 48), (27648, 48, 1), 0), out=buf916)
    buf917 = reinterpret_tensor(buf915, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf915  # reuse
    cpp_fused_clone_262(c_void_p(buf916.data_ptr()), c_void_p(buf917.data_ptr()))
    buf918 = reinterpret_tensor(buf916, (4608, 768), (768, 1), 0); del buf916  # reuse
    # Source Nodes: [x_359], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg601_1, reinterpret_tensor(buf917, (4608, 768), (768, 1), 0), reinterpret_tensor(arg600_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf918)
    del arg600_1
    del arg601_1
    buf919 = buf900; del buf900  # reuse
    buf920 = buf899; del buf899  # reuse
    buf922 = reinterpret_tensor(buf917, (8, 576, 768), (442368, 768, 1), 0); del buf917  # reuse
    cpp_fused_add_mul_native_layer_norm_263(c_void_p(buf898.data_ptr()), c_void_p(arg65_1.data_ptr()), c_void_p(buf918.data_ptr()), c_void_p(arg602_1.data_ptr()), c_void_p(arg603_1.data_ptr()), c_void_p(buf919.data_ptr()), c_void_p(buf920.data_ptr()), c_void_p(buf922.data_ptr()))
    del arg602_1
    del arg603_1
    buf923 = reinterpret_tensor(buf896, (4608, 3072), (3072, 1), 0); del buf896  # reuse
    # Source Nodes: [x_362], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg605_1, reinterpret_tensor(buf922, (4608, 768), (768, 1), 0), reinterpret_tensor(arg604_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf923)
    del arg604_1
    del arg605_1
    buf924 = reinterpret_tensor(buf923, (8, 576, 3072), (1769472, 3072, 1), 0); del buf923  # reuse
    cpp_fused_gelu_264(c_void_p(buf924.data_ptr()))
    buf925 = reinterpret_tensor(buf922, (4608, 768), (768, 1), 0); del buf922  # reuse
    # Source Nodes: [x_366], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg607_1, reinterpret_tensor(buf924, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg606_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf925)
    del arg606_1
    del arg607_1
    buf926 = reinterpret_tensor(buf925, (8, 576, 768), (442368, 768, 1), 0); del buf925  # reuse
    buf927 = buf920; del buf920  # reuse
    buf928 = buf919; del buf919  # reuse
    buf930 = buf870; del buf870  # reuse
    cpp_fused_add_mul_native_layer_norm_265(c_void_p(buf926.data_ptr()), c_void_p(buf898.data_ptr()), c_void_p(arg65_1.data_ptr()), c_void_p(buf918.data_ptr()), c_void_p(arg66_1.data_ptr()), c_void_p(arg608_1.data_ptr()), c_void_p(arg609_1.data_ptr()), c_void_p(buf927.data_ptr()), c_void_p(buf928.data_ptr()), c_void_p(buf930.data_ptr()))
    del arg608_1
    del arg609_1
    del arg65_1
    del arg66_1
    buf931 = buf903; del buf903  # reuse
    # Source Nodes: [getattr_l__mod___blocks___33___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg611_1, reinterpret_tensor(buf930, (4608, 768), (768, 1), 0), reinterpret_tensor(arg610_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf931)
    del arg610_1
    del arg611_1
    buf932 = reinterpret_tensor(buf930, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf930  # reuse
    buf933 = reinterpret_tensor(buf918, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf918  # reuse
    cpp_fused_clone_mul_266(c_void_p(buf931.data_ptr()), c_void_p(buf932.data_ptr()), c_void_p(buf933.data_ptr()))
    buf934 = reinterpret_tensor(buf914, (128, 576, 576), (331776, 576, 1), 0); del buf914  # reuse
    # Source Nodes: [attn_165], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf932, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf933, (128, 48, 576), (27648, 576, 1), 0), out=buf934)
    buf935 = reinterpret_tensor(buf913, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf913  # reuse
    cpp_fused_clone_267(c_void_p(buf934.data_ptr()), c_void_p(buf935.data_ptr()))
    buf936 = reinterpret_tensor(buf934, (2654208, 16), (16, 1), 0); del buf934  # reuse
    # Source Nodes: [getattr_l__mod___blocks___33___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf935, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg612_1, (16, 16), (1, 16), 0), out=buf936)
    del arg612_1
    buf937 = reinterpret_tensor(buf911, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf911  # reuse
    buf938 = reinterpret_tensor(buf936, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf936  # reuse
    buf939 = reinterpret_tensor(buf909, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf909  # reuse
    buf940 = reinterpret_tensor(buf938, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf938  # reuse
    cpp_fused__softmax_clone_268(c_void_p(buf940.data_ptr()), c_void_p(arg613_1.data_ptr()), c_void_p(buf937.data_ptr()), c_void_p(buf939.data_ptr()))
    del arg613_1
    buf941 = reinterpret_tensor(buf935, (2654208, 16), (16, 1), 0); del buf935  # reuse
    # Source Nodes: [getattr_l__mod___blocks___33___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf940, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg614_1, (16, 16), (1, 16), 0), out=buf941)
    del arg614_1
    buf942 = reinterpret_tensor(buf940, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf940  # reuse
    buf943 = reinterpret_tensor(buf933, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf933  # reuse
    cpp_fused_clone_269(c_void_p(buf941.data_ptr()), c_void_p(arg615_1.data_ptr()), c_void_p(buf931.data_ptr()), c_void_p(buf942.data_ptr()), c_void_p(buf943.data_ptr()))
    del arg615_1
    buf944 = reinterpret_tensor(buf932, (128, 576, 48), (27648, 48, 1), 0); del buf932  # reuse
    # Source Nodes: [matmul_67], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf942, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf943, (128, 576, 48), (27648, 48, 1), 0), out=buf944)
    buf945 = reinterpret_tensor(buf943, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf943  # reuse
    cpp_fused_clone_270(c_void_p(buf944.data_ptr()), c_void_p(buf945.data_ptr()))
    buf946 = reinterpret_tensor(buf944, (4608, 768), (768, 1), 0); del buf944  # reuse
    # Source Nodes: [x_370], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg617_1, reinterpret_tensor(buf945, (4608, 768), (768, 1), 0), reinterpret_tensor(arg616_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf946)
    del arg616_1
    del arg617_1
    buf947 = buf928; del buf928  # reuse
    buf948 = buf927; del buf927  # reuse
    buf950 = reinterpret_tensor(buf945, (8, 576, 768), (442368, 768, 1), 0); del buf945  # reuse
    cpp_fused_add_mul_native_layer_norm_271(c_void_p(buf926.data_ptr()), c_void_p(arg67_1.data_ptr()), c_void_p(buf946.data_ptr()), c_void_p(arg618_1.data_ptr()), c_void_p(arg619_1.data_ptr()), c_void_p(buf947.data_ptr()), c_void_p(buf948.data_ptr()), c_void_p(buf950.data_ptr()))
    del arg618_1
    del arg619_1
    buf951 = reinterpret_tensor(buf924, (4608, 3072), (3072, 1), 0); del buf924  # reuse
    # Source Nodes: [x_373], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg621_1, reinterpret_tensor(buf950, (4608, 768), (768, 1), 0), reinterpret_tensor(arg620_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf951)
    del arg620_1
    del arg621_1
    buf952 = reinterpret_tensor(buf951, (8, 576, 3072), (1769472, 3072, 1), 0); del buf951  # reuse
    cpp_fused_gelu_272(c_void_p(buf952.data_ptr()))
    buf953 = reinterpret_tensor(buf950, (4608, 768), (768, 1), 0); del buf950  # reuse
    # Source Nodes: [x_377], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg623_1, reinterpret_tensor(buf952, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg622_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf953)
    del arg622_1
    del arg623_1
    buf954 = reinterpret_tensor(buf953, (8, 576, 768), (442368, 768, 1), 0); del buf953  # reuse
    buf955 = buf948; del buf948  # reuse
    buf956 = buf947; del buf947  # reuse
    buf958 = buf898; del buf898  # reuse
    cpp_fused_add_mul_native_layer_norm_273(c_void_p(buf954.data_ptr()), c_void_p(buf926.data_ptr()), c_void_p(arg67_1.data_ptr()), c_void_p(buf946.data_ptr()), c_void_p(arg68_1.data_ptr()), c_void_p(arg624_1.data_ptr()), c_void_p(arg625_1.data_ptr()), c_void_p(buf955.data_ptr()), c_void_p(buf956.data_ptr()), c_void_p(buf958.data_ptr()))
    del arg624_1
    del arg625_1
    del arg67_1
    del arg68_1
    buf959 = buf931; del buf931  # reuse
    # Source Nodes: [getattr_l__mod___blocks___34___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg627_1, reinterpret_tensor(buf958, (4608, 768), (768, 1), 0), reinterpret_tensor(arg626_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf959)
    del arg626_1
    del arg627_1
    buf960 = reinterpret_tensor(buf958, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf958  # reuse
    buf961 = reinterpret_tensor(buf946, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf946  # reuse
    cpp_fused_clone_mul_274(c_void_p(buf959.data_ptr()), c_void_p(buf960.data_ptr()), c_void_p(buf961.data_ptr()))
    buf962 = reinterpret_tensor(buf942, (128, 576, 576), (331776, 576, 1), 0); del buf942  # reuse
    # Source Nodes: [attn_170], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf960, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf961, (128, 48, 576), (27648, 576, 1), 0), out=buf962)
    buf963 = reinterpret_tensor(buf941, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf941  # reuse
    cpp_fused_clone_275(c_void_p(buf962.data_ptr()), c_void_p(buf963.data_ptr()))
    buf964 = reinterpret_tensor(buf962, (2654208, 16), (16, 1), 0); del buf962  # reuse
    # Source Nodes: [getattr_l__mod___blocks___34___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf963, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg628_1, (16, 16), (1, 16), 0), out=buf964)
    del arg628_1
    buf965 = reinterpret_tensor(buf939, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf939  # reuse
    buf966 = reinterpret_tensor(buf964, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf964  # reuse
    buf967 = reinterpret_tensor(buf937, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf937  # reuse
    buf968 = reinterpret_tensor(buf966, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf966  # reuse
    cpp_fused__softmax_clone_276(c_void_p(buf968.data_ptr()), c_void_p(arg629_1.data_ptr()), c_void_p(buf965.data_ptr()), c_void_p(buf967.data_ptr()))
    del arg629_1
    buf969 = reinterpret_tensor(buf963, (2654208, 16), (16, 1), 0); del buf963  # reuse
    # Source Nodes: [getattr_l__mod___blocks___34___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf968, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg630_1, (16, 16), (1, 16), 0), out=buf969)
    del arg630_1
    buf970 = reinterpret_tensor(buf968, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf968  # reuse
    buf971 = reinterpret_tensor(buf961, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf961  # reuse
    cpp_fused_clone_277(c_void_p(buf969.data_ptr()), c_void_p(arg631_1.data_ptr()), c_void_p(buf959.data_ptr()), c_void_p(buf970.data_ptr()), c_void_p(buf971.data_ptr()))
    del arg631_1
    buf972 = reinterpret_tensor(buf960, (128, 576, 48), (27648, 48, 1), 0); del buf960  # reuse
    # Source Nodes: [matmul_69], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf970, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf971, (128, 576, 48), (27648, 48, 1), 0), out=buf972)
    buf973 = reinterpret_tensor(buf971, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf971  # reuse
    cpp_fused_clone_278(c_void_p(buf972.data_ptr()), c_void_p(buf973.data_ptr()))
    buf974 = reinterpret_tensor(buf972, (4608, 768), (768, 1), 0); del buf972  # reuse
    # Source Nodes: [x_381], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg633_1, reinterpret_tensor(buf973, (4608, 768), (768, 1), 0), reinterpret_tensor(arg632_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf974)
    del arg632_1
    del arg633_1
    buf975 = buf956; del buf956  # reuse
    buf976 = buf955; del buf955  # reuse
    buf978 = reinterpret_tensor(buf973, (8, 576, 768), (442368, 768, 1), 0); del buf973  # reuse
    cpp_fused_add_mul_native_layer_norm_279(c_void_p(buf954.data_ptr()), c_void_p(arg69_1.data_ptr()), c_void_p(buf974.data_ptr()), c_void_p(arg634_1.data_ptr()), c_void_p(arg635_1.data_ptr()), c_void_p(buf975.data_ptr()), c_void_p(buf976.data_ptr()), c_void_p(buf978.data_ptr()))
    del arg634_1
    del arg635_1
    buf979 = reinterpret_tensor(buf952, (4608, 3072), (3072, 1), 0); del buf952  # reuse
    # Source Nodes: [x_384], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg637_1, reinterpret_tensor(buf978, (4608, 768), (768, 1), 0), reinterpret_tensor(arg636_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf979)
    del arg636_1
    del arg637_1
    buf980 = reinterpret_tensor(buf979, (8, 576, 3072), (1769472, 3072, 1), 0); del buf979  # reuse
    cpp_fused_gelu_280(c_void_p(buf980.data_ptr()))
    buf981 = reinterpret_tensor(buf978, (4608, 768), (768, 1), 0); del buf978  # reuse
    # Source Nodes: [x_388], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg639_1, reinterpret_tensor(buf980, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg638_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf981)
    del arg638_1
    del arg639_1
    buf982 = reinterpret_tensor(buf981, (8, 576, 768), (442368, 768, 1), 0); del buf981  # reuse
    buf983 = buf976; del buf976  # reuse
    buf984 = buf975; del buf975  # reuse
    buf986 = buf926; del buf926  # reuse
    cpp_fused_add_mul_native_layer_norm_281(c_void_p(buf982.data_ptr()), c_void_p(buf954.data_ptr()), c_void_p(arg69_1.data_ptr()), c_void_p(buf974.data_ptr()), c_void_p(arg70_1.data_ptr()), c_void_p(arg640_1.data_ptr()), c_void_p(arg641_1.data_ptr()), c_void_p(buf983.data_ptr()), c_void_p(buf984.data_ptr()), c_void_p(buf986.data_ptr()))
    del arg640_1
    del arg641_1
    del arg69_1
    del arg70_1
    del buf954
    buf987 = buf959; del buf959  # reuse
    # Source Nodes: [getattr_l__mod___blocks___35___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg643_1, reinterpret_tensor(buf986, (4608, 768), (768, 1), 0), reinterpret_tensor(arg642_1, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf987)
    del arg642_1
    del arg643_1
    buf988 = reinterpret_tensor(buf986, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf986  # reuse
    buf989 = reinterpret_tensor(buf974, (8, 16, 48, 576), (442368, 27648, 576, 1), 0); del buf974  # reuse
    cpp_fused_clone_mul_282(c_void_p(buf987.data_ptr()), c_void_p(buf988.data_ptr()), c_void_p(buf989.data_ptr()))
    buf990 = reinterpret_tensor(buf970, (128, 576, 576), (331776, 576, 1), 0); del buf970  # reuse
    # Source Nodes: [attn_175], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf988, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf989, (128, 48, 576), (27648, 576, 1), 0), out=buf990)
    buf991 = reinterpret_tensor(buf969, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf969  # reuse
    cpp_fused_clone_283(c_void_p(buf990.data_ptr()), c_void_p(buf991.data_ptr()))
    buf992 = reinterpret_tensor(buf990, (2654208, 16), (16, 1), 0); del buf990  # reuse
    # Source Nodes: [getattr_l__mod___blocks___35___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf991, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg644_1, (16, 16), (1, 16), 0), out=buf992)
    del arg644_1
    buf993 = reinterpret_tensor(buf967, (8, 16, 576, 1), (9216, 1, 16, 73728), 0); del buf967  # reuse
    buf994 = reinterpret_tensor(buf992, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf992  # reuse
    buf995 = reinterpret_tensor(buf965, (8, 16, 576, 1), (9216, 576, 1, 73728), 0); del buf965  # reuse
    buf996 = reinterpret_tensor(buf994, (8, 576, 576, 16), (5308416, 9216, 16, 1), 0); del buf994  # reuse
    cpp_fused__softmax_clone_284(c_void_p(buf996.data_ptr()), c_void_p(arg645_1.data_ptr()), c_void_p(buf993.data_ptr()), c_void_p(buf995.data_ptr()))
    del arg645_1
    del buf993
    del buf995
    buf997 = reinterpret_tensor(buf991, (2654208, 16), (16, 1), 0); del buf991  # reuse
    # Source Nodes: [getattr_l__mod___blocks___35___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf996, (2654208, 16), (16, 1), 0), reinterpret_tensor(arg646_1, (16, 16), (1, 16), 0), out=buf997)
    del arg646_1
    buf998 = reinterpret_tensor(buf996, (8, 16, 576, 576), (5308416, 331776, 576, 1), 0); del buf996  # reuse
    buf999 = reinterpret_tensor(buf989, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf989  # reuse
    cpp_fused_clone_285(c_void_p(buf997.data_ptr()), c_void_p(arg647_1.data_ptr()), c_void_p(buf987.data_ptr()), c_void_p(buf998.data_ptr()), c_void_p(buf999.data_ptr()))
    del arg647_1
    del buf987
    del buf997
    buf1000 = reinterpret_tensor(buf988, (128, 576, 48), (27648, 48, 1), 0); del buf988  # reuse
    # Source Nodes: [matmul_71], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf998, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf999, (128, 576, 48), (27648, 48, 1), 0), out=buf1000)
    del buf998
    buf1001 = reinterpret_tensor(buf999, (8, 576, 16, 48), (442368, 768, 48, 1), 0); del buf999  # reuse
    cpp_fused_clone_286(c_void_p(buf1000.data_ptr()), c_void_p(buf1001.data_ptr()))
    buf1002 = reinterpret_tensor(buf1000, (4608, 768), (768, 1), 0); del buf1000  # reuse
    # Source Nodes: [x_392], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg649_1, reinterpret_tensor(buf1001, (4608, 768), (768, 1), 0), reinterpret_tensor(arg648_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1002)
    del arg648_1
    del arg649_1
    buf1003 = buf984; del buf984  # reuse
    buf1004 = buf983; del buf983  # reuse
    buf1006 = reinterpret_tensor(buf1001, (8, 576, 768), (442368, 768, 1), 0); del buf1001  # reuse
    cpp_fused_add_mul_native_layer_norm_287(c_void_p(buf982.data_ptr()), c_void_p(arg71_1.data_ptr()), c_void_p(buf1002.data_ptr()), c_void_p(arg650_1.data_ptr()), c_void_p(arg651_1.data_ptr()), c_void_p(buf1003.data_ptr()), c_void_p(buf1004.data_ptr()), c_void_p(buf1006.data_ptr()))
    del arg650_1
    del arg651_1
    del buf1003
    del buf1004
    buf1007 = reinterpret_tensor(buf980, (4608, 3072), (3072, 1), 0); del buf980  # reuse
    # Source Nodes: [x_395], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg653_1, reinterpret_tensor(buf1006, (4608, 768), (768, 1), 0), reinterpret_tensor(arg652_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1007)
    del arg652_1
    del arg653_1
    buf1008 = reinterpret_tensor(buf1007, (8, 576, 3072), (1769472, 3072, 1), 0); del buf1007  # reuse
    cpp_fused_gelu_288(c_void_p(buf1008.data_ptr()))
    buf1009 = reinterpret_tensor(buf1006, (4608, 768), (768, 1), 0); del buf1006  # reuse
    # Source Nodes: [x_399], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg655_1, reinterpret_tensor(buf1008, (4608, 3072), (3072, 1), 0), reinterpret_tensor(arg654_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1009)
    del arg654_1
    del arg655_1
    del buf1008
    buf1012 = empty((8, 577, 768), device='cpu', dtype=torch.float32)
    buf1010 = reinterpret_tensor(buf1012, (8, 576, 768), (443136, 768, 1), 768)  # alias
    buf1011 = reinterpret_tensor(buf1012, (8, 1, 768), (443136, 768, 1), 0)  # alias
    buf1013 = empty_strided((8, 577, 1), (577, 1, 4616), device='cpu', dtype=torch.float32)
    buf1014 = empty_strided((8, 577, 1), (577, 1, 4616), device='cpu', dtype=torch.float32)
    buf1016 = empty((8, 577, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_cat_mul_native_layer_norm_289(c_void_p(buf982.data_ptr()), c_void_p(arg71_1.data_ptr()), c_void_p(buf1002.data_ptr()), c_void_p(arg72_1.data_ptr()), c_void_p(buf1009.data_ptr()), c_void_p(arg73_1.data_ptr()), c_void_p(buf1012.data_ptr()), c_void_p(arg656_1.data_ptr()), c_void_p(arg657_1.data_ptr()), c_void_p(buf1010.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(buf1014.data_ptr()), c_void_p(buf1016.data_ptr()))
    del arg656_1
    del arg657_1
    del arg71_1
    del arg72_1
    del buf1002
    del buf1009
    del buf1011
    del buf982
    buf1017 = empty((8, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_0_attn_q], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg659_1, reinterpret_tensor(buf1016, (8, 768), (443136, 1), 0), reinterpret_tensor(arg658_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1017)
    del arg658_1
    del arg659_1
    buf1018 = empty((4616, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_0_attn_k], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg661_1, reinterpret_tensor(buf1016, (4616, 768), (768, 1), 0), reinterpret_tensor(arg660_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1018)
    del arg660_1
    del arg661_1
    buf1019 = empty((4616, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_0_attn_v], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg663_1, reinterpret_tensor(buf1016, (4616, 768), (768, 1), 0), reinterpret_tensor(arg662_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1019)
    del arg662_1
    del arg663_1
    # Source Nodes: [x_cls], Original ATen: [aten._scaled_dot_product_flash_attention]
    buf1020 = aten._scaled_dot_product_flash_attention(reinterpret_tensor(buf1017, (8, 16, 1, 48), (768, 48, 768, 1), 0), reinterpret_tensor(buf1018, (8, 16, 577, 48), (443136, 48, 768, 1), 0), reinterpret_tensor(buf1019, (8, 16, 577, 48), (443136, 48, 768, 1), 0))
    buf1021 = buf1020[0]
    del buf1020
    buf1028 = buf1017; del buf1017  # reuse
    # Source Nodes: [x_cls_2], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg665_1, reinterpret_tensor(buf1021, (8, 768), (768, 1), 0), reinterpret_tensor(arg664_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1028)
    del arg664_1
    del arg665_1
    buf1029 = empty_strided((8, 1, 1), (1, 8, 8), device='cpu', dtype=torch.float32)
    buf1030 = empty_strided((8, 1, 1), (1, 8, 8), device='cpu', dtype=torch.float32)
    buf1032 = reinterpret_tensor(buf1021, (8, 1, 768), (768, 768, 1), 0); del buf1021  # reuse
    cpp_fused_add_mul_native_layer_norm_290(c_void_p(arg73_1.data_ptr()), c_void_p(arg74_1.data_ptr()), c_void_p(buf1028.data_ptr()), c_void_p(arg666_1.data_ptr()), c_void_p(arg667_1.data_ptr()), c_void_p(buf1029.data_ptr()), c_void_p(buf1030.data_ptr()), c_void_p(buf1032.data_ptr()))
    del arg666_1
    del arg667_1
    buf1033 = empty((8, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_403], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg669_1, reinterpret_tensor(buf1032, (8, 768), (768, 1), 0), reinterpret_tensor(arg668_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1033)
    del arg668_1
    del arg669_1
    buf1034 = reinterpret_tensor(buf1033, (8, 1, 3072), (3072, 3072, 1), 0); del buf1033  # reuse
    cpp_fused_gelu_291(c_void_p(buf1034.data_ptr()))
    buf1035 = reinterpret_tensor(buf1032, (8, 768), (768, 1), 0); del buf1032  # reuse
    # Source Nodes: [x_407], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg671_1, reinterpret_tensor(buf1034, (8, 3072), (3072, 1), 0), reinterpret_tensor(arg670_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1035)
    del arg670_1
    del arg671_1
    buf1038 = reinterpret_tensor(buf1019, (8, 577, 768), (443136, 768, 1), 0); del buf1019  # reuse
    buf1036 = reinterpret_tensor(buf1038, (8, 1, 768), (443136, 768, 1), 0)  # alias
    buf1037 = reinterpret_tensor(buf1038, (8, 576, 768), (443136, 768, 1), 768)  # alias
    buf1039 = buf1014; del buf1014  # reuse
    buf1040 = buf1013; del buf1013  # reuse
    buf1042 = reinterpret_tensor(buf1018, (8, 577, 768), (443136, 768, 1), 0); del buf1018  # reuse
    cpp_fused_add_cat_mul_native_layer_norm_292(c_void_p(arg73_1.data_ptr()), c_void_p(arg74_1.data_ptr()), c_void_p(buf1028.data_ptr()), c_void_p(arg75_1.data_ptr()), c_void_p(buf1035.data_ptr()), c_void_p(buf1010.data_ptr()), c_void_p(buf1038.data_ptr()), c_void_p(arg672_1.data_ptr()), c_void_p(arg673_1.data_ptr()), c_void_p(buf1036.data_ptr()), c_void_p(buf1037.data_ptr()), c_void_p(buf1039.data_ptr()), c_void_p(buf1040.data_ptr()), c_void_p(buf1042.data_ptr()))
    del arg672_1
    del arg673_1
    del arg73_1
    del arg74_1
    del arg75_1
    del buf1037
    buf1043 = buf1035; del buf1035  # reuse
    # Source Nodes: [l__mod___blocks_token_only_1_attn_q], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg675_1, reinterpret_tensor(buf1042, (8, 768), (443136, 1), 0), reinterpret_tensor(arg674_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1043)
    del arg674_1
    del arg675_1
    buf1044 = reinterpret_tensor(buf1016, (4616, 768), (768, 1), 0); del buf1016  # reuse
    # Source Nodes: [l__mod___blocks_token_only_1_attn_k], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg677_1, reinterpret_tensor(buf1042, (4616, 768), (768, 1), 0), reinterpret_tensor(arg676_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1044)
    del arg676_1
    del arg677_1
    buf1045 = empty((4616, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_1_attn_v], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg679_1, reinterpret_tensor(buf1042, (4616, 768), (768, 1), 0), reinterpret_tensor(arg678_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1045)
    del arg678_1
    del arg679_1
    del buf1042
    # Source Nodes: [x_cls_6], Original ATen: [aten._scaled_dot_product_flash_attention]
    buf1046 = aten._scaled_dot_product_flash_attention(reinterpret_tensor(buf1043, (8, 16, 1, 48), (768, 48, 768, 1), 0), reinterpret_tensor(buf1044, (8, 16, 577, 48), (443136, 48, 768, 1), 0), reinterpret_tensor(buf1045, (8, 16, 577, 48), (443136, 48, 768, 1), 0))
    del buf1044
    buf1047 = buf1046[0]
    del buf1046
    buf1054 = buf1043; del buf1043  # reuse
    # Source Nodes: [x_cls_8], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg681_1, reinterpret_tensor(buf1047, (8, 768), (768, 1), 0), reinterpret_tensor(arg680_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1054)
    del arg680_1
    del arg681_1
    buf1055 = buf1030; del buf1030  # reuse
    buf1056 = buf1029; del buf1029  # reuse
    buf1058 = reinterpret_tensor(buf1047, (8, 1, 768), (768, 768, 1), 0); del buf1047  # reuse
    cpp_fused_add_mul_native_layer_norm_293(c_void_p(buf1036.data_ptr()), c_void_p(arg76_1.data_ptr()), c_void_p(buf1054.data_ptr()), c_void_p(arg682_1.data_ptr()), c_void_p(arg683_1.data_ptr()), c_void_p(buf1055.data_ptr()), c_void_p(buf1056.data_ptr()), c_void_p(buf1058.data_ptr()))
    del arg682_1
    del arg683_1
    del buf1055
    del buf1056
    buf1059 = reinterpret_tensor(buf1034, (8, 3072), (3072, 1), 0); del buf1034  # reuse
    # Source Nodes: [x_409], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg685_1, reinterpret_tensor(buf1058, (8, 768), (768, 1), 0), reinterpret_tensor(arg684_1, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1059)
    del arg684_1
    del arg685_1
    buf1060 = reinterpret_tensor(buf1059, (8, 1, 3072), (3072, 3072, 1), 0); del buf1059  # reuse
    cpp_fused_gelu_294(c_void_p(buf1060.data_ptr()))
    buf1061 = reinterpret_tensor(buf1058, (8, 768), (768, 1), 0); del buf1058  # reuse
    # Source Nodes: [x_413], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg687_1, reinterpret_tensor(buf1060, (8, 3072), (3072, 1), 0), reinterpret_tensor(arg686_1, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1061)
    del arg686_1
    del arg687_1
    del buf1060
    buf1062 = reinterpret_tensor(buf1045, (8, 577, 768), (443136, 768, 1), 0); del buf1045  # reuse
    buf1063 = buf1040; del buf1040  # reuse
    buf1064 = buf1039; del buf1039  # reuse
    buf1066 = buf1028; del buf1028  # reuse
    cpp_fused_cat_clone_native_layer_norm_295(c_void_p(buf1036.data_ptr()), c_void_p(arg76_1.data_ptr()), c_void_p(buf1054.data_ptr()), c_void_p(arg77_1.data_ptr()), c_void_p(buf1061.data_ptr()), c_void_p(buf1010.data_ptr()), c_void_p(arg688_1.data_ptr()), c_void_p(arg689_1.data_ptr()), c_void_p(buf1062.data_ptr()), c_void_p(buf1063.data_ptr()), c_void_p(buf1064.data_ptr()), c_void_p(buf1066.data_ptr()))
    del arg688_1
    del arg689_1
    del arg76_1
    del arg77_1
    del buf1010
    del buf1012
    del buf1036
    del buf1038
    del buf1054
    del buf1061
    del buf1062
    del buf1063
    del buf1064
    buf1067 = empty((8, 1000), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_419, x_420], Original ATen: [aten.addmm, aten.clone]
    extern_kernels.addmm(arg691_1, buf1066, reinterpret_tensor(arg690_1, (768, 1000), (1, 768), 0), alpha=1, beta=1, out=buf1067)
    del arg690_1
    del arg691_1
    return (buf1067, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((1, 576, 768), (442368, 768, 1), device='cpu', dtype=torch.float32)
    arg1_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg2_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg3_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg4_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg5_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg6_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg7_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg8_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg9_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg10_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg11_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg12_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg13_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg14_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg15_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg16_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg17_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg18_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg19_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg20_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg21_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg22_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg23_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg24_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg25_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg26_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg27_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg28_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg29_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg30_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg31_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg32_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg33_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg34_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg35_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg36_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg37_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg38_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg39_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg40_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg41_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg42_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg43_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg44_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg45_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg46_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg47_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg48_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg49_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg50_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg51_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg52_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg53_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg54_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg55_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg56_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg57_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg58_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg59_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg60_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg61_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg62_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg63_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg64_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg65_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg66_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg67_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg68_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg69_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg70_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg71_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg72_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg73_1 = rand_strided((1, 1, 768), (768, 768, 1), device='cpu', dtype=torch.float32)
    arg74_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg75_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg76_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg77_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg78_1 = rand_strided((768, 3, 16, 16), (768, 256, 16, 1), device='cpu', dtype=torch.float32)
    arg79_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg80_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg81_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg82_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg83_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg84_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg85_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg86_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg87_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg88_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg89_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg90_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg91_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg92_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg93_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg94_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg95_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg96_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg97_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg98_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg99_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg100_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg101_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg102_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg103_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg104_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg105_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg106_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg107_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg108_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg109_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg110_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg111_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg112_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg113_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg114_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg115_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg116_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg117_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg118_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg119_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg120_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg121_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg122_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg123_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg124_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg125_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg126_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg127_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg128_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg129_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg130_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg131_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg132_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg133_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg134_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg135_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg136_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg137_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg138_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg139_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg140_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg141_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg142_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg143_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg144_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg145_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg146_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg147_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg148_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg149_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg150_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg151_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg152_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg153_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg154_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg155_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg156_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg157_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg158_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg159_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg160_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg161_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg162_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg163_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg164_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg165_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg166_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg167_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg168_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg169_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg170_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg171_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg172_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg173_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg174_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg175_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg176_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg177_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg178_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg179_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg180_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg181_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg182_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg183_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg184_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg185_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg186_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg187_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg188_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg189_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg190_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg191_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg192_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg193_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg194_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg195_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg196_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg197_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg198_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg199_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg200_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg201_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg202_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg203_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg204_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg205_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg206_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg207_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg208_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg209_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg210_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg211_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg212_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg213_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg214_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg215_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg216_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg217_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg218_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg219_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg220_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg221_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg222_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg223_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg224_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg225_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg226_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg227_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg228_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg229_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg230_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg231_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg232_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg233_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg234_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg235_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg236_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg237_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg238_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg239_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg240_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg241_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg242_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg243_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg244_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg245_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg246_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg247_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg248_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg249_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg250_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg251_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg252_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg253_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg254_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg255_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg256_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg257_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg258_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg259_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg260_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg261_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg262_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg263_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg264_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg265_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg266_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg267_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg268_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg269_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg270_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg271_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg272_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg273_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg274_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg275_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg276_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg277_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg278_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg279_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg280_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg281_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg282_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg283_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg284_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg285_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg286_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg287_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg288_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg289_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg290_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg291_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg292_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg293_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg294_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg295_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg296_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg297_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg298_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg299_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg300_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg301_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg302_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg303_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg304_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg305_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg306_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg307_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg308_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg309_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg310_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg311_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg312_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg313_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg314_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg315_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg316_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg317_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg318_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg319_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg320_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg321_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg322_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg323_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg324_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg325_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg326_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg327_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg328_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg329_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg330_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg331_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg332_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg333_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg334_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg335_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg336_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg337_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg338_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg339_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg340_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg341_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg342_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg343_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg344_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg345_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg346_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg347_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg348_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg349_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg350_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg351_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg352_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg353_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg354_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg355_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg356_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg357_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg358_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg359_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg360_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg361_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg362_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg363_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg364_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg365_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg366_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg367_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg368_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg369_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg370_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg371_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg372_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg373_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg374_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg375_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg376_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg377_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg378_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg379_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg380_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg381_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg382_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg383_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg384_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg385_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg386_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg387_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg388_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg389_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg390_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg391_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg392_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg393_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg394_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg395_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg396_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg397_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg398_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg399_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg400_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg401_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg402_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg403_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg404_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg405_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg406_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg407_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg408_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg409_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg410_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg411_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg412_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg413_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg414_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg415_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg416_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg417_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg418_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg419_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg420_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg421_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg422_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg423_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg424_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg425_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg426_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg427_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg428_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg429_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg430_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg431_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg432_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg433_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg434_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg435_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg436_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg437_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg438_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg439_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg440_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg441_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg442_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg443_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg444_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg445_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg446_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg447_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg448_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg449_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg450_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg451_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg452_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg453_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg454_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg455_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg456_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg457_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg458_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg459_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg460_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg461_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg462_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg463_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg464_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg465_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg466_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg467_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg468_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg469_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg470_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg471_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg472_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg473_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg474_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg475_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg476_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg477_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg478_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg479_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg480_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg481_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg482_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg483_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg484_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg485_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg486_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg487_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg488_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg489_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg490_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg491_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg492_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg493_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg494_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg495_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg496_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg497_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg498_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg499_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg500_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg501_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg502_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg503_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg504_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg505_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg506_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg507_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg508_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg509_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg510_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg511_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg512_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg513_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg514_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg515_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg516_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg517_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg518_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg519_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg520_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg521_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg522_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg523_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg524_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg525_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg526_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg527_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg528_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg529_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg530_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg531_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg532_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg533_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg534_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg535_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg536_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg537_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg538_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg539_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg540_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg541_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg542_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg543_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg544_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg545_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg546_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg547_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg548_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg549_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg550_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg551_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg552_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg553_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg554_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg555_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg556_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg557_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg558_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg559_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg560_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg561_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg562_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg563_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg564_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg565_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg566_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg567_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg568_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg569_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg570_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg571_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg572_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg573_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg574_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg575_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg576_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg577_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg578_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg579_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg580_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg581_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg582_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg583_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg584_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg585_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg586_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg587_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg588_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg589_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg590_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg591_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg592_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg593_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg594_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg595_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg596_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg597_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg598_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg599_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg600_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg601_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg602_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg603_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg604_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg605_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg606_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg607_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg608_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg609_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg610_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg611_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg612_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg613_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg614_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg615_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg616_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg617_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg618_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg619_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg620_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg621_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg622_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg623_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg624_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg625_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg626_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg627_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg628_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg629_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg630_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg631_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg632_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg633_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg634_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg635_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg636_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg637_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg638_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg639_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg640_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg641_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg642_1 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg643_1 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    arg644_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg645_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg646_1 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    arg647_1 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    arg648_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg649_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg650_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg651_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg652_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg653_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg654_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg655_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg656_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg657_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg658_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg659_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg660_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg661_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg662_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg663_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg664_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg665_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg666_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg667_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg668_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg669_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg670_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg671_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg672_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg673_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg674_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg675_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg676_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg677_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg678_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg679_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg680_1 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg681_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg682_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg683_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg684_1 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg685_1 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    arg686_1 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    arg687_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg688_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg689_1 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    arg690_1 = rand_strided((1000, 768), (768, 1), device='cpu', dtype=torch.float32)
    arg691_1 = rand_strided((1000, ), (1, ), device='cpu', dtype=torch.float32)
    arg692_1 = rand_strided((8, 3, 384, 384), (442368, 147456, 384, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1, arg200_1, arg201_1, arg202_1, arg203_1, arg204_1, arg205_1, arg206_1, arg207_1, arg208_1, arg209_1, arg210_1, arg211_1, arg212_1, arg213_1, arg214_1, arg215_1, arg216_1, arg217_1, arg218_1, arg219_1, arg220_1, arg221_1, arg222_1, arg223_1, arg224_1, arg225_1, arg226_1, arg227_1, arg228_1, arg229_1, arg230_1, arg231_1, arg232_1, arg233_1, arg234_1, arg235_1, arg236_1, arg237_1, arg238_1, arg239_1, arg240_1, arg241_1, arg242_1, arg243_1, arg244_1, arg245_1, arg246_1, arg247_1, arg248_1, arg249_1, arg250_1, arg251_1, arg252_1, arg253_1, arg254_1, arg255_1, arg256_1, arg257_1, arg258_1, arg259_1, arg260_1, arg261_1, arg262_1, arg263_1, arg264_1, arg265_1, arg266_1, arg267_1, arg268_1, arg269_1, arg270_1, arg271_1, arg272_1, arg273_1, arg274_1, arg275_1, arg276_1, arg277_1, arg278_1, arg279_1, arg280_1, arg281_1, arg282_1, arg283_1, arg284_1, arg285_1, arg286_1, arg287_1, arg288_1, arg289_1, arg290_1, arg291_1, arg292_1, arg293_1, arg294_1, arg295_1, arg296_1, arg297_1, arg298_1, arg299_1, arg300_1, arg301_1, arg302_1, arg303_1, arg304_1, arg305_1, arg306_1, arg307_1, arg308_1, arg309_1, arg310_1, arg311_1, arg312_1, arg313_1, arg314_1, arg315_1, arg316_1, arg317_1, arg318_1, arg319_1, arg320_1, arg321_1, arg322_1, arg323_1, arg324_1, arg325_1, arg326_1, arg327_1, arg328_1, arg329_1, arg330_1, arg331_1, arg332_1, arg333_1, arg334_1, arg335_1, arg336_1, arg337_1, arg338_1, arg339_1, arg340_1, arg341_1, arg342_1, arg343_1, arg344_1, arg345_1, arg346_1, arg347_1, arg348_1, arg349_1, arg350_1, arg351_1, arg352_1, arg353_1, arg354_1, arg355_1, arg356_1, arg357_1, arg358_1, arg359_1, arg360_1, arg361_1, arg362_1, arg363_1, arg364_1, arg365_1, arg366_1, arg367_1, arg368_1, arg369_1, arg370_1, arg371_1, arg372_1, arg373_1, arg374_1, arg375_1, arg376_1, arg377_1, arg378_1, arg379_1, arg380_1, arg381_1, arg382_1, arg383_1, arg384_1, arg385_1, arg386_1, arg387_1, arg388_1, arg389_1, arg390_1, arg391_1, arg392_1, arg393_1, arg394_1, arg395_1, arg396_1, arg397_1, arg398_1, arg399_1, arg400_1, arg401_1, arg402_1, arg403_1, arg404_1, arg405_1, arg406_1, arg407_1, arg408_1, arg409_1, arg410_1, arg411_1, arg412_1, arg413_1, arg414_1, arg415_1, arg416_1, arg417_1, arg418_1, arg419_1, arg420_1, arg421_1, arg422_1, arg423_1, arg424_1, arg425_1, arg426_1, arg427_1, arg428_1, arg429_1, arg430_1, arg431_1, arg432_1, arg433_1, arg434_1, arg435_1, arg436_1, arg437_1, arg438_1, arg439_1, arg440_1, arg441_1, arg442_1, arg443_1, arg444_1, arg445_1, arg446_1, arg447_1, arg448_1, arg449_1, arg450_1, arg451_1, arg452_1, arg453_1, arg454_1, arg455_1, arg456_1, arg457_1, arg458_1, arg459_1, arg460_1, arg461_1, arg462_1, arg463_1, arg464_1, arg465_1, arg466_1, arg467_1, arg468_1, arg469_1, arg470_1, arg471_1, arg472_1, arg473_1, arg474_1, arg475_1, arg476_1, arg477_1, arg478_1, arg479_1, arg480_1, arg481_1, arg482_1, arg483_1, arg484_1, arg485_1, arg486_1, arg487_1, arg488_1, arg489_1, arg490_1, arg491_1, arg492_1, arg493_1, arg494_1, arg495_1, arg496_1, arg497_1, arg498_1, arg499_1, arg500_1, arg501_1, arg502_1, arg503_1, arg504_1, arg505_1, arg506_1, arg507_1, arg508_1, arg509_1, arg510_1, arg511_1, arg512_1, arg513_1, arg514_1, arg515_1, arg516_1, arg517_1, arg518_1, arg519_1, arg520_1, arg521_1, arg522_1, arg523_1, arg524_1, arg525_1, arg526_1, arg527_1, arg528_1, arg529_1, arg530_1, arg531_1, arg532_1, arg533_1, arg534_1, arg535_1, arg536_1, arg537_1, arg538_1, arg539_1, arg540_1, arg541_1, arg542_1, arg543_1, arg544_1, arg545_1, arg546_1, arg547_1, arg548_1, arg549_1, arg550_1, arg551_1, arg552_1, arg553_1, arg554_1, arg555_1, arg556_1, arg557_1, arg558_1, arg559_1, arg560_1, arg561_1, arg562_1, arg563_1, arg564_1, arg565_1, arg566_1, arg567_1, arg568_1, arg569_1, arg570_1, arg571_1, arg572_1, arg573_1, arg574_1, arg575_1, arg576_1, arg577_1, arg578_1, arg579_1, arg580_1, arg581_1, arg582_1, arg583_1, arg584_1, arg585_1, arg586_1, arg587_1, arg588_1, arg589_1, arg590_1, arg591_1, arg592_1, arg593_1, arg594_1, arg595_1, arg596_1, arg597_1, arg598_1, arg599_1, arg600_1, arg601_1, arg602_1, arg603_1, arg604_1, arg605_1, arg606_1, arg607_1, arg608_1, arg609_1, arg610_1, arg611_1, arg612_1, arg613_1, arg614_1, arg615_1, arg616_1, arg617_1, arg618_1, arg619_1, arg620_1, arg621_1, arg622_1, arg623_1, arg624_1, arg625_1, arg626_1, arg627_1, arg628_1, arg629_1, arg630_1, arg631_1, arg632_1, arg633_1, arg634_1, arg635_1, arg636_1, arg637_1, arg638_1, arg639_1, arg640_1, arg641_1, arg642_1, arg643_1, arg644_1, arg645_1, arg646_1, arg647_1, arg648_1, arg649_1, arg650_1, arg651_1, arg652_1, arg653_1, arg654_1, arg655_1, arg656_1, arg657_1, arg658_1, arg659_1, arg660_1, arg661_1, arg662_1, arg663_1, arg664_1, arg665_1, arg666_1, arg667_1, arg668_1, arg669_1, arg670_1, arg671_1, arg672_1, arg673_1, arg674_1, arg675_1, arg676_1, arg677_1, arg678_1, arg679_1, arg680_1, arg681_1, arg682_1, arg683_1, arg684_1, arg685_1, arg686_1, arg687_1, arg688_1, arg689_1, arg690_1, arg691_1, arg692_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('cait_m36_384', benchmark_compiled_module)
