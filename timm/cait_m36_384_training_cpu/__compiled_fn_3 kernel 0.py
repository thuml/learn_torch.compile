
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (256L*x1) + (768L*x0))];
                        out_ptr0[static_cast<long>(x1 + (3L*x2) + (768L*x0))] = tmp0;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(147456L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x2 + (147456L*x1) + (442368L*x0))];
                        out_ptr1[static_cast<long>(x1 + (3L*x2) + (442368L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_view_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                        #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                        Welford<float> tmp_acc0 = Welford<float>();
                        Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                        out_ptr0[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.mean);
                        out_ptr1[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.m2);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                        auto tmp3 = out_ptr0[static_cast<long>(x1 + (576L*x0))];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + (576L*x0))];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(768.0);
                        auto tmp8 = tmp6 / tmp7;
                        auto tmp9 = static_cast<float>(1e-06);
                        auto tmp10 = decltype(tmp8)(tmp8 + tmp9);
                        auto tmp11 = 1 / std::sqrt(tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        tmp13.store(out_ptr2 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    tmp4.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                        #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                        Welford<float> tmp_acc0 = Welford<float>();
                        Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                            auto tmp2 = tmp0 + tmp1;
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = tmp2 + tmp5;
                            tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp6);
                        }
                        tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                        out_ptr0[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.mean);
                        out_ptr1[static_cast<long>(x1 + (576L*x0))] = static_cast<float>(tmp_acc0.m2);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp7 = out_ptr0[static_cast<long>(x1 + (576L*x0))];
                        auto tmp10 = out_ptr1[static_cast<long>(x1 + (576L*x0))];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = tmp3 * tmp4;
                        auto tmp6 = tmp2 + tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 - tmp8;
                        auto tmp11 = static_cast<float>(768.0);
                        auto tmp12 = tmp10 / tmp11;
                        auto tmp13 = static_cast<float>(1e-06);
                        auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                        auto tmp15 = 1 / std::sqrt(tmp14);
                        auto tmp16 = at::vec::Vectorized<float>(tmp15);
                        auto tmp17 = tmp9 * tmp16;
                        tmp17.store(out_ptr2 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    tmp4.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = tmp3 * tmp4;
                        auto tmp6 = tmp2 + tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp6 + tmp9;
                        tmp10.store(out_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_219 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_220 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_221 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_222 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_223 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_224 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_225 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_226 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_227 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_228 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_229 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_230 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_231 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_232 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_233 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_234 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_235 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_236 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_237 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_238 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_239 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_240 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_241 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_242 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_243 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_244 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_245 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_246 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_247 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_248 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_249 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_250 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_251 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_252 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_253 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_254 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_255 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_256 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_257 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_258 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_259 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_260 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_261 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_262 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_263 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_264 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_265 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_266 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_267 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_268 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_269 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_270 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_271 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_272 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_273 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_274 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_275 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_276 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_277 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_278 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_279 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_280 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_281 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp8);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = out_ptr2[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = static_cast<float>(768.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp7 = static_cast<float>(1e-06);
                    auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                    auto tmp9 = 1 / std::sqrt(tmp8);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp13 = tmp11 * tmp12;
                    auto tmp15 = tmp13 + tmp14;
                    tmp11.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    tmp15.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_mul_282 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            auto tmp1 = static_cast<float>(0.14433756729740643);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 * tmp2;
                            tmp3.store(out_ptr0 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(768L + x1 + (2304L*x2) + (1327104L*x0)), static_cast<long>(2304L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (576L*x1_inner) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_clone_283 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((331776L*x1) + (331776L*x1_inner) + (5308416L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(x0) % static_cast<long>(331776L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax__unsafe_view_clone_284 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(max:at::vec::Vectorized<float>:omp_out = at::vec::maximum(omp_out, omp_in)) initializer(omp_priv={at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity())})
                        float tmp_acc0 = -std::numeric_limits<float>::infinity();
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(-std::numeric_limits<float>::infinity());
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (9216L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp2 = tmp0 + tmp1;
                            tmp_acc0_vec = at::vec::maximum(tmp_acc0_vec, tmp2);
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2 + (16L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 - tmp3;
                        auto tmp5 = tmp4.exp();
                        tmp5.store(in_out_ptr0 + static_cast<long>(x2 + (16L*x1) + (9216L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(8L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(576L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (16L*x3) + (9216L*x2) + (9216L*x2_inner) + (5308416L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            }
                            tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x2 + (576L*x1) + (9216L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2654208L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (16L*x0)));
                    auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr1[static_cast<long>((576L*x1) + (576L*x1_inner) + (9216L*(c10::div_floor_integer(x0, 331776L))) + (static_cast<long>(c10::div_floor_integer(x0, 576L)) % static_cast<long>(576L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp2 = tmp0 / tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_285 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(331776L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (16L*x2) + (5308416L*x0)), static_cast<long>(16L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 + tmp3;
                            tmp4.store(out_ptr0 + static_cast<long>(x2 + (331776L*x1) + (331776L*x1_inner) + (5308416L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(1536L + x3 + (48L*x1) + (2304L*x2) + (1327104L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (48L*x2) + (27648L*x1) + (442368L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_286 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((48L*(static_cast<long>(x0) % static_cast<long>(576L))) + (27648L*(c10::div_floor_integer((x1 + x1_inner), 48L))) + (442368L*(c10::div_floor_integer(x0, 576L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(48L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_287 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp5 = out_ptr0[static_cast<long>(x0)];
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = static_cast<float>(768.0);
                    auto tmp10 = tmp8 / tmp9;
                    auto tmp11 = static_cast<float>(1e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                    auto tmp13 = 1 / std::sqrt(tmp12);
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = tmp17 + tmp18;
                    tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_view_288 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14155776L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.5);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                auto tmp4 = static_cast<float>(0.7071067811865476);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp0 * tmp5;
                auto tmp7 = tmp6.erf();
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 + tmp9;
                auto tmp11 = tmp3 * tmp10;
                tmp11.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_cat_mul_native_layer_norm_289 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr4)
{
    auto out_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (768L*x1) + (442368L*x0)));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 + tmp3;
                        auto tmp7 = tmp5 * tmp6;
                        auto tmp8 = tmp4 + tmp7;
                        tmp8.store(out_ptr0 + static_cast<long>(x2 + (768L*x1) + (443136L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        tmp0.store(out_ptr1 + static_cast<long>(x1 + (443136L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    tmp7.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = in_out_ptr0[static_cast<long>(x0)];
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp10 = tmp8 + tmp9;
                    tmp10.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_permute_290 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                }
            }
        }
    }
}
''')


cpp_fused_permute_291 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_permute_292 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_293 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                Welford<float> tmp_acc0 = Welford<float>();
                Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                }
                tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                auto tmp5 = out_ptr0[static_cast<long>(x0)];
                auto tmp8 = out_ptr1[static_cast<long>(x0)];
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = tmp0 + tmp3;
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 - tmp6;
                auto tmp9 = static_cast<float>(768.0);
                auto tmp10 = tmp8 / tmp9;
                auto tmp11 = static_cast<float>(1e-06);
                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                auto tmp13 = 1 / std::sqrt(tmp12);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp7 * tmp14;
                auto tmp17 = tmp15 * tmp16;
                auto tmp19 = tmp17 + tmp18;
                tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
            }
        }
    }
}
''')


cpp_fused_gelu_view_294 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(24576L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.5);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            auto tmp4 = static_cast<float>(0.7071067811865476);
            auto tmp5 = at::vec::Vectorized<float>(tmp4);
            auto tmp6 = tmp0 * tmp5;
            auto tmp7 = tmp6.erf();
            auto tmp8 = static_cast<float>(1.0);
            auto tmp9 = at::vec::Vectorized<float>(tmp8);
            auto tmp10 = tmp7 + tmp9;
            auto tmp11 = tmp3 * tmp10;
            tmp11.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_cat_mul_native_layer_norm_295 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr4)
{
    auto out_ptr3 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (768L*x0)));
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = tmp0 + tmp3;
                auto tmp7 = tmp5 * tmp6;
                auto tmp8 = tmp4 + tmp7;
                tmp8.store(out_ptr0 + static_cast<long>(x1 + (443136L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(442368L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (443136L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (443136L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    tmp7.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = in_out_ptr0[static_cast<long>(x0)];
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 - tmp2;
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp10 = tmp8 + tmp9;
                    tmp10.store(out_ptr4 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_permute_296 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                }
            }
        }
    }
}
''')


cpp_fused_permute_297 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_permute_298 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_native_layer_norm_view_299 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                Welford<float> tmp_acc0 = Welford<float>();
                Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (443136L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 + tmp3;
                    tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp4);
                }
                tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (443136L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x0)));
                auto tmp5 = out_ptr0[static_cast<long>(x0)];
                auto tmp8 = out_ptr1[static_cast<long>(x0)];
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = tmp0 + tmp3;
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 - tmp6;
                auto tmp9 = static_cast<float>(768.0);
                auto tmp10 = tmp8 / tmp9;
                auto tmp11 = static_cast<float>(1e-06);
                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                auto tmp13 = 1 / std::sqrt(tmp12);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp7 * tmp14;
                auto tmp17 = tmp15 * tmp16;
                auto tmp19 = tmp17 + tmp18;
                tmp15.store(out_ptr2 + static_cast<long>(x1 + (768L*x0)));
                tmp19.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
            }
        }
    }
}
''')


cpp_fused_gelu_view_300 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(24576L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.5);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            auto tmp4 = static_cast<float>(0.7071067811865476);
            auto tmp5 = at::vec::Vectorized<float>(tmp4);
            auto tmp6 = tmp0 * tmp5;
            auto tmp7 = tmp6.erf();
            auto tmp8 = static_cast<float>(1.0);
            auto tmp9 = at::vec::Vectorized<float>(tmp8);
            auto tmp10 = tmp7 + tmp9;
            auto tmp11 = tmp3 * tmp10;
            tmp11.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_clone_native_layer_norm_301 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr3)
{
    auto out_ptr2 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(577L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(1);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x2 + (443136L*x0)), to_float_mask(tmp4));
                            auto tmp7 = masked_load(in_ptr1 + static_cast<long>(x2), to_float_mask(tmp4));
                            auto tmp8 = masked_load(in_ptr2 + static_cast<long>(x2 + (768L*x0)), to_float_mask(tmp4));
                            auto tmp9 = tmp7 * tmp8;
                            auto tmp10 = tmp6 + tmp9;
                            auto tmp11 = masked_load(in_ptr3 + static_cast<long>(x2), to_float_mask(tmp4));
                            auto tmp12 = masked_load(in_ptr4 + static_cast<long>(x2 + (768L*x0)), to_float_mask(tmp4));
                            auto tmp13 = tmp11 * tmp12;
                            auto tmp14 = tmp10 + tmp13;
                            return tmp14;
                        }
                        ;
                        auto tmp15 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp16 = tmp0 >= tmp3;
                        auto tmp17 = static_cast<int>(577);
                        auto tmp18 = tmp0 < tmp17;
                        auto tmp19 = [&]
                        {
                            auto tmp20 = masked_load(in_ptr5 + static_cast<long>((-768L) + x2 + (768L*x1) + (443136L*x0)), to_float_mask(tmp16));
                            return tmp20;
                        }
                        ;
                        auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                        auto tmp22 = to_float_mask(tmp4);
                        auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                        tmp23.store(out_ptr0 + static_cast<long>(x2 + (768L*x1) + (443136L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(welford:Welford<float>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<float>()})
                    #pragma omp declare reduction(welford:Welford<at::vec::Vectorized<float>>:omp_out = welford_combine(omp_out, omp_in)) initializer(omp_priv={Welford<at::vec::Vectorized<float>>()})
                    Welford<float> tmp_acc0 = Welford<float>();
                    Welford<at::vec::Vectorized<float>> tmp_acc0_vec = Welford<at::vec::Vectorized<float>>();
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc0_vec = welford_combine(tmp_acc0_vec, tmp0);
                    }
                    tmp_acc0 = welford_combine(tmp_acc0, welford_vec_reduce_all(tmp_acc0_vec));
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.mean);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0.m2);
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4616L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    tmp7.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (443136L*x0)));
                        auto tmp1 = out_ptr1[static_cast<long>(577L*x0)];
                        auto tmp4 = in_out_ptr0[static_cast<long>(577L*x0)];
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = tmp0 - tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 * tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 + tmp9;
                        tmp10.store(out_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_add_detach_mul_native_layer_norm_native_layer_norm_backward_302 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       float* in_out_ptr3,
                       float* in_out_ptr4,
                       float* in_out_ptr5,
                       float* in_out_ptr6,
                       float* in_out_ptr7,
                       float* in_out_ptr8,
                       float* in_out_ptr9,
                       float* in_out_ptr10,
                       float* in_out_ptr11,
                       float* in_out_ptr12,
                       float* in_out_ptr13,
                       float* in_out_ptr14,
                       float* in_out_ptr15,
                       float* in_out_ptr16,
                       float* in_out_ptr17,
                       float* in_out_ptr18,
                       float* in_out_ptr19,
                       float* in_out_ptr20,
                       float* in_out_ptr21,
                       float* in_out_ptr22,
                       float* in_out_ptr23,
                       float* in_out_ptr24,
                       float* in_out_ptr25,
                       float* in_out_ptr26,
                       float* in_out_ptr27,
                       float* in_out_ptr28,
                       float* in_out_ptr29,
                       float* in_out_ptr30,
                       float* in_out_ptr31,
                       float* in_out_ptr32,
                       float* in_out_ptr33,
                       float* in_out_ptr34,
                       float* in_out_ptr35,
                       float* in_out_ptr36,
                       float* in_out_ptr37,
                       float* in_out_ptr38,
                       float* in_out_ptr39,
                       float* in_out_ptr40,
                       float* in_out_ptr41,
                       float* in_out_ptr42,
                       float* in_out_ptr43,
                       float* in_out_ptr44,
                       float* in_out_ptr45,
                       float* in_out_ptr46,
                       float* in_out_ptr47,
                       float* in_out_ptr48,
                       float* in_out_ptr49,
                       float* in_out_ptr50,
                       float* in_out_ptr51,
                       float* in_out_ptr52,
                       float* in_out_ptr53,
                       float* in_out_ptr54,
                       float* in_out_ptr55,
                       float* in_out_ptr56,
                       float* in_out_ptr57,
                       float* in_out_ptr58,
                       float* in_out_ptr59,
                       float* in_out_ptr60,
                       float* in_out_ptr61,
                       float* in_out_ptr62,
                       float* in_out_ptr63,
                       float* in_out_ptr64,
                       float* in_out_ptr65,
                       float* in_out_ptr66,
                       float* in_out_ptr67,
                       float* in_out_ptr68,
                       float* in_out_ptr69,
                       float* in_out_ptr70,
                       float* in_out_ptr71,
                       float* in_out_ptr72,
                       float* in_out_ptr73,
                       float* in_out_ptr74,
                       float* in_out_ptr75,
                       float* in_out_ptr76,
                       float* in_out_ptr77,
                       float* in_out_ptr78,
                       float* in_out_ptr79,
                       float* in_out_ptr80,
                       float* in_out_ptr81,
                       float* in_out_ptr82,
                       float* in_out_ptr83,
                       float* in_out_ptr84,
                       float* in_out_ptr85,
                       float* in_out_ptr86,
                       float* in_out_ptr87,
                       float* in_out_ptr88,
                       float* in_out_ptr89,
                       float* in_out_ptr90,
                       float* in_out_ptr91,
                       float* in_out_ptr92,
                       float* in_out_ptr93,
                       float* in_out_ptr94,
                       float* in_out_ptr95,
                       float* in_out_ptr96,
                       float* in_out_ptr97,
                       float* in_out_ptr98,
                       float* in_out_ptr99,
                       float* in_out_ptr100,
                       float* in_out_ptr101,
                       float* in_out_ptr102,
                       float* in_out_ptr103,
                       float* in_out_ptr104,
                       float* in_out_ptr105,
                       float* in_out_ptr106,
                       float* in_out_ptr107,
                       float* in_out_ptr108,
                       float* in_out_ptr109,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       const float* in_ptr16,
                       const float* in_ptr17,
                       const float* in_ptr18,
                       const float* in_ptr19,
                       const float* in_ptr20,
                       const float* in_ptr21,
                       const float* in_ptr22,
                       const float* in_ptr23,
                       const float* in_ptr24,
                       const float* in_ptr25,
                       const float* in_ptr26,
                       const float* in_ptr27,
                       const float* in_ptr28,
                       const float* in_ptr29,
                       const float* in_ptr30,
                       const float* in_ptr31,
                       const float* in_ptr32,
                       const float* in_ptr33,
                       const float* in_ptr34,
                       const float* in_ptr35,
                       const float* in_ptr36,
                       const float* in_ptr37,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(768.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 / tmp2;
            auto tmp4 = static_cast<float>(1e-06);
            auto tmp5 = at::vec::Vectorized<float>(tmp4);
            auto tmp6 = tmp3 + tmp5;
            auto tmp7 = tmp6.rsqrt();
            auto tmp8 = tmp7 / tmp2;
            tmp8.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                }
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(768.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 / tmp2;
            auto tmp4 = static_cast<float>(1e-06);
            auto tmp5 = at::vec::Vectorized<float>(tmp4);
            auto tmp6 = tmp3 + tmp5;
            auto tmp7 = tmp6.rsqrt();
            auto tmp8 = tmp7 / tmp2;
            tmp8.store(in_out_ptr1 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (48L*x1) + (48L*x1_inner) + (768L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr1 + static_cast<long>(x1 + (16L*x2) + (768L*x0)), static_cast<long>(16L));
                }
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(768.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 / tmp2;
            auto tmp4 = static_cast<float>(1e-06);
            auto tmp5 = at::vec::Vectorized<float>(tmp4);
            auto tmp6 = tmp3 + tmp5;
            auto tmp7 = tmp6.rsqrt();
            auto tmp8 = tmp7 / tmp2;
            tmp8.store(in_out_ptr2 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr2 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr3 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr3 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr5 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr3 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr6 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr6 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr7 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr8 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr4 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr9 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr9 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr10 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr10 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr11 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr11 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr5 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr12 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr12 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr13 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr13 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr14 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr14 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr6 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr15 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr15 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr16 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr16 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr17 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr17 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr7 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr18 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr18 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr19 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr19 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr20 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr20 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr8 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr21 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr21 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr22 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr22 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr23 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr23 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr9 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr24 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr24 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr25 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr25 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr26 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr26 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr10 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr27 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr27 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr28 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr28 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr29 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr29 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr11 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr30 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr30 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr31 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr31 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr32 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr32 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr12 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr33 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr33 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr34 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr34 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr35 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr35 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr13 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr36 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr36 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr37 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr37 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr38 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr38 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr14 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr39 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr39 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr40 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr40 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr41 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr41 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr15 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr42 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr42 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr43 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr43 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr44 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr44 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr16 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr45 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr45 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr46 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr46 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr47 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr47 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr17 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr48 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr48 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr49 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr49 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr50 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr50 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr18 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr51 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr51 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr52 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr52 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr53 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr53 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr19 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr54 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr54 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr55 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr55 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr56 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr56 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr20 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr57 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr57 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr58 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr58 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr59 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr59 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr21 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr60 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr60 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr61 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr61 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr62 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr62 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr22 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr63 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr63 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr64 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr64 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr65 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr65 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr23 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr66 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr66 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr67 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr67 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr68 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr68 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr24 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr69 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr69 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr70 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr70 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr71 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr71 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr25 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr72 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr72 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr73 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr73 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr74 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr74 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr26 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr75 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr75 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr76 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr76 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr77 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr77 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr27 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr78 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr78 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr79 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr79 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr80 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr80 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr28 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr81 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr81 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr82 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr82 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr83 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr83 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr29 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr84 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr84 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr85 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr85 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr86 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr86 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr30 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr87 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr87 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr88 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr88 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr89 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr89 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr31 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr90 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr90 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr91 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr91 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr92 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr92 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr32 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr93 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr93 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr94 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr94 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr95 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr95 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr33 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr96 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr96 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr97 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr97 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr98 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr98 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr34 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr99 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr99 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr100 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr100 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr101 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr101 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr35 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr102 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr102 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr103 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr103 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr104 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr104 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr36 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr105 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr105 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr106 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr106 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr107 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr107 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(576L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(576L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr37 + static_cast<long>(x1 + (576L*x3) + (9216L*x0)), static_cast<long>(576L), tmp1, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr108 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                                auto tmp3 = tmp0 / tmp2;
                                tmp3.store(in_out_ptr108 + static_cast<long>(x3 + (16L*x2) + (9216L*x1) + (9216L*x1_inner) + (5308416L*x0)));
                            }
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(4608L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr109 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(768.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    auto tmp4 = static_cast<float>(1e-06);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.rsqrt();
                    auto tmp8 = tmp7 / tmp2;
                    tmp8.store(in_out_ptr109 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_128, primals_129, primals_130, primals_131, primals_132, primals_133, primals_134, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_144, primals_145, primals_146, primals_147, primals_148, primals_149, primals_150, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_160, primals_161, primals_162, primals_163, primals_164, primals_165, primals_166, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_176, primals_177, primals_178, primals_179, primals_180, primals_181, primals_182, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_192, primals_193, primals_194, primals_195, primals_196, primals_197, primals_198, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_208, primals_209, primals_210, primals_211, primals_212, primals_213, primals_214, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_224, primals_225, primals_226, primals_227, primals_228, primals_229, primals_230, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_240, primals_241, primals_242, primals_243, primals_244, primals_245, primals_246, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_256, primals_257, primals_258, primals_259, primals_260, primals_261, primals_262, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_272, primals_273, primals_274, primals_275, primals_276, primals_277, primals_278, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_288, primals_289, primals_290, primals_291, primals_292, primals_293, primals_294, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_304, primals_305, primals_306, primals_307, primals_308, primals_309, primals_310, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_320, primals_321, primals_322, primals_323, primals_324, primals_325, primals_326, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_336, primals_337, primals_338, primals_339, primals_340, primals_341, primals_342, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_352, primals_353, primals_354, primals_355, primals_356, primals_357, primals_358, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_368, primals_369, primals_370, primals_371, primals_372, primals_373, primals_374, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_384, primals_385, primals_386, primals_387, primals_388, primals_389, primals_390, primals_391, primals_392, primals_393, primals_394, primals_395, primals_396, primals_397, primals_398, primals_399, primals_400, primals_401, primals_402, primals_403, primals_404, primals_405, primals_406, primals_407, primals_408, primals_409, primals_410, primals_411, primals_412, primals_413, primals_414, primals_415, primals_416, primals_417, primals_418, primals_419, primals_420, primals_421, primals_422, primals_423, primals_424, primals_425, primals_426, primals_427, primals_428, primals_429, primals_430, primals_431, primals_432, primals_433, primals_434, primals_435, primals_436, primals_437, primals_438, primals_439, primals_440, primals_441, primals_442, primals_443, primals_444, primals_445, primals_446, primals_447, primals_448, primals_449, primals_450, primals_451, primals_452, primals_453, primals_454, primals_455, primals_456, primals_457, primals_458, primals_459, primals_460, primals_461, primals_462, primals_463, primals_464, primals_465, primals_466, primals_467, primals_468, primals_469, primals_470, primals_471, primals_472, primals_473, primals_474, primals_475, primals_476, primals_477, primals_478, primals_479, primals_480, primals_481, primals_482, primals_483, primals_484, primals_485, primals_486, primals_487, primals_488, primals_489, primals_490, primals_491, primals_492, primals_493, primals_494, primals_495, primals_496, primals_497, primals_498, primals_499, primals_500, primals_501, primals_502, primals_503, primals_504, primals_505, primals_506, primals_507, primals_508, primals_509, primals_510, primals_511, primals_512, primals_513, primals_514, primals_515, primals_516, primals_517, primals_518, primals_519, primals_520, primals_521, primals_522, primals_523, primals_524, primals_525, primals_526, primals_527, primals_528, primals_529, primals_530, primals_531, primals_532, primals_533, primals_534, primals_535, primals_536, primals_537, primals_538, primals_539, primals_540, primals_541, primals_542, primals_543, primals_544, primals_545, primals_546, primals_547, primals_548, primals_549, primals_550, primals_551, primals_552, primals_553, primals_554, primals_555, primals_556, primals_557, primals_558, primals_559, primals_560, primals_561, primals_562, primals_563, primals_564, primals_565, primals_566, primals_567, primals_568, primals_569, primals_570, primals_571, primals_572, primals_573, primals_574, primals_575, primals_576, primals_577, primals_578, primals_579, primals_580, primals_581, primals_582, primals_583, primals_584, primals_585, primals_586, primals_587, primals_588, primals_589, primals_590, primals_591, primals_592, primals_593, primals_594, primals_595, primals_596, primals_597, primals_598, primals_599, primals_600, primals_601, primals_602, primals_603, primals_604, primals_605, primals_606, primals_607, primals_608, primals_609, primals_610, primals_611, primals_612, primals_613, primals_614, primals_615, primals_616, primals_617, primals_618, primals_619, primals_620, primals_621, primals_622, primals_623, primals_624, primals_625, primals_626, primals_627, primals_628, primals_629, primals_630, primals_631, primals_632, primals_633, primals_634, primals_635, primals_636, primals_637, primals_638, primals_639, primals_640, primals_641, primals_642, primals_643, primals_644, primals_645, primals_646, primals_647, primals_648, primals_649, primals_650, primals_651, primals_652, primals_653, primals_654, primals_655, primals_656, primals_657, primals_658, primals_659, primals_660, primals_661, primals_662, primals_663, primals_664, primals_665, primals_666, primals_667, primals_668, primals_669, primals_670, primals_671, primals_672, primals_673, primals_674, primals_675, primals_676, primals_677, primals_678, primals_679, primals_680, primals_681, primals_682, primals_683, primals_684, primals_685, primals_686, primals_687, primals_688, primals_689, primals_690, primals_691, primals_692, primals_693 = args
    args.clear()
    assert_size_stride(primals_1, (1, 576, 768), (442368, 768, 1))
    assert_size_stride(primals_2, (768, ), (1, ))
    assert_size_stride(primals_3, (768, ), (1, ))
    assert_size_stride(primals_4, (768, ), (1, ))
    assert_size_stride(primals_5, (768, ), (1, ))
    assert_size_stride(primals_6, (768, ), (1, ))
    assert_size_stride(primals_7, (768, ), (1, ))
    assert_size_stride(primals_8, (768, ), (1, ))
    assert_size_stride(primals_9, (768, ), (1, ))
    assert_size_stride(primals_10, (768, ), (1, ))
    assert_size_stride(primals_11, (768, ), (1, ))
    assert_size_stride(primals_12, (768, ), (1, ))
    assert_size_stride(primals_13, (768, ), (1, ))
    assert_size_stride(primals_14, (768, ), (1, ))
    assert_size_stride(primals_15, (768, ), (1, ))
    assert_size_stride(primals_16, (768, ), (1, ))
    assert_size_stride(primals_17, (768, ), (1, ))
    assert_size_stride(primals_18, (768, ), (1, ))
    assert_size_stride(primals_19, (768, ), (1, ))
    assert_size_stride(primals_20, (768, ), (1, ))
    assert_size_stride(primals_21, (768, ), (1, ))
    assert_size_stride(primals_22, (768, ), (1, ))
    assert_size_stride(primals_23, (768, ), (1, ))
    assert_size_stride(primals_24, (768, ), (1, ))
    assert_size_stride(primals_25, (768, ), (1, ))
    assert_size_stride(primals_26, (768, ), (1, ))
    assert_size_stride(primals_27, (768, ), (1, ))
    assert_size_stride(primals_28, (768, ), (1, ))
    assert_size_stride(primals_29, (768, ), (1, ))
    assert_size_stride(primals_30, (768, ), (1, ))
    assert_size_stride(primals_31, (768, ), (1, ))
    assert_size_stride(primals_32, (768, ), (1, ))
    assert_size_stride(primals_33, (768, ), (1, ))
    assert_size_stride(primals_34, (768, ), (1, ))
    assert_size_stride(primals_35, (768, ), (1, ))
    assert_size_stride(primals_36, (768, ), (1, ))
    assert_size_stride(primals_37, (768, ), (1, ))
    assert_size_stride(primals_38, (768, ), (1, ))
    assert_size_stride(primals_39, (768, ), (1, ))
    assert_size_stride(primals_40, (768, ), (1, ))
    assert_size_stride(primals_41, (768, ), (1, ))
    assert_size_stride(primals_42, (768, ), (1, ))
    assert_size_stride(primals_43, (768, ), (1, ))
    assert_size_stride(primals_44, (768, ), (1, ))
    assert_size_stride(primals_45, (768, ), (1, ))
    assert_size_stride(primals_46, (768, ), (1, ))
    assert_size_stride(primals_47, (768, ), (1, ))
    assert_size_stride(primals_48, (768, ), (1, ))
    assert_size_stride(primals_49, (768, ), (1, ))
    assert_size_stride(primals_50, (768, ), (1, ))
    assert_size_stride(primals_51, (768, ), (1, ))
    assert_size_stride(primals_52, (768, ), (1, ))
    assert_size_stride(primals_53, (768, ), (1, ))
    assert_size_stride(primals_54, (768, ), (1, ))
    assert_size_stride(primals_55, (768, ), (1, ))
    assert_size_stride(primals_56, (768, ), (1, ))
    assert_size_stride(primals_57, (768, ), (1, ))
    assert_size_stride(primals_58, (768, ), (1, ))
    assert_size_stride(primals_59, (768, ), (1, ))
    assert_size_stride(primals_60, (768, ), (1, ))
    assert_size_stride(primals_61, (768, ), (1, ))
    assert_size_stride(primals_62, (768, ), (1, ))
    assert_size_stride(primals_63, (768, ), (1, ))
    assert_size_stride(primals_64, (768, ), (1, ))
    assert_size_stride(primals_65, (768, ), (1, ))
    assert_size_stride(primals_66, (768, ), (1, ))
    assert_size_stride(primals_67, (768, ), (1, ))
    assert_size_stride(primals_68, (768, ), (1, ))
    assert_size_stride(primals_69, (768, ), (1, ))
    assert_size_stride(primals_70, (768, ), (1, ))
    assert_size_stride(primals_71, (768, ), (1, ))
    assert_size_stride(primals_72, (768, ), (1, ))
    assert_size_stride(primals_73, (768, ), (1, ))
    assert_size_stride(primals_74, (1, 1, 768), (768, 768, 1))
    assert_size_stride(primals_75, (768, ), (1, ))
    assert_size_stride(primals_76, (768, ), (1, ))
    assert_size_stride(primals_77, (768, ), (1, ))
    assert_size_stride(primals_78, (768, ), (1, ))
    assert_size_stride(primals_79, (768, 3, 16, 16), (768, 256, 16, 1))
    assert_size_stride(primals_80, (768, ), (1, ))
    assert_size_stride(primals_81, (768, ), (1, ))
    assert_size_stride(primals_82, (768, ), (1, ))
    assert_size_stride(primals_83, (2304, 768), (768, 1))
    assert_size_stride(primals_84, (2304, ), (1, ))
    assert_size_stride(primals_85, (16, 16), (16, 1))
    assert_size_stride(primals_86, (16, ), (1, ))
    assert_size_stride(primals_87, (16, 16), (16, 1))
    assert_size_stride(primals_88, (16, ), (1, ))
    assert_size_stride(primals_89, (768, 768), (768, 1))
    assert_size_stride(primals_90, (768, ), (1, ))
    assert_size_stride(primals_91, (768, ), (1, ))
    assert_size_stride(primals_92, (768, ), (1, ))
    assert_size_stride(primals_93, (3072, 768), (768, 1))
    assert_size_stride(primals_94, (3072, ), (1, ))
    assert_size_stride(primals_95, (768, 3072), (3072, 1))
    assert_size_stride(primals_96, (768, ), (1, ))
    assert_size_stride(primals_97, (768, ), (1, ))
    assert_size_stride(primals_98, (768, ), (1, ))
    assert_size_stride(primals_99, (2304, 768), (768, 1))
    assert_size_stride(primals_100, (2304, ), (1, ))
    assert_size_stride(primals_101, (16, 16), (16, 1))
    assert_size_stride(primals_102, (16, ), (1, ))
    assert_size_stride(primals_103, (16, 16), (16, 1))
    assert_size_stride(primals_104, (16, ), (1, ))
    assert_size_stride(primals_105, (768, 768), (768, 1))
    assert_size_stride(primals_106, (768, ), (1, ))
    assert_size_stride(primals_107, (768, ), (1, ))
    assert_size_stride(primals_108, (768, ), (1, ))
    assert_size_stride(primals_109, (3072, 768), (768, 1))
    assert_size_stride(primals_110, (3072, ), (1, ))
    assert_size_stride(primals_111, (768, 3072), (3072, 1))
    assert_size_stride(primals_112, (768, ), (1, ))
    assert_size_stride(primals_113, (768, ), (1, ))
    assert_size_stride(primals_114, (768, ), (1, ))
    assert_size_stride(primals_115, (2304, 768), (768, 1))
    assert_size_stride(primals_116, (2304, ), (1, ))
    assert_size_stride(primals_117, (16, 16), (16, 1))
    assert_size_stride(primals_118, (16, ), (1, ))
    assert_size_stride(primals_119, (16, 16), (16, 1))
    assert_size_stride(primals_120, (16, ), (1, ))
    assert_size_stride(primals_121, (768, 768), (768, 1))
    assert_size_stride(primals_122, (768, ), (1, ))
    assert_size_stride(primals_123, (768, ), (1, ))
    assert_size_stride(primals_124, (768, ), (1, ))
    assert_size_stride(primals_125, (3072, 768), (768, 1))
    assert_size_stride(primals_126, (3072, ), (1, ))
    assert_size_stride(primals_127, (768, 3072), (3072, 1))
    assert_size_stride(primals_128, (768, ), (1, ))
    assert_size_stride(primals_129, (768, ), (1, ))
    assert_size_stride(primals_130, (768, ), (1, ))
    assert_size_stride(primals_131, (2304, 768), (768, 1))
    assert_size_stride(primals_132, (2304, ), (1, ))
    assert_size_stride(primals_133, (16, 16), (16, 1))
    assert_size_stride(primals_134, (16, ), (1, ))
    assert_size_stride(primals_135, (16, 16), (16, 1))
    assert_size_stride(primals_136, (16, ), (1, ))
    assert_size_stride(primals_137, (768, 768), (768, 1))
    assert_size_stride(primals_138, (768, ), (1, ))
    assert_size_stride(primals_139, (768, ), (1, ))
    assert_size_stride(primals_140, (768, ), (1, ))
    assert_size_stride(primals_141, (3072, 768), (768, 1))
    assert_size_stride(primals_142, (3072, ), (1, ))
    assert_size_stride(primals_143, (768, 3072), (3072, 1))
    assert_size_stride(primals_144, (768, ), (1, ))
    assert_size_stride(primals_145, (768, ), (1, ))
    assert_size_stride(primals_146, (768, ), (1, ))
    assert_size_stride(primals_147, (2304, 768), (768, 1))
    assert_size_stride(primals_148, (2304, ), (1, ))
    assert_size_stride(primals_149, (16, 16), (16, 1))
    assert_size_stride(primals_150, (16, ), (1, ))
    assert_size_stride(primals_151, (16, 16), (16, 1))
    assert_size_stride(primals_152, (16, ), (1, ))
    assert_size_stride(primals_153, (768, 768), (768, 1))
    assert_size_stride(primals_154, (768, ), (1, ))
    assert_size_stride(primals_155, (768, ), (1, ))
    assert_size_stride(primals_156, (768, ), (1, ))
    assert_size_stride(primals_157, (3072, 768), (768, 1))
    assert_size_stride(primals_158, (3072, ), (1, ))
    assert_size_stride(primals_159, (768, 3072), (3072, 1))
    assert_size_stride(primals_160, (768, ), (1, ))
    assert_size_stride(primals_161, (768, ), (1, ))
    assert_size_stride(primals_162, (768, ), (1, ))
    assert_size_stride(primals_163, (2304, 768), (768, 1))
    assert_size_stride(primals_164, (2304, ), (1, ))
    assert_size_stride(primals_165, (16, 16), (16, 1))
    assert_size_stride(primals_166, (16, ), (1, ))
    assert_size_stride(primals_167, (16, 16), (16, 1))
    assert_size_stride(primals_168, (16, ), (1, ))
    assert_size_stride(primals_169, (768, 768), (768, 1))
    assert_size_stride(primals_170, (768, ), (1, ))
    assert_size_stride(primals_171, (768, ), (1, ))
    assert_size_stride(primals_172, (768, ), (1, ))
    assert_size_stride(primals_173, (3072, 768), (768, 1))
    assert_size_stride(primals_174, (3072, ), (1, ))
    assert_size_stride(primals_175, (768, 3072), (3072, 1))
    assert_size_stride(primals_176, (768, ), (1, ))
    assert_size_stride(primals_177, (768, ), (1, ))
    assert_size_stride(primals_178, (768, ), (1, ))
    assert_size_stride(primals_179, (2304, 768), (768, 1))
    assert_size_stride(primals_180, (2304, ), (1, ))
    assert_size_stride(primals_181, (16, 16), (16, 1))
    assert_size_stride(primals_182, (16, ), (1, ))
    assert_size_stride(primals_183, (16, 16), (16, 1))
    assert_size_stride(primals_184, (16, ), (1, ))
    assert_size_stride(primals_185, (768, 768), (768, 1))
    assert_size_stride(primals_186, (768, ), (1, ))
    assert_size_stride(primals_187, (768, ), (1, ))
    assert_size_stride(primals_188, (768, ), (1, ))
    assert_size_stride(primals_189, (3072, 768), (768, 1))
    assert_size_stride(primals_190, (3072, ), (1, ))
    assert_size_stride(primals_191, (768, 3072), (3072, 1))
    assert_size_stride(primals_192, (768, ), (1, ))
    assert_size_stride(primals_193, (768, ), (1, ))
    assert_size_stride(primals_194, (768, ), (1, ))
    assert_size_stride(primals_195, (2304, 768), (768, 1))
    assert_size_stride(primals_196, (2304, ), (1, ))
    assert_size_stride(primals_197, (16, 16), (16, 1))
    assert_size_stride(primals_198, (16, ), (1, ))
    assert_size_stride(primals_199, (16, 16), (16, 1))
    assert_size_stride(primals_200, (16, ), (1, ))
    assert_size_stride(primals_201, (768, 768), (768, 1))
    assert_size_stride(primals_202, (768, ), (1, ))
    assert_size_stride(primals_203, (768, ), (1, ))
    assert_size_stride(primals_204, (768, ), (1, ))
    assert_size_stride(primals_205, (3072, 768), (768, 1))
    assert_size_stride(primals_206, (3072, ), (1, ))
    assert_size_stride(primals_207, (768, 3072), (3072, 1))
    assert_size_stride(primals_208, (768, ), (1, ))
    assert_size_stride(primals_209, (768, ), (1, ))
    assert_size_stride(primals_210, (768, ), (1, ))
    assert_size_stride(primals_211, (2304, 768), (768, 1))
    assert_size_stride(primals_212, (2304, ), (1, ))
    assert_size_stride(primals_213, (16, 16), (16, 1))
    assert_size_stride(primals_214, (16, ), (1, ))
    assert_size_stride(primals_215, (16, 16), (16, 1))
    assert_size_stride(primals_216, (16, ), (1, ))
    assert_size_stride(primals_217, (768, 768), (768, 1))
    assert_size_stride(primals_218, (768, ), (1, ))
    assert_size_stride(primals_219, (768, ), (1, ))
    assert_size_stride(primals_220, (768, ), (1, ))
    assert_size_stride(primals_221, (3072, 768), (768, 1))
    assert_size_stride(primals_222, (3072, ), (1, ))
    assert_size_stride(primals_223, (768, 3072), (3072, 1))
    assert_size_stride(primals_224, (768, ), (1, ))
    assert_size_stride(primals_225, (768, ), (1, ))
    assert_size_stride(primals_226, (768, ), (1, ))
    assert_size_stride(primals_227, (2304, 768), (768, 1))
    assert_size_stride(primals_228, (2304, ), (1, ))
    assert_size_stride(primals_229, (16, 16), (16, 1))
    assert_size_stride(primals_230, (16, ), (1, ))
    assert_size_stride(primals_231, (16, 16), (16, 1))
    assert_size_stride(primals_232, (16, ), (1, ))
    assert_size_stride(primals_233, (768, 768), (768, 1))
    assert_size_stride(primals_234, (768, ), (1, ))
    assert_size_stride(primals_235, (768, ), (1, ))
    assert_size_stride(primals_236, (768, ), (1, ))
    assert_size_stride(primals_237, (3072, 768), (768, 1))
    assert_size_stride(primals_238, (3072, ), (1, ))
    assert_size_stride(primals_239, (768, 3072), (3072, 1))
    assert_size_stride(primals_240, (768, ), (1, ))
    assert_size_stride(primals_241, (768, ), (1, ))
    assert_size_stride(primals_242, (768, ), (1, ))
    assert_size_stride(primals_243, (2304, 768), (768, 1))
    assert_size_stride(primals_244, (2304, ), (1, ))
    assert_size_stride(primals_245, (16, 16), (16, 1))
    assert_size_stride(primals_246, (16, ), (1, ))
    assert_size_stride(primals_247, (16, 16), (16, 1))
    assert_size_stride(primals_248, (16, ), (1, ))
    assert_size_stride(primals_249, (768, 768), (768, 1))
    assert_size_stride(primals_250, (768, ), (1, ))
    assert_size_stride(primals_251, (768, ), (1, ))
    assert_size_stride(primals_252, (768, ), (1, ))
    assert_size_stride(primals_253, (3072, 768), (768, 1))
    assert_size_stride(primals_254, (3072, ), (1, ))
    assert_size_stride(primals_255, (768, 3072), (3072, 1))
    assert_size_stride(primals_256, (768, ), (1, ))
    assert_size_stride(primals_257, (768, ), (1, ))
    assert_size_stride(primals_258, (768, ), (1, ))
    assert_size_stride(primals_259, (2304, 768), (768, 1))
    assert_size_stride(primals_260, (2304, ), (1, ))
    assert_size_stride(primals_261, (16, 16), (16, 1))
    assert_size_stride(primals_262, (16, ), (1, ))
    assert_size_stride(primals_263, (16, 16), (16, 1))
    assert_size_stride(primals_264, (16, ), (1, ))
    assert_size_stride(primals_265, (768, 768), (768, 1))
    assert_size_stride(primals_266, (768, ), (1, ))
    assert_size_stride(primals_267, (768, ), (1, ))
    assert_size_stride(primals_268, (768, ), (1, ))
    assert_size_stride(primals_269, (3072, 768), (768, 1))
    assert_size_stride(primals_270, (3072, ), (1, ))
    assert_size_stride(primals_271, (768, 3072), (3072, 1))
    assert_size_stride(primals_272, (768, ), (1, ))
    assert_size_stride(primals_273, (768, ), (1, ))
    assert_size_stride(primals_274, (768, ), (1, ))
    assert_size_stride(primals_275, (2304, 768), (768, 1))
    assert_size_stride(primals_276, (2304, ), (1, ))
    assert_size_stride(primals_277, (16, 16), (16, 1))
    assert_size_stride(primals_278, (16, ), (1, ))
    assert_size_stride(primals_279, (16, 16), (16, 1))
    assert_size_stride(primals_280, (16, ), (1, ))
    assert_size_stride(primals_281, (768, 768), (768, 1))
    assert_size_stride(primals_282, (768, ), (1, ))
    assert_size_stride(primals_283, (768, ), (1, ))
    assert_size_stride(primals_284, (768, ), (1, ))
    assert_size_stride(primals_285, (3072, 768), (768, 1))
    assert_size_stride(primals_286, (3072, ), (1, ))
    assert_size_stride(primals_287, (768, 3072), (3072, 1))
    assert_size_stride(primals_288, (768, ), (1, ))
    assert_size_stride(primals_289, (768, ), (1, ))
    assert_size_stride(primals_290, (768, ), (1, ))
    assert_size_stride(primals_291, (2304, 768), (768, 1))
    assert_size_stride(primals_292, (2304, ), (1, ))
    assert_size_stride(primals_293, (16, 16), (16, 1))
    assert_size_stride(primals_294, (16, ), (1, ))
    assert_size_stride(primals_295, (16, 16), (16, 1))
    assert_size_stride(primals_296, (16, ), (1, ))
    assert_size_stride(primals_297, (768, 768), (768, 1))
    assert_size_stride(primals_298, (768, ), (1, ))
    assert_size_stride(primals_299, (768, ), (1, ))
    assert_size_stride(primals_300, (768, ), (1, ))
    assert_size_stride(primals_301, (3072, 768), (768, 1))
    assert_size_stride(primals_302, (3072, ), (1, ))
    assert_size_stride(primals_303, (768, 3072), (3072, 1))
    assert_size_stride(primals_304, (768, ), (1, ))
    assert_size_stride(primals_305, (768, ), (1, ))
    assert_size_stride(primals_306, (768, ), (1, ))
    assert_size_stride(primals_307, (2304, 768), (768, 1))
    assert_size_stride(primals_308, (2304, ), (1, ))
    assert_size_stride(primals_309, (16, 16), (16, 1))
    assert_size_stride(primals_310, (16, ), (1, ))
    assert_size_stride(primals_311, (16, 16), (16, 1))
    assert_size_stride(primals_312, (16, ), (1, ))
    assert_size_stride(primals_313, (768, 768), (768, 1))
    assert_size_stride(primals_314, (768, ), (1, ))
    assert_size_stride(primals_315, (768, ), (1, ))
    assert_size_stride(primals_316, (768, ), (1, ))
    assert_size_stride(primals_317, (3072, 768), (768, 1))
    assert_size_stride(primals_318, (3072, ), (1, ))
    assert_size_stride(primals_319, (768, 3072), (3072, 1))
    assert_size_stride(primals_320, (768, ), (1, ))
    assert_size_stride(primals_321, (768, ), (1, ))
    assert_size_stride(primals_322, (768, ), (1, ))
    assert_size_stride(primals_323, (2304, 768), (768, 1))
    assert_size_stride(primals_324, (2304, ), (1, ))
    assert_size_stride(primals_325, (16, 16), (16, 1))
    assert_size_stride(primals_326, (16, ), (1, ))
    assert_size_stride(primals_327, (16, 16), (16, 1))
    assert_size_stride(primals_328, (16, ), (1, ))
    assert_size_stride(primals_329, (768, 768), (768, 1))
    assert_size_stride(primals_330, (768, ), (1, ))
    assert_size_stride(primals_331, (768, ), (1, ))
    assert_size_stride(primals_332, (768, ), (1, ))
    assert_size_stride(primals_333, (3072, 768), (768, 1))
    assert_size_stride(primals_334, (3072, ), (1, ))
    assert_size_stride(primals_335, (768, 3072), (3072, 1))
    assert_size_stride(primals_336, (768, ), (1, ))
    assert_size_stride(primals_337, (768, ), (1, ))
    assert_size_stride(primals_338, (768, ), (1, ))
    assert_size_stride(primals_339, (2304, 768), (768, 1))
    assert_size_stride(primals_340, (2304, ), (1, ))
    assert_size_stride(primals_341, (16, 16), (16, 1))
    assert_size_stride(primals_342, (16, ), (1, ))
    assert_size_stride(primals_343, (16, 16), (16, 1))
    assert_size_stride(primals_344, (16, ), (1, ))
    assert_size_stride(primals_345, (768, 768), (768, 1))
    assert_size_stride(primals_346, (768, ), (1, ))
    assert_size_stride(primals_347, (768, ), (1, ))
    assert_size_stride(primals_348, (768, ), (1, ))
    assert_size_stride(primals_349, (3072, 768), (768, 1))
    assert_size_stride(primals_350, (3072, ), (1, ))
    assert_size_stride(primals_351, (768, 3072), (3072, 1))
    assert_size_stride(primals_352, (768, ), (1, ))
    assert_size_stride(primals_353, (768, ), (1, ))
    assert_size_stride(primals_354, (768, ), (1, ))
    assert_size_stride(primals_355, (2304, 768), (768, 1))
    assert_size_stride(primals_356, (2304, ), (1, ))
    assert_size_stride(primals_357, (16, 16), (16, 1))
    assert_size_stride(primals_358, (16, ), (1, ))
    assert_size_stride(primals_359, (16, 16), (16, 1))
    assert_size_stride(primals_360, (16, ), (1, ))
    assert_size_stride(primals_361, (768, 768), (768, 1))
    assert_size_stride(primals_362, (768, ), (1, ))
    assert_size_stride(primals_363, (768, ), (1, ))
    assert_size_stride(primals_364, (768, ), (1, ))
    assert_size_stride(primals_365, (3072, 768), (768, 1))
    assert_size_stride(primals_366, (3072, ), (1, ))
    assert_size_stride(primals_367, (768, 3072), (3072, 1))
    assert_size_stride(primals_368, (768, ), (1, ))
    assert_size_stride(primals_369, (768, ), (1, ))
    assert_size_stride(primals_370, (768, ), (1, ))
    assert_size_stride(primals_371, (2304, 768), (768, 1))
    assert_size_stride(primals_372, (2304, ), (1, ))
    assert_size_stride(primals_373, (16, 16), (16, 1))
    assert_size_stride(primals_374, (16, ), (1, ))
    assert_size_stride(primals_375, (16, 16), (16, 1))
    assert_size_stride(primals_376, (16, ), (1, ))
    assert_size_stride(primals_377, (768, 768), (768, 1))
    assert_size_stride(primals_378, (768, ), (1, ))
    assert_size_stride(primals_379, (768, ), (1, ))
    assert_size_stride(primals_380, (768, ), (1, ))
    assert_size_stride(primals_381, (3072, 768), (768, 1))
    assert_size_stride(primals_382, (3072, ), (1, ))
    assert_size_stride(primals_383, (768, 3072), (3072, 1))
    assert_size_stride(primals_384, (768, ), (1, ))
    assert_size_stride(primals_385, (768, ), (1, ))
    assert_size_stride(primals_386, (768, ), (1, ))
    assert_size_stride(primals_387, (2304, 768), (768, 1))
    assert_size_stride(primals_388, (2304, ), (1, ))
    assert_size_stride(primals_389, (16, 16), (16, 1))
    assert_size_stride(primals_390, (16, ), (1, ))
    assert_size_stride(primals_391, (16, 16), (16, 1))
    assert_size_stride(primals_392, (16, ), (1, ))
    assert_size_stride(primals_393, (768, 768), (768, 1))
    assert_size_stride(primals_394, (768, ), (1, ))
    assert_size_stride(primals_395, (768, ), (1, ))
    assert_size_stride(primals_396, (768, ), (1, ))
    assert_size_stride(primals_397, (3072, 768), (768, 1))
    assert_size_stride(primals_398, (3072, ), (1, ))
    assert_size_stride(primals_399, (768, 3072), (3072, 1))
    assert_size_stride(primals_400, (768, ), (1, ))
    assert_size_stride(primals_401, (768, ), (1, ))
    assert_size_stride(primals_402, (768, ), (1, ))
    assert_size_stride(primals_403, (2304, 768), (768, 1))
    assert_size_stride(primals_404, (2304, ), (1, ))
    assert_size_stride(primals_405, (16, 16), (16, 1))
    assert_size_stride(primals_406, (16, ), (1, ))
    assert_size_stride(primals_407, (16, 16), (16, 1))
    assert_size_stride(primals_408, (16, ), (1, ))
    assert_size_stride(primals_409, (768, 768), (768, 1))
    assert_size_stride(primals_410, (768, ), (1, ))
    assert_size_stride(primals_411, (768, ), (1, ))
    assert_size_stride(primals_412, (768, ), (1, ))
    assert_size_stride(primals_413, (3072, 768), (768, 1))
    assert_size_stride(primals_414, (3072, ), (1, ))
    assert_size_stride(primals_415, (768, 3072), (3072, 1))
    assert_size_stride(primals_416, (768, ), (1, ))
    assert_size_stride(primals_417, (768, ), (1, ))
    assert_size_stride(primals_418, (768, ), (1, ))
    assert_size_stride(primals_419, (2304, 768), (768, 1))
    assert_size_stride(primals_420, (2304, ), (1, ))
    assert_size_stride(primals_421, (16, 16), (16, 1))
    assert_size_stride(primals_422, (16, ), (1, ))
    assert_size_stride(primals_423, (16, 16), (16, 1))
    assert_size_stride(primals_424, (16, ), (1, ))
    assert_size_stride(primals_425, (768, 768), (768, 1))
    assert_size_stride(primals_426, (768, ), (1, ))
    assert_size_stride(primals_427, (768, ), (1, ))
    assert_size_stride(primals_428, (768, ), (1, ))
    assert_size_stride(primals_429, (3072, 768), (768, 1))
    assert_size_stride(primals_430, (3072, ), (1, ))
    assert_size_stride(primals_431, (768, 3072), (3072, 1))
    assert_size_stride(primals_432, (768, ), (1, ))
    assert_size_stride(primals_433, (768, ), (1, ))
    assert_size_stride(primals_434, (768, ), (1, ))
    assert_size_stride(primals_435, (2304, 768), (768, 1))
    assert_size_stride(primals_436, (2304, ), (1, ))
    assert_size_stride(primals_437, (16, 16), (16, 1))
    assert_size_stride(primals_438, (16, ), (1, ))
    assert_size_stride(primals_439, (16, 16), (16, 1))
    assert_size_stride(primals_440, (16, ), (1, ))
    assert_size_stride(primals_441, (768, 768), (768, 1))
    assert_size_stride(primals_442, (768, ), (1, ))
    assert_size_stride(primals_443, (768, ), (1, ))
    assert_size_stride(primals_444, (768, ), (1, ))
    assert_size_stride(primals_445, (3072, 768), (768, 1))
    assert_size_stride(primals_446, (3072, ), (1, ))
    assert_size_stride(primals_447, (768, 3072), (3072, 1))
    assert_size_stride(primals_448, (768, ), (1, ))
    assert_size_stride(primals_449, (768, ), (1, ))
    assert_size_stride(primals_450, (768, ), (1, ))
    assert_size_stride(primals_451, (2304, 768), (768, 1))
    assert_size_stride(primals_452, (2304, ), (1, ))
    assert_size_stride(primals_453, (16, 16), (16, 1))
    assert_size_stride(primals_454, (16, ), (1, ))
    assert_size_stride(primals_455, (16, 16), (16, 1))
    assert_size_stride(primals_456, (16, ), (1, ))
    assert_size_stride(primals_457, (768, 768), (768, 1))
    assert_size_stride(primals_458, (768, ), (1, ))
    assert_size_stride(primals_459, (768, ), (1, ))
    assert_size_stride(primals_460, (768, ), (1, ))
    assert_size_stride(primals_461, (3072, 768), (768, 1))
    assert_size_stride(primals_462, (3072, ), (1, ))
    assert_size_stride(primals_463, (768, 3072), (3072, 1))
    assert_size_stride(primals_464, (768, ), (1, ))
    assert_size_stride(primals_465, (768, ), (1, ))
    assert_size_stride(primals_466, (768, ), (1, ))
    assert_size_stride(primals_467, (2304, 768), (768, 1))
    assert_size_stride(primals_468, (2304, ), (1, ))
    assert_size_stride(primals_469, (16, 16), (16, 1))
    assert_size_stride(primals_470, (16, ), (1, ))
    assert_size_stride(primals_471, (16, 16), (16, 1))
    assert_size_stride(primals_472, (16, ), (1, ))
    assert_size_stride(primals_473, (768, 768), (768, 1))
    assert_size_stride(primals_474, (768, ), (1, ))
    assert_size_stride(primals_475, (768, ), (1, ))
    assert_size_stride(primals_476, (768, ), (1, ))
    assert_size_stride(primals_477, (3072, 768), (768, 1))
    assert_size_stride(primals_478, (3072, ), (1, ))
    assert_size_stride(primals_479, (768, 3072), (3072, 1))
    assert_size_stride(primals_480, (768, ), (1, ))
    assert_size_stride(primals_481, (768, ), (1, ))
    assert_size_stride(primals_482, (768, ), (1, ))
    assert_size_stride(primals_483, (2304, 768), (768, 1))
    assert_size_stride(primals_484, (2304, ), (1, ))
    assert_size_stride(primals_485, (16, 16), (16, 1))
    assert_size_stride(primals_486, (16, ), (1, ))
    assert_size_stride(primals_487, (16, 16), (16, 1))
    assert_size_stride(primals_488, (16, ), (1, ))
    assert_size_stride(primals_489, (768, 768), (768, 1))
    assert_size_stride(primals_490, (768, ), (1, ))
    assert_size_stride(primals_491, (768, ), (1, ))
    assert_size_stride(primals_492, (768, ), (1, ))
    assert_size_stride(primals_493, (3072, 768), (768, 1))
    assert_size_stride(primals_494, (3072, ), (1, ))
    assert_size_stride(primals_495, (768, 3072), (3072, 1))
    assert_size_stride(primals_496, (768, ), (1, ))
    assert_size_stride(primals_497, (768, ), (1, ))
    assert_size_stride(primals_498, (768, ), (1, ))
    assert_size_stride(primals_499, (2304, 768), (768, 1))
    assert_size_stride(primals_500, (2304, ), (1, ))
    assert_size_stride(primals_501, (16, 16), (16, 1))
    assert_size_stride(primals_502, (16, ), (1, ))
    assert_size_stride(primals_503, (16, 16), (16, 1))
    assert_size_stride(primals_504, (16, ), (1, ))
    assert_size_stride(primals_505, (768, 768), (768, 1))
    assert_size_stride(primals_506, (768, ), (1, ))
    assert_size_stride(primals_507, (768, ), (1, ))
    assert_size_stride(primals_508, (768, ), (1, ))
    assert_size_stride(primals_509, (3072, 768), (768, 1))
    assert_size_stride(primals_510, (3072, ), (1, ))
    assert_size_stride(primals_511, (768, 3072), (3072, 1))
    assert_size_stride(primals_512, (768, ), (1, ))
    assert_size_stride(primals_513, (768, ), (1, ))
    assert_size_stride(primals_514, (768, ), (1, ))
    assert_size_stride(primals_515, (2304, 768), (768, 1))
    assert_size_stride(primals_516, (2304, ), (1, ))
    assert_size_stride(primals_517, (16, 16), (16, 1))
    assert_size_stride(primals_518, (16, ), (1, ))
    assert_size_stride(primals_519, (16, 16), (16, 1))
    assert_size_stride(primals_520, (16, ), (1, ))
    assert_size_stride(primals_521, (768, 768), (768, 1))
    assert_size_stride(primals_522, (768, ), (1, ))
    assert_size_stride(primals_523, (768, ), (1, ))
    assert_size_stride(primals_524, (768, ), (1, ))
    assert_size_stride(primals_525, (3072, 768), (768, 1))
    assert_size_stride(primals_526, (3072, ), (1, ))
    assert_size_stride(primals_527, (768, 3072), (3072, 1))
    assert_size_stride(primals_528, (768, ), (1, ))
    assert_size_stride(primals_529, (768, ), (1, ))
    assert_size_stride(primals_530, (768, ), (1, ))
    assert_size_stride(primals_531, (2304, 768), (768, 1))
    assert_size_stride(primals_532, (2304, ), (1, ))
    assert_size_stride(primals_533, (16, 16), (16, 1))
    assert_size_stride(primals_534, (16, ), (1, ))
    assert_size_stride(primals_535, (16, 16), (16, 1))
    assert_size_stride(primals_536, (16, ), (1, ))
    assert_size_stride(primals_537, (768, 768), (768, 1))
    assert_size_stride(primals_538, (768, ), (1, ))
    assert_size_stride(primals_539, (768, ), (1, ))
    assert_size_stride(primals_540, (768, ), (1, ))
    assert_size_stride(primals_541, (3072, 768), (768, 1))
    assert_size_stride(primals_542, (3072, ), (1, ))
    assert_size_stride(primals_543, (768, 3072), (3072, 1))
    assert_size_stride(primals_544, (768, ), (1, ))
    assert_size_stride(primals_545, (768, ), (1, ))
    assert_size_stride(primals_546, (768, ), (1, ))
    assert_size_stride(primals_547, (2304, 768), (768, 1))
    assert_size_stride(primals_548, (2304, ), (1, ))
    assert_size_stride(primals_549, (16, 16), (16, 1))
    assert_size_stride(primals_550, (16, ), (1, ))
    assert_size_stride(primals_551, (16, 16), (16, 1))
    assert_size_stride(primals_552, (16, ), (1, ))
    assert_size_stride(primals_553, (768, 768), (768, 1))
    assert_size_stride(primals_554, (768, ), (1, ))
    assert_size_stride(primals_555, (768, ), (1, ))
    assert_size_stride(primals_556, (768, ), (1, ))
    assert_size_stride(primals_557, (3072, 768), (768, 1))
    assert_size_stride(primals_558, (3072, ), (1, ))
    assert_size_stride(primals_559, (768, 3072), (3072, 1))
    assert_size_stride(primals_560, (768, ), (1, ))
    assert_size_stride(primals_561, (768, ), (1, ))
    assert_size_stride(primals_562, (768, ), (1, ))
    assert_size_stride(primals_563, (2304, 768), (768, 1))
    assert_size_stride(primals_564, (2304, ), (1, ))
    assert_size_stride(primals_565, (16, 16), (16, 1))
    assert_size_stride(primals_566, (16, ), (1, ))
    assert_size_stride(primals_567, (16, 16), (16, 1))
    assert_size_stride(primals_568, (16, ), (1, ))
    assert_size_stride(primals_569, (768, 768), (768, 1))
    assert_size_stride(primals_570, (768, ), (1, ))
    assert_size_stride(primals_571, (768, ), (1, ))
    assert_size_stride(primals_572, (768, ), (1, ))
    assert_size_stride(primals_573, (3072, 768), (768, 1))
    assert_size_stride(primals_574, (3072, ), (1, ))
    assert_size_stride(primals_575, (768, 3072), (3072, 1))
    assert_size_stride(primals_576, (768, ), (1, ))
    assert_size_stride(primals_577, (768, ), (1, ))
    assert_size_stride(primals_578, (768, ), (1, ))
    assert_size_stride(primals_579, (2304, 768), (768, 1))
    assert_size_stride(primals_580, (2304, ), (1, ))
    assert_size_stride(primals_581, (16, 16), (16, 1))
    assert_size_stride(primals_582, (16, ), (1, ))
    assert_size_stride(primals_583, (16, 16), (16, 1))
    assert_size_stride(primals_584, (16, ), (1, ))
    assert_size_stride(primals_585, (768, 768), (768, 1))
    assert_size_stride(primals_586, (768, ), (1, ))
    assert_size_stride(primals_587, (768, ), (1, ))
    assert_size_stride(primals_588, (768, ), (1, ))
    assert_size_stride(primals_589, (3072, 768), (768, 1))
    assert_size_stride(primals_590, (3072, ), (1, ))
    assert_size_stride(primals_591, (768, 3072), (3072, 1))
    assert_size_stride(primals_592, (768, ), (1, ))
    assert_size_stride(primals_593, (768, ), (1, ))
    assert_size_stride(primals_594, (768, ), (1, ))
    assert_size_stride(primals_595, (2304, 768), (768, 1))
    assert_size_stride(primals_596, (2304, ), (1, ))
    assert_size_stride(primals_597, (16, 16), (16, 1))
    assert_size_stride(primals_598, (16, ), (1, ))
    assert_size_stride(primals_599, (16, 16), (16, 1))
    assert_size_stride(primals_600, (16, ), (1, ))
    assert_size_stride(primals_601, (768, 768), (768, 1))
    assert_size_stride(primals_602, (768, ), (1, ))
    assert_size_stride(primals_603, (768, ), (1, ))
    assert_size_stride(primals_604, (768, ), (1, ))
    assert_size_stride(primals_605, (3072, 768), (768, 1))
    assert_size_stride(primals_606, (3072, ), (1, ))
    assert_size_stride(primals_607, (768, 3072), (3072, 1))
    assert_size_stride(primals_608, (768, ), (1, ))
    assert_size_stride(primals_609, (768, ), (1, ))
    assert_size_stride(primals_610, (768, ), (1, ))
    assert_size_stride(primals_611, (2304, 768), (768, 1))
    assert_size_stride(primals_612, (2304, ), (1, ))
    assert_size_stride(primals_613, (16, 16), (16, 1))
    assert_size_stride(primals_614, (16, ), (1, ))
    assert_size_stride(primals_615, (16, 16), (16, 1))
    assert_size_stride(primals_616, (16, ), (1, ))
    assert_size_stride(primals_617, (768, 768), (768, 1))
    assert_size_stride(primals_618, (768, ), (1, ))
    assert_size_stride(primals_619, (768, ), (1, ))
    assert_size_stride(primals_620, (768, ), (1, ))
    assert_size_stride(primals_621, (3072, 768), (768, 1))
    assert_size_stride(primals_622, (3072, ), (1, ))
    assert_size_stride(primals_623, (768, 3072), (3072, 1))
    assert_size_stride(primals_624, (768, ), (1, ))
    assert_size_stride(primals_625, (768, ), (1, ))
    assert_size_stride(primals_626, (768, ), (1, ))
    assert_size_stride(primals_627, (2304, 768), (768, 1))
    assert_size_stride(primals_628, (2304, ), (1, ))
    assert_size_stride(primals_629, (16, 16), (16, 1))
    assert_size_stride(primals_630, (16, ), (1, ))
    assert_size_stride(primals_631, (16, 16), (16, 1))
    assert_size_stride(primals_632, (16, ), (1, ))
    assert_size_stride(primals_633, (768, 768), (768, 1))
    assert_size_stride(primals_634, (768, ), (1, ))
    assert_size_stride(primals_635, (768, ), (1, ))
    assert_size_stride(primals_636, (768, ), (1, ))
    assert_size_stride(primals_637, (3072, 768), (768, 1))
    assert_size_stride(primals_638, (3072, ), (1, ))
    assert_size_stride(primals_639, (768, 3072), (3072, 1))
    assert_size_stride(primals_640, (768, ), (1, ))
    assert_size_stride(primals_641, (768, ), (1, ))
    assert_size_stride(primals_642, (768, ), (1, ))
    assert_size_stride(primals_643, (2304, 768), (768, 1))
    assert_size_stride(primals_644, (2304, ), (1, ))
    assert_size_stride(primals_645, (16, 16), (16, 1))
    assert_size_stride(primals_646, (16, ), (1, ))
    assert_size_stride(primals_647, (16, 16), (16, 1))
    assert_size_stride(primals_648, (16, ), (1, ))
    assert_size_stride(primals_649, (768, 768), (768, 1))
    assert_size_stride(primals_650, (768, ), (1, ))
    assert_size_stride(primals_651, (768, ), (1, ))
    assert_size_stride(primals_652, (768, ), (1, ))
    assert_size_stride(primals_653, (3072, 768), (768, 1))
    assert_size_stride(primals_654, (3072, ), (1, ))
    assert_size_stride(primals_655, (768, 3072), (3072, 1))
    assert_size_stride(primals_656, (768, ), (1, ))
    assert_size_stride(primals_657, (768, ), (1, ))
    assert_size_stride(primals_658, (768, ), (1, ))
    assert_size_stride(primals_659, (768, 768), (768, 1))
    assert_size_stride(primals_660, (768, ), (1, ))
    assert_size_stride(primals_661, (768, 768), (768, 1))
    assert_size_stride(primals_662, (768, ), (1, ))
    assert_size_stride(primals_663, (768, 768), (768, 1))
    assert_size_stride(primals_664, (768, ), (1, ))
    assert_size_stride(primals_665, (768, 768), (768, 1))
    assert_size_stride(primals_666, (768, ), (1, ))
    assert_size_stride(primals_667, (768, ), (1, ))
    assert_size_stride(primals_668, (768, ), (1, ))
    assert_size_stride(primals_669, (3072, 768), (768, 1))
    assert_size_stride(primals_670, (3072, ), (1, ))
    assert_size_stride(primals_671, (768, 3072), (3072, 1))
    assert_size_stride(primals_672, (768, ), (1, ))
    assert_size_stride(primals_673, (768, ), (1, ))
    assert_size_stride(primals_674, (768, ), (1, ))
    assert_size_stride(primals_675, (768, 768), (768, 1))
    assert_size_stride(primals_676, (768, ), (1, ))
    assert_size_stride(primals_677, (768, 768), (768, 1))
    assert_size_stride(primals_678, (768, ), (1, ))
    assert_size_stride(primals_679, (768, 768), (768, 1))
    assert_size_stride(primals_680, (768, ), (1, ))
    assert_size_stride(primals_681, (768, 768), (768, 1))
    assert_size_stride(primals_682, (768, ), (1, ))
    assert_size_stride(primals_683, (768, ), (1, ))
    assert_size_stride(primals_684, (768, ), (1, ))
    assert_size_stride(primals_685, (3072, 768), (768, 1))
    assert_size_stride(primals_686, (3072, ), (1, ))
    assert_size_stride(primals_687, (768, 3072), (3072, 1))
    assert_size_stride(primals_688, (768, ), (1, ))
    assert_size_stride(primals_689, (768, ), (1, ))
    assert_size_stride(primals_690, (768, ), (1, ))
    assert_size_stride(primals_691, (1000, 768), (768, 1))
    assert_size_stride(primals_692, (1000, ), (1, ))
    assert_size_stride(primals_693, (8, 3, 384, 384), (442368, 147456, 384, 1))
    buf0 = empty_strided((768, 3, 16, 16), (768, 1, 48, 3), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((8, 3, 384, 384), (442368, 1, 1152, 3), device='cpu', dtype=torch.float32)
    cpp_fused_0(c_void_p(primals_79.data_ptr()), c_void_p(primals_693.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del primals_693
    del primals_79
    # Source Nodes: [x], Original ATen: [aten.convolution]
    buf2 = extern_kernels.convolution(buf1, buf0, primals_80, stride=(16, 16), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1)
    assert_size_stride(buf2, (8, 768, 24, 24), (442368, 1, 18432, 768))
    del primals_80
    buf3 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf6 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf7 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_view_1(c_void_p(buf2.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(primals_81.data_ptr()), c_void_p(primals_82.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()))
    del primals_82
    buf8 = empty((4608, 2304), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___0___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_84, buf7, reinterpret_tensor(primals_83, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf8)
    del primals_84
    buf9 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    buf10 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_2(c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()))
    buf11 = empty((128, 576, 576), device='cpu', dtype=torch.float32)
    # Source Nodes: [attn], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf9, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf10, (128, 48, 576), (27648, 576, 1), 0), out=buf11)
    buf12 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_3(c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()))
    buf13 = reinterpret_tensor(buf11, (2654208, 16), (16, 1), 0); del buf11  # reuse
    # Source Nodes: [getattr_l__mod___blocks___0___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf12, reinterpret_tensor(primals_85, (16, 16), (1, 16), 0), out=buf13)
    buf14 = empty_strided((8, 16, 576, 1), (9216, 1, 16, 73728), device='cpu', dtype=torch.float32)
    buf15 = reinterpret_tensor(buf13, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf13  # reuse
    buf16 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf17 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_4(c_void_p(buf15.data_ptr()), c_void_p(primals_86.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(buf17.data_ptr()))
    del primals_86
    buf18 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___0___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf17, reinterpret_tensor(primals_87, (16, 16), (1, 16), 0), out=buf18)
    buf19 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf20 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_5(c_void_p(buf18.data_ptr()), c_void_p(primals_88.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(buf20.data_ptr()))
    del primals_88
    buf21 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf19, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf20, (128, 576, 48), (27648, 48, 1), 0), out=buf21)
    buf22 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_6(c_void_p(buf21.data_ptr()), c_void_p(buf22.data_ptr()))
    buf23 = reinterpret_tensor(buf21, (4608, 768), (768, 1), 0); del buf21  # reuse
    # Source Nodes: [x_7], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_90, buf22, reinterpret_tensor(primals_89, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf23)
    del primals_90
    buf24 = buf3; del buf3  # reuse
    buf25 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf27 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf28 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_7(c_void_p(buf2.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(primals_91.data_ptr()), c_void_p(primals_92.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf25.data_ptr()), c_void_p(buf27.data_ptr()), c_void_p(buf28.data_ptr()))
    del primals_92
    buf29 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_10], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_94, buf28, reinterpret_tensor(primals_93, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf29)
    del primals_94
    buf30 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_8(c_void_p(buf29.data_ptr()), c_void_p(buf30.data_ptr()))
    buf31 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_14], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_96, buf30, reinterpret_tensor(primals_95, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf31)
    del primals_96
    buf32 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf33 = buf24; del buf24  # reuse
    buf34 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf36 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf37 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_9(c_void_p(buf2.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(primals_97.data_ptr()), c_void_p(primals_98.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(buf34.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(buf37.data_ptr()))
    del primals_1
    del primals_98
    buf38 = buf8; del buf8  # reuse
    # Source Nodes: [getattr_l__mod___blocks___1___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_100, buf37, reinterpret_tensor(primals_99, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf38)
    del primals_100
    buf39 = reinterpret_tensor(buf2, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf2  # reuse
    buf40 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_10(c_void_p(buf38.data_ptr()), c_void_p(buf39.data_ptr()), c_void_p(buf40.data_ptr()))
    buf41 = reinterpret_tensor(buf18, (128, 576, 576), (331776, 576, 1), 0); del buf18  # reuse
    # Source Nodes: [attn_5], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf39, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf40, (128, 48, 576), (27648, 576, 1), 0), out=buf41)
    buf42 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_11(c_void_p(buf41.data_ptr()), c_void_p(buf42.data_ptr()))
    buf43 = reinterpret_tensor(buf41, (2654208, 16), (16, 1), 0); del buf41  # reuse
    # Source Nodes: [getattr_l__mod___blocks___1___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf42, reinterpret_tensor(primals_101, (16, 16), (1, 16), 0), out=buf43)
    buf44 = buf14; del buf14  # reuse
    buf45 = reinterpret_tensor(buf43, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf43  # reuse
    buf46 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf47 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_12(c_void_p(buf45.data_ptr()), c_void_p(primals_102.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf47.data_ptr()))
    del primals_102
    buf48 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___1___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf47, reinterpret_tensor(primals_103, (16, 16), (1, 16), 0), out=buf48)
    buf49 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf50 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_13(c_void_p(buf48.data_ptr()), c_void_p(primals_104.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf49.data_ptr()), c_void_p(buf50.data_ptr()))
    del primals_104
    buf51 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_3], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf49, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf50, (128, 576, 48), (27648, 48, 1), 0), out=buf51)
    buf52 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_14(c_void_p(buf51.data_ptr()), c_void_p(buf52.data_ptr()))
    buf53 = reinterpret_tensor(buf51, (4608, 768), (768, 1), 0); del buf51  # reuse
    # Source Nodes: [x_18], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_106, buf52, reinterpret_tensor(primals_105, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf53)
    del primals_106
    buf54 = buf33; del buf33  # reuse
    buf55 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf57 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf58 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_15(c_void_p(buf32.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(buf53.data_ptr()), c_void_p(primals_107.data_ptr()), c_void_p(primals_108.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf55.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf58.data_ptr()))
    del primals_108
    buf59 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_21], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_110, buf58, reinterpret_tensor(primals_109, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf59)
    del primals_110
    buf60 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_16(c_void_p(buf59.data_ptr()), c_void_p(buf60.data_ptr()))
    buf61 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_25], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_112, buf60, reinterpret_tensor(primals_111, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf61)
    del primals_112
    buf62 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf63 = buf54; del buf54  # reuse
    buf64 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf66 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf67 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_17(c_void_p(buf32.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(buf53.data_ptr()), c_void_p(primals_5.data_ptr()), c_void_p(buf61.data_ptr()), c_void_p(primals_113.data_ptr()), c_void_p(primals_114.data_ptr()), c_void_p(buf62.data_ptr()), c_void_p(buf63.data_ptr()), c_void_p(buf64.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf67.data_ptr()))
    del primals_114
    buf68 = buf38; del buf38  # reuse
    # Source Nodes: [getattr_l__mod___blocks___2___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_116, buf67, reinterpret_tensor(primals_115, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf68)
    del primals_116
    buf69 = reinterpret_tensor(buf32, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf32  # reuse
    buf70 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_18(c_void_p(buf68.data_ptr()), c_void_p(buf69.data_ptr()), c_void_p(buf70.data_ptr()))
    buf71 = reinterpret_tensor(buf48, (128, 576, 576), (331776, 576, 1), 0); del buf48  # reuse
    # Source Nodes: [attn_10], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf69, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf70, (128, 48, 576), (27648, 576, 1), 0), out=buf71)
    buf72 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_19(c_void_p(buf71.data_ptr()), c_void_p(buf72.data_ptr()))
    buf73 = reinterpret_tensor(buf71, (2654208, 16), (16, 1), 0); del buf71  # reuse
    # Source Nodes: [getattr_l__mod___blocks___2___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf72, reinterpret_tensor(primals_117, (16, 16), (1, 16), 0), out=buf73)
    buf74 = buf44; del buf44  # reuse
    buf75 = reinterpret_tensor(buf73, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf73  # reuse
    buf76 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf77 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_20(c_void_p(buf75.data_ptr()), c_void_p(primals_118.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf76.data_ptr()), c_void_p(buf77.data_ptr()))
    del primals_118
    buf78 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___2___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf77, reinterpret_tensor(primals_119, (16, 16), (1, 16), 0), out=buf78)
    buf79 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf80 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_21(c_void_p(buf78.data_ptr()), c_void_p(primals_120.data_ptr()), c_void_p(buf68.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf80.data_ptr()))
    del primals_120
    buf81 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_5], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf79, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf80, (128, 576, 48), (27648, 48, 1), 0), out=buf81)
    buf82 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_22(c_void_p(buf81.data_ptr()), c_void_p(buf82.data_ptr()))
    buf83 = reinterpret_tensor(buf81, (4608, 768), (768, 1), 0); del buf81  # reuse
    # Source Nodes: [x_29], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_122, buf82, reinterpret_tensor(primals_121, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf83)
    del primals_122
    buf84 = buf63; del buf63  # reuse
    buf85 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf87 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf88 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_23(c_void_p(buf62.data_ptr()), c_void_p(primals_6.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(primals_123.data_ptr()), c_void_p(primals_124.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(buf87.data_ptr()), c_void_p(buf88.data_ptr()))
    del primals_124
    buf89 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_32], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_126, buf88, reinterpret_tensor(primals_125, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf89)
    del primals_126
    buf90 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_24(c_void_p(buf89.data_ptr()), c_void_p(buf90.data_ptr()))
    buf91 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_36], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_128, buf90, reinterpret_tensor(primals_127, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf91)
    del primals_128
    buf92 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf93 = buf84; del buf84  # reuse
    buf94 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf96 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf97 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_25(c_void_p(buf62.data_ptr()), c_void_p(primals_6.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(primals_7.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(primals_129.data_ptr()), c_void_p(primals_130.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf93.data_ptr()), c_void_p(buf94.data_ptr()), c_void_p(buf96.data_ptr()), c_void_p(buf97.data_ptr()))
    del primals_130
    buf98 = buf68; del buf68  # reuse
    # Source Nodes: [getattr_l__mod___blocks___3___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_132, buf97, reinterpret_tensor(primals_131, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf98)
    del primals_132
    buf99 = reinterpret_tensor(buf62, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf62  # reuse
    buf100 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_26(c_void_p(buf98.data_ptr()), c_void_p(buf99.data_ptr()), c_void_p(buf100.data_ptr()))
    buf101 = reinterpret_tensor(buf78, (128, 576, 576), (331776, 576, 1), 0); del buf78  # reuse
    # Source Nodes: [attn_15], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf99, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf100, (128, 48, 576), (27648, 576, 1), 0), out=buf101)
    buf102 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_27(c_void_p(buf101.data_ptr()), c_void_p(buf102.data_ptr()))
    buf103 = reinterpret_tensor(buf101, (2654208, 16), (16, 1), 0); del buf101  # reuse
    # Source Nodes: [getattr_l__mod___blocks___3___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf102, reinterpret_tensor(primals_133, (16, 16), (1, 16), 0), out=buf103)
    buf104 = buf74; del buf74  # reuse
    buf105 = reinterpret_tensor(buf103, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf103  # reuse
    buf106 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf107 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_28(c_void_p(buf105.data_ptr()), c_void_p(primals_134.data_ptr()), c_void_p(buf104.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(buf107.data_ptr()))
    del primals_134
    buf108 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___3___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf107, reinterpret_tensor(primals_135, (16, 16), (1, 16), 0), out=buf108)
    buf109 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf110 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_29(c_void_p(buf108.data_ptr()), c_void_p(primals_136.data_ptr()), c_void_p(buf98.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(buf110.data_ptr()))
    del primals_136
    buf111 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_7], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf109, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf110, (128, 576, 48), (27648, 48, 1), 0), out=buf111)
    buf112 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_30(c_void_p(buf111.data_ptr()), c_void_p(buf112.data_ptr()))
    buf113 = reinterpret_tensor(buf111, (4608, 768), (768, 1), 0); del buf111  # reuse
    # Source Nodes: [x_40], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_138, buf112, reinterpret_tensor(primals_137, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf113)
    del primals_138
    buf114 = buf93; del buf93  # reuse
    buf115 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf117 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf118 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_31(c_void_p(buf92.data_ptr()), c_void_p(primals_8.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(primals_139.data_ptr()), c_void_p(primals_140.data_ptr()), c_void_p(buf114.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(buf117.data_ptr()), c_void_p(buf118.data_ptr()))
    del primals_140
    buf119 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_43], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_142, buf118, reinterpret_tensor(primals_141, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf119)
    del primals_142
    buf120 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_32(c_void_p(buf119.data_ptr()), c_void_p(buf120.data_ptr()))
    buf121 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_47], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_144, buf120, reinterpret_tensor(primals_143, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf121)
    del primals_144
    buf122 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf123 = buf114; del buf114  # reuse
    buf124 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf126 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf127 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_33(c_void_p(buf92.data_ptr()), c_void_p(primals_8.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(primals_9.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(primals_145.data_ptr()), c_void_p(primals_146.data_ptr()), c_void_p(buf122.data_ptr()), c_void_p(buf123.data_ptr()), c_void_p(buf124.data_ptr()), c_void_p(buf126.data_ptr()), c_void_p(buf127.data_ptr()))
    del primals_146
    buf128 = buf98; del buf98  # reuse
    # Source Nodes: [getattr_l__mod___blocks___4___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_148, buf127, reinterpret_tensor(primals_147, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf128)
    del primals_148
    buf129 = reinterpret_tensor(buf92, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf92  # reuse
    buf130 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_34(c_void_p(buf128.data_ptr()), c_void_p(buf129.data_ptr()), c_void_p(buf130.data_ptr()))
    buf131 = reinterpret_tensor(buf108, (128, 576, 576), (331776, 576, 1), 0); del buf108  # reuse
    # Source Nodes: [attn_20], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf129, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf130, (128, 48, 576), (27648, 576, 1), 0), out=buf131)
    buf132 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_35(c_void_p(buf131.data_ptr()), c_void_p(buf132.data_ptr()))
    buf133 = reinterpret_tensor(buf131, (2654208, 16), (16, 1), 0); del buf131  # reuse
    # Source Nodes: [getattr_l__mod___blocks___4___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf132, reinterpret_tensor(primals_149, (16, 16), (1, 16), 0), out=buf133)
    buf134 = buf104; del buf104  # reuse
    buf135 = reinterpret_tensor(buf133, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf133  # reuse
    buf136 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf137 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_36(c_void_p(buf135.data_ptr()), c_void_p(primals_150.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(buf136.data_ptr()), c_void_p(buf137.data_ptr()))
    del primals_150
    buf138 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___4___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf137, reinterpret_tensor(primals_151, (16, 16), (1, 16), 0), out=buf138)
    buf139 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf140 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_37(c_void_p(buf138.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf140.data_ptr()))
    del primals_152
    buf141 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_9], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf139, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf140, (128, 576, 48), (27648, 48, 1), 0), out=buf141)
    buf142 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_38(c_void_p(buf141.data_ptr()), c_void_p(buf142.data_ptr()))
    buf143 = reinterpret_tensor(buf141, (4608, 768), (768, 1), 0); del buf141  # reuse
    # Source Nodes: [x_51], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_154, buf142, reinterpret_tensor(primals_153, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf143)
    del primals_154
    buf144 = buf123; del buf123  # reuse
    buf145 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf147 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf148 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_39(c_void_p(buf122.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(primals_155.data_ptr()), c_void_p(primals_156.data_ptr()), c_void_p(buf144.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(buf147.data_ptr()), c_void_p(buf148.data_ptr()))
    del primals_156
    buf149 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_54], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_158, buf148, reinterpret_tensor(primals_157, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf149)
    del primals_158
    buf150 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_40(c_void_p(buf149.data_ptr()), c_void_p(buf150.data_ptr()))
    buf151 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_58], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_160, buf150, reinterpret_tensor(primals_159, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf151)
    del primals_160
    buf152 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf153 = buf144; del buf144  # reuse
    buf154 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf156 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf157 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_41(c_void_p(buf122.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(primals_11.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(primals_161.data_ptr()), c_void_p(primals_162.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf156.data_ptr()), c_void_p(buf157.data_ptr()))
    del primals_162
    buf158 = buf128; del buf128  # reuse
    # Source Nodes: [getattr_l__mod___blocks___5___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_164, buf157, reinterpret_tensor(primals_163, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf158)
    del primals_164
    buf159 = reinterpret_tensor(buf122, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf122  # reuse
    buf160 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_42(c_void_p(buf158.data_ptr()), c_void_p(buf159.data_ptr()), c_void_p(buf160.data_ptr()))
    buf161 = reinterpret_tensor(buf138, (128, 576, 576), (331776, 576, 1), 0); del buf138  # reuse
    # Source Nodes: [attn_25], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf159, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf160, (128, 48, 576), (27648, 576, 1), 0), out=buf161)
    buf162 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_43(c_void_p(buf161.data_ptr()), c_void_p(buf162.data_ptr()))
    buf163 = reinterpret_tensor(buf161, (2654208, 16), (16, 1), 0); del buf161  # reuse
    # Source Nodes: [getattr_l__mod___blocks___5___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf162, reinterpret_tensor(primals_165, (16, 16), (1, 16), 0), out=buf163)
    buf164 = buf134; del buf134  # reuse
    buf165 = reinterpret_tensor(buf163, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf163  # reuse
    buf166 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf167 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_44(c_void_p(buf165.data_ptr()), c_void_p(primals_166.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf166.data_ptr()), c_void_p(buf167.data_ptr()))
    del primals_166
    buf168 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___5___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf167, reinterpret_tensor(primals_167, (16, 16), (1, 16), 0), out=buf168)
    buf169 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf170 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_45(c_void_p(buf168.data_ptr()), c_void_p(primals_168.data_ptr()), c_void_p(buf158.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(buf170.data_ptr()))
    del primals_168
    buf171 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_11], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf169, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf170, (128, 576, 48), (27648, 48, 1), 0), out=buf171)
    buf172 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_46(c_void_p(buf171.data_ptr()), c_void_p(buf172.data_ptr()))
    buf173 = reinterpret_tensor(buf171, (4608, 768), (768, 1), 0); del buf171  # reuse
    # Source Nodes: [x_62], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_170, buf172, reinterpret_tensor(primals_169, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf173)
    del primals_170
    buf174 = buf153; del buf153  # reuse
    buf175 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf177 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf178 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_47(c_void_p(buf152.data_ptr()), c_void_p(primals_12.data_ptr()), c_void_p(buf173.data_ptr()), c_void_p(primals_171.data_ptr()), c_void_p(primals_172.data_ptr()), c_void_p(buf174.data_ptr()), c_void_p(buf175.data_ptr()), c_void_p(buf177.data_ptr()), c_void_p(buf178.data_ptr()))
    del primals_172
    buf179 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_65], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_174, buf178, reinterpret_tensor(primals_173, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf179)
    del primals_174
    buf180 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_48(c_void_p(buf179.data_ptr()), c_void_p(buf180.data_ptr()))
    buf181 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_69], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_176, buf180, reinterpret_tensor(primals_175, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf181)
    del primals_176
    buf182 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf183 = buf174; del buf174  # reuse
    buf184 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf186 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf187 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_49(c_void_p(buf152.data_ptr()), c_void_p(primals_12.data_ptr()), c_void_p(buf173.data_ptr()), c_void_p(primals_13.data_ptr()), c_void_p(buf181.data_ptr()), c_void_p(primals_177.data_ptr()), c_void_p(primals_178.data_ptr()), c_void_p(buf182.data_ptr()), c_void_p(buf183.data_ptr()), c_void_p(buf184.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf187.data_ptr()))
    del primals_178
    buf188 = buf158; del buf158  # reuse
    # Source Nodes: [getattr_l__mod___blocks___6___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_180, buf187, reinterpret_tensor(primals_179, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf188)
    del primals_180
    buf189 = reinterpret_tensor(buf152, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf152  # reuse
    buf190 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_50(c_void_p(buf188.data_ptr()), c_void_p(buf189.data_ptr()), c_void_p(buf190.data_ptr()))
    buf191 = reinterpret_tensor(buf168, (128, 576, 576), (331776, 576, 1), 0); del buf168  # reuse
    # Source Nodes: [attn_30], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf189, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf190, (128, 48, 576), (27648, 576, 1), 0), out=buf191)
    buf192 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_51(c_void_p(buf191.data_ptr()), c_void_p(buf192.data_ptr()))
    buf193 = reinterpret_tensor(buf191, (2654208, 16), (16, 1), 0); del buf191  # reuse
    # Source Nodes: [getattr_l__mod___blocks___6___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf192, reinterpret_tensor(primals_181, (16, 16), (1, 16), 0), out=buf193)
    buf194 = buf164; del buf164  # reuse
    buf195 = reinterpret_tensor(buf193, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf193  # reuse
    buf196 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf197 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_52(c_void_p(buf195.data_ptr()), c_void_p(primals_182.data_ptr()), c_void_p(buf194.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf197.data_ptr()))
    del primals_182
    buf198 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___6___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf197, reinterpret_tensor(primals_183, (16, 16), (1, 16), 0), out=buf198)
    buf199 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf200 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_53(c_void_p(buf198.data_ptr()), c_void_p(primals_184.data_ptr()), c_void_p(buf188.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf200.data_ptr()))
    del primals_184
    buf201 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_13], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf199, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf200, (128, 576, 48), (27648, 48, 1), 0), out=buf201)
    buf202 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_54(c_void_p(buf201.data_ptr()), c_void_p(buf202.data_ptr()))
    buf203 = reinterpret_tensor(buf201, (4608, 768), (768, 1), 0); del buf201  # reuse
    # Source Nodes: [x_73], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_186, buf202, reinterpret_tensor(primals_185, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf203)
    del primals_186
    buf204 = buf183; del buf183  # reuse
    buf205 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf207 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf208 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_55(c_void_p(buf182.data_ptr()), c_void_p(primals_14.data_ptr()), c_void_p(buf203.data_ptr()), c_void_p(primals_187.data_ptr()), c_void_p(primals_188.data_ptr()), c_void_p(buf204.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(buf208.data_ptr()))
    del primals_188
    buf209 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_76], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_190, buf208, reinterpret_tensor(primals_189, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf209)
    del primals_190
    buf210 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_56(c_void_p(buf209.data_ptr()), c_void_p(buf210.data_ptr()))
    buf211 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_80], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_192, buf210, reinterpret_tensor(primals_191, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf211)
    del primals_192
    buf212 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf213 = buf204; del buf204  # reuse
    buf214 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf216 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf217 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_57(c_void_p(buf182.data_ptr()), c_void_p(primals_14.data_ptr()), c_void_p(buf203.data_ptr()), c_void_p(primals_15.data_ptr()), c_void_p(buf211.data_ptr()), c_void_p(primals_193.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf213.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf216.data_ptr()), c_void_p(buf217.data_ptr()))
    del primals_194
    buf218 = buf188; del buf188  # reuse
    # Source Nodes: [getattr_l__mod___blocks___7___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_196, buf217, reinterpret_tensor(primals_195, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf218)
    del primals_196
    buf219 = reinterpret_tensor(buf182, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf182  # reuse
    buf220 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_58(c_void_p(buf218.data_ptr()), c_void_p(buf219.data_ptr()), c_void_p(buf220.data_ptr()))
    buf221 = reinterpret_tensor(buf198, (128, 576, 576), (331776, 576, 1), 0); del buf198  # reuse
    # Source Nodes: [attn_35], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf219, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf220, (128, 48, 576), (27648, 576, 1), 0), out=buf221)
    buf222 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_59(c_void_p(buf221.data_ptr()), c_void_p(buf222.data_ptr()))
    buf223 = reinterpret_tensor(buf221, (2654208, 16), (16, 1), 0); del buf221  # reuse
    # Source Nodes: [getattr_l__mod___blocks___7___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf222, reinterpret_tensor(primals_197, (16, 16), (1, 16), 0), out=buf223)
    buf224 = buf194; del buf194  # reuse
    buf225 = reinterpret_tensor(buf223, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf223  # reuse
    buf226 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf227 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_60(c_void_p(buf225.data_ptr()), c_void_p(primals_198.data_ptr()), c_void_p(buf224.data_ptr()), c_void_p(buf226.data_ptr()), c_void_p(buf227.data_ptr()))
    del primals_198
    buf228 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___7___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf227, reinterpret_tensor(primals_199, (16, 16), (1, 16), 0), out=buf228)
    buf229 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf230 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_61(c_void_p(buf228.data_ptr()), c_void_p(primals_200.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf230.data_ptr()))
    del primals_200
    buf231 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_15], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf229, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf230, (128, 576, 48), (27648, 48, 1), 0), out=buf231)
    buf232 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_62(c_void_p(buf231.data_ptr()), c_void_p(buf232.data_ptr()))
    buf233 = reinterpret_tensor(buf231, (4608, 768), (768, 1), 0); del buf231  # reuse
    # Source Nodes: [x_84], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_202, buf232, reinterpret_tensor(primals_201, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf233)
    del primals_202
    buf234 = buf213; del buf213  # reuse
    buf235 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf237 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf238 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_63(c_void_p(buf212.data_ptr()), c_void_p(primals_16.data_ptr()), c_void_p(buf233.data_ptr()), c_void_p(primals_203.data_ptr()), c_void_p(primals_204.data_ptr()), c_void_p(buf234.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf238.data_ptr()))
    del primals_204
    buf239 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_87], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_206, buf238, reinterpret_tensor(primals_205, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf239)
    del primals_206
    buf240 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_64(c_void_p(buf239.data_ptr()), c_void_p(buf240.data_ptr()))
    buf241 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_91], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_208, buf240, reinterpret_tensor(primals_207, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf241)
    del primals_208
    buf242 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf243 = buf234; del buf234  # reuse
    buf244 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf246 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf247 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_65(c_void_p(buf212.data_ptr()), c_void_p(primals_16.data_ptr()), c_void_p(buf233.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(buf241.data_ptr()), c_void_p(primals_209.data_ptr()), c_void_p(primals_210.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(buf243.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(buf247.data_ptr()))
    del primals_210
    buf248 = buf218; del buf218  # reuse
    # Source Nodes: [getattr_l__mod___blocks___8___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_212, buf247, reinterpret_tensor(primals_211, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf248)
    del primals_212
    buf249 = reinterpret_tensor(buf212, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf212  # reuse
    buf250 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_66(c_void_p(buf248.data_ptr()), c_void_p(buf249.data_ptr()), c_void_p(buf250.data_ptr()))
    buf251 = reinterpret_tensor(buf228, (128, 576, 576), (331776, 576, 1), 0); del buf228  # reuse
    # Source Nodes: [attn_40], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf249, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf250, (128, 48, 576), (27648, 576, 1), 0), out=buf251)
    buf252 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_67(c_void_p(buf251.data_ptr()), c_void_p(buf252.data_ptr()))
    buf253 = reinterpret_tensor(buf251, (2654208, 16), (16, 1), 0); del buf251  # reuse
    # Source Nodes: [getattr_l__mod___blocks___8___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf252, reinterpret_tensor(primals_213, (16, 16), (1, 16), 0), out=buf253)
    buf254 = buf224; del buf224  # reuse
    buf255 = reinterpret_tensor(buf253, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf253  # reuse
    buf256 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf257 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_68(c_void_p(buf255.data_ptr()), c_void_p(primals_214.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(buf257.data_ptr()))
    del primals_214
    buf258 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___8___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf257, reinterpret_tensor(primals_215, (16, 16), (1, 16), 0), out=buf258)
    buf259 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf260 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_69(c_void_p(buf258.data_ptr()), c_void_p(primals_216.data_ptr()), c_void_p(buf248.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf260.data_ptr()))
    del primals_216
    buf261 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_17], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf259, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf260, (128, 576, 48), (27648, 48, 1), 0), out=buf261)
    buf262 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_70(c_void_p(buf261.data_ptr()), c_void_p(buf262.data_ptr()))
    buf263 = reinterpret_tensor(buf261, (4608, 768), (768, 1), 0); del buf261  # reuse
    # Source Nodes: [x_95], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_218, buf262, reinterpret_tensor(primals_217, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf263)
    del primals_218
    buf264 = buf243; del buf243  # reuse
    buf265 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf267 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf268 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_71(c_void_p(buf242.data_ptr()), c_void_p(primals_18.data_ptr()), c_void_p(buf263.data_ptr()), c_void_p(primals_219.data_ptr()), c_void_p(primals_220.data_ptr()), c_void_p(buf264.data_ptr()), c_void_p(buf265.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(buf268.data_ptr()))
    del primals_220
    buf269 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_98], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_222, buf268, reinterpret_tensor(primals_221, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf269)
    del primals_222
    buf270 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_72(c_void_p(buf269.data_ptr()), c_void_p(buf270.data_ptr()))
    buf271 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_102], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_224, buf270, reinterpret_tensor(primals_223, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf271)
    del primals_224
    buf272 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf273 = buf264; del buf264  # reuse
    buf274 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf276 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf277 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_73(c_void_p(buf242.data_ptr()), c_void_p(primals_18.data_ptr()), c_void_p(buf263.data_ptr()), c_void_p(primals_19.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(primals_225.data_ptr()), c_void_p(primals_226.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(buf276.data_ptr()), c_void_p(buf277.data_ptr()))
    del primals_226
    buf278 = buf248; del buf248  # reuse
    # Source Nodes: [getattr_l__mod___blocks___9___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_228, buf277, reinterpret_tensor(primals_227, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf278)
    del primals_228
    buf279 = reinterpret_tensor(buf242, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf242  # reuse
    buf280 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_74(c_void_p(buf278.data_ptr()), c_void_p(buf279.data_ptr()), c_void_p(buf280.data_ptr()))
    buf281 = reinterpret_tensor(buf258, (128, 576, 576), (331776, 576, 1), 0); del buf258  # reuse
    # Source Nodes: [attn_45], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf279, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf280, (128, 48, 576), (27648, 576, 1), 0), out=buf281)
    buf282 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_75(c_void_p(buf281.data_ptr()), c_void_p(buf282.data_ptr()))
    buf283 = reinterpret_tensor(buf281, (2654208, 16), (16, 1), 0); del buf281  # reuse
    # Source Nodes: [getattr_l__mod___blocks___9___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf282, reinterpret_tensor(primals_229, (16, 16), (1, 16), 0), out=buf283)
    buf284 = buf254; del buf254  # reuse
    buf285 = reinterpret_tensor(buf283, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf283  # reuse
    buf286 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf287 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_76(c_void_p(buf285.data_ptr()), c_void_p(primals_230.data_ptr()), c_void_p(buf284.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(buf287.data_ptr()))
    del primals_230
    buf288 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___9___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf287, reinterpret_tensor(primals_231, (16, 16), (1, 16), 0), out=buf288)
    buf289 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf290 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_77(c_void_p(buf288.data_ptr()), c_void_p(primals_232.data_ptr()), c_void_p(buf278.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(buf290.data_ptr()))
    del primals_232
    buf291 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_19], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf289, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf290, (128, 576, 48), (27648, 48, 1), 0), out=buf291)
    buf292 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_78(c_void_p(buf291.data_ptr()), c_void_p(buf292.data_ptr()))
    buf293 = reinterpret_tensor(buf291, (4608, 768), (768, 1), 0); del buf291  # reuse
    # Source Nodes: [x_106], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_234, buf292, reinterpret_tensor(primals_233, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf293)
    del primals_234
    buf294 = buf273; del buf273  # reuse
    buf295 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf297 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf298 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_79(c_void_p(buf272.data_ptr()), c_void_p(primals_20.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(primals_235.data_ptr()), c_void_p(primals_236.data_ptr()), c_void_p(buf294.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(buf297.data_ptr()), c_void_p(buf298.data_ptr()))
    del primals_236
    buf299 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_109], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_238, buf298, reinterpret_tensor(primals_237, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf299)
    del primals_238
    buf300 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_80(c_void_p(buf299.data_ptr()), c_void_p(buf300.data_ptr()))
    buf301 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_113], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_240, buf300, reinterpret_tensor(primals_239, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf301)
    del primals_240
    buf302 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf303 = buf294; del buf294  # reuse
    buf304 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf306 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf307 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_81(c_void_p(buf272.data_ptr()), c_void_p(primals_20.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(primals_21.data_ptr()), c_void_p(buf301.data_ptr()), c_void_p(primals_241.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf306.data_ptr()), c_void_p(buf307.data_ptr()))
    del primals_242
    buf308 = buf278; del buf278  # reuse
    # Source Nodes: [getattr_l__mod___blocks___10___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_244, buf307, reinterpret_tensor(primals_243, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf308)
    del primals_244
    buf309 = reinterpret_tensor(buf272, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf272  # reuse
    buf310 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_82(c_void_p(buf308.data_ptr()), c_void_p(buf309.data_ptr()), c_void_p(buf310.data_ptr()))
    buf311 = reinterpret_tensor(buf288, (128, 576, 576), (331776, 576, 1), 0); del buf288  # reuse
    # Source Nodes: [attn_50], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf309, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf310, (128, 48, 576), (27648, 576, 1), 0), out=buf311)
    buf312 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_83(c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()))
    buf313 = reinterpret_tensor(buf311, (2654208, 16), (16, 1), 0); del buf311  # reuse
    # Source Nodes: [getattr_l__mod___blocks___10___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf312, reinterpret_tensor(primals_245, (16, 16), (1, 16), 0), out=buf313)
    buf314 = buf284; del buf284  # reuse
    buf315 = reinterpret_tensor(buf313, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf313  # reuse
    buf316 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf317 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_84(c_void_p(buf315.data_ptr()), c_void_p(primals_246.data_ptr()), c_void_p(buf314.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf317.data_ptr()))
    del primals_246
    buf318 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___10___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf317, reinterpret_tensor(primals_247, (16, 16), (1, 16), 0), out=buf318)
    buf319 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf320 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_85(c_void_p(buf318.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf320.data_ptr()))
    del primals_248
    buf321 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_21], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf319, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf320, (128, 576, 48), (27648, 48, 1), 0), out=buf321)
    buf322 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_86(c_void_p(buf321.data_ptr()), c_void_p(buf322.data_ptr()))
    buf323 = reinterpret_tensor(buf321, (4608, 768), (768, 1), 0); del buf321  # reuse
    # Source Nodes: [x_117], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_250, buf322, reinterpret_tensor(primals_249, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf323)
    del primals_250
    buf324 = buf303; del buf303  # reuse
    buf325 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf327 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf328 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_87(c_void_p(buf302.data_ptr()), c_void_p(primals_22.data_ptr()), c_void_p(buf323.data_ptr()), c_void_p(primals_251.data_ptr()), c_void_p(primals_252.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf325.data_ptr()), c_void_p(buf327.data_ptr()), c_void_p(buf328.data_ptr()))
    del primals_252
    buf329 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_120], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_254, buf328, reinterpret_tensor(primals_253, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf329)
    del primals_254
    buf330 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_88(c_void_p(buf329.data_ptr()), c_void_p(buf330.data_ptr()))
    buf331 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_124], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_256, buf330, reinterpret_tensor(primals_255, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf331)
    del primals_256
    buf332 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf333 = buf324; del buf324  # reuse
    buf334 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf336 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf337 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_89(c_void_p(buf302.data_ptr()), c_void_p(primals_22.data_ptr()), c_void_p(buf323.data_ptr()), c_void_p(primals_23.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(primals_257.data_ptr()), c_void_p(primals_258.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(buf334.data_ptr()), c_void_p(buf336.data_ptr()), c_void_p(buf337.data_ptr()))
    del primals_258
    buf338 = buf308; del buf308  # reuse
    # Source Nodes: [getattr_l__mod___blocks___11___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_260, buf337, reinterpret_tensor(primals_259, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf338)
    del primals_260
    buf339 = reinterpret_tensor(buf302, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf302  # reuse
    buf340 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_90(c_void_p(buf338.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf340.data_ptr()))
    buf341 = reinterpret_tensor(buf318, (128, 576, 576), (331776, 576, 1), 0); del buf318  # reuse
    # Source Nodes: [attn_55], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf339, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf340, (128, 48, 576), (27648, 576, 1), 0), out=buf341)
    buf342 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_91(c_void_p(buf341.data_ptr()), c_void_p(buf342.data_ptr()))
    buf343 = reinterpret_tensor(buf341, (2654208, 16), (16, 1), 0); del buf341  # reuse
    # Source Nodes: [getattr_l__mod___blocks___11___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf342, reinterpret_tensor(primals_261, (16, 16), (1, 16), 0), out=buf343)
    buf344 = buf314; del buf314  # reuse
    buf345 = reinterpret_tensor(buf343, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf343  # reuse
    buf346 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf347 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_92(c_void_p(buf345.data_ptr()), c_void_p(primals_262.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(buf347.data_ptr()))
    del primals_262
    buf348 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___11___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf347, reinterpret_tensor(primals_263, (16, 16), (1, 16), 0), out=buf348)
    buf349 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf350 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_93(c_void_p(buf348.data_ptr()), c_void_p(primals_264.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(buf349.data_ptr()), c_void_p(buf350.data_ptr()))
    del primals_264
    buf351 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_23], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf349, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf350, (128, 576, 48), (27648, 48, 1), 0), out=buf351)
    buf352 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_94(c_void_p(buf351.data_ptr()), c_void_p(buf352.data_ptr()))
    buf353 = reinterpret_tensor(buf351, (4608, 768), (768, 1), 0); del buf351  # reuse
    # Source Nodes: [x_128], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_266, buf352, reinterpret_tensor(primals_265, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf353)
    del primals_266
    buf354 = buf333; del buf333  # reuse
    buf355 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf357 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf358 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_95(c_void_p(buf332.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(primals_267.data_ptr()), c_void_p(primals_268.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(buf355.data_ptr()), c_void_p(buf357.data_ptr()), c_void_p(buf358.data_ptr()))
    del primals_268
    buf359 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_131], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_270, buf358, reinterpret_tensor(primals_269, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf359)
    del primals_270
    buf360 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_96(c_void_p(buf359.data_ptr()), c_void_p(buf360.data_ptr()))
    buf361 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_135], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_272, buf360, reinterpret_tensor(primals_271, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf361)
    del primals_272
    buf362 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf363 = buf354; del buf354  # reuse
    buf364 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf366 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf367 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_97(c_void_p(buf332.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(primals_25.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(primals_273.data_ptr()), c_void_p(primals_274.data_ptr()), c_void_p(buf362.data_ptr()), c_void_p(buf363.data_ptr()), c_void_p(buf364.data_ptr()), c_void_p(buf366.data_ptr()), c_void_p(buf367.data_ptr()))
    del primals_274
    buf368 = buf338; del buf338  # reuse
    # Source Nodes: [getattr_l__mod___blocks___12___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_276, buf367, reinterpret_tensor(primals_275, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf368)
    del primals_276
    buf369 = reinterpret_tensor(buf332, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf332  # reuse
    buf370 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_98(c_void_p(buf368.data_ptr()), c_void_p(buf369.data_ptr()), c_void_p(buf370.data_ptr()))
    buf371 = reinterpret_tensor(buf348, (128, 576, 576), (331776, 576, 1), 0); del buf348  # reuse
    # Source Nodes: [attn_60], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf369, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf370, (128, 48, 576), (27648, 576, 1), 0), out=buf371)
    buf372 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_99(c_void_p(buf371.data_ptr()), c_void_p(buf372.data_ptr()))
    buf373 = reinterpret_tensor(buf371, (2654208, 16), (16, 1), 0); del buf371  # reuse
    # Source Nodes: [getattr_l__mod___blocks___12___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf372, reinterpret_tensor(primals_277, (16, 16), (1, 16), 0), out=buf373)
    buf374 = buf344; del buf344  # reuse
    buf375 = reinterpret_tensor(buf373, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf373  # reuse
    buf376 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf377 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_100(c_void_p(buf375.data_ptr()), c_void_p(primals_278.data_ptr()), c_void_p(buf374.data_ptr()), c_void_p(buf376.data_ptr()), c_void_p(buf377.data_ptr()))
    del primals_278
    buf378 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___12___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf377, reinterpret_tensor(primals_279, (16, 16), (1, 16), 0), out=buf378)
    buf379 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf380 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_101(c_void_p(buf378.data_ptr()), c_void_p(primals_280.data_ptr()), c_void_p(buf368.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf380.data_ptr()))
    del primals_280
    buf381 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_25], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf379, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf380, (128, 576, 48), (27648, 48, 1), 0), out=buf381)
    buf382 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_102(c_void_p(buf381.data_ptr()), c_void_p(buf382.data_ptr()))
    buf383 = reinterpret_tensor(buf381, (4608, 768), (768, 1), 0); del buf381  # reuse
    # Source Nodes: [x_139], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_282, buf382, reinterpret_tensor(primals_281, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf383)
    del primals_282
    buf384 = buf363; del buf363  # reuse
    buf385 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf387 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf388 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_103(c_void_p(buf362.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(buf383.data_ptr()), c_void_p(primals_283.data_ptr()), c_void_p(primals_284.data_ptr()), c_void_p(buf384.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf387.data_ptr()), c_void_p(buf388.data_ptr()))
    del primals_284
    buf389 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_142], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_286, buf388, reinterpret_tensor(primals_285, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf389)
    del primals_286
    buf390 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_104(c_void_p(buf389.data_ptr()), c_void_p(buf390.data_ptr()))
    buf391 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_146], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_288, buf390, reinterpret_tensor(primals_287, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf391)
    del primals_288
    buf392 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf393 = buf384; del buf384  # reuse
    buf394 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf396 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf397 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_105(c_void_p(buf362.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(buf383.data_ptr()), c_void_p(primals_27.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(primals_289.data_ptr()), c_void_p(primals_290.data_ptr()), c_void_p(buf392.data_ptr()), c_void_p(buf393.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(buf396.data_ptr()), c_void_p(buf397.data_ptr()))
    del primals_290
    buf398 = buf368; del buf368  # reuse
    # Source Nodes: [getattr_l__mod___blocks___13___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_292, buf397, reinterpret_tensor(primals_291, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf398)
    del primals_292
    buf399 = reinterpret_tensor(buf362, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf362  # reuse
    buf400 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_106(c_void_p(buf398.data_ptr()), c_void_p(buf399.data_ptr()), c_void_p(buf400.data_ptr()))
    buf401 = reinterpret_tensor(buf378, (128, 576, 576), (331776, 576, 1), 0); del buf378  # reuse
    # Source Nodes: [attn_65], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf399, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf400, (128, 48, 576), (27648, 576, 1), 0), out=buf401)
    buf402 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_107(c_void_p(buf401.data_ptr()), c_void_p(buf402.data_ptr()))
    buf403 = reinterpret_tensor(buf401, (2654208, 16), (16, 1), 0); del buf401  # reuse
    # Source Nodes: [getattr_l__mod___blocks___13___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf402, reinterpret_tensor(primals_293, (16, 16), (1, 16), 0), out=buf403)
    buf404 = buf374; del buf374  # reuse
    buf405 = reinterpret_tensor(buf403, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf403  # reuse
    buf406 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf407 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_108(c_void_p(buf405.data_ptr()), c_void_p(primals_294.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(buf407.data_ptr()))
    del primals_294
    buf408 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___13___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf407, reinterpret_tensor(primals_295, (16, 16), (1, 16), 0), out=buf408)
    buf409 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf410 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_109(c_void_p(buf408.data_ptr()), c_void_p(primals_296.data_ptr()), c_void_p(buf398.data_ptr()), c_void_p(buf409.data_ptr()), c_void_p(buf410.data_ptr()))
    del primals_296
    buf411 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_27], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf409, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf410, (128, 576, 48), (27648, 48, 1), 0), out=buf411)
    buf412 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_110(c_void_p(buf411.data_ptr()), c_void_p(buf412.data_ptr()))
    buf413 = reinterpret_tensor(buf411, (4608, 768), (768, 1), 0); del buf411  # reuse
    # Source Nodes: [x_150], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_298, buf412, reinterpret_tensor(primals_297, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf413)
    del primals_298
    buf414 = buf393; del buf393  # reuse
    buf415 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf417 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf418 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_111(c_void_p(buf392.data_ptr()), c_void_p(primals_28.data_ptr()), c_void_p(buf413.data_ptr()), c_void_p(primals_299.data_ptr()), c_void_p(primals_300.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(buf418.data_ptr()))
    del primals_300
    buf419 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_153], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_302, buf418, reinterpret_tensor(primals_301, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf419)
    del primals_302
    buf420 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_112(c_void_p(buf419.data_ptr()), c_void_p(buf420.data_ptr()))
    buf421 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_157], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_304, buf420, reinterpret_tensor(primals_303, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf421)
    del primals_304
    buf422 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf423 = buf414; del buf414  # reuse
    buf424 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf426 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf427 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_113(c_void_p(buf392.data_ptr()), c_void_p(primals_28.data_ptr()), c_void_p(buf413.data_ptr()), c_void_p(primals_29.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(primals_305.data_ptr()), c_void_p(primals_306.data_ptr()), c_void_p(buf422.data_ptr()), c_void_p(buf423.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(buf426.data_ptr()), c_void_p(buf427.data_ptr()))
    del primals_306
    buf428 = buf398; del buf398  # reuse
    # Source Nodes: [getattr_l__mod___blocks___14___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_308, buf427, reinterpret_tensor(primals_307, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf428)
    del primals_308
    buf429 = reinterpret_tensor(buf392, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf392  # reuse
    buf430 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_114(c_void_p(buf428.data_ptr()), c_void_p(buf429.data_ptr()), c_void_p(buf430.data_ptr()))
    buf431 = reinterpret_tensor(buf408, (128, 576, 576), (331776, 576, 1), 0); del buf408  # reuse
    # Source Nodes: [attn_70], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf429, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf430, (128, 48, 576), (27648, 576, 1), 0), out=buf431)
    buf432 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_115(c_void_p(buf431.data_ptr()), c_void_p(buf432.data_ptr()))
    buf433 = reinterpret_tensor(buf431, (2654208, 16), (16, 1), 0); del buf431  # reuse
    # Source Nodes: [getattr_l__mod___blocks___14___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf432, reinterpret_tensor(primals_309, (16, 16), (1, 16), 0), out=buf433)
    buf434 = buf404; del buf404  # reuse
    buf435 = reinterpret_tensor(buf433, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf433  # reuse
    buf436 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf437 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_116(c_void_p(buf435.data_ptr()), c_void_p(primals_310.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(buf437.data_ptr()))
    del primals_310
    buf438 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___14___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf437, reinterpret_tensor(primals_311, (16, 16), (1, 16), 0), out=buf438)
    buf439 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf440 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_117(c_void_p(buf438.data_ptr()), c_void_p(primals_312.data_ptr()), c_void_p(buf428.data_ptr()), c_void_p(buf439.data_ptr()), c_void_p(buf440.data_ptr()))
    del primals_312
    buf441 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_29], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf439, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf440, (128, 576, 48), (27648, 48, 1), 0), out=buf441)
    buf442 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_118(c_void_p(buf441.data_ptr()), c_void_p(buf442.data_ptr()))
    buf443 = reinterpret_tensor(buf441, (4608, 768), (768, 1), 0); del buf441  # reuse
    # Source Nodes: [x_161], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_314, buf442, reinterpret_tensor(primals_313, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf443)
    del primals_314
    buf444 = buf423; del buf423  # reuse
    buf445 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf447 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf448 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_119(c_void_p(buf422.data_ptr()), c_void_p(primals_30.data_ptr()), c_void_p(buf443.data_ptr()), c_void_p(primals_315.data_ptr()), c_void_p(primals_316.data_ptr()), c_void_p(buf444.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(buf448.data_ptr()))
    del primals_316
    buf449 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_164], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_318, buf448, reinterpret_tensor(primals_317, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf449)
    del primals_318
    buf450 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_120(c_void_p(buf449.data_ptr()), c_void_p(buf450.data_ptr()))
    buf451 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_168], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_320, buf450, reinterpret_tensor(primals_319, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf451)
    del primals_320
    buf452 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf453 = buf444; del buf444  # reuse
    buf454 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf456 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf457 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_121(c_void_p(buf422.data_ptr()), c_void_p(primals_30.data_ptr()), c_void_p(buf443.data_ptr()), c_void_p(primals_31.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(primals_321.data_ptr()), c_void_p(primals_322.data_ptr()), c_void_p(buf452.data_ptr()), c_void_p(buf453.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf457.data_ptr()))
    del primals_322
    buf458 = buf428; del buf428  # reuse
    # Source Nodes: [getattr_l__mod___blocks___15___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_324, buf457, reinterpret_tensor(primals_323, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf458)
    del primals_324
    buf459 = reinterpret_tensor(buf422, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf422  # reuse
    buf460 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_122(c_void_p(buf458.data_ptr()), c_void_p(buf459.data_ptr()), c_void_p(buf460.data_ptr()))
    buf461 = reinterpret_tensor(buf438, (128, 576, 576), (331776, 576, 1), 0); del buf438  # reuse
    # Source Nodes: [attn_75], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf459, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf460, (128, 48, 576), (27648, 576, 1), 0), out=buf461)
    buf462 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_123(c_void_p(buf461.data_ptr()), c_void_p(buf462.data_ptr()))
    buf463 = reinterpret_tensor(buf461, (2654208, 16), (16, 1), 0); del buf461  # reuse
    # Source Nodes: [getattr_l__mod___blocks___15___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf462, reinterpret_tensor(primals_325, (16, 16), (1, 16), 0), out=buf463)
    buf464 = buf434; del buf434  # reuse
    buf465 = reinterpret_tensor(buf463, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf463  # reuse
    buf466 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf467 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_124(c_void_p(buf465.data_ptr()), c_void_p(primals_326.data_ptr()), c_void_p(buf464.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(buf467.data_ptr()))
    del primals_326
    buf468 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___15___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf467, reinterpret_tensor(primals_327, (16, 16), (1, 16), 0), out=buf468)
    buf469 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf470 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_125(c_void_p(buf468.data_ptr()), c_void_p(primals_328.data_ptr()), c_void_p(buf458.data_ptr()), c_void_p(buf469.data_ptr()), c_void_p(buf470.data_ptr()))
    del primals_328
    buf471 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_31], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf469, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf470, (128, 576, 48), (27648, 48, 1), 0), out=buf471)
    buf472 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_126(c_void_p(buf471.data_ptr()), c_void_p(buf472.data_ptr()))
    buf473 = reinterpret_tensor(buf471, (4608, 768), (768, 1), 0); del buf471  # reuse
    # Source Nodes: [x_172], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_330, buf472, reinterpret_tensor(primals_329, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf473)
    del primals_330
    buf474 = buf453; del buf453  # reuse
    buf475 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf477 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf478 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_127(c_void_p(buf452.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(buf473.data_ptr()), c_void_p(primals_331.data_ptr()), c_void_p(primals_332.data_ptr()), c_void_p(buf474.data_ptr()), c_void_p(buf475.data_ptr()), c_void_p(buf477.data_ptr()), c_void_p(buf478.data_ptr()))
    del primals_332
    buf479 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_175], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_334, buf478, reinterpret_tensor(primals_333, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf479)
    del primals_334
    buf480 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_128(c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()))
    buf481 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_179], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_336, buf480, reinterpret_tensor(primals_335, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf481)
    del primals_336
    buf482 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf483 = buf474; del buf474  # reuse
    buf484 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf486 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf487 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_129(c_void_p(buf452.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(buf473.data_ptr()), c_void_p(primals_33.data_ptr()), c_void_p(buf481.data_ptr()), c_void_p(primals_337.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(buf482.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(buf486.data_ptr()), c_void_p(buf487.data_ptr()))
    del primals_338
    buf488 = buf458; del buf458  # reuse
    # Source Nodes: [getattr_l__mod___blocks___16___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_340, buf487, reinterpret_tensor(primals_339, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf488)
    del primals_340
    buf489 = reinterpret_tensor(buf452, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf452  # reuse
    buf490 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_130(c_void_p(buf488.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(buf490.data_ptr()))
    buf491 = reinterpret_tensor(buf468, (128, 576, 576), (331776, 576, 1), 0); del buf468  # reuse
    # Source Nodes: [attn_80], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf489, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf490, (128, 48, 576), (27648, 576, 1), 0), out=buf491)
    buf492 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_131(c_void_p(buf491.data_ptr()), c_void_p(buf492.data_ptr()))
    buf493 = reinterpret_tensor(buf491, (2654208, 16), (16, 1), 0); del buf491  # reuse
    # Source Nodes: [getattr_l__mod___blocks___16___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf492, reinterpret_tensor(primals_341, (16, 16), (1, 16), 0), out=buf493)
    buf494 = buf464; del buf464  # reuse
    buf495 = reinterpret_tensor(buf493, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf493  # reuse
    buf496 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf497 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_132(c_void_p(buf495.data_ptr()), c_void_p(primals_342.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(buf497.data_ptr()))
    del primals_342
    buf498 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___16___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf497, reinterpret_tensor(primals_343, (16, 16), (1, 16), 0), out=buf498)
    buf499 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf500 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_133(c_void_p(buf498.data_ptr()), c_void_p(primals_344.data_ptr()), c_void_p(buf488.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf500.data_ptr()))
    del primals_344
    buf501 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_33], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf499, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf500, (128, 576, 48), (27648, 48, 1), 0), out=buf501)
    buf502 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_134(c_void_p(buf501.data_ptr()), c_void_p(buf502.data_ptr()))
    buf503 = reinterpret_tensor(buf501, (4608, 768), (768, 1), 0); del buf501  # reuse
    # Source Nodes: [x_183], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_346, buf502, reinterpret_tensor(primals_345, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf503)
    del primals_346
    buf504 = buf483; del buf483  # reuse
    buf505 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf507 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf508 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_135(c_void_p(buf482.data_ptr()), c_void_p(primals_34.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(primals_347.data_ptr()), c_void_p(primals_348.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(buf505.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(buf508.data_ptr()))
    del primals_348
    buf509 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_186], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_350, buf508, reinterpret_tensor(primals_349, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf509)
    del primals_350
    buf510 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_136(c_void_p(buf509.data_ptr()), c_void_p(buf510.data_ptr()))
    buf511 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_190], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_352, buf510, reinterpret_tensor(primals_351, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf511)
    del primals_352
    buf512 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf513 = buf504; del buf504  # reuse
    buf514 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf516 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf517 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_137(c_void_p(buf482.data_ptr()), c_void_p(primals_34.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(primals_35.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(primals_353.data_ptr()), c_void_p(primals_354.data_ptr()), c_void_p(buf512.data_ptr()), c_void_p(buf513.data_ptr()), c_void_p(buf514.data_ptr()), c_void_p(buf516.data_ptr()), c_void_p(buf517.data_ptr()))
    del primals_354
    buf518 = buf488; del buf488  # reuse
    # Source Nodes: [getattr_l__mod___blocks___17___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_356, buf517, reinterpret_tensor(primals_355, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf518)
    del primals_356
    buf519 = reinterpret_tensor(buf482, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf482  # reuse
    buf520 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_138(c_void_p(buf518.data_ptr()), c_void_p(buf519.data_ptr()), c_void_p(buf520.data_ptr()))
    buf521 = reinterpret_tensor(buf498, (128, 576, 576), (331776, 576, 1), 0); del buf498  # reuse
    # Source Nodes: [attn_85], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf519, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf520, (128, 48, 576), (27648, 576, 1), 0), out=buf521)
    buf522 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_139(c_void_p(buf521.data_ptr()), c_void_p(buf522.data_ptr()))
    buf523 = reinterpret_tensor(buf521, (2654208, 16), (16, 1), 0); del buf521  # reuse
    # Source Nodes: [getattr_l__mod___blocks___17___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf522, reinterpret_tensor(primals_357, (16, 16), (1, 16), 0), out=buf523)
    buf524 = buf494; del buf494  # reuse
    buf525 = reinterpret_tensor(buf523, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf523  # reuse
    buf526 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf527 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_140(c_void_p(buf525.data_ptr()), c_void_p(primals_358.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(buf527.data_ptr()))
    del primals_358
    buf528 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___17___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf527, reinterpret_tensor(primals_359, (16, 16), (1, 16), 0), out=buf528)
    buf529 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf530 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_141(c_void_p(buf528.data_ptr()), c_void_p(primals_360.data_ptr()), c_void_p(buf518.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(buf530.data_ptr()))
    del primals_360
    buf531 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_35], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf529, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf530, (128, 576, 48), (27648, 48, 1), 0), out=buf531)
    buf532 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_142(c_void_p(buf531.data_ptr()), c_void_p(buf532.data_ptr()))
    buf533 = reinterpret_tensor(buf531, (4608, 768), (768, 1), 0); del buf531  # reuse
    # Source Nodes: [x_194], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_362, buf532, reinterpret_tensor(primals_361, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf533)
    del primals_362
    buf534 = buf513; del buf513  # reuse
    buf535 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf537 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf538 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_143(c_void_p(buf512.data_ptr()), c_void_p(primals_36.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(primals_363.data_ptr()), c_void_p(primals_364.data_ptr()), c_void_p(buf534.data_ptr()), c_void_p(buf535.data_ptr()), c_void_p(buf537.data_ptr()), c_void_p(buf538.data_ptr()))
    del primals_364
    buf539 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_197], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_366, buf538, reinterpret_tensor(primals_365, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf539)
    del primals_366
    buf540 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_144(c_void_p(buf539.data_ptr()), c_void_p(buf540.data_ptr()))
    buf541 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_201], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_368, buf540, reinterpret_tensor(primals_367, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf541)
    del primals_368
    buf542 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf543 = buf534; del buf534  # reuse
    buf544 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf546 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf547 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_145(c_void_p(buf512.data_ptr()), c_void_p(primals_36.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(primals_37.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(primals_369.data_ptr()), c_void_p(primals_370.data_ptr()), c_void_p(buf542.data_ptr()), c_void_p(buf543.data_ptr()), c_void_p(buf544.data_ptr()), c_void_p(buf546.data_ptr()), c_void_p(buf547.data_ptr()))
    del primals_370
    buf548 = buf518; del buf518  # reuse
    # Source Nodes: [getattr_l__mod___blocks___18___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_372, buf547, reinterpret_tensor(primals_371, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf548)
    del primals_372
    buf549 = reinterpret_tensor(buf512, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf512  # reuse
    buf550 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_146(c_void_p(buf548.data_ptr()), c_void_p(buf549.data_ptr()), c_void_p(buf550.data_ptr()))
    buf551 = reinterpret_tensor(buf528, (128, 576, 576), (331776, 576, 1), 0); del buf528  # reuse
    # Source Nodes: [attn_90], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf549, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf550, (128, 48, 576), (27648, 576, 1), 0), out=buf551)
    buf552 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_147(c_void_p(buf551.data_ptr()), c_void_p(buf552.data_ptr()))
    buf553 = reinterpret_tensor(buf551, (2654208, 16), (16, 1), 0); del buf551  # reuse
    # Source Nodes: [getattr_l__mod___blocks___18___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf552, reinterpret_tensor(primals_373, (16, 16), (1, 16), 0), out=buf553)
    buf554 = buf524; del buf524  # reuse
    buf555 = reinterpret_tensor(buf553, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf553  # reuse
    buf556 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf557 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_148(c_void_p(buf555.data_ptr()), c_void_p(primals_374.data_ptr()), c_void_p(buf554.data_ptr()), c_void_p(buf556.data_ptr()), c_void_p(buf557.data_ptr()))
    del primals_374
    buf558 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___18___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf557, reinterpret_tensor(primals_375, (16, 16), (1, 16), 0), out=buf558)
    buf559 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf560 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_149(c_void_p(buf558.data_ptr()), c_void_p(primals_376.data_ptr()), c_void_p(buf548.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(buf560.data_ptr()))
    del primals_376
    buf561 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_37], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf559, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf560, (128, 576, 48), (27648, 48, 1), 0), out=buf561)
    buf562 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_150(c_void_p(buf561.data_ptr()), c_void_p(buf562.data_ptr()))
    buf563 = reinterpret_tensor(buf561, (4608, 768), (768, 1), 0); del buf561  # reuse
    # Source Nodes: [x_205], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_378, buf562, reinterpret_tensor(primals_377, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf563)
    del primals_378
    buf564 = buf543; del buf543  # reuse
    buf565 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf567 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf568 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_151(c_void_p(buf542.data_ptr()), c_void_p(primals_38.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(primals_379.data_ptr()), c_void_p(primals_380.data_ptr()), c_void_p(buf564.data_ptr()), c_void_p(buf565.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(buf568.data_ptr()))
    del primals_380
    buf569 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_208], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_382, buf568, reinterpret_tensor(primals_381, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf569)
    del primals_382
    buf570 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_152(c_void_p(buf569.data_ptr()), c_void_p(buf570.data_ptr()))
    buf571 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_212], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_384, buf570, reinterpret_tensor(primals_383, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf571)
    del primals_384
    buf572 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf573 = buf564; del buf564  # reuse
    buf574 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf576 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf577 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_153(c_void_p(buf542.data_ptr()), c_void_p(primals_38.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(primals_39.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(primals_385.data_ptr()), c_void_p(primals_386.data_ptr()), c_void_p(buf572.data_ptr()), c_void_p(buf573.data_ptr()), c_void_p(buf574.data_ptr()), c_void_p(buf576.data_ptr()), c_void_p(buf577.data_ptr()))
    del primals_386
    buf578 = buf548; del buf548  # reuse
    # Source Nodes: [getattr_l__mod___blocks___19___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_388, buf577, reinterpret_tensor(primals_387, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf578)
    del primals_388
    buf579 = reinterpret_tensor(buf542, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf542  # reuse
    buf580 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_154(c_void_p(buf578.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(buf580.data_ptr()))
    buf581 = reinterpret_tensor(buf558, (128, 576, 576), (331776, 576, 1), 0); del buf558  # reuse
    # Source Nodes: [attn_95], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf579, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf580, (128, 48, 576), (27648, 576, 1), 0), out=buf581)
    buf582 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_155(c_void_p(buf581.data_ptr()), c_void_p(buf582.data_ptr()))
    buf583 = reinterpret_tensor(buf581, (2654208, 16), (16, 1), 0); del buf581  # reuse
    # Source Nodes: [getattr_l__mod___blocks___19___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf582, reinterpret_tensor(primals_389, (16, 16), (1, 16), 0), out=buf583)
    buf584 = buf554; del buf554  # reuse
    buf585 = reinterpret_tensor(buf583, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf583  # reuse
    buf586 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf587 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_156(c_void_p(buf585.data_ptr()), c_void_p(primals_390.data_ptr()), c_void_p(buf584.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf587.data_ptr()))
    del primals_390
    buf588 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___19___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf587, reinterpret_tensor(primals_391, (16, 16), (1, 16), 0), out=buf588)
    buf589 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf590 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_157(c_void_p(buf588.data_ptr()), c_void_p(primals_392.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(buf589.data_ptr()), c_void_p(buf590.data_ptr()))
    del primals_392
    buf591 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_39], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf589, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf590, (128, 576, 48), (27648, 48, 1), 0), out=buf591)
    buf592 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_158(c_void_p(buf591.data_ptr()), c_void_p(buf592.data_ptr()))
    buf593 = reinterpret_tensor(buf591, (4608, 768), (768, 1), 0); del buf591  # reuse
    # Source Nodes: [x_216], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_394, buf592, reinterpret_tensor(primals_393, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf593)
    del primals_394
    buf594 = buf573; del buf573  # reuse
    buf595 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf597 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf598 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_159(c_void_p(buf572.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(buf593.data_ptr()), c_void_p(primals_395.data_ptr()), c_void_p(primals_396.data_ptr()), c_void_p(buf594.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(buf598.data_ptr()))
    del primals_396
    buf599 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_219], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_398, buf598, reinterpret_tensor(primals_397, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf599)
    del primals_398
    buf600 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_160(c_void_p(buf599.data_ptr()), c_void_p(buf600.data_ptr()))
    buf601 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_223], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_400, buf600, reinterpret_tensor(primals_399, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf601)
    del primals_400
    buf602 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf603 = buf594; del buf594  # reuse
    buf604 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf606 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf607 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_161(c_void_p(buf572.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(buf593.data_ptr()), c_void_p(primals_41.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(primals_401.data_ptr()), c_void_p(primals_402.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(buf604.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(buf607.data_ptr()))
    del primals_402
    buf608 = buf578; del buf578  # reuse
    # Source Nodes: [getattr_l__mod___blocks___20___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_404, buf607, reinterpret_tensor(primals_403, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf608)
    del primals_404
    buf609 = reinterpret_tensor(buf572, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf572  # reuse
    buf610 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_162(c_void_p(buf608.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(buf610.data_ptr()))
    buf611 = reinterpret_tensor(buf588, (128, 576, 576), (331776, 576, 1), 0); del buf588  # reuse
    # Source Nodes: [attn_100], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf609, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf610, (128, 48, 576), (27648, 576, 1), 0), out=buf611)
    buf612 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_163(c_void_p(buf611.data_ptr()), c_void_p(buf612.data_ptr()))
    buf613 = reinterpret_tensor(buf611, (2654208, 16), (16, 1), 0); del buf611  # reuse
    # Source Nodes: [getattr_l__mod___blocks___20___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf612, reinterpret_tensor(primals_405, (16, 16), (1, 16), 0), out=buf613)
    buf614 = buf584; del buf584  # reuse
    buf615 = reinterpret_tensor(buf613, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf613  # reuse
    buf616 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf617 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_164(c_void_p(buf615.data_ptr()), c_void_p(primals_406.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf617.data_ptr()))
    del primals_406
    buf618 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___20___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf617, reinterpret_tensor(primals_407, (16, 16), (1, 16), 0), out=buf618)
    buf619 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf620 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_165(c_void_p(buf618.data_ptr()), c_void_p(primals_408.data_ptr()), c_void_p(buf608.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf620.data_ptr()))
    del primals_408
    buf621 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_41], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf619, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf620, (128, 576, 48), (27648, 48, 1), 0), out=buf621)
    buf622 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_166(c_void_p(buf621.data_ptr()), c_void_p(buf622.data_ptr()))
    buf623 = reinterpret_tensor(buf621, (4608, 768), (768, 1), 0); del buf621  # reuse
    # Source Nodes: [x_227], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_410, buf622, reinterpret_tensor(primals_409, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf623)
    del primals_410
    buf624 = buf603; del buf603  # reuse
    buf625 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf627 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf628 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_167(c_void_p(buf602.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(primals_411.data_ptr()), c_void_p(primals_412.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf627.data_ptr()), c_void_p(buf628.data_ptr()))
    del primals_412
    buf629 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_230], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_414, buf628, reinterpret_tensor(primals_413, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf629)
    del primals_414
    buf630 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_168(c_void_p(buf629.data_ptr()), c_void_p(buf630.data_ptr()))
    buf631 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_234], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_416, buf630, reinterpret_tensor(primals_415, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf631)
    del primals_416
    buf632 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf633 = buf624; del buf624  # reuse
    buf634 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf636 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf637 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_169(c_void_p(buf602.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(primals_43.data_ptr()), c_void_p(buf631.data_ptr()), c_void_p(primals_417.data_ptr()), c_void_p(primals_418.data_ptr()), c_void_p(buf632.data_ptr()), c_void_p(buf633.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf637.data_ptr()))
    del primals_418
    buf638 = buf608; del buf608  # reuse
    # Source Nodes: [getattr_l__mod___blocks___21___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_420, buf637, reinterpret_tensor(primals_419, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf638)
    del primals_420
    buf639 = reinterpret_tensor(buf602, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf602  # reuse
    buf640 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_170(c_void_p(buf638.data_ptr()), c_void_p(buf639.data_ptr()), c_void_p(buf640.data_ptr()))
    buf641 = reinterpret_tensor(buf618, (128, 576, 576), (331776, 576, 1), 0); del buf618  # reuse
    # Source Nodes: [attn_105], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf639, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf640, (128, 48, 576), (27648, 576, 1), 0), out=buf641)
    buf642 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_171(c_void_p(buf641.data_ptr()), c_void_p(buf642.data_ptr()))
    buf643 = reinterpret_tensor(buf641, (2654208, 16), (16, 1), 0); del buf641  # reuse
    # Source Nodes: [getattr_l__mod___blocks___21___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf642, reinterpret_tensor(primals_421, (16, 16), (1, 16), 0), out=buf643)
    buf644 = buf614; del buf614  # reuse
    buf645 = reinterpret_tensor(buf643, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf643  # reuse
    buf646 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf647 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_172(c_void_p(buf645.data_ptr()), c_void_p(primals_422.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf647.data_ptr()))
    del primals_422
    buf648 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___21___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf647, reinterpret_tensor(primals_423, (16, 16), (1, 16), 0), out=buf648)
    buf649 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf650 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_173(c_void_p(buf648.data_ptr()), c_void_p(primals_424.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(buf649.data_ptr()), c_void_p(buf650.data_ptr()))
    del primals_424
    buf651 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_43], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf649, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf650, (128, 576, 48), (27648, 48, 1), 0), out=buf651)
    buf652 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_174(c_void_p(buf651.data_ptr()), c_void_p(buf652.data_ptr()))
    buf653 = reinterpret_tensor(buf651, (4608, 768), (768, 1), 0); del buf651  # reuse
    # Source Nodes: [x_238], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_426, buf652, reinterpret_tensor(primals_425, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf653)
    del primals_426
    buf654 = buf633; del buf633  # reuse
    buf655 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf657 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf658 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_175(c_void_p(buf632.data_ptr()), c_void_p(primals_44.data_ptr()), c_void_p(buf653.data_ptr()), c_void_p(primals_427.data_ptr()), c_void_p(primals_428.data_ptr()), c_void_p(buf654.data_ptr()), c_void_p(buf655.data_ptr()), c_void_p(buf657.data_ptr()), c_void_p(buf658.data_ptr()))
    del primals_428
    buf659 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_241], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_430, buf658, reinterpret_tensor(primals_429, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf659)
    del primals_430
    buf660 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_176(c_void_p(buf659.data_ptr()), c_void_p(buf660.data_ptr()))
    buf661 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_245], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_432, buf660, reinterpret_tensor(primals_431, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf661)
    del primals_432
    buf662 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf663 = buf654; del buf654  # reuse
    buf664 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf666 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf667 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_177(c_void_p(buf632.data_ptr()), c_void_p(primals_44.data_ptr()), c_void_p(buf653.data_ptr()), c_void_p(primals_45.data_ptr()), c_void_p(buf661.data_ptr()), c_void_p(primals_433.data_ptr()), c_void_p(primals_434.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf663.data_ptr()), c_void_p(buf664.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(buf667.data_ptr()))
    del primals_434
    buf668 = buf638; del buf638  # reuse
    # Source Nodes: [getattr_l__mod___blocks___22___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_436, buf667, reinterpret_tensor(primals_435, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf668)
    del primals_436
    buf669 = reinterpret_tensor(buf632, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf632  # reuse
    buf670 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_178(c_void_p(buf668.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf670.data_ptr()))
    buf671 = reinterpret_tensor(buf648, (128, 576, 576), (331776, 576, 1), 0); del buf648  # reuse
    # Source Nodes: [attn_110], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf669, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf670, (128, 48, 576), (27648, 576, 1), 0), out=buf671)
    buf672 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_179(c_void_p(buf671.data_ptr()), c_void_p(buf672.data_ptr()))
    buf673 = reinterpret_tensor(buf671, (2654208, 16), (16, 1), 0); del buf671  # reuse
    # Source Nodes: [getattr_l__mod___blocks___22___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf672, reinterpret_tensor(primals_437, (16, 16), (1, 16), 0), out=buf673)
    buf674 = buf644; del buf644  # reuse
    buf675 = reinterpret_tensor(buf673, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf673  # reuse
    buf676 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf677 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_180(c_void_p(buf675.data_ptr()), c_void_p(primals_438.data_ptr()), c_void_p(buf674.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(buf677.data_ptr()))
    del primals_438
    buf678 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___22___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf677, reinterpret_tensor(primals_439, (16, 16), (1, 16), 0), out=buf678)
    buf679 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf680 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_181(c_void_p(buf678.data_ptr()), c_void_p(primals_440.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(buf680.data_ptr()))
    del primals_440
    buf681 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_45], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf679, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf680, (128, 576, 48), (27648, 48, 1), 0), out=buf681)
    buf682 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_182(c_void_p(buf681.data_ptr()), c_void_p(buf682.data_ptr()))
    buf683 = reinterpret_tensor(buf681, (4608, 768), (768, 1), 0); del buf681  # reuse
    # Source Nodes: [x_249], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_442, buf682, reinterpret_tensor(primals_441, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf683)
    del primals_442
    buf684 = buf663; del buf663  # reuse
    buf685 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf687 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf688 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_183(c_void_p(buf662.data_ptr()), c_void_p(primals_46.data_ptr()), c_void_p(buf683.data_ptr()), c_void_p(primals_443.data_ptr()), c_void_p(primals_444.data_ptr()), c_void_p(buf684.data_ptr()), c_void_p(buf685.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(buf688.data_ptr()))
    del primals_444
    buf689 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_252], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_446, buf688, reinterpret_tensor(primals_445, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf689)
    del primals_446
    buf690 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_184(c_void_p(buf689.data_ptr()), c_void_p(buf690.data_ptr()))
    buf691 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_256], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_448, buf690, reinterpret_tensor(primals_447, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf691)
    del primals_448
    buf692 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf693 = buf684; del buf684  # reuse
    buf694 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf696 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf697 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_185(c_void_p(buf662.data_ptr()), c_void_p(primals_46.data_ptr()), c_void_p(buf683.data_ptr()), c_void_p(primals_47.data_ptr()), c_void_p(buf691.data_ptr()), c_void_p(primals_449.data_ptr()), c_void_p(primals_450.data_ptr()), c_void_p(buf692.data_ptr()), c_void_p(buf693.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf696.data_ptr()), c_void_p(buf697.data_ptr()))
    del primals_450
    buf698 = buf668; del buf668  # reuse
    # Source Nodes: [getattr_l__mod___blocks___23___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_452, buf697, reinterpret_tensor(primals_451, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf698)
    del primals_452
    buf699 = reinterpret_tensor(buf662, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf662  # reuse
    buf700 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_186(c_void_p(buf698.data_ptr()), c_void_p(buf699.data_ptr()), c_void_p(buf700.data_ptr()))
    buf701 = reinterpret_tensor(buf678, (128, 576, 576), (331776, 576, 1), 0); del buf678  # reuse
    # Source Nodes: [attn_115], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf699, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf700, (128, 48, 576), (27648, 576, 1), 0), out=buf701)
    buf702 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_187(c_void_p(buf701.data_ptr()), c_void_p(buf702.data_ptr()))
    buf703 = reinterpret_tensor(buf701, (2654208, 16), (16, 1), 0); del buf701  # reuse
    # Source Nodes: [getattr_l__mod___blocks___23___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf702, reinterpret_tensor(primals_453, (16, 16), (1, 16), 0), out=buf703)
    buf704 = buf674; del buf674  # reuse
    buf705 = reinterpret_tensor(buf703, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf703  # reuse
    buf706 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf707 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_188(c_void_p(buf705.data_ptr()), c_void_p(primals_454.data_ptr()), c_void_p(buf704.data_ptr()), c_void_p(buf706.data_ptr()), c_void_p(buf707.data_ptr()))
    del primals_454
    buf708 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___23___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf707, reinterpret_tensor(primals_455, (16, 16), (1, 16), 0), out=buf708)
    buf709 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf710 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_189(c_void_p(buf708.data_ptr()), c_void_p(primals_456.data_ptr()), c_void_p(buf698.data_ptr()), c_void_p(buf709.data_ptr()), c_void_p(buf710.data_ptr()))
    del primals_456
    buf711 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_47], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf709, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf710, (128, 576, 48), (27648, 48, 1), 0), out=buf711)
    buf712 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_190(c_void_p(buf711.data_ptr()), c_void_p(buf712.data_ptr()))
    buf713 = reinterpret_tensor(buf711, (4608, 768), (768, 1), 0); del buf711  # reuse
    # Source Nodes: [x_260], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_458, buf712, reinterpret_tensor(primals_457, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf713)
    del primals_458
    buf714 = buf693; del buf693  # reuse
    buf715 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf717 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf718 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_191(c_void_p(buf692.data_ptr()), c_void_p(primals_48.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(primals_459.data_ptr()), c_void_p(primals_460.data_ptr()), c_void_p(buf714.data_ptr()), c_void_p(buf715.data_ptr()), c_void_p(buf717.data_ptr()), c_void_p(buf718.data_ptr()))
    del primals_460
    buf719 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_263], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_462, buf718, reinterpret_tensor(primals_461, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf719)
    del primals_462
    buf720 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_192(c_void_p(buf719.data_ptr()), c_void_p(buf720.data_ptr()))
    buf721 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_267], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_464, buf720, reinterpret_tensor(primals_463, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf721)
    del primals_464
    buf722 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf723 = buf714; del buf714  # reuse
    buf724 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf726 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf727 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_193(c_void_p(buf692.data_ptr()), c_void_p(primals_48.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(primals_49.data_ptr()), c_void_p(buf721.data_ptr()), c_void_p(primals_465.data_ptr()), c_void_p(primals_466.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf726.data_ptr()), c_void_p(buf727.data_ptr()))
    del primals_466
    buf728 = buf698; del buf698  # reuse
    # Source Nodes: [getattr_l__mod___blocks___24___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_468, buf727, reinterpret_tensor(primals_467, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf728)
    del primals_468
    buf729 = reinterpret_tensor(buf692, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf692  # reuse
    buf730 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_194(c_void_p(buf728.data_ptr()), c_void_p(buf729.data_ptr()), c_void_p(buf730.data_ptr()))
    buf731 = reinterpret_tensor(buf708, (128, 576, 576), (331776, 576, 1), 0); del buf708  # reuse
    # Source Nodes: [attn_120], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf729, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf730, (128, 48, 576), (27648, 576, 1), 0), out=buf731)
    buf732 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_195(c_void_p(buf731.data_ptr()), c_void_p(buf732.data_ptr()))
    buf733 = reinterpret_tensor(buf731, (2654208, 16), (16, 1), 0); del buf731  # reuse
    # Source Nodes: [getattr_l__mod___blocks___24___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf732, reinterpret_tensor(primals_469, (16, 16), (1, 16), 0), out=buf733)
    buf734 = buf704; del buf704  # reuse
    buf735 = reinterpret_tensor(buf733, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf733  # reuse
    buf736 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf737 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_196(c_void_p(buf735.data_ptr()), c_void_p(primals_470.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(buf737.data_ptr()))
    del primals_470
    buf738 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___24___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf737, reinterpret_tensor(primals_471, (16, 16), (1, 16), 0), out=buf738)
    buf739 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf740 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_197(c_void_p(buf738.data_ptr()), c_void_p(primals_472.data_ptr()), c_void_p(buf728.data_ptr()), c_void_p(buf739.data_ptr()), c_void_p(buf740.data_ptr()))
    del primals_472
    buf741 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_49], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf739, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf740, (128, 576, 48), (27648, 48, 1), 0), out=buf741)
    buf742 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_198(c_void_p(buf741.data_ptr()), c_void_p(buf742.data_ptr()))
    buf743 = reinterpret_tensor(buf741, (4608, 768), (768, 1), 0); del buf741  # reuse
    # Source Nodes: [x_271], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_474, buf742, reinterpret_tensor(primals_473, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf743)
    del primals_474
    buf744 = buf723; del buf723  # reuse
    buf745 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf747 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf748 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_199(c_void_p(buf722.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(buf743.data_ptr()), c_void_p(primals_475.data_ptr()), c_void_p(primals_476.data_ptr()), c_void_p(buf744.data_ptr()), c_void_p(buf745.data_ptr()), c_void_p(buf747.data_ptr()), c_void_p(buf748.data_ptr()))
    del primals_476
    buf749 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_274], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_478, buf748, reinterpret_tensor(primals_477, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf749)
    del primals_478
    buf750 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_200(c_void_p(buf749.data_ptr()), c_void_p(buf750.data_ptr()))
    buf751 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_278], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_480, buf750, reinterpret_tensor(primals_479, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf751)
    del primals_480
    buf752 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf753 = buf744; del buf744  # reuse
    buf754 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf756 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf757 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_201(c_void_p(buf722.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(buf743.data_ptr()), c_void_p(primals_51.data_ptr()), c_void_p(buf751.data_ptr()), c_void_p(primals_481.data_ptr()), c_void_p(primals_482.data_ptr()), c_void_p(buf752.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf756.data_ptr()), c_void_p(buf757.data_ptr()))
    del primals_482
    buf758 = buf728; del buf728  # reuse
    # Source Nodes: [getattr_l__mod___blocks___25___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_484, buf757, reinterpret_tensor(primals_483, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf758)
    del primals_484
    buf759 = reinterpret_tensor(buf722, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf722  # reuse
    buf760 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_202(c_void_p(buf758.data_ptr()), c_void_p(buf759.data_ptr()), c_void_p(buf760.data_ptr()))
    buf761 = reinterpret_tensor(buf738, (128, 576, 576), (331776, 576, 1), 0); del buf738  # reuse
    # Source Nodes: [attn_125], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf759, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf760, (128, 48, 576), (27648, 576, 1), 0), out=buf761)
    buf762 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_203(c_void_p(buf761.data_ptr()), c_void_p(buf762.data_ptr()))
    buf763 = reinterpret_tensor(buf761, (2654208, 16), (16, 1), 0); del buf761  # reuse
    # Source Nodes: [getattr_l__mod___blocks___25___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf762, reinterpret_tensor(primals_485, (16, 16), (1, 16), 0), out=buf763)
    buf764 = buf734; del buf734  # reuse
    buf765 = reinterpret_tensor(buf763, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf763  # reuse
    buf766 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf767 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_204(c_void_p(buf765.data_ptr()), c_void_p(primals_486.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(buf767.data_ptr()))
    del primals_486
    buf768 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___25___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf767, reinterpret_tensor(primals_487, (16, 16), (1, 16), 0), out=buf768)
    buf769 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf770 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_205(c_void_p(buf768.data_ptr()), c_void_p(primals_488.data_ptr()), c_void_p(buf758.data_ptr()), c_void_p(buf769.data_ptr()), c_void_p(buf770.data_ptr()))
    del primals_488
    buf771 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_51], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf769, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf770, (128, 576, 48), (27648, 48, 1), 0), out=buf771)
    buf772 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_206(c_void_p(buf771.data_ptr()), c_void_p(buf772.data_ptr()))
    buf773 = reinterpret_tensor(buf771, (4608, 768), (768, 1), 0); del buf771  # reuse
    # Source Nodes: [x_282], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_490, buf772, reinterpret_tensor(primals_489, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf773)
    del primals_490
    buf774 = buf753; del buf753  # reuse
    buf775 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf777 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf778 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_207(c_void_p(buf752.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(buf773.data_ptr()), c_void_p(primals_491.data_ptr()), c_void_p(primals_492.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(buf775.data_ptr()), c_void_p(buf777.data_ptr()), c_void_p(buf778.data_ptr()))
    del primals_492
    buf779 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_285], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_494, buf778, reinterpret_tensor(primals_493, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf779)
    del primals_494
    buf780 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_208(c_void_p(buf779.data_ptr()), c_void_p(buf780.data_ptr()))
    buf781 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_289], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_496, buf780, reinterpret_tensor(primals_495, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf781)
    del primals_496
    buf782 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf783 = buf774; del buf774  # reuse
    buf784 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf786 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf787 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_209(c_void_p(buf752.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(buf773.data_ptr()), c_void_p(primals_53.data_ptr()), c_void_p(buf781.data_ptr()), c_void_p(primals_497.data_ptr()), c_void_p(primals_498.data_ptr()), c_void_p(buf782.data_ptr()), c_void_p(buf783.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(buf787.data_ptr()))
    del primals_498
    buf788 = buf758; del buf758  # reuse
    # Source Nodes: [getattr_l__mod___blocks___26___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_500, buf787, reinterpret_tensor(primals_499, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf788)
    del primals_500
    buf789 = reinterpret_tensor(buf752, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf752  # reuse
    buf790 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_210(c_void_p(buf788.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(buf790.data_ptr()))
    buf791 = reinterpret_tensor(buf768, (128, 576, 576), (331776, 576, 1), 0); del buf768  # reuse
    # Source Nodes: [attn_130], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf789, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf790, (128, 48, 576), (27648, 576, 1), 0), out=buf791)
    buf792 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_211(c_void_p(buf791.data_ptr()), c_void_p(buf792.data_ptr()))
    buf793 = reinterpret_tensor(buf791, (2654208, 16), (16, 1), 0); del buf791  # reuse
    # Source Nodes: [getattr_l__mod___blocks___26___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf792, reinterpret_tensor(primals_501, (16, 16), (1, 16), 0), out=buf793)
    buf794 = buf764; del buf764  # reuse
    buf795 = reinterpret_tensor(buf793, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf793  # reuse
    buf796 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf797 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_212(c_void_p(buf795.data_ptr()), c_void_p(primals_502.data_ptr()), c_void_p(buf794.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf797.data_ptr()))
    del primals_502
    buf798 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___26___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf797, reinterpret_tensor(primals_503, (16, 16), (1, 16), 0), out=buf798)
    buf799 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf800 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_213(c_void_p(buf798.data_ptr()), c_void_p(primals_504.data_ptr()), c_void_p(buf788.data_ptr()), c_void_p(buf799.data_ptr()), c_void_p(buf800.data_ptr()))
    del primals_504
    buf801 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_53], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf799, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf800, (128, 576, 48), (27648, 48, 1), 0), out=buf801)
    buf802 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_214(c_void_p(buf801.data_ptr()), c_void_p(buf802.data_ptr()))
    buf803 = reinterpret_tensor(buf801, (4608, 768), (768, 1), 0); del buf801  # reuse
    # Source Nodes: [x_293], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_506, buf802, reinterpret_tensor(primals_505, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf803)
    del primals_506
    buf804 = buf783; del buf783  # reuse
    buf805 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf807 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf808 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_215(c_void_p(buf782.data_ptr()), c_void_p(primals_54.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(primals_507.data_ptr()), c_void_p(primals_508.data_ptr()), c_void_p(buf804.data_ptr()), c_void_p(buf805.data_ptr()), c_void_p(buf807.data_ptr()), c_void_p(buf808.data_ptr()))
    del primals_508
    buf809 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_296], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_510, buf808, reinterpret_tensor(primals_509, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf809)
    del primals_510
    buf810 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_216(c_void_p(buf809.data_ptr()), c_void_p(buf810.data_ptr()))
    buf811 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_300], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_512, buf810, reinterpret_tensor(primals_511, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf811)
    del primals_512
    buf812 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf813 = buf804; del buf804  # reuse
    buf814 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf816 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf817 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_217(c_void_p(buf782.data_ptr()), c_void_p(primals_54.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(primals_55.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(primals_513.data_ptr()), c_void_p(primals_514.data_ptr()), c_void_p(buf812.data_ptr()), c_void_p(buf813.data_ptr()), c_void_p(buf814.data_ptr()), c_void_p(buf816.data_ptr()), c_void_p(buf817.data_ptr()))
    del primals_514
    buf818 = buf788; del buf788  # reuse
    # Source Nodes: [getattr_l__mod___blocks___27___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_516, buf817, reinterpret_tensor(primals_515, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf818)
    del primals_516
    buf819 = reinterpret_tensor(buf782, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf782  # reuse
    buf820 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_218(c_void_p(buf818.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf820.data_ptr()))
    buf821 = reinterpret_tensor(buf798, (128, 576, 576), (331776, 576, 1), 0); del buf798  # reuse
    # Source Nodes: [attn_135], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf819, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf820, (128, 48, 576), (27648, 576, 1), 0), out=buf821)
    buf822 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_219(c_void_p(buf821.data_ptr()), c_void_p(buf822.data_ptr()))
    buf823 = reinterpret_tensor(buf821, (2654208, 16), (16, 1), 0); del buf821  # reuse
    # Source Nodes: [getattr_l__mod___blocks___27___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf822, reinterpret_tensor(primals_517, (16, 16), (1, 16), 0), out=buf823)
    buf824 = buf794; del buf794  # reuse
    buf825 = reinterpret_tensor(buf823, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf823  # reuse
    buf826 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf827 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_220(c_void_p(buf825.data_ptr()), c_void_p(primals_518.data_ptr()), c_void_p(buf824.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(buf827.data_ptr()))
    del primals_518
    buf828 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___27___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf827, reinterpret_tensor(primals_519, (16, 16), (1, 16), 0), out=buf828)
    buf829 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf830 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_221(c_void_p(buf828.data_ptr()), c_void_p(primals_520.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf829.data_ptr()), c_void_p(buf830.data_ptr()))
    del primals_520
    buf831 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_55], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf829, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf830, (128, 576, 48), (27648, 48, 1), 0), out=buf831)
    buf832 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_222(c_void_p(buf831.data_ptr()), c_void_p(buf832.data_ptr()))
    buf833 = reinterpret_tensor(buf831, (4608, 768), (768, 1), 0); del buf831  # reuse
    # Source Nodes: [x_304], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_522, buf832, reinterpret_tensor(primals_521, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf833)
    del primals_522
    buf834 = buf813; del buf813  # reuse
    buf835 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf837 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf838 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_223(c_void_p(buf812.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(primals_523.data_ptr()), c_void_p(primals_524.data_ptr()), c_void_p(buf834.data_ptr()), c_void_p(buf835.data_ptr()), c_void_p(buf837.data_ptr()), c_void_p(buf838.data_ptr()))
    del primals_524
    buf839 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_307], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_526, buf838, reinterpret_tensor(primals_525, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf839)
    del primals_526
    buf840 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_224(c_void_p(buf839.data_ptr()), c_void_p(buf840.data_ptr()))
    buf841 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_311], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_528, buf840, reinterpret_tensor(primals_527, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf841)
    del primals_528
    buf842 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf843 = buf834; del buf834  # reuse
    buf844 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf846 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf847 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_225(c_void_p(buf812.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(primals_57.data_ptr()), c_void_p(buf841.data_ptr()), c_void_p(primals_529.data_ptr()), c_void_p(primals_530.data_ptr()), c_void_p(buf842.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf844.data_ptr()), c_void_p(buf846.data_ptr()), c_void_p(buf847.data_ptr()))
    del primals_530
    buf848 = buf818; del buf818  # reuse
    # Source Nodes: [getattr_l__mod___blocks___28___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_532, buf847, reinterpret_tensor(primals_531, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf848)
    del primals_532
    buf849 = reinterpret_tensor(buf812, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf812  # reuse
    buf850 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_226(c_void_p(buf848.data_ptr()), c_void_p(buf849.data_ptr()), c_void_p(buf850.data_ptr()))
    buf851 = reinterpret_tensor(buf828, (128, 576, 576), (331776, 576, 1), 0); del buf828  # reuse
    # Source Nodes: [attn_140], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf849, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf850, (128, 48, 576), (27648, 576, 1), 0), out=buf851)
    buf852 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_227(c_void_p(buf851.data_ptr()), c_void_p(buf852.data_ptr()))
    buf853 = reinterpret_tensor(buf851, (2654208, 16), (16, 1), 0); del buf851  # reuse
    # Source Nodes: [getattr_l__mod___blocks___28___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf852, reinterpret_tensor(primals_533, (16, 16), (1, 16), 0), out=buf853)
    buf854 = buf824; del buf824  # reuse
    buf855 = reinterpret_tensor(buf853, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf853  # reuse
    buf856 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf857 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_228(c_void_p(buf855.data_ptr()), c_void_p(primals_534.data_ptr()), c_void_p(buf854.data_ptr()), c_void_p(buf856.data_ptr()), c_void_p(buf857.data_ptr()))
    del primals_534
    buf858 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___28___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf857, reinterpret_tensor(primals_535, (16, 16), (1, 16), 0), out=buf858)
    buf859 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf860 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_229(c_void_p(buf858.data_ptr()), c_void_p(primals_536.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf859.data_ptr()), c_void_p(buf860.data_ptr()))
    del primals_536
    buf861 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_57], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf859, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf860, (128, 576, 48), (27648, 48, 1), 0), out=buf861)
    buf862 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_230(c_void_p(buf861.data_ptr()), c_void_p(buf862.data_ptr()))
    buf863 = reinterpret_tensor(buf861, (4608, 768), (768, 1), 0); del buf861  # reuse
    # Source Nodes: [x_315], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_538, buf862, reinterpret_tensor(primals_537, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf863)
    del primals_538
    buf864 = buf843; del buf843  # reuse
    buf865 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf867 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf868 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_231(c_void_p(buf842.data_ptr()), c_void_p(primals_58.data_ptr()), c_void_p(buf863.data_ptr()), c_void_p(primals_539.data_ptr()), c_void_p(primals_540.data_ptr()), c_void_p(buf864.data_ptr()), c_void_p(buf865.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(buf868.data_ptr()))
    del primals_540
    buf869 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_318], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_542, buf868, reinterpret_tensor(primals_541, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf869)
    del primals_542
    buf870 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_232(c_void_p(buf869.data_ptr()), c_void_p(buf870.data_ptr()))
    buf871 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_322], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_544, buf870, reinterpret_tensor(primals_543, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf871)
    del primals_544
    buf872 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf873 = buf864; del buf864  # reuse
    buf874 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf876 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf877 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_233(c_void_p(buf842.data_ptr()), c_void_p(primals_58.data_ptr()), c_void_p(buf863.data_ptr()), c_void_p(primals_59.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(primals_545.data_ptr()), c_void_p(primals_546.data_ptr()), c_void_p(buf872.data_ptr()), c_void_p(buf873.data_ptr()), c_void_p(buf874.data_ptr()), c_void_p(buf876.data_ptr()), c_void_p(buf877.data_ptr()))
    del primals_546
    buf878 = buf848; del buf848  # reuse
    # Source Nodes: [getattr_l__mod___blocks___29___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_548, buf877, reinterpret_tensor(primals_547, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf878)
    del primals_548
    buf879 = reinterpret_tensor(buf842, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf842  # reuse
    buf880 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_234(c_void_p(buf878.data_ptr()), c_void_p(buf879.data_ptr()), c_void_p(buf880.data_ptr()))
    buf881 = reinterpret_tensor(buf858, (128, 576, 576), (331776, 576, 1), 0); del buf858  # reuse
    # Source Nodes: [attn_145], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf879, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf880, (128, 48, 576), (27648, 576, 1), 0), out=buf881)
    buf882 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_235(c_void_p(buf881.data_ptr()), c_void_p(buf882.data_ptr()))
    buf883 = reinterpret_tensor(buf881, (2654208, 16), (16, 1), 0); del buf881  # reuse
    # Source Nodes: [getattr_l__mod___blocks___29___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf882, reinterpret_tensor(primals_549, (16, 16), (1, 16), 0), out=buf883)
    buf884 = buf854; del buf854  # reuse
    buf885 = reinterpret_tensor(buf883, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf883  # reuse
    buf886 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf887 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_236(c_void_p(buf885.data_ptr()), c_void_p(primals_550.data_ptr()), c_void_p(buf884.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf887.data_ptr()))
    del primals_550
    buf888 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___29___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf887, reinterpret_tensor(primals_551, (16, 16), (1, 16), 0), out=buf888)
    buf889 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf890 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_237(c_void_p(buf888.data_ptr()), c_void_p(primals_552.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf889.data_ptr()), c_void_p(buf890.data_ptr()))
    del primals_552
    buf891 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_59], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf889, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf890, (128, 576, 48), (27648, 48, 1), 0), out=buf891)
    buf892 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_238(c_void_p(buf891.data_ptr()), c_void_p(buf892.data_ptr()))
    buf893 = reinterpret_tensor(buf891, (4608, 768), (768, 1), 0); del buf891  # reuse
    # Source Nodes: [x_326], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_554, buf892, reinterpret_tensor(primals_553, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf893)
    del primals_554
    buf894 = buf873; del buf873  # reuse
    buf895 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf897 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf898 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_239(c_void_p(buf872.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(buf893.data_ptr()), c_void_p(primals_555.data_ptr()), c_void_p(primals_556.data_ptr()), c_void_p(buf894.data_ptr()), c_void_p(buf895.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(buf898.data_ptr()))
    del primals_556
    buf899 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_329], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_558, buf898, reinterpret_tensor(primals_557, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf899)
    del primals_558
    buf900 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_240(c_void_p(buf899.data_ptr()), c_void_p(buf900.data_ptr()))
    buf901 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_333], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_560, buf900, reinterpret_tensor(primals_559, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf901)
    del primals_560
    buf902 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf903 = buf894; del buf894  # reuse
    buf904 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf906 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf907 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_241(c_void_p(buf872.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(buf893.data_ptr()), c_void_p(primals_61.data_ptr()), c_void_p(buf901.data_ptr()), c_void_p(primals_561.data_ptr()), c_void_p(primals_562.data_ptr()), c_void_p(buf902.data_ptr()), c_void_p(buf903.data_ptr()), c_void_p(buf904.data_ptr()), c_void_p(buf906.data_ptr()), c_void_p(buf907.data_ptr()))
    del primals_562
    buf908 = buf878; del buf878  # reuse
    # Source Nodes: [getattr_l__mod___blocks___30___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_564, buf907, reinterpret_tensor(primals_563, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf908)
    del primals_564
    buf909 = reinterpret_tensor(buf872, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf872  # reuse
    buf910 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_242(c_void_p(buf908.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf910.data_ptr()))
    buf911 = reinterpret_tensor(buf888, (128, 576, 576), (331776, 576, 1), 0); del buf888  # reuse
    # Source Nodes: [attn_150], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf909, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf910, (128, 48, 576), (27648, 576, 1), 0), out=buf911)
    buf912 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_243(c_void_p(buf911.data_ptr()), c_void_p(buf912.data_ptr()))
    buf913 = reinterpret_tensor(buf911, (2654208, 16), (16, 1), 0); del buf911  # reuse
    # Source Nodes: [getattr_l__mod___blocks___30___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf912, reinterpret_tensor(primals_565, (16, 16), (1, 16), 0), out=buf913)
    buf914 = buf884; del buf884  # reuse
    buf915 = reinterpret_tensor(buf913, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf913  # reuse
    buf916 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf917 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_244(c_void_p(buf915.data_ptr()), c_void_p(primals_566.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf916.data_ptr()), c_void_p(buf917.data_ptr()))
    del primals_566
    buf918 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___30___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf917, reinterpret_tensor(primals_567, (16, 16), (1, 16), 0), out=buf918)
    buf919 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf920 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_245(c_void_p(buf918.data_ptr()), c_void_p(primals_568.data_ptr()), c_void_p(buf908.data_ptr()), c_void_p(buf919.data_ptr()), c_void_p(buf920.data_ptr()))
    del primals_568
    buf921 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_61], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf919, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf920, (128, 576, 48), (27648, 48, 1), 0), out=buf921)
    buf922 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_246(c_void_p(buf921.data_ptr()), c_void_p(buf922.data_ptr()))
    buf923 = reinterpret_tensor(buf921, (4608, 768), (768, 1), 0); del buf921  # reuse
    # Source Nodes: [x_337], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_570, buf922, reinterpret_tensor(primals_569, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf923)
    del primals_570
    buf924 = buf903; del buf903  # reuse
    buf925 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf927 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf928 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_247(c_void_p(buf902.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(primals_571.data_ptr()), c_void_p(primals_572.data_ptr()), c_void_p(buf924.data_ptr()), c_void_p(buf925.data_ptr()), c_void_p(buf927.data_ptr()), c_void_p(buf928.data_ptr()))
    del primals_572
    buf929 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_340], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_574, buf928, reinterpret_tensor(primals_573, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf929)
    del primals_574
    buf930 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_248(c_void_p(buf929.data_ptr()), c_void_p(buf930.data_ptr()))
    buf931 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_344], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_576, buf930, reinterpret_tensor(primals_575, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf931)
    del primals_576
    buf932 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf933 = buf924; del buf924  # reuse
    buf934 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf936 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf937 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_249(c_void_p(buf902.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(primals_63.data_ptr()), c_void_p(buf931.data_ptr()), c_void_p(primals_577.data_ptr()), c_void_p(primals_578.data_ptr()), c_void_p(buf932.data_ptr()), c_void_p(buf933.data_ptr()), c_void_p(buf934.data_ptr()), c_void_p(buf936.data_ptr()), c_void_p(buf937.data_ptr()))
    del primals_578
    buf938 = buf908; del buf908  # reuse
    # Source Nodes: [getattr_l__mod___blocks___31___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_580, buf937, reinterpret_tensor(primals_579, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf938)
    del primals_580
    buf939 = reinterpret_tensor(buf902, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf902  # reuse
    buf940 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_250(c_void_p(buf938.data_ptr()), c_void_p(buf939.data_ptr()), c_void_p(buf940.data_ptr()))
    buf941 = reinterpret_tensor(buf918, (128, 576, 576), (331776, 576, 1), 0); del buf918  # reuse
    # Source Nodes: [attn_155], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf939, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf940, (128, 48, 576), (27648, 576, 1), 0), out=buf941)
    buf942 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_251(c_void_p(buf941.data_ptr()), c_void_p(buf942.data_ptr()))
    buf943 = reinterpret_tensor(buf941, (2654208, 16), (16, 1), 0); del buf941  # reuse
    # Source Nodes: [getattr_l__mod___blocks___31___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf942, reinterpret_tensor(primals_581, (16, 16), (1, 16), 0), out=buf943)
    buf944 = buf914; del buf914  # reuse
    buf945 = reinterpret_tensor(buf943, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf943  # reuse
    buf946 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf947 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_252(c_void_p(buf945.data_ptr()), c_void_p(primals_582.data_ptr()), c_void_p(buf944.data_ptr()), c_void_p(buf946.data_ptr()), c_void_p(buf947.data_ptr()))
    del primals_582
    buf948 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___31___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf947, reinterpret_tensor(primals_583, (16, 16), (1, 16), 0), out=buf948)
    buf949 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf950 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_253(c_void_p(buf948.data_ptr()), c_void_p(primals_584.data_ptr()), c_void_p(buf938.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf950.data_ptr()))
    del primals_584
    buf951 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_63], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf949, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf950, (128, 576, 48), (27648, 48, 1), 0), out=buf951)
    buf952 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_254(c_void_p(buf951.data_ptr()), c_void_p(buf952.data_ptr()))
    buf953 = reinterpret_tensor(buf951, (4608, 768), (768, 1), 0); del buf951  # reuse
    # Source Nodes: [x_348], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_586, buf952, reinterpret_tensor(primals_585, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf953)
    del primals_586
    buf954 = buf933; del buf933  # reuse
    buf955 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf957 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf958 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_255(c_void_p(buf932.data_ptr()), c_void_p(primals_64.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(primals_587.data_ptr()), c_void_p(primals_588.data_ptr()), c_void_p(buf954.data_ptr()), c_void_p(buf955.data_ptr()), c_void_p(buf957.data_ptr()), c_void_p(buf958.data_ptr()))
    del primals_588
    buf959 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_351], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_590, buf958, reinterpret_tensor(primals_589, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf959)
    del primals_590
    buf960 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_256(c_void_p(buf959.data_ptr()), c_void_p(buf960.data_ptr()))
    buf961 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_355], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_592, buf960, reinterpret_tensor(primals_591, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf961)
    del primals_592
    buf962 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf963 = buf954; del buf954  # reuse
    buf964 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf966 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf967 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_257(c_void_p(buf932.data_ptr()), c_void_p(primals_64.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(primals_65.data_ptr()), c_void_p(buf961.data_ptr()), c_void_p(primals_593.data_ptr()), c_void_p(primals_594.data_ptr()), c_void_p(buf962.data_ptr()), c_void_p(buf963.data_ptr()), c_void_p(buf964.data_ptr()), c_void_p(buf966.data_ptr()), c_void_p(buf967.data_ptr()))
    del primals_594
    buf968 = buf938; del buf938  # reuse
    # Source Nodes: [getattr_l__mod___blocks___32___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_596, buf967, reinterpret_tensor(primals_595, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf968)
    del primals_596
    buf969 = reinterpret_tensor(buf932, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf932  # reuse
    buf970 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_258(c_void_p(buf968.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf970.data_ptr()))
    buf971 = reinterpret_tensor(buf948, (128, 576, 576), (331776, 576, 1), 0); del buf948  # reuse
    # Source Nodes: [attn_160], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf969, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf970, (128, 48, 576), (27648, 576, 1), 0), out=buf971)
    buf972 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_259(c_void_p(buf971.data_ptr()), c_void_p(buf972.data_ptr()))
    buf973 = reinterpret_tensor(buf971, (2654208, 16), (16, 1), 0); del buf971  # reuse
    # Source Nodes: [getattr_l__mod___blocks___32___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf972, reinterpret_tensor(primals_597, (16, 16), (1, 16), 0), out=buf973)
    buf974 = buf944; del buf944  # reuse
    buf975 = reinterpret_tensor(buf973, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf973  # reuse
    buf976 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf977 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_260(c_void_p(buf975.data_ptr()), c_void_p(primals_598.data_ptr()), c_void_p(buf974.data_ptr()), c_void_p(buf976.data_ptr()), c_void_p(buf977.data_ptr()))
    del primals_598
    buf978 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___32___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf977, reinterpret_tensor(primals_599, (16, 16), (1, 16), 0), out=buf978)
    buf979 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf980 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_261(c_void_p(buf978.data_ptr()), c_void_p(primals_600.data_ptr()), c_void_p(buf968.data_ptr()), c_void_p(buf979.data_ptr()), c_void_p(buf980.data_ptr()))
    del primals_600
    buf981 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_65], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf979, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf980, (128, 576, 48), (27648, 48, 1), 0), out=buf981)
    buf982 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_262(c_void_p(buf981.data_ptr()), c_void_p(buf982.data_ptr()))
    buf983 = reinterpret_tensor(buf981, (4608, 768), (768, 1), 0); del buf981  # reuse
    # Source Nodes: [x_359], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_602, buf982, reinterpret_tensor(primals_601, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf983)
    del primals_602
    buf984 = buf963; del buf963  # reuse
    buf985 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf987 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf988 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_263(c_void_p(buf962.data_ptr()), c_void_p(primals_66.data_ptr()), c_void_p(buf983.data_ptr()), c_void_p(primals_603.data_ptr()), c_void_p(primals_604.data_ptr()), c_void_p(buf984.data_ptr()), c_void_p(buf985.data_ptr()), c_void_p(buf987.data_ptr()), c_void_p(buf988.data_ptr()))
    del primals_604
    buf989 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_362], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_606, buf988, reinterpret_tensor(primals_605, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf989)
    del primals_606
    buf990 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_264(c_void_p(buf989.data_ptr()), c_void_p(buf990.data_ptr()))
    buf991 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_366], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_608, buf990, reinterpret_tensor(primals_607, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf991)
    del primals_608
    buf992 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf993 = buf984; del buf984  # reuse
    buf994 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf996 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf997 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_265(c_void_p(buf962.data_ptr()), c_void_p(primals_66.data_ptr()), c_void_p(buf983.data_ptr()), c_void_p(primals_67.data_ptr()), c_void_p(buf991.data_ptr()), c_void_p(primals_609.data_ptr()), c_void_p(primals_610.data_ptr()), c_void_p(buf992.data_ptr()), c_void_p(buf993.data_ptr()), c_void_p(buf994.data_ptr()), c_void_p(buf996.data_ptr()), c_void_p(buf997.data_ptr()))
    del primals_610
    buf998 = buf968; del buf968  # reuse
    # Source Nodes: [getattr_l__mod___blocks___33___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_612, buf997, reinterpret_tensor(primals_611, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf998)
    del primals_612
    buf999 = reinterpret_tensor(buf962, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf962  # reuse
    buf1000 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_266(c_void_p(buf998.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(buf1000.data_ptr()))
    buf1001 = reinterpret_tensor(buf978, (128, 576, 576), (331776, 576, 1), 0); del buf978  # reuse
    # Source Nodes: [attn_165], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf999, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf1000, (128, 48, 576), (27648, 576, 1), 0), out=buf1001)
    buf1002 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_267(c_void_p(buf1001.data_ptr()), c_void_p(buf1002.data_ptr()))
    buf1003 = reinterpret_tensor(buf1001, (2654208, 16), (16, 1), 0); del buf1001  # reuse
    # Source Nodes: [getattr_l__mod___blocks___33___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf1002, reinterpret_tensor(primals_613, (16, 16), (1, 16), 0), out=buf1003)
    buf1004 = buf974; del buf974  # reuse
    buf1005 = reinterpret_tensor(buf1003, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf1003  # reuse
    buf1006 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf1007 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_268(c_void_p(buf1005.data_ptr()), c_void_p(primals_614.data_ptr()), c_void_p(buf1004.data_ptr()), c_void_p(buf1006.data_ptr()), c_void_p(buf1007.data_ptr()))
    del primals_614
    buf1008 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___33___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf1007, reinterpret_tensor(primals_615, (16, 16), (1, 16), 0), out=buf1008)
    buf1009 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf1010 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_269(c_void_p(buf1008.data_ptr()), c_void_p(primals_616.data_ptr()), c_void_p(buf998.data_ptr()), c_void_p(buf1009.data_ptr()), c_void_p(buf1010.data_ptr()))
    del primals_616
    buf1011 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_67], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1009, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf1010, (128, 576, 48), (27648, 48, 1), 0), out=buf1011)
    buf1012 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_270(c_void_p(buf1011.data_ptr()), c_void_p(buf1012.data_ptr()))
    buf1013 = reinterpret_tensor(buf1011, (4608, 768), (768, 1), 0); del buf1011  # reuse
    # Source Nodes: [x_370], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_618, buf1012, reinterpret_tensor(primals_617, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1013)
    del primals_618
    buf1014 = buf993; del buf993  # reuse
    buf1015 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf1017 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf1018 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_271(c_void_p(buf992.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(primals_619.data_ptr()), c_void_p(primals_620.data_ptr()), c_void_p(buf1014.data_ptr()), c_void_p(buf1015.data_ptr()), c_void_p(buf1017.data_ptr()), c_void_p(buf1018.data_ptr()))
    del primals_620
    buf1019 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_373], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_622, buf1018, reinterpret_tensor(primals_621, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1019)
    del primals_622
    buf1020 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_272(c_void_p(buf1019.data_ptr()), c_void_p(buf1020.data_ptr()))
    buf1021 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_377], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_624, buf1020, reinterpret_tensor(primals_623, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1021)
    del primals_624
    buf1022 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf1023 = buf1014; del buf1014  # reuse
    buf1024 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf1026 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf1027 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_273(c_void_p(buf992.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(primals_69.data_ptr()), c_void_p(buf1021.data_ptr()), c_void_p(primals_625.data_ptr()), c_void_p(primals_626.data_ptr()), c_void_p(buf1022.data_ptr()), c_void_p(buf1023.data_ptr()), c_void_p(buf1024.data_ptr()), c_void_p(buf1026.data_ptr()), c_void_p(buf1027.data_ptr()))
    del primals_626
    buf1028 = buf998; del buf998  # reuse
    # Source Nodes: [getattr_l__mod___blocks___34___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_628, buf1027, reinterpret_tensor(primals_627, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf1028)
    del primals_628
    buf1029 = reinterpret_tensor(buf992, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf992  # reuse
    buf1030 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_274(c_void_p(buf1028.data_ptr()), c_void_p(buf1029.data_ptr()), c_void_p(buf1030.data_ptr()))
    buf1031 = reinterpret_tensor(buf1008, (128, 576, 576), (331776, 576, 1), 0); del buf1008  # reuse
    # Source Nodes: [attn_170], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1029, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf1030, (128, 48, 576), (27648, 576, 1), 0), out=buf1031)
    buf1032 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_275(c_void_p(buf1031.data_ptr()), c_void_p(buf1032.data_ptr()))
    buf1033 = reinterpret_tensor(buf1031, (2654208, 16), (16, 1), 0); del buf1031  # reuse
    # Source Nodes: [getattr_l__mod___blocks___34___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf1032, reinterpret_tensor(primals_629, (16, 16), (1, 16), 0), out=buf1033)
    buf1034 = buf1004; del buf1004  # reuse
    buf1035 = reinterpret_tensor(buf1033, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf1033  # reuse
    buf1036 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf1037 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_276(c_void_p(buf1035.data_ptr()), c_void_p(primals_630.data_ptr()), c_void_p(buf1034.data_ptr()), c_void_p(buf1036.data_ptr()), c_void_p(buf1037.data_ptr()))
    del primals_630
    buf1038 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___34___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf1037, reinterpret_tensor(primals_631, (16, 16), (1, 16), 0), out=buf1038)
    buf1039 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf1040 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_277(c_void_p(buf1038.data_ptr()), c_void_p(primals_632.data_ptr()), c_void_p(buf1028.data_ptr()), c_void_p(buf1039.data_ptr()), c_void_p(buf1040.data_ptr()))
    del primals_632
    buf1041 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_69], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1039, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf1040, (128, 576, 48), (27648, 48, 1), 0), out=buf1041)
    buf1042 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_278(c_void_p(buf1041.data_ptr()), c_void_p(buf1042.data_ptr()))
    buf1043 = reinterpret_tensor(buf1041, (4608, 768), (768, 1), 0); del buf1041  # reuse
    # Source Nodes: [x_381], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_634, buf1042, reinterpret_tensor(primals_633, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1043)
    del primals_634
    buf1044 = buf1023; del buf1023  # reuse
    buf1045 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf1047 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf1048 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_279(c_void_p(buf1022.data_ptr()), c_void_p(primals_70.data_ptr()), c_void_p(buf1043.data_ptr()), c_void_p(primals_635.data_ptr()), c_void_p(primals_636.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(buf1045.data_ptr()), c_void_p(buf1047.data_ptr()), c_void_p(buf1048.data_ptr()))
    del primals_636
    buf1049 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_384], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_638, buf1048, reinterpret_tensor(primals_637, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1049)
    del primals_638
    buf1050 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_280(c_void_p(buf1049.data_ptr()), c_void_p(buf1050.data_ptr()))
    buf1051 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_388], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_640, buf1050, reinterpret_tensor(primals_639, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1051)
    del primals_640
    buf1052 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf1053 = buf1044; del buf1044  # reuse
    buf1054 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf1056 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf1057 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_281(c_void_p(buf1022.data_ptr()), c_void_p(primals_70.data_ptr()), c_void_p(buf1043.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(primals_641.data_ptr()), c_void_p(primals_642.data_ptr()), c_void_p(buf1052.data_ptr()), c_void_p(buf1053.data_ptr()), c_void_p(buf1054.data_ptr()), c_void_p(buf1056.data_ptr()), c_void_p(buf1057.data_ptr()))
    del primals_642
    buf1058 = buf1028; del buf1028  # reuse
    # Source Nodes: [getattr_l__mod___blocks___35___attn_qkv], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_644, buf1057, reinterpret_tensor(primals_643, (768, 2304), (1, 768), 0), alpha=1, beta=1, out=buf1058)
    del primals_644
    buf1059 = reinterpret_tensor(buf1022, (8, 16, 576, 48), (442368, 27648, 48, 1), 0); del buf1022  # reuse
    buf1060 = empty((8, 16, 48, 576), device='cpu', dtype=torch.float32)
    cpp_fused_clone_mul_282(c_void_p(buf1058.data_ptr()), c_void_p(buf1059.data_ptr()), c_void_p(buf1060.data_ptr()))
    buf1061 = reinterpret_tensor(buf1038, (128, 576, 576), (331776, 576, 1), 0); del buf1038  # reuse
    # Source Nodes: [attn_175], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1059, (128, 576, 48), (27648, 48, 1), 0), reinterpret_tensor(buf1060, (128, 48, 576), (27648, 576, 1), 0), out=buf1061)
    buf1062 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_clone_283(c_void_p(buf1061.data_ptr()), c_void_p(buf1062.data_ptr()))
    buf1063 = reinterpret_tensor(buf1061, (2654208, 16), (16, 1), 0); del buf1061  # reuse
    # Source Nodes: [getattr_l__mod___blocks___35___attn_proj_l], Original ATen: [aten.mm]
    extern_kernels.mm(buf1062, reinterpret_tensor(primals_645, (16, 16), (1, 16), 0), out=buf1063)
    buf1064 = buf1034; del buf1034  # reuse
    buf1065 = reinterpret_tensor(buf1063, (8, 16, 576, 576), (5308416, 1, 9216, 16), 0); del buf1063  # reuse
    buf1066 = empty_strided((8, 16, 576, 1), (9216, 576, 1, 73728), device='cpu', dtype=torch.float32)
    buf1067 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    cpp_fused__softmax__unsafe_view_clone_284(c_void_p(buf1065.data_ptr()), c_void_p(primals_646.data_ptr()), c_void_p(buf1064.data_ptr()), c_void_p(buf1066.data_ptr()), c_void_p(buf1067.data_ptr()))
    del buf1064
    del primals_646
    buf1068 = empty((2654208, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [getattr_l__mod___blocks___35___attn_proj_w], Original ATen: [aten.mm]
    extern_kernels.mm(buf1067, reinterpret_tensor(primals_647, (16, 16), (1, 16), 0), out=buf1068)
    buf1069 = empty((8, 16, 576, 576), device='cpu', dtype=torch.float32)
    buf1070 = empty((8, 16, 576, 48), device='cpu', dtype=torch.float32)
    cpp_fused_clone_285(c_void_p(buf1068.data_ptr()), c_void_p(primals_648.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(buf1069.data_ptr()), c_void_p(buf1070.data_ptr()))
    del buf1058
    del buf1068
    del primals_648
    buf1071 = empty((128, 576, 48), device='cpu', dtype=torch.float32)
    # Source Nodes: [matmul_71], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1069, (128, 576, 576), (331776, 576, 1), 0), reinterpret_tensor(buf1070, (128, 576, 48), (27648, 48, 1), 0), out=buf1071)
    buf1072 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_view_286(c_void_p(buf1071.data_ptr()), c_void_p(buf1072.data_ptr()))
    buf1073 = reinterpret_tensor(buf1071, (4608, 768), (768, 1), 0); del buf1071  # reuse
    # Source Nodes: [x_392], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_650, buf1072, reinterpret_tensor(primals_649, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1073)
    del primals_650
    buf1074 = buf1053; del buf1053  # reuse
    buf1075 = empty_strided((8, 576, 1), (576, 1, 4608), device='cpu', dtype=torch.float32)
    buf1077 = empty((8, 576, 768), device='cpu', dtype=torch.float32)
    buf1078 = empty((4608, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_287(c_void_p(buf1052.data_ptr()), c_void_p(primals_72.data_ptr()), c_void_p(buf1073.data_ptr()), c_void_p(primals_651.data_ptr()), c_void_p(primals_652.data_ptr()), c_void_p(buf1074.data_ptr()), c_void_p(buf1075.data_ptr()), c_void_p(buf1077.data_ptr()), c_void_p(buf1078.data_ptr()))
    del buf1074
    del primals_652
    buf1079 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_395], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_654, buf1078, reinterpret_tensor(primals_653, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1079)
    del primals_654
    buf1080 = empty((4608, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_288(c_void_p(buf1079.data_ptr()), c_void_p(buf1080.data_ptr()))
    buf1081 = empty((4608, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_399], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_656, buf1080, reinterpret_tensor(primals_655, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1081)
    del primals_656
    buf1084 = empty((8, 577, 768), device='cpu', dtype=torch.float32)
    buf1082 = reinterpret_tensor(buf1084, (8, 576, 768), (443136, 768, 1), 768)  # alias
    buf1083 = reinterpret_tensor(buf1084, (8, 1, 768), (443136, 768, 1), 0)  # alias
    buf1085 = empty((8, 577, 1), device='cpu', dtype=torch.float32)
    buf1086 = empty_strided((8, 577, 1), (577, 1, 4616), device='cpu', dtype=torch.float32)
    buf1088 = reinterpret_tensor(buf1086, (8, 577, 1), (577, 1, 1), 0); del buf1086  # reuse
    buf1089 = empty((8, 577, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_cat_mul_native_layer_norm_289(c_void_p(buf1088.data_ptr()), c_void_p(buf1052.data_ptr()), c_void_p(primals_72.data_ptr()), c_void_p(buf1073.data_ptr()), c_void_p(primals_73.data_ptr()), c_void_p(buf1081.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(buf1084.data_ptr()), c_void_p(primals_657.data_ptr()), c_void_p(primals_658.data_ptr()), c_void_p(buf1082.data_ptr()), c_void_p(buf1083.data_ptr()), c_void_p(buf1085.data_ptr()), c_void_p(buf1089.data_ptr()))
    del buf1052
    del primals_658
    buf1090 = empty((8, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_0_attn_q], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_660, reinterpret_tensor(buf1089, (8, 768), (443136, 1), 0), reinterpret_tensor(primals_659, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1090)
    del primals_660
    buf1091 = empty_strided((8, 16, 1, 48), (768, 1, 768, 16), device='cpu', dtype=torch.float32)
    cpp_fused_permute_290(c_void_p(buf1090.data_ptr()), c_void_p(buf1091.data_ptr()))
    buf1092 = empty((4616, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_0_attn_k], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_662, reinterpret_tensor(buf1089, (4616, 768), (768, 1), 0), reinterpret_tensor(primals_661, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1092)
    del primals_662
    buf1093 = empty_strided((8, 16, 577, 48), (443136, 1, 768, 16), device='cpu', dtype=torch.float32)
    cpp_fused_permute_291(c_void_p(buf1092.data_ptr()), c_void_p(buf1093.data_ptr()))
    buf1094 = buf1092; del buf1092  # reuse
    # Source Nodes: [l__mod___blocks_token_only_0_attn_v], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_664, reinterpret_tensor(buf1089, (4616, 768), (768, 1), 0), reinterpret_tensor(primals_663, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1094)
    del primals_664
    buf1095 = empty_strided((8, 16, 577, 48), (443136, 1, 768, 16), device='cpu', dtype=torch.float32)
    cpp_fused_permute_292(c_void_p(buf1094.data_ptr()), c_void_p(buf1095.data_ptr()))
    # Source Nodes: [x_cls], Original ATen: [aten._scaled_dot_product_flash_attention]
    buf1096 = aten._scaled_dot_product_flash_attention(buf1091, buf1093, buf1095)
    buf1097 = buf1096[0]
    buf1098 = buf1096[1]
    buf1099 = buf1096[2]
    buf1100 = buf1096[3]
    buf1101 = buf1096[6]
    buf1102 = buf1096[7]
    del buf1096
    buf1104 = buf1090; del buf1090  # reuse
    # Source Nodes: [x_cls_2], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_666, reinterpret_tensor(buf1097, (8, 768), (768, 1), 0), reinterpret_tensor(primals_665, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1104)
    del primals_666
    buf1105 = empty_strided((8, 1, 1), (1, 8, 8), device='cpu', dtype=torch.float32)
    buf1106 = empty_strided((8, 1, 1), (1, 8, 8), device='cpu', dtype=torch.float32)
    buf1108 = empty((8, 1, 768), device='cpu', dtype=torch.float32)
    buf1109 = empty((8, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_293(c_void_p(primals_74.data_ptr()), c_void_p(primals_75.data_ptr()), c_void_p(buf1104.data_ptr()), c_void_p(primals_667.data_ptr()), c_void_p(primals_668.data_ptr()), c_void_p(buf1105.data_ptr()), c_void_p(buf1106.data_ptr()), c_void_p(buf1108.data_ptr()), c_void_p(buf1109.data_ptr()))
    del primals_668
    buf1110 = empty((8, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_403], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_670, buf1109, reinterpret_tensor(primals_669, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1110)
    del primals_670
    buf1111 = empty((8, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_294(c_void_p(buf1110.data_ptr()), c_void_p(buf1111.data_ptr()))
    buf1112 = empty((8, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_407], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_672, buf1111, reinterpret_tensor(primals_671, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1112)
    del primals_672
    buf1115 = reinterpret_tensor(buf1094, (8, 577, 768), (443136, 768, 1), 0); del buf1094  # reuse
    buf1113 = reinterpret_tensor(buf1115, (8, 1, 768), (443136, 768, 1), 0)  # alias
    buf1114 = reinterpret_tensor(buf1115, (8, 576, 768), (443136, 768, 1), 768)  # alias
    buf1116 = empty((8, 577, 1), device='cpu', dtype=torch.float32)
    buf1117 = empty_strided((8, 577, 1), (577, 1, 4616), device='cpu', dtype=torch.float32)
    buf1119 = reinterpret_tensor(buf1117, (8, 577, 1), (577, 1, 1), 0); del buf1117  # reuse
    buf1120 = empty((8, 577, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_cat_mul_native_layer_norm_295(c_void_p(buf1119.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(primals_75.data_ptr()), c_void_p(buf1104.data_ptr()), c_void_p(primals_76.data_ptr()), c_void_p(buf1112.data_ptr()), c_void_p(buf1082.data_ptr()), c_void_p(buf1115.data_ptr()), c_void_p(primals_673.data_ptr()), c_void_p(primals_674.data_ptr()), c_void_p(buf1113.data_ptr()), c_void_p(buf1114.data_ptr()), c_void_p(buf1116.data_ptr()), c_void_p(buf1120.data_ptr()))
    del primals_674
    del primals_74
    buf1121 = empty((8, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_1_attn_q], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_676, reinterpret_tensor(buf1120, (8, 768), (443136, 1), 0), reinterpret_tensor(primals_675, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1121)
    del primals_676
    buf1122 = empty_strided((8, 16, 1, 48), (768, 1, 768, 16), device='cpu', dtype=torch.float32)
    cpp_fused_permute_296(c_void_p(buf1121.data_ptr()), c_void_p(buf1122.data_ptr()))
    buf1123 = empty((4616, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [l__mod___blocks_token_only_1_attn_k], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_678, reinterpret_tensor(buf1120, (4616, 768), (768, 1), 0), reinterpret_tensor(primals_677, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1123)
    del primals_678
    buf1124 = empty_strided((8, 16, 577, 48), (443136, 1, 768, 16), device='cpu', dtype=torch.float32)
    cpp_fused_permute_297(c_void_p(buf1123.data_ptr()), c_void_p(buf1124.data_ptr()))
    buf1125 = buf1123; del buf1123  # reuse
    # Source Nodes: [l__mod___blocks_token_only_1_attn_v], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_680, reinterpret_tensor(buf1120, (4616, 768), (768, 1), 0), reinterpret_tensor(primals_679, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1125)
    del primals_680
    buf1126 = empty_strided((8, 16, 577, 48), (443136, 1, 768, 16), device='cpu', dtype=torch.float32)
    cpp_fused_permute_298(c_void_p(buf1125.data_ptr()), c_void_p(buf1126.data_ptr()))
    # Source Nodes: [x_cls_6], Original ATen: [aten._scaled_dot_product_flash_attention]
    buf1127 = aten._scaled_dot_product_flash_attention(buf1122, buf1124, buf1126)
    buf1128 = buf1127[0]
    buf1129 = buf1127[1]
    buf1130 = buf1127[2]
    buf1131 = buf1127[3]
    buf1132 = buf1127[6]
    buf1133 = buf1127[7]
    del buf1127
    buf1135 = buf1121; del buf1121  # reuse
    # Source Nodes: [x_cls_8], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_682, reinterpret_tensor(buf1128, (8, 768), (768, 1), 0), reinterpret_tensor(primals_681, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf1135)
    del primals_682
    buf1136 = buf1105; del buf1105  # reuse
    buf1137 = empty_strided((8, 1, 1), (1, 8, 8), device='cpu', dtype=torch.float32)
    buf1139 = empty((8, 1, 768), device='cpu', dtype=torch.float32)
    buf1140 = empty((8, 768), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_native_layer_norm_view_299(c_void_p(buf1113.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(buf1135.data_ptr()), c_void_p(primals_683.data_ptr()), c_void_p(primals_684.data_ptr()), c_void_p(buf1136.data_ptr()), c_void_p(buf1137.data_ptr()), c_void_p(buf1139.data_ptr()), c_void_p(buf1140.data_ptr()))
    del buf1136
    del primals_684
    buf1141 = empty((8, 3072), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_409], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_686, buf1140, reinterpret_tensor(primals_685, (768, 3072), (1, 768), 0), alpha=1, beta=1, out=buf1141)
    del primals_686
    buf1142 = empty((8, 3072), device='cpu', dtype=torch.float32)
    cpp_fused_gelu_view_300(c_void_p(buf1141.data_ptr()), c_void_p(buf1142.data_ptr()))
    buf1143 = empty((8, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_413], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_688, buf1142, reinterpret_tensor(primals_687, (3072, 768), (1, 3072), 0), alpha=1, beta=1, out=buf1143)
    del primals_688
    buf1144 = reinterpret_tensor(buf1125, (8, 577, 768), (443136, 768, 1), 0); del buf1125  # reuse
    buf1145 = empty((8, 577, 1), device='cpu', dtype=torch.float32)
    buf1146 = empty_strided((8, 577, 1), (577, 1, 4616), device='cpu', dtype=torch.float32)
    buf1148 = reinterpret_tensor(buf1146, (8, 577, 1), (577, 1, 1), 0); del buf1146  # reuse
    buf1149 = empty((8, 768), device='cpu', dtype=torch.float32)
    cpp_fused_cat_clone_native_layer_norm_301(c_void_p(buf1148.data_ptr()), c_void_p(buf1113.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(buf1135.data_ptr()), c_void_p(primals_78.data_ptr()), c_void_p(buf1143.data_ptr()), c_void_p(buf1082.data_ptr()), c_void_p(primals_689.data_ptr()), c_void_p(primals_690.data_ptr()), c_void_p(buf1144.data_ptr()), c_void_p(buf1145.data_ptr()), c_void_p(buf1149.data_ptr()))
    del primals_690
    buf1150 = empty((8, 1000), device='cpu', dtype=torch.float32)
    # Source Nodes: [pred], Original ATen: [aten.addmm]
    extern_kernels.addmm(primals_692, buf1149, reinterpret_tensor(primals_691, (768, 1000), (1, 768), 0), alpha=1, beta=1, out=buf1150)
    del primals_692
    buf1151 = reinterpret_tensor(buf1137, (8, 1, 1), (1, 1, 1), 0); del buf1137  # reuse
    buf1152 = empty_strided((8, 16, 1, 48), (768, 1, 768, 16), device='cpu', dtype=torch.float32)
    buf1153 = reinterpret_tensor(buf1106, (8, 1, 1), (1, 1, 1), 0); del buf1106  # reuse
    buf1154 = empty_strided((8, 16, 1, 48), (768, 1, 768, 16), device='cpu', dtype=torch.float32)
    buf1155 = reinterpret_tensor(buf1075, (8, 576, 1), (576, 1, 1), 0); del buf1075  # reuse
    buf1156 = buf1065; del buf1065  # reuse
    buf1157 = reinterpret_tensor(buf1054, (8, 576, 1), (576, 1, 1), 0); del buf1054  # reuse
    buf1158 = reinterpret_tensor(buf1045, (8, 576, 1), (576, 1, 1), 0); del buf1045  # reuse
    buf1159 = buf1035; del buf1035  # reuse
    buf1160 = reinterpret_tensor(buf1024, (8, 576, 1), (576, 1, 1), 0); del buf1024  # reuse
    buf1161 = reinterpret_tensor(buf1015, (8, 576, 1), (576, 1, 1), 0); del buf1015  # reuse
    buf1162 = buf1005; del buf1005  # reuse
    buf1163 = reinterpret_tensor(buf994, (8, 576, 1), (576, 1, 1), 0); del buf994  # reuse
    buf1164 = reinterpret_tensor(buf985, (8, 576, 1), (576, 1, 1), 0); del buf985  # reuse
    buf1165 = buf975; del buf975  # reuse
    buf1166 = reinterpret_tensor(buf964, (8, 576, 1), (576, 1, 1), 0); del buf964  # reuse
    buf1167 = reinterpret_tensor(buf955, (8, 576, 1), (576, 1, 1), 0); del buf955  # reuse
    buf1168 = buf945; del buf945  # reuse
    buf1169 = reinterpret_tensor(buf934, (8, 576, 1), (576, 1, 1), 0); del buf934  # reuse
    buf1170 = reinterpret_tensor(buf925, (8, 576, 1), (576, 1, 1), 0); del buf925  # reuse
    buf1171 = buf915; del buf915  # reuse
    buf1172 = reinterpret_tensor(buf904, (8, 576, 1), (576, 1, 1), 0); del buf904  # reuse
    buf1173 = reinterpret_tensor(buf895, (8, 576, 1), (576, 1, 1), 0); del buf895  # reuse
    buf1174 = buf885; del buf885  # reuse
    buf1175 = reinterpret_tensor(buf874, (8, 576, 1), (576, 1, 1), 0); del buf874  # reuse
    buf1176 = reinterpret_tensor(buf865, (8, 576, 1), (576, 1, 1), 0); del buf865  # reuse
    buf1177 = buf855; del buf855  # reuse
    buf1178 = reinterpret_tensor(buf844, (8, 576, 1), (576, 1, 1), 0); del buf844  # reuse
    buf1179 = reinterpret_tensor(buf835, (8, 576, 1), (576, 1, 1), 0); del buf835  # reuse
    buf1180 = buf825; del buf825  # reuse
    buf1181 = reinterpret_tensor(buf814, (8, 576, 1), (576, 1, 1), 0); del buf814  # reuse
    buf1182 = reinterpret_tensor(buf805, (8, 576, 1), (576, 1, 1), 0); del buf805  # reuse
    buf1183 = buf795; del buf795  # reuse
    buf1184 = reinterpret_tensor(buf784, (8, 576, 1), (576, 1, 1), 0); del buf784  # reuse
    buf1185 = reinterpret_tensor(buf775, (8, 576, 1), (576, 1, 1), 0); del buf775  # reuse
    buf1186 = buf765; del buf765  # reuse
    buf1187 = reinterpret_tensor(buf754, (8, 576, 1), (576, 1, 1), 0); del buf754  # reuse
    buf1188 = reinterpret_tensor(buf745, (8, 576, 1), (576, 1, 1), 0); del buf745  # reuse
    buf1189 = buf735; del buf735  # reuse
    buf1190 = reinterpret_tensor(buf724, (8, 576, 1), (576, 1, 1), 0); del buf724  # reuse
    buf1191 = reinterpret_tensor(buf715, (8, 576, 1), (576, 1, 1), 0); del buf715  # reuse
    buf1192 = buf705; del buf705  # reuse
    buf1193 = reinterpret_tensor(buf694, (8, 576, 1), (576, 1, 1), 0); del buf694  # reuse
    buf1194 = reinterpret_tensor(buf685, (8, 576, 1), (576, 1, 1), 0); del buf685  # reuse
    buf1195 = buf675; del buf675  # reuse
    buf1196 = reinterpret_tensor(buf664, (8, 576, 1), (576, 1, 1), 0); del buf664  # reuse
    buf1197 = reinterpret_tensor(buf655, (8, 576, 1), (576, 1, 1), 0); del buf655  # reuse
    buf1198 = buf645; del buf645  # reuse
    buf1199 = reinterpret_tensor(buf634, (8, 576, 1), (576, 1, 1), 0); del buf634  # reuse
    buf1200 = reinterpret_tensor(buf625, (8, 576, 1), (576, 1, 1), 0); del buf625  # reuse
    buf1201 = buf615; del buf615  # reuse
    buf1202 = reinterpret_tensor(buf604, (8, 576, 1), (576, 1, 1), 0); del buf604  # reuse
    buf1203 = reinterpret_tensor(buf595, (8, 576, 1), (576, 1, 1), 0); del buf595  # reuse
    buf1204 = buf585; del buf585  # reuse
    buf1205 = reinterpret_tensor(buf574, (8, 576, 1), (576, 1, 1), 0); del buf574  # reuse
    buf1206 = reinterpret_tensor(buf565, (8, 576, 1), (576, 1, 1), 0); del buf565  # reuse
    buf1207 = buf555; del buf555  # reuse
    buf1208 = reinterpret_tensor(buf544, (8, 576, 1), (576, 1, 1), 0); del buf544  # reuse
    buf1209 = reinterpret_tensor(buf535, (8, 576, 1), (576, 1, 1), 0); del buf535  # reuse
    buf1210 = buf525; del buf525  # reuse
    buf1211 = reinterpret_tensor(buf514, (8, 576, 1), (576, 1, 1), 0); del buf514  # reuse
    buf1212 = reinterpret_tensor(buf505, (8, 576, 1), (576, 1, 1), 0); del buf505  # reuse
    buf1213 = buf495; del buf495  # reuse
    buf1214 = reinterpret_tensor(buf484, (8, 576, 1), (576, 1, 1), 0); del buf484  # reuse
    buf1215 = reinterpret_tensor(buf475, (8, 576, 1), (576, 1, 1), 0); del buf475  # reuse
    buf1216 = buf465; del buf465  # reuse
    buf1217 = reinterpret_tensor(buf454, (8, 576, 1), (576, 1, 1), 0); del buf454  # reuse
    buf1218 = reinterpret_tensor(buf445, (8, 576, 1), (576, 1, 1), 0); del buf445  # reuse
    buf1219 = buf435; del buf435  # reuse
    buf1220 = reinterpret_tensor(buf424, (8, 576, 1), (576, 1, 1), 0); del buf424  # reuse
    buf1221 = reinterpret_tensor(buf415, (8, 576, 1), (576, 1, 1), 0); del buf415  # reuse
    buf1222 = buf405; del buf405  # reuse
    buf1223 = reinterpret_tensor(buf394, (8, 576, 1), (576, 1, 1), 0); del buf394  # reuse
    buf1224 = reinterpret_tensor(buf385, (8, 576, 1), (576, 1, 1), 0); del buf385  # reuse
    buf1225 = buf375; del buf375  # reuse
    buf1226 = reinterpret_tensor(buf364, (8, 576, 1), (576, 1, 1), 0); del buf364  # reuse
    buf1227 = reinterpret_tensor(buf355, (8, 576, 1), (576, 1, 1), 0); del buf355  # reuse
    buf1228 = buf345; del buf345  # reuse
    buf1229 = reinterpret_tensor(buf334, (8, 576, 1), (576, 1, 1), 0); del buf334  # reuse
    buf1230 = reinterpret_tensor(buf325, (8, 576, 1), (576, 1, 1), 0); del buf325  # reuse
    buf1231 = buf315; del buf315  # reuse
    buf1232 = reinterpret_tensor(buf304, (8, 576, 1), (576, 1, 1), 0); del buf304  # reuse
    buf1233 = reinterpret_tensor(buf295, (8, 576, 1), (576, 1, 1), 0); del buf295  # reuse
    buf1234 = buf285; del buf285  # reuse
    buf1235 = reinterpret_tensor(buf274, (8, 576, 1), (576, 1, 1), 0); del buf274  # reuse
    buf1236 = reinterpret_tensor(buf265, (8, 576, 1), (576, 1, 1), 0); del buf265  # reuse
    buf1237 = buf255; del buf255  # reuse
    buf1238 = reinterpret_tensor(buf244, (8, 576, 1), (576, 1, 1), 0); del buf244  # reuse
    buf1239 = reinterpret_tensor(buf235, (8, 576, 1), (576, 1, 1), 0); del buf235  # reuse
    buf1240 = buf225; del buf225  # reuse
    buf1241 = reinterpret_tensor(buf214, (8, 576, 1), (576, 1, 1), 0); del buf214  # reuse
    buf1242 = reinterpret_tensor(buf205, (8, 576, 1), (576, 1, 1), 0); del buf205  # reuse
    buf1243 = buf195; del buf195  # reuse
    buf1244 = reinterpret_tensor(buf184, (8, 576, 1), (576, 1, 1), 0); del buf184  # reuse
    buf1245 = reinterpret_tensor(buf175, (8, 576, 1), (576, 1, 1), 0); del buf175  # reuse
    buf1246 = buf165; del buf165  # reuse
    buf1247 = reinterpret_tensor(buf154, (8, 576, 1), (576, 1, 1), 0); del buf154  # reuse
    buf1248 = reinterpret_tensor(buf145, (8, 576, 1), (576, 1, 1), 0); del buf145  # reuse
    buf1249 = buf135; del buf135  # reuse
    buf1250 = reinterpret_tensor(buf124, (8, 576, 1), (576, 1, 1), 0); del buf124  # reuse
    buf1251 = reinterpret_tensor(buf115, (8, 576, 1), (576, 1, 1), 0); del buf115  # reuse
    buf1252 = buf105; del buf105  # reuse
    buf1253 = reinterpret_tensor(buf94, (8, 576, 1), (576, 1, 1), 0); del buf94  # reuse
    buf1254 = reinterpret_tensor(buf85, (8, 576, 1), (576, 1, 1), 0); del buf85  # reuse
    buf1255 = buf75; del buf75  # reuse
    buf1256 = reinterpret_tensor(buf64, (8, 576, 1), (576, 1, 1), 0); del buf64  # reuse
    buf1257 = reinterpret_tensor(buf55, (8, 576, 1), (576, 1, 1), 0); del buf55  # reuse
    buf1258 = buf45; del buf45  # reuse
    buf1259 = reinterpret_tensor(buf34, (8, 576, 1), (576, 1, 1), 0); del buf34  # reuse
    buf1260 = reinterpret_tensor(buf25, (8, 576, 1), (576, 1, 1), 0); del buf25  # reuse
    buf1261 = buf15; del buf15  # reuse
    buf1262 = reinterpret_tensor(buf4, (8, 576, 1), (576, 1, 1), 0); del buf4  # reuse
    cpp_fused__softmax_add_detach_mul_native_layer_norm_native_layer_norm_backward_302(c_void_p(buf1151.data_ptr()), c_void_p(buf1153.data_ptr()), c_void_p(buf1155.data_ptr()), c_void_p(buf1156.data_ptr()), c_void_p(buf1157.data_ptr()), c_void_p(buf1158.data_ptr()), c_void_p(buf1159.data_ptr()), c_void_p(buf1160.data_ptr()), c_void_p(buf1161.data_ptr()), c_void_p(buf1162.data_ptr()), c_void_p(buf1163.data_ptr()), c_void_p(buf1164.data_ptr()), c_void_p(buf1165.data_ptr()), c_void_p(buf1166.data_ptr()), c_void_p(buf1167.data_ptr()), c_void_p(buf1168.data_ptr()), c_void_p(buf1169.data_ptr()), c_void_p(buf1170.data_ptr()), c_void_p(buf1171.data_ptr()), c_void_p(buf1172.data_ptr()), c_void_p(buf1173.data_ptr()), c_void_p(buf1174.data_ptr()), c_void_p(buf1175.data_ptr()), c_void_p(buf1176.data_ptr()), c_void_p(buf1177.data_ptr()), c_void_p(buf1178.data_ptr()), c_void_p(buf1179.data_ptr()), c_void_p(buf1180.data_ptr()), c_void_p(buf1181.data_ptr()), c_void_p(buf1182.data_ptr()), c_void_p(buf1183.data_ptr()), c_void_p(buf1184.data_ptr()), c_void_p(buf1185.data_ptr()), c_void_p(buf1186.data_ptr()), c_void_p(buf1187.data_ptr()), c_void_p(buf1188.data_ptr()), c_void_p(buf1189.data_ptr()), c_void_p(buf1190.data_ptr()), c_void_p(buf1191.data_ptr()), c_void_p(buf1192.data_ptr()), c_void_p(buf1193.data_ptr()), c_void_p(buf1194.data_ptr()), c_void_p(buf1195.data_ptr()), c_void_p(buf1196.data_ptr()), c_void_p(buf1197.data_ptr()), c_void_p(buf1198.data_ptr()), c_void_p(buf1199.data_ptr()), c_void_p(buf1200.data_ptr()), c_void_p(buf1201.data_ptr()), c_void_p(buf1202.data_ptr()), c_void_p(buf1203.data_ptr()), c_void_p(buf1204.data_ptr()), c_void_p(buf1205.data_ptr()), c_void_p(buf1206.data_ptr()), c_void_p(buf1207.data_ptr()), c_void_p(buf1208.data_ptr()), c_void_p(buf1209.data_ptr()), c_void_p(buf1210.data_ptr()), c_void_p(buf1211.data_ptr()), c_void_p(buf1212.data_ptr()), c_void_p(buf1213.data_ptr()), c_void_p(buf1214.data_ptr()), c_void_p(buf1215.data_ptr()), c_void_p(buf1216.data_ptr()), c_void_p(buf1217.data_ptr()), c_void_p(buf1218.data_ptr()), c_void_p(buf1219.data_ptr()), c_void_p(buf1220.data_ptr()), c_void_p(buf1221.data_ptr()), c_void_p(buf1222.data_ptr()), c_void_p(buf1223.data_ptr()), c_void_p(buf1224.data_ptr()), c_void_p(buf1225.data_ptr()), c_void_p(buf1226.data_ptr()), c_void_p(buf1227.data_ptr()), c_void_p(buf1228.data_ptr()), c_void_p(buf1229.data_ptr()), c_void_p(buf1230.data_ptr()), c_void_p(buf1231.data_ptr()), c_void_p(buf1232.data_ptr()), c_void_p(buf1233.data_ptr()), c_void_p(buf1234.data_ptr()), c_void_p(buf1235.data_ptr()), c_void_p(buf1236.data_ptr()), c_void_p(buf1237.data_ptr()), c_void_p(buf1238.data_ptr()), c_void_p(buf1239.data_ptr()), c_void_p(buf1240.data_ptr()), c_void_p(buf1241.data_ptr()), c_void_p(buf1242.data_ptr()), c_void_p(buf1243.data_ptr()), c_void_p(buf1244.data_ptr()), c_void_p(buf1245.data_ptr()), c_void_p(buf1246.data_ptr()), c_void_p(buf1247.data_ptr()), c_void_p(buf1248.data_ptr()), c_void_p(buf1249.data_ptr()), c_void_p(buf1250.data_ptr()), c_void_p(buf1251.data_ptr()), c_void_p(buf1252.data_ptr()), c_void_p(buf1253.data_ptr()), c_void_p(buf1254.data_ptr()), c_void_p(buf1255.data_ptr()), c_void_p(buf1256.data_ptr()), c_void_p(buf1257.data_ptr()), c_void_p(buf1258.data_ptr()), c_void_p(buf1259.data_ptr()), c_void_p(buf1260.data_ptr()), c_void_p(buf1261.data_ptr()), c_void_p(buf1262.data_ptr()), c_void_p(buf1128.data_ptr()), c_void_p(buf1097.data_ptr()), c_void_p(buf1066.data_ptr()), c_void_p(buf1036.data_ptr()), c_void_p(buf1006.data_ptr()), c_void_p(buf976.data_ptr()), c_void_p(buf946.data_ptr()), c_void_p(buf916.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf856.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(buf706.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf556.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(buf376.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(buf226.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf166.data_ptr()), c_void_p(buf136.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(buf76.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(buf1152.data_ptr()), c_void_p(buf1154.data_ptr()))
    return (buf1150, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_75, primals_76, primals_77, primals_78, buf0, primals_81, primals_91, primals_97, primals_107, primals_113, primals_123, primals_129, primals_139, primals_145, primals_155, primals_161, primals_171, primals_177, primals_187, primals_193, primals_203, primals_209, primals_219, primals_225, primals_235, primals_241, primals_251, primals_257, primals_267, primals_273, primals_283, primals_289, primals_299, primals_305, primals_315, primals_321, primals_331, primals_337, primals_347, primals_353, primals_363, primals_369, primals_379, primals_385, primals_395, primals_401, primals_411, primals_417, primals_427, primals_433, primals_443, primals_449, primals_459, primals_465, primals_475, primals_481, primals_491, primals_497, primals_507, primals_513, primals_523, primals_529, primals_539, primals_545, primals_555, primals_561, primals_571, primals_577, primals_587, primals_593, primals_603, primals_609, primals_619, primals_625, primals_635, primals_641, primals_651, primals_657, primals_667, primals_673, primals_683, primals_689, buf1, buf6, buf7, buf12, buf17, buf22, buf23, buf27, buf28, buf29, buf30, buf31, buf36, buf37, buf42, buf47, buf52, buf53, buf57, buf58, buf59, buf60, buf61, buf66, buf67, buf72, buf77, buf82, buf83, buf87, buf88, buf89, buf90, buf91, buf96, buf97, buf102, buf107, buf112, buf113, buf117, buf118, buf119, buf120, buf121, buf126, buf127, buf132, buf137, buf142, buf143, buf147, buf148, buf149, buf150, buf151, buf156, buf157, buf162, buf167, buf172, buf173, buf177, buf178, buf179, buf180, buf181, buf186, buf187, buf192, buf197, buf202, buf203, buf207, buf208, buf209, buf210, buf211, buf216, buf217, buf222, buf227, buf232, buf233, buf237, buf238, buf239, buf240, buf241, buf246, buf247, buf252, buf257, buf262, buf263, buf267, buf268, buf269, buf270, buf271, buf276, buf277, buf282, buf287, buf292, buf293, buf297, buf298, buf299, buf300, buf301, buf306, buf307, buf312, buf317, buf322, buf323, buf327, buf328, buf329, buf330, buf331, buf336, buf337, buf342, buf347, buf352, buf353, buf357, buf358, buf359, buf360, buf361, buf366, buf367, buf372, buf377, buf382, buf383, buf387, buf388, buf389, buf390, buf391, buf396, buf397, buf402, buf407, buf412, buf413, buf417, buf418, buf419, buf420, buf421, buf426, buf427, buf432, buf437, buf442, buf443, buf447, buf448, buf449, buf450, buf451, buf456, buf457, buf462, buf467, buf472, buf473, buf477, buf478, buf479, buf480, buf481, buf486, buf487, buf492, buf497, buf502, buf503, buf507, buf508, buf509, buf510, buf511, buf516, buf517, buf522, buf527, buf532, buf533, buf537, buf538, buf539, buf540, buf541, buf546, buf547, buf552, buf557, buf562, buf563, buf567, buf568, buf569, buf570, buf571, buf576, buf577, buf582, buf587, buf592, buf593, buf597, buf598, buf599, buf600, buf601, buf606, buf607, buf612, buf617, buf622, buf623, buf627, buf628, buf629, buf630, buf631, buf636, buf637, buf642, buf647, buf652, buf653, buf657, buf658, buf659, buf660, buf661, buf666, buf667, buf672, buf677, buf682, buf683, buf687, buf688, buf689, buf690, buf691, buf696, buf697, buf702, buf707, buf712, buf713, buf717, buf718, buf719, buf720, buf721, buf726, buf727, buf732, buf737, buf742, buf743, buf747, buf748, buf749, buf750, buf751, buf756, buf757, buf762, buf767, buf772, buf773, buf777, buf778, buf779, buf780, buf781, buf786, buf787, buf792, buf797, buf802, buf803, buf807, buf808, buf809, buf810, buf811, buf816, buf817, buf822, buf827, buf832, buf833, buf837, buf838, buf839, buf840, buf841, buf846, buf847, buf852, buf857, buf862, buf863, buf867, buf868, buf869, buf870, buf871, buf876, buf877, buf882, buf887, buf892, buf893, buf897, buf898, buf899, buf900, buf901, buf906, buf907, buf912, buf917, buf922, buf923, buf927, buf928, buf929, buf930, buf931, buf936, buf937, buf942, buf947, buf952, buf953, buf957, buf958, buf959, buf960, buf961, buf966, buf967, buf972, buf977, buf982, buf983, buf987, buf988, buf989, buf990, buf991, buf996, buf997, buf1002, buf1007, buf1012, buf1013, buf1017, buf1018, buf1019, buf1020, buf1021, buf1026, buf1027, buf1032, buf1037, buf1042, buf1043, buf1047, buf1048, buf1049, buf1050, buf1051, buf1056, buf1057, buf1062, buf1067, buf1072, buf1073, buf1077, buf1078, buf1079, buf1080, buf1081, buf1084, buf1085, buf1088, reinterpret_tensor(buf1089, (8, 768), (443136, 1), 0), buf1091, reinterpret_tensor(buf1089, (4616, 768), (768, 1), 0), buf1093, buf1095, buf1098, buf1099, buf1100, buf1101, buf1102, reinterpret_tensor(buf1097, (8, 768), (768, 1), 0), buf1104, buf1108, buf1109, buf1110, buf1111, buf1112, buf1115, buf1116, buf1119, reinterpret_tensor(buf1120, (8, 768), (443136, 1), 0), buf1122, reinterpret_tensor(buf1120, (4616, 768), (768, 1), 0), buf1124, buf1126, buf1129, buf1130, buf1131, buf1132, buf1133, reinterpret_tensor(buf1128, (8, 768), (768, 1), 0), buf1135, buf1139, buf1140, buf1141, buf1142, buf1143, buf1144, buf1145, buf1148, buf1149, reinterpret_tensor(primals_691, (1000, 768), (768, 1), 0), reinterpret_tensor(primals_687, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_685, (3072, 768), (768, 1), 0), buf1151, reinterpret_tensor(primals_681, (768, 768), (768, 1), 0), buf1152, reinterpret_tensor(primals_679, (768, 768), (768, 1), 0), reinterpret_tensor(primals_677, (768, 768), (768, 1), 0), reinterpret_tensor(primals_675, (768, 768), (768, 1), 0), reinterpret_tensor(primals_671, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_669, (3072, 768), (768, 1), 0), buf1153, reinterpret_tensor(primals_665, (768, 768), (768, 1), 0), buf1154, reinterpret_tensor(primals_663, (768, 768), (768, 1), 0), reinterpret_tensor(primals_661, (768, 768), (768, 1), 0), reinterpret_tensor(primals_659, (768, 768), (768, 1), 0), reinterpret_tensor(primals_655, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_653, (3072, 768), (768, 1), 0), buf1155, reinterpret_tensor(primals_649, (768, 768), (768, 1), 0), reinterpret_tensor(buf1069, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf1070, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_647, (16, 16), (16, 1), 0), buf1156, reinterpret_tensor(primals_645, (16, 16), (16, 1), 0), reinterpret_tensor(buf1059, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf1060, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_643, (2304, 768), (768, 1), 0), buf1157, reinterpret_tensor(primals_639, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_637, (3072, 768), (768, 1), 0), buf1158, reinterpret_tensor(primals_633, (768, 768), (768, 1), 0), reinterpret_tensor(buf1039, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf1040, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_631, (16, 16), (16, 1), 0), buf1159, reinterpret_tensor(primals_629, (16, 16), (16, 1), 0), reinterpret_tensor(buf1029, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf1030, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_627, (2304, 768), (768, 1), 0), buf1160, reinterpret_tensor(primals_623, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_621, (3072, 768), (768, 1), 0), buf1161, reinterpret_tensor(primals_617, (768, 768), (768, 1), 0), reinterpret_tensor(buf1009, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf1010, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_615, (16, 16), (16, 1), 0), buf1162, reinterpret_tensor(primals_613, (16, 16), (16, 1), 0), reinterpret_tensor(buf999, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf1000, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_611, (2304, 768), (768, 1), 0), buf1163, reinterpret_tensor(primals_607, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_605, (3072, 768), (768, 1), 0), buf1164, reinterpret_tensor(primals_601, (768, 768), (768, 1), 0), reinterpret_tensor(buf979, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf980, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_599, (16, 16), (16, 1), 0), buf1165, reinterpret_tensor(primals_597, (16, 16), (16, 1), 0), reinterpret_tensor(buf969, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf970, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_595, (2304, 768), (768, 1), 0), buf1166, reinterpret_tensor(primals_591, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_589, (3072, 768), (768, 1), 0), buf1167, reinterpret_tensor(primals_585, (768, 768), (768, 1), 0), reinterpret_tensor(buf949, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf950, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_583, (16, 16), (16, 1), 0), buf1168, reinterpret_tensor(primals_581, (16, 16), (16, 1), 0), reinterpret_tensor(buf939, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf940, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_579, (2304, 768), (768, 1), 0), buf1169, reinterpret_tensor(primals_575, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_573, (3072, 768), (768, 1), 0), buf1170, reinterpret_tensor(primals_569, (768, 768), (768, 1), 0), reinterpret_tensor(buf919, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf920, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_567, (16, 16), (16, 1), 0), buf1171, reinterpret_tensor(primals_565, (16, 16), (16, 1), 0), reinterpret_tensor(buf909, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf910, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_563, (2304, 768), (768, 1), 0), buf1172, reinterpret_tensor(primals_559, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_557, (3072, 768), (768, 1), 0), buf1173, reinterpret_tensor(primals_553, (768, 768), (768, 1), 0), reinterpret_tensor(buf889, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf890, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_551, (16, 16), (16, 1), 0), buf1174, reinterpret_tensor(primals_549, (16, 16), (16, 1), 0), reinterpret_tensor(buf879, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf880, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_547, (2304, 768), (768, 1), 0), buf1175, reinterpret_tensor(primals_543, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_541, (3072, 768), (768, 1), 0), buf1176, reinterpret_tensor(primals_537, (768, 768), (768, 1), 0), reinterpret_tensor(buf859, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf860, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_535, (16, 16), (16, 1), 0), buf1177, reinterpret_tensor(primals_533, (16, 16), (16, 1), 0), reinterpret_tensor(buf849, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf850, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_531, (2304, 768), (768, 1), 0), buf1178, reinterpret_tensor(primals_527, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_525, (3072, 768), (768, 1), 0), buf1179, reinterpret_tensor(primals_521, (768, 768), (768, 1), 0), reinterpret_tensor(buf829, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf830, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_519, (16, 16), (16, 1), 0), buf1180, reinterpret_tensor(primals_517, (16, 16), (16, 1), 0), reinterpret_tensor(buf819, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf820, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_515, (2304, 768), (768, 1), 0), buf1181, reinterpret_tensor(primals_511, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_509, (3072, 768), (768, 1), 0), buf1182, reinterpret_tensor(primals_505, (768, 768), (768, 1), 0), reinterpret_tensor(buf799, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf800, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_503, (16, 16), (16, 1), 0), buf1183, reinterpret_tensor(primals_501, (16, 16), (16, 1), 0), reinterpret_tensor(buf789, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf790, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_499, (2304, 768), (768, 1), 0), buf1184, reinterpret_tensor(primals_495, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_493, (3072, 768), (768, 1), 0), buf1185, reinterpret_tensor(primals_489, (768, 768), (768, 1), 0), reinterpret_tensor(buf769, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf770, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_487, (16, 16), (16, 1), 0), buf1186, reinterpret_tensor(primals_485, (16, 16), (16, 1), 0), reinterpret_tensor(buf759, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf760, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_483, (2304, 768), (768, 1), 0), buf1187, reinterpret_tensor(primals_479, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_477, (3072, 768), (768, 1), 0), buf1188, reinterpret_tensor(primals_473, (768, 768), (768, 1), 0), reinterpret_tensor(buf739, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf740, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_471, (16, 16), (16, 1), 0), buf1189, reinterpret_tensor(primals_469, (16, 16), (16, 1), 0), reinterpret_tensor(buf729, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf730, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_467, (2304, 768), (768, 1), 0), buf1190, reinterpret_tensor(primals_463, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_461, (3072, 768), (768, 1), 0), buf1191, reinterpret_tensor(primals_457, (768, 768), (768, 1), 0), reinterpret_tensor(buf709, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf710, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_455, (16, 16), (16, 1), 0), buf1192, reinterpret_tensor(primals_453, (16, 16), (16, 1), 0), reinterpret_tensor(buf699, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf700, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_451, (2304, 768), (768, 1), 0), buf1193, reinterpret_tensor(primals_447, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_445, (3072, 768), (768, 1), 0), buf1194, reinterpret_tensor(primals_441, (768, 768), (768, 1), 0), reinterpret_tensor(buf679, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf680, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_439, (16, 16), (16, 1), 0), buf1195, reinterpret_tensor(primals_437, (16, 16), (16, 1), 0), reinterpret_tensor(buf669, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf670, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_435, (2304, 768), (768, 1), 0), buf1196, reinterpret_tensor(primals_431, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_429, (3072, 768), (768, 1), 0), buf1197, reinterpret_tensor(primals_425, (768, 768), (768, 1), 0), reinterpret_tensor(buf649, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf650, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_423, (16, 16), (16, 1), 0), buf1198, reinterpret_tensor(primals_421, (16, 16), (16, 1), 0), reinterpret_tensor(buf639, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf640, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_419, (2304, 768), (768, 1), 0), buf1199, reinterpret_tensor(primals_415, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_413, (3072, 768), (768, 1), 0), buf1200, reinterpret_tensor(primals_409, (768, 768), (768, 1), 0), reinterpret_tensor(buf619, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf620, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_407, (16, 16), (16, 1), 0), buf1201, reinterpret_tensor(primals_405, (16, 16), (16, 1), 0), reinterpret_tensor(buf609, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf610, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_403, (2304, 768), (768, 1), 0), buf1202, reinterpret_tensor(primals_399, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_397, (3072, 768), (768, 1), 0), buf1203, reinterpret_tensor(primals_393, (768, 768), (768, 1), 0), reinterpret_tensor(buf589, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf590, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_391, (16, 16), (16, 1), 0), buf1204, reinterpret_tensor(primals_389, (16, 16), (16, 1), 0), reinterpret_tensor(buf579, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf580, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_387, (2304, 768), (768, 1), 0), buf1205, reinterpret_tensor(primals_383, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_381, (3072, 768), (768, 1), 0), buf1206, reinterpret_tensor(primals_377, (768, 768), (768, 1), 0), reinterpret_tensor(buf559, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf560, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_375, (16, 16), (16, 1), 0), buf1207, reinterpret_tensor(primals_373, (16, 16), (16, 1), 0), reinterpret_tensor(buf549, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf550, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_371, (2304, 768), (768, 1), 0), buf1208, reinterpret_tensor(primals_367, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_365, (3072, 768), (768, 1), 0), buf1209, reinterpret_tensor(primals_361, (768, 768), (768, 1), 0), reinterpret_tensor(buf529, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf530, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_359, (16, 16), (16, 1), 0), buf1210, reinterpret_tensor(primals_357, (16, 16), (16, 1), 0), reinterpret_tensor(buf519, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf520, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_355, (2304, 768), (768, 1), 0), buf1211, reinterpret_tensor(primals_351, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_349, (3072, 768), (768, 1), 0), buf1212, reinterpret_tensor(primals_345, (768, 768), (768, 1), 0), reinterpret_tensor(buf499, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf500, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_343, (16, 16), (16, 1), 0), buf1213, reinterpret_tensor(primals_341, (16, 16), (16, 1), 0), reinterpret_tensor(buf489, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf490, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_339, (2304, 768), (768, 1), 0), buf1214, reinterpret_tensor(primals_335, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_333, (3072, 768), (768, 1), 0), buf1215, reinterpret_tensor(primals_329, (768, 768), (768, 1), 0), reinterpret_tensor(buf469, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf470, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_327, (16, 16), (16, 1), 0), buf1216, reinterpret_tensor(primals_325, (16, 16), (16, 1), 0), reinterpret_tensor(buf459, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf460, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_323, (2304, 768), (768, 1), 0), buf1217, reinterpret_tensor(primals_319, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_317, (3072, 768), (768, 1), 0), buf1218, reinterpret_tensor(primals_313, (768, 768), (768, 1), 0), reinterpret_tensor(buf439, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf440, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_311, (16, 16), (16, 1), 0), buf1219, reinterpret_tensor(primals_309, (16, 16), (16, 1), 0), reinterpret_tensor(buf429, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf430, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_307, (2304, 768), (768, 1), 0), buf1220, reinterpret_tensor(primals_303, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_301, (3072, 768), (768, 1), 0), buf1221, reinterpret_tensor(primals_297, (768, 768), (768, 1), 0), reinterpret_tensor(buf409, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf410, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_295, (16, 16), (16, 1), 0), buf1222, reinterpret_tensor(primals_293, (16, 16), (16, 1), 0), reinterpret_tensor(buf399, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf400, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_291, (2304, 768), (768, 1), 0), buf1223, reinterpret_tensor(primals_287, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_285, (3072, 768), (768, 1), 0), buf1224, reinterpret_tensor(primals_281, (768, 768), (768, 1), 0), reinterpret_tensor(buf379, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf380, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_279, (16, 16), (16, 1), 0), buf1225, reinterpret_tensor(primals_277, (16, 16), (16, 1), 0), reinterpret_tensor(buf369, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf370, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_275, (2304, 768), (768, 1), 0), buf1226, reinterpret_tensor(primals_271, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_269, (3072, 768), (768, 1), 0), buf1227, reinterpret_tensor(primals_265, (768, 768), (768, 1), 0), reinterpret_tensor(buf349, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf350, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_263, (16, 16), (16, 1), 0), buf1228, reinterpret_tensor(primals_261, (16, 16), (16, 1), 0), reinterpret_tensor(buf339, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf340, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_259, (2304, 768), (768, 1), 0), buf1229, reinterpret_tensor(primals_255, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_253, (3072, 768), (768, 1), 0), buf1230, reinterpret_tensor(primals_249, (768, 768), (768, 1), 0), reinterpret_tensor(buf319, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf320, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_247, (16, 16), (16, 1), 0), buf1231, reinterpret_tensor(primals_245, (16, 16), (16, 1), 0), reinterpret_tensor(buf309, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf310, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_243, (2304, 768), (768, 1), 0), buf1232, reinterpret_tensor(primals_239, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_237, (3072, 768), (768, 1), 0), buf1233, reinterpret_tensor(primals_233, (768, 768), (768, 1), 0), reinterpret_tensor(buf289, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf290, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_231, (16, 16), (16, 1), 0), buf1234, reinterpret_tensor(primals_229, (16, 16), (16, 1), 0), reinterpret_tensor(buf279, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf280, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_227, (2304, 768), (768, 1), 0), buf1235, reinterpret_tensor(primals_223, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_221, (3072, 768), (768, 1), 0), buf1236, reinterpret_tensor(primals_217, (768, 768), (768, 1), 0), reinterpret_tensor(buf259, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf260, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_215, (16, 16), (16, 1), 0), buf1237, reinterpret_tensor(primals_213, (16, 16), (16, 1), 0), reinterpret_tensor(buf249, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf250, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_211, (2304, 768), (768, 1), 0), buf1238, reinterpret_tensor(primals_207, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_205, (3072, 768), (768, 1), 0), buf1239, reinterpret_tensor(primals_201, (768, 768), (768, 1), 0), reinterpret_tensor(buf229, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf230, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_199, (16, 16), (16, 1), 0), buf1240, reinterpret_tensor(primals_197, (16, 16), (16, 1), 0), reinterpret_tensor(buf219, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf220, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_195, (2304, 768), (768, 1), 0), buf1241, reinterpret_tensor(primals_191, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_189, (3072, 768), (768, 1), 0), buf1242, reinterpret_tensor(primals_185, (768, 768), (768, 1), 0), reinterpret_tensor(buf199, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf200, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_183, (16, 16), (16, 1), 0), buf1243, reinterpret_tensor(primals_181, (16, 16), (16, 1), 0), reinterpret_tensor(buf189, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf190, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_179, (2304, 768), (768, 1), 0), buf1244, reinterpret_tensor(primals_175, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_173, (3072, 768), (768, 1), 0), buf1245, reinterpret_tensor(primals_169, (768, 768), (768, 1), 0), reinterpret_tensor(buf169, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf170, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_167, (16, 16), (16, 1), 0), buf1246, reinterpret_tensor(primals_165, (16, 16), (16, 1), 0), reinterpret_tensor(buf159, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf160, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_163, (2304, 768), (768, 1), 0), buf1247, reinterpret_tensor(primals_159, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_157, (3072, 768), (768, 1), 0), buf1248, reinterpret_tensor(primals_153, (768, 768), (768, 1), 0), reinterpret_tensor(buf139, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf140, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_151, (16, 16), (16, 1), 0), buf1249, reinterpret_tensor(primals_149, (16, 16), (16, 1), 0), reinterpret_tensor(buf129, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf130, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_147, (2304, 768), (768, 1), 0), buf1250, reinterpret_tensor(primals_143, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_141, (3072, 768), (768, 1), 0), buf1251, reinterpret_tensor(primals_137, (768, 768), (768, 1), 0), reinterpret_tensor(buf109, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf110, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_135, (16, 16), (16, 1), 0), buf1252, reinterpret_tensor(primals_133, (16, 16), (16, 1), 0), reinterpret_tensor(buf99, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf100, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_131, (2304, 768), (768, 1), 0), buf1253, reinterpret_tensor(primals_127, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_125, (3072, 768), (768, 1), 0), buf1254, reinterpret_tensor(primals_121, (768, 768), (768, 1), 0), reinterpret_tensor(buf79, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf80, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_119, (16, 16), (16, 1), 0), buf1255, reinterpret_tensor(primals_117, (16, 16), (16, 1), 0), reinterpret_tensor(buf69, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf70, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_115, (2304, 768), (768, 1), 0), buf1256, reinterpret_tensor(primals_111, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_109, (3072, 768), (768, 1), 0), buf1257, reinterpret_tensor(primals_105, (768, 768), (768, 1), 0), reinterpret_tensor(buf49, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf50, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_103, (16, 16), (16, 1), 0), buf1258, reinterpret_tensor(primals_101, (16, 16), (16, 1), 0), reinterpret_tensor(buf39, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf40, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_99, (2304, 768), (768, 1), 0), buf1259, reinterpret_tensor(primals_95, (768, 3072), (3072, 1), 0), reinterpret_tensor(primals_93, (3072, 768), (768, 1), 0), buf1260, reinterpret_tensor(primals_89, (768, 768), (768, 1), 0), reinterpret_tensor(buf19, (128, 576, 576), (331776, 1, 576), 0), reinterpret_tensor(buf20, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(primals_87, (16, 16), (16, 1), 0), buf1261, reinterpret_tensor(primals_85, (16, 16), (16, 1), 0), reinterpret_tensor(buf9, (128, 48, 576), (27648, 1, 48), 0), reinterpret_tensor(buf10, (128, 576, 48), (27648, 1, 576), 0), reinterpret_tensor(primals_83, (2304, 768), (768, 1), 0), buf1262, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((1, 576, 768), (442368, 768, 1), device='cpu', dtype=torch.float32)
    primals_2 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_3 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_6 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_8 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_9 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_11 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_12 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_14 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_15 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_16 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_18 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_20 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_21 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_22 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_23 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_24 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_26 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_27 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_29 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_30 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_32 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_33 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_35 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_36 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_37 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_38 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_39 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_41 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_42 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_43 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_44 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_45 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_47 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_48 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_50 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_51 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_53 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_54 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_57 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_59 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_60 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_61 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_63 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_64 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_65 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_66 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_67 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_69 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_70 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_71 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_72 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((1, 1, 768), (768, 768, 1), device='cpu', dtype=torch.float32)
    primals_75 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_76 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_77 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_78 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((768, 3, 16, 16), (768, 256, 16, 1), device='cpu', dtype=torch.float32)
    primals_80 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_81 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_83 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_84 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_85 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_86 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_87 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_88 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_89 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_90 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_92 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_93 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_95 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_96 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_98 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_99 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_101 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_102 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_104 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_105 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_107 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_108 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_109 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_110 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_111 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_113 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_114 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_116 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_117 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_118 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_119 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_120 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_121 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_122 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_123 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_125 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_126 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_128 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_129 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_130 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_131 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_132 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_134 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_135 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_137 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_138 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_140 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_141 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_143 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_144 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_145 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_146 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_147 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_148 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_149 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_150 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_151 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_153 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_154 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_155 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_156 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_157 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_158 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_159 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_160 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_161 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_162 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_164 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_165 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_166 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_168 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_169 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_170 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_171 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_173 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_174 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_176 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_177 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_179 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_180 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_181 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_182 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_183 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_185 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_186 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_188 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_189 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_190 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_191 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_192 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_195 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_197 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_198 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_199 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_201 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_203 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_204 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_206 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_207 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_209 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_210 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_212 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_213 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_214 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_215 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_216 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_218 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_219 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_220 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_222 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_223 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_224 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_225 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_226 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_227 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_228 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_230 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_231 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_233 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_234 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_235 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_236 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_237 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_238 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_239 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_240 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_243 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_244 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_245 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_246 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_249 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_250 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_251 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_252 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_253 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_254 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_255 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_256 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_257 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_258 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_260 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_261 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_262 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_263 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_264 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_265 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_266 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_267 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_268 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_269 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_270 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_272 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_273 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_274 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_276 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_277 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_278 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_279 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_281 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_282 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_284 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_285 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_286 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_287 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_288 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_289 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_290 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_291 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_292 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_293 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_294 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_296 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_297 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_299 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_300 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_302 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_303 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_304 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_305 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_306 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_307 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_308 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_309 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_310 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_311 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_312 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_315 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_316 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_317 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_318 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_319 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_320 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_321 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_322 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_323 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_324 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_326 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_327 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_328 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_330 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_331 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_332 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_333 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_334 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_335 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_336 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_338 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_339 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_340 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_341 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_342 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_343 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_344 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_345 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_346 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_347 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_348 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_350 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_351 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_352 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_353 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_354 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_356 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_357 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_358 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_359 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_360 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_362 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_363 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_364 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_366 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_367 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_368 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_369 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_370 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_371 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_372 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_374 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_375 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_376 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_377 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_378 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_379 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_380 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_381 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_382 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_383 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_384 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_385 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_386 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_387 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_388 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_389 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_390 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_391 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_392 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_393 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_394 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_395 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_396 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_397 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_398 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_399 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_400 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_401 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_402 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_403 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_404 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_405 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_406 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_407 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_408 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_409 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_410 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_411 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_412 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_413 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_414 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_415 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_416 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_417 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_418 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_419 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_420 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_421 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_422 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_423 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_424 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_425 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_426 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_427 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_428 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_429 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_430 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_431 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_432 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_433 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_434 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_435 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_436 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_437 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_438 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_439 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_440 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_441 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_442 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_443 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_444 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_445 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_446 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_447 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_448 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_449 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_450 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_451 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_452 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_453 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_454 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_455 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_456 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_457 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_458 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_459 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_460 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_461 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_462 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_463 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_464 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_465 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_466 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_467 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_468 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_469 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_470 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_471 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_472 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_473 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_474 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_475 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_476 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_477 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_478 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_479 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_480 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_481 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_482 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_483 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_484 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_485 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_486 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_487 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_488 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_489 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_490 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_491 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_492 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_493 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_494 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_495 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_496 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_497 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_498 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_499 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_500 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_501 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_502 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_503 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_504 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_505 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_506 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_507 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_508 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_509 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_510 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_511 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_512 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_513 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_514 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_515 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_516 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_517 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_518 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_519 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_520 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_521 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_522 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_523 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_524 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_525 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_526 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_527 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_528 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_529 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_530 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_531 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_532 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_533 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_534 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_535 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_536 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_537 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_538 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_539 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_540 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_541 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_542 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_543 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_544 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_545 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_546 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_547 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_548 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_549 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_550 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_551 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_552 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_553 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_554 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_555 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_556 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_557 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_558 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_559 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_560 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_561 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_562 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_563 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_564 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_565 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_566 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_567 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_568 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_569 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_570 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_571 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_572 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_573 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_574 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_575 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_576 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_577 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_578 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_579 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_580 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_581 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_582 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_583 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_584 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_585 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_586 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_587 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_588 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_589 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_590 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_591 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_592 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_593 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_594 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_595 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_596 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_597 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_598 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_599 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_600 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_601 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_602 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_603 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_604 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_605 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_606 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_607 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_608 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_609 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_610 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_611 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_612 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_613 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_614 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_615 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_616 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_617 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_618 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_619 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_620 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_621 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_622 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_623 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_624 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_625 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_626 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_627 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_628 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_629 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_630 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_631 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_632 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_633 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_634 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_635 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_636 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_637 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_638 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_639 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_640 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_641 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_642 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_643 = rand_strided((2304, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_644 = rand_strided((2304, ), (1, ), device='cpu', dtype=torch.float32)
    primals_645 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_646 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_647 = rand_strided((16, 16), (16, 1), device='cpu', dtype=torch.float32)
    primals_648 = rand_strided((16, ), (1, ), device='cpu', dtype=torch.float32)
    primals_649 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_650 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_651 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_652 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_653 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_654 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_655 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_656 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_657 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_658 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_659 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_660 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_661 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_662 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_663 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_664 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_665 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_666 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_667 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_668 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_669 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_670 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_671 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_672 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_673 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_674 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_675 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_676 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_677 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_678 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_679 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_680 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_681 = rand_strided((768, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_682 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_683 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_684 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_685 = rand_strided((3072, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_686 = rand_strided((3072, ), (1, ), device='cpu', dtype=torch.float32)
    primals_687 = rand_strided((768, 3072), (3072, 1), device='cpu', dtype=torch.float32)
    primals_688 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_689 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_690 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_691 = rand_strided((1000, 768), (768, 1), device='cpu', dtype=torch.float32)
    primals_692 = rand_strided((1000, ), (1, ), device='cpu', dtype=torch.float32)
    primals_693 = rand_strided((8, 3, 384, 384), (442368, 147456, 384, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_128, primals_129, primals_130, primals_131, primals_132, primals_133, primals_134, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_144, primals_145, primals_146, primals_147, primals_148, primals_149, primals_150, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_160, primals_161, primals_162, primals_163, primals_164, primals_165, primals_166, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_176, primals_177, primals_178, primals_179, primals_180, primals_181, primals_182, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_192, primals_193, primals_194, primals_195, primals_196, primals_197, primals_198, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_208, primals_209, primals_210, primals_211, primals_212, primals_213, primals_214, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_224, primals_225, primals_226, primals_227, primals_228, primals_229, primals_230, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_240, primals_241, primals_242, primals_243, primals_244, primals_245, primals_246, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_256, primals_257, primals_258, primals_259, primals_260, primals_261, primals_262, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_272, primals_273, primals_274, primals_275, primals_276, primals_277, primals_278, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_288, primals_289, primals_290, primals_291, primals_292, primals_293, primals_294, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_304, primals_305, primals_306, primals_307, primals_308, primals_309, primals_310, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_320, primals_321, primals_322, primals_323, primals_324, primals_325, primals_326, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_336, primals_337, primals_338, primals_339, primals_340, primals_341, primals_342, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_352, primals_353, primals_354, primals_355, primals_356, primals_357, primals_358, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_368, primals_369, primals_370, primals_371, primals_372, primals_373, primals_374, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_384, primals_385, primals_386, primals_387, primals_388, primals_389, primals_390, primals_391, primals_392, primals_393, primals_394, primals_395, primals_396, primals_397, primals_398, primals_399, primals_400, primals_401, primals_402, primals_403, primals_404, primals_405, primals_406, primals_407, primals_408, primals_409, primals_410, primals_411, primals_412, primals_413, primals_414, primals_415, primals_416, primals_417, primals_418, primals_419, primals_420, primals_421, primals_422, primals_423, primals_424, primals_425, primals_426, primals_427, primals_428, primals_429, primals_430, primals_431, primals_432, primals_433, primals_434, primals_435, primals_436, primals_437, primals_438, primals_439, primals_440, primals_441, primals_442, primals_443, primals_444, primals_445, primals_446, primals_447, primals_448, primals_449, primals_450, primals_451, primals_452, primals_453, primals_454, primals_455, primals_456, primals_457, primals_458, primals_459, primals_460, primals_461, primals_462, primals_463, primals_464, primals_465, primals_466, primals_467, primals_468, primals_469, primals_470, primals_471, primals_472, primals_473, primals_474, primals_475, primals_476, primals_477, primals_478, primals_479, primals_480, primals_481, primals_482, primals_483, primals_484, primals_485, primals_486, primals_487, primals_488, primals_489, primals_490, primals_491, primals_492, primals_493, primals_494, primals_495, primals_496, primals_497, primals_498, primals_499, primals_500, primals_501, primals_502, primals_503, primals_504, primals_505, primals_506, primals_507, primals_508, primals_509, primals_510, primals_511, primals_512, primals_513, primals_514, primals_515, primals_516, primals_517, primals_518, primals_519, primals_520, primals_521, primals_522, primals_523, primals_524, primals_525, primals_526, primals_527, primals_528, primals_529, primals_530, primals_531, primals_532, primals_533, primals_534, primals_535, primals_536, primals_537, primals_538, primals_539, primals_540, primals_541, primals_542, primals_543, primals_544, primals_545, primals_546, primals_547, primals_548, primals_549, primals_550, primals_551, primals_552, primals_553, primals_554, primals_555, primals_556, primals_557, primals_558, primals_559, primals_560, primals_561, primals_562, primals_563, primals_564, primals_565, primals_566, primals_567, primals_568, primals_569, primals_570, primals_571, primals_572, primals_573, primals_574, primals_575, primals_576, primals_577, primals_578, primals_579, primals_580, primals_581, primals_582, primals_583, primals_584, primals_585, primals_586, primals_587, primals_588, primals_589, primals_590, primals_591, primals_592, primals_593, primals_594, primals_595, primals_596, primals_597, primals_598, primals_599, primals_600, primals_601, primals_602, primals_603, primals_604, primals_605, primals_606, primals_607, primals_608, primals_609, primals_610, primals_611, primals_612, primals_613, primals_614, primals_615, primals_616, primals_617, primals_618, primals_619, primals_620, primals_621, primals_622, primals_623, primals_624, primals_625, primals_626, primals_627, primals_628, primals_629, primals_630, primals_631, primals_632, primals_633, primals_634, primals_635, primals_636, primals_637, primals_638, primals_639, primals_640, primals_641, primals_642, primals_643, primals_644, primals_645, primals_646, primals_647, primals_648, primals_649, primals_650, primals_651, primals_652, primals_653, primals_654, primals_655, primals_656, primals_657, primals_658, primals_659, primals_660, primals_661, primals_662, primals_663, primals_664, primals_665, primals_666, primals_667, primals_668, primals_669, primals_670, primals_671, primals_672, primals_673, primals_674, primals_675, primals_676, primals_677, primals_678, primals_679, primals_680, primals_681, primals_682, primals_683, primals_684, primals_685, primals_686, primals_687, primals_688, primals_689, primals_690, primals_691, primals_692, primals_693]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('cait_m36_384', benchmark_compiled_module)
