
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_native_layer_norm_backward_select_backward_sum_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    {
                        float tmp_acc0 = 0;
                        float tmp_acc1 = 0;
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(1L))
                        {
                            auto tmp3 = in_ptr1[static_cast<long>(x2 + (384L*x0))];
                            auto tmp6 = in_ptr2[static_cast<long>(x2)];
                            auto tmp8 = in_ptr3[static_cast<long>(x2 + (384L*x1) + (75648L*x0))];
                            auto tmp0 = c10::convert<int>(x1);
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 == tmp1;
                            auto tmp4 = static_cast<float>(0.0);
                            auto tmp5 = tmp2 ? tmp3 : tmp4;
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            tmp_acc0 = tmp_acc0 + tmp7;
                            tmp_acc1 = tmp_acc1 + tmp9;
                        }
                        out_ptr1[static_cast<long>(x1 + (197L*x0))] = tmp_acc0;
                        out_ptr2[static_cast<long>(x1 + (197L*x0))] = tmp_acc1;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr4[static_cast<long>(x1 + (197L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x2 + (384L*x0))];
                        auto tmp7 = in_ptr2[static_cast<long>(x2)];
                        auto tmp11 = out_ptr1[static_cast<long>(x1 + (197L*x0))];
                        auto tmp13 = in_ptr3[static_cast<long>(x2 + (384L*x1) + (75648L*x0))];
                        auto tmp14 = out_ptr2[static_cast<long>(x1 + (197L*x0))];
                        auto tmp1 = c10::convert<int>(x1);
                        auto tmp2 = static_cast<int>(0);
                        auto tmp3 = tmp1 == tmp2;
                        auto tmp5 = static_cast<float>(0.0);
                        auto tmp6 = tmp3 ? tmp4 : tmp5;
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = static_cast<float>(384.0);
                        auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                        auto tmp12 = decltype(tmp10)(tmp10 - tmp11);
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp16 = decltype(tmp12)(tmp12 - tmp15);
                        auto tmp17 = decltype(tmp0)(tmp0 * tmp16);
                        out_ptr3[static_cast<long>(x2 + (384L*x1) + (75648L*x0))] = tmp17;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                        {
                            auto tmp3 = in_ptr1[static_cast<long>(x0 + (384L*x1))];
                            auto tmp6 = in_ptr3[static_cast<long>(x0 + (384L*x2) + (75648L*x1))];
                            auto tmp0 = c10::convert<int>(x2);
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 == tmp1;
                            auto tmp4 = static_cast<float>(0.0);
                            auto tmp5 = tmp2 ? tmp3 : tmp4;
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            tmp_acc0 = tmp_acc0 + tmp7;
                            tmp_acc1 = tmp_acc1 + tmp5;
                        }
                    }
                    out_ptr4[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr5[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr4[static_cast<long>(x1)];
                        auto tmp7 = in_ptr5[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr4 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(24.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(out_ptr3 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr2[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp10 = in_ptr6[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr8[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_select_backward_slice_backward_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp10 = tmp0 < tmp1;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr0 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                        auto tmp14 = to_float_mask(tmp10);
                        auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                        auto tmp16 = tmp9 + tmp15;
                        tmp16.store(out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2420736L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp12 = out_ptr1[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(384.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (64L*x1) + (384L*x2) + (75648L*x0)));
                            tmp0.store(out_ptr0 + static_cast<long>(x3 + (64L*x2) + (12608L*x1) + (75648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_219 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((64L*(static_cast<long>(x0) % static_cast<long>(197L))) + (12608L*(c10::div_floor_integer((x1 + x1_inner), 64L))) + (75648L*(c10::div_floor_integer(x0, 197L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(64L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_220 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (6L*x3) + (6L*x3_inner) + (1182L*x2) + (232854L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.125);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (6L*x3) + (1182L*x2) + (232854L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (197L*x1) + (1182L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.125);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (197L*x2) + (38809L*x1) + (232854L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_221 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(8L))
                            {
                                float tmp12[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp12, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (64L*x3) + (64L*x3_inner) + (12608L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = [&]
                                    {
                                        auto tmp13 = at::vec::Vectorized<float>::loadu(tmp12 + static_cast<long>(8L*x3_inner));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp7)::blendv(tmp14, tmp7, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(64L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (64L*x3) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x3 + (197L*x4) + (12608L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (64L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_222 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1576L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(out_ptr2 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(384L + x1 + (384L*(static_cast<long>(x0) % static_cast<long>(196L))) + (75648L*(c10::div_floor_integer(x0, 196L)))));
                    tmp0.store(out_ptr3 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_223 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp9 = tmp7 * tmp8;
                        auto tmp10 = tmp9 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                        tmp_acc2_vec = tmp_acc2_vec + tmp9;
                        tmp_acc3_vec = tmp_acc3_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    tmp_acc2 = tmp_acc2 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc2_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc2);
                    tmp_acc3 = tmp_acc3 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc3_vec);
                    out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc3);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp5 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                        tmp_acc2_vec = tmp_acc2_vec + tmp6;
                        tmp_acc3_vec = tmp_acc3_vec + tmp5;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr6 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_224 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_225 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1536L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_226 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_227 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1576L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp4 = in_ptr3[static_cast<long>(x1)];
                        auto tmp7 = in_ptr4[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_228 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr1[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = in_ptr5[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp14 = in_ptr7[static_cast<long>(x0)];
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp25 = in_ptr10[static_cast<long>(x0)];
                    auto tmp28 = in_ptr11[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(24.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    auto tmp23 = tmp21 * tmp22;
                    auto tmp24 = tmp23 * tmp8;
                    auto tmp26 = at::vec::Vectorized<float>(tmp25);
                    auto tmp27 = tmp24 - tmp26;
                    auto tmp29 = at::vec::Vectorized<float>(tmp28);
                    auto tmp30 = tmp13 * tmp29;
                    auto tmp31 = tmp27 - tmp30;
                    auto tmp32 = tmp18 * tmp31;
                    auto tmp33 = tmp20 + tmp32;
                    tmp33.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_229 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_230 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(24.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_231 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(6L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x3 + (6L*x1) + (24L*x2) + (384L*x0))];
                            out_ptr1[static_cast<long>(x3 + (6L*x2) + (96L*x1) + (384L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_232 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (4L*x3) + (4L*x3_inner) + (64L*x2) + (1024L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (16L*x1) + (64L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.408248290463863);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (16L*x2) + (256L*x1) + (1024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_233 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((6L*(static_cast<long>(x0) % static_cast<long>(16L))) + (96L*(c10::div_floor_integer((x1 + x1_inner), 6L))) + (384L*(c10::div_floor_integer(x0, 16L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(6L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_clone_234 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(16L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(6L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<int>(x1 + (1568L*x0));
                                auto tmp1 = static_cast<int>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<int>(1568);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr0[static_cast<long>(x4 + (6L*x3) + (6L*x3_inner) + (96L*x2) + (384L*x1) + (602112L*x0))]; return masked_load(tmpbuf, to_float_mask(tmp4)); })();
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<int>(3136);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-602112L) + x3 + (16L*x4) + (96L*x2) + (384L*x1) + (602112L*x0)), to_float_mask(tmp8));
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                                auto tmp14 = to_float_mask(tmp4);
                                auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                                { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp15.store(tmpbuf); for (long x3_inner = 0; x3_inner < 8; x3_inner++) out_ptr0[static_cast<long>(x4 + (6L*x2) + (24L*x0) + (48L*x3) + (48L*x3_inner) + (768L*x1))] = tmpbuf[x3_inner]; }
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_select_backward_slice_backward_sum_235 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp9 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 - tmp7;
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp12 = tmp4 * tmp11;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp12;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (24L*x1)));
                        auto tmp4 = in_ptr4[static_cast<long>(x1)];
                        auto tmp7 = in_ptr5[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp11 = out_ptr0[static_cast<long>(x0)];
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (24L*x0)));
                    auto tmp15 = in_ptr4[static_cast<long>(x0)];
                    auto tmp20 = out_ptr1[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(24.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp9 = at::vec::Vectorized<float>(tmp2);
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 - tmp12;
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp17 * tmp18;
                    auto tmp21 = at::vec::Vectorized<float>(tmp20);
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp23 = tmp13 - tmp22;
                    auto tmp24 = at::vec::Vectorized<float>(tmp3);
                    auto tmp25 = tmp24 * tmp23;
                    auto tmp26 = tmp0 + tmp25;
                    tmp26.store(in_out_ptr0 + static_cast<long>(x1 + (24L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(197L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = c10::convert<int>(x0);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr6 + static_cast<long>(x1 + (384L*x0) + (75648L*x2)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp10 = tmp0 < tmp1;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr6 + static_cast<long>(x1 + (75648L*x2)), to_float_mask(tmp10));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                            auto tmp14 = to_float_mask(tmp10);
                            auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                            auto tmp16 = tmp9 + tmp15;
                            tmp_acc0_vec = tmp_acc0_vec + tmp16;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = static_cast<int>(0);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr6 + static_cast<long>(x0 + (75648L*x1)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp10 = tmp0 < tmp1;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr6 + static_cast<long>(x0 + (75648L*x1)), to_float_mask(tmp10));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                            auto tmp14 = to_float_mask(tmp10);
                            auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                            auto tmp16 = tmp9 + tmp15;
                            tmp_acc0_vec = tmp_acc0_vec + tmp16;
                        }
                        tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                        {
                            auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x2));
                            auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                            auto tmp30 = in_ptr9[static_cast<long>(x1 + (196L*x0))];
                            auto tmp33 = in_ptr10[static_cast<long>(x1 + (196L*x0))];
                            auto tmp0 = c10::convert<int>(1L + x1);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr6 + static_cast<long>(384L + x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp10 = tmp0 < tmp1;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr6 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                            auto tmp14 = to_float_mask(tmp10);
                            auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                            auto tmp16 = tmp9 + tmp15;
                            auto tmp18 = tmp16 * tmp17;
                            auto tmp19 = [&]
                            {
                                auto tmp20 = masked_load(in_ptr6 + static_cast<long>(384L + x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                                return tmp20;
                            }
                            ;
                            auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp2));
                            auto tmp22 = decltype(tmp21)::blendv(tmp8, tmp21, tmp7);
                            auto tmp23 = [&]
                            {
                                auto tmp24 = masked_load(in_ptr6 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp10));
                                return tmp24;
                            }
                            ;
                            auto tmp25 = decltype(tmp23())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp23(), to_float_mask(tmp10));
                            auto tmp26 = decltype(tmp25)::blendv(tmp8, tmp25, tmp14);
                            auto tmp27 = tmp22 + tmp26;
                            auto tmp28 = tmp27 * tmp17;
                            auto tmp31 = at::vec::Vectorized<float>(tmp30);
                            auto tmp32 = tmp29 - tmp31;
                            auto tmp34 = at::vec::Vectorized<float>(tmp33);
                            auto tmp35 = tmp32 * tmp34;
                            auto tmp36 = tmp28 * tmp35;
                            tmp_acc0_vec = tmp_acc0_vec + tmp18;
                            tmp_acc1_vec = tmp_acc1_vec + tmp36;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr6[static_cast<long>(x1 + (196L*x0))] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr7[static_cast<long>(x1 + (196L*x0))] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp18 = in_ptr9[static_cast<long>(x2 + (196L*x1))];
                            auto tmp21 = in_ptr10[static_cast<long>(x2 + (196L*x1))];
                            auto tmp0 = c10::convert<int>(1L + x2);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr6 + static_cast<long>(384L + x0 + (384L*x2) + (75648L*x1)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp10 = tmp0 < tmp1;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr6 + static_cast<long>(x0 + (75648L*x1)), to_float_mask(tmp10));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                            auto tmp14 = to_float_mask(tmp10);
                            auto tmp15 = decltype(tmp13)::blendv(tmp8, tmp13, tmp14);
                            auto tmp16 = tmp9 + tmp15;
                            auto tmp19 = at::vec::Vectorized<float>(tmp18);
                            auto tmp20 = tmp17 - tmp19;
                            auto tmp22 = at::vec::Vectorized<float>(tmp21);
                            auto tmp23 = tmp20 * tmp22;
                            auto tmp24 = tmp16 * tmp23;
                            auto tmp25 = [&]
                            {
                                auto tmp26 = masked_load(in_ptr6 + static_cast<long>(384L + x0 + (384L*x2) + (75648L*x1)), to_float_mask(tmp2));
                                return tmp26;
                            }
                            ;
                            auto tmp27 = decltype(tmp25())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp25(), to_float_mask(tmp2));
                            auto tmp28 = decltype(tmp27)::blendv(tmp8, tmp27, tmp7);
                            auto tmp29 = [&]
                            {
                                auto tmp30 = masked_load(in_ptr6 + static_cast<long>(x0 + (75648L*x1)), to_float_mask(tmp10));
                                return tmp30;
                            }
                            ;
                            auto tmp31 = decltype(tmp29())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp29(), to_float_mask(tmp10));
                            auto tmp32 = decltype(tmp31)::blendv(tmp8, tmp31, tmp14);
                            auto tmp33 = tmp28 + tmp32;
                            tmp_acc0_vec = tmp_acc0_vec + tmp24;
                            tmp_acc1_vec = tmp_acc1_vec + tmp33;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr8 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr9 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = in_ptr10[static_cast<long>(x1 + (196L*x0))];
                        auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x2));
                        auto tmp24 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp28 = in_ptr9[static_cast<long>(x1 + (196L*x0))];
                        auto tmp33 = out_ptr7[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = static_cast<float>(384.0);
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(1L + x1);
                        auto tmp4 = static_cast<int>(1);
                        auto tmp5 = tmp3 >= tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = masked_load(in_ptr6 + static_cast<long>(384L + x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp5));
                            return tmp7;
                        }
                        ;
                        auto tmp8 = decltype(tmp6())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp6(), to_float_mask(tmp5));
                        auto tmp9 = static_cast<float>(0.0);
                        auto tmp10 = to_float_mask(tmp5);
                        auto tmp11 = at::vec::Vectorized<float>(tmp9);
                        auto tmp12 = decltype(tmp8)::blendv(tmp11, tmp8, tmp10);
                        auto tmp13 = tmp3 < tmp4;
                        auto tmp14 = [&]
                        {
                            auto tmp15 = masked_load(in_ptr6 + static_cast<long>(x2 + (75648L*x0)), to_float_mask(tmp13));
                            return tmp15;
                        }
                        ;
                        auto tmp16 = decltype(tmp14())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp14(), to_float_mask(tmp13));
                        auto tmp17 = to_float_mask(tmp13);
                        auto tmp18 = decltype(tmp16)::blendv(tmp11, tmp16, tmp17);
                        auto tmp19 = tmp12 + tmp18;
                        auto tmp21 = tmp19 * tmp20;
                        auto tmp22 = at::vec::Vectorized<float>(tmp1);
                        auto tmp23 = tmp21 * tmp22;
                        auto tmp25 = at::vec::Vectorized<float>(tmp24);
                        auto tmp26 = tmp23 - tmp25;
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp27 - tmp29;
                        auto tmp31 = at::vec::Vectorized<float>(tmp0);
                        auto tmp32 = tmp30 * tmp31;
                        auto tmp34 = at::vec::Vectorized<float>(tmp33);
                        auto tmp35 = tmp32 * tmp34;
                        auto tmp36 = tmp26 - tmp35;
                        auto tmp37 = at::vec::Vectorized<float>(tmp2);
                        auto tmp38 = tmp37 * tmp36;
                        tmp38.store(out_ptr10 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_clone_col2im_native_layer_norm_native_layer_norm_backward_sum_236 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    auto out_ptr7 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp4 = in_ptr4[static_cast<long>(x0)];
                        auto tmp7 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp3 - tmp5;
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp10 = tmp2 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = in_ptr4[static_cast<long>(x1)];
                        auto tmp5 = in_ptr5[static_cast<long>(x1)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 - tmp3;
                        auto tmp6 = at::vec::Vectorized<float>(tmp5);
                        auto tmp7 = tmp4 * tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp13 = in_ptr4[static_cast<long>(x0)];
                    auto tmp18 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(384.0);
                    auto tmp3 = tmp1 / tmp2;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = at::vec::Vectorized<float>(tmp2);
                    auto tmp8 = tmp6 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp15 * tmp16;
                    auto tmp19 = at::vec::Vectorized<float>(tmp18);
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp11 - tmp20;
                    auto tmp22 = at::vec::Vectorized<float>(tmp3);
                    auto tmp23 = tmp22 * tmp21;
                    auto tmp24 = tmp0 + tmp23;
                    tmp24.store(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(1568L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_out_ptr0[static_cast<long>(x0 + (24L*x1) + (24L*x1_inner) + (384L*x2))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x1 + (16L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(602112L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr6 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(16L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_out_ptr0 + static_cast<long>(x1 + (24L*x2) + (384L*x0)), static_cast<long>(24L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            tmp1.store(out_ptr7 + static_cast<long>(x2 + (16L*x1) + (16L*x1_inner) + (384L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(37632L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr7 + static_cast<long>(x1 + (16L*x0)));
                    tmp0.store(in_out_ptr1 + static_cast<long>(x1 + (16L*x0)));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_4, primals_6, primals_10, primals_12, primals_18, primals_24, primals_28, primals_34, primals_40, primals_46, primals_52, primals_56, primals_62, primals_68, primals_74, primals_80, primals_84, primals_90, primals_96, primals_102, primals_108, primals_112, primals_118, primals_124, primals_130, primals_136, primals_140, primals_146, primals_152, primals_158, primals_164, primals_168, primals_174, primals_180, primals_186, primals_192, primals_196, primals_202, primals_208, primals_214, primals_220, primals_224, primals_230, primals_236, primals_242, primals_248, primals_252, primals_258, primals_264, primals_270, primals_276, primals_280, primals_286, primals_292, primals_298, primals_304, primals_308, primals_314, primals_320, primals_326, primals_332, primals_336, primals_342, primals_348, primals_352, add, unsqueeze_5, clone_2, getitem_1, rsqrt, view_4, addmm, getitem_3, rsqrt_1, getitem_5, rsqrt_2, view_6, view_19, mul_7, view_21, addmm_2, view_23, mul_12, view_26, cat_1, getitem_13, rsqrt_5, view_28, view_41, mul_17, view_43, addmm_6, view_45, view_47, view_60, mul_25, view_62, addmm_9, view_64, mul_30, view_67, cat_2, getitem_27, rsqrt_10, view_69, view_82, mul_35, view_84, addmm_13, view_86, view_88, view_101, mul_43, view_103, addmm_16, view_105, mul_48, view_108, cat_3, getitem_41, rsqrt_15, view_110, view_123, mul_53, view_125, addmm_20, view_127, view_129, view_142, mul_61, view_144, addmm_23, view_146, mul_66, view_149, cat_4, getitem_55, rsqrt_20, view_151, view_164, mul_71, view_166, addmm_27, view_168, view_170, view_183, mul_79, view_185, addmm_30, view_187, mul_84, view_190, cat_5, getitem_69, rsqrt_25, view_192, view_205, mul_89, view_207, addmm_34, view_209, view_211, view_224, mul_97, view_226, addmm_37, view_228, mul_102, view_231, cat_6, getitem_83, rsqrt_30, view_233, view_246, mul_107, view_248, addmm_41, view_250, view_252, view_265, mul_115, view_267, addmm_44, view_269, mul_120, view_272, cat_7, getitem_97, rsqrt_35, view_274, view_287, mul_125, view_289, addmm_48, view_291, view_293, view_306, mul_133, view_308, addmm_51, view_310, mul_138, view_313, cat_8, getitem_111, rsqrt_40, view_315, view_328, mul_143, view_330, addmm_55, view_332, view_334, view_347, mul_151, view_349, addmm_58, view_351, mul_156, view_354, cat_9, getitem_125, rsqrt_45, view_356, view_369, mul_161, view_371, addmm_62, view_373, view_375, view_388, mul_169, view_390, addmm_65, view_392, mul_174, view_395, cat_10, getitem_139, rsqrt_50, view_397, view_410, mul_179, view_412, addmm_69, view_414, view_416, view_429, mul_187, view_431, addmm_72, view_433, mul_192, view_436, cat_11, getitem_153, rsqrt_55, view_438, view_451, mul_197, view_453, addmm_76, view_455, view_457, view_470, mul_205, view_472, addmm_79, view_474, mul_210, view_477, cat_12, getitem_167, rsqrt_60, view_479, view_492, mul_215, view_494, addmm_83, view_496, mul_220, clone_184, permute_233, div_24, permute_237, permute_241, div_25, permute_245, permute_250, permute_251, alias_24, permute_252, permute_253, permute_258, permute_263, permute_265, div_27, permute_269, permute_273, div_28, permute_277, permute_282, permute_283, alias_25, permute_284, permute_285, permute_290, permute_295, div_29, permute_297, permute_301, div_30, permute_305, permute_310, permute_311, alias_26, permute_312, permute_313, permute_318, permute_323, permute_325, permute_329, permute_333, div_33, permute_337, permute_342, permute_343, alias_27, permute_344, permute_345, permute_350, permute_355, div_34, permute_357, permute_361, div_35, permute_365, permute_370, permute_371, alias_28, permute_372, permute_373, permute_378, permute_383, permute_385, permute_389, permute_393, div_38, permute_397, permute_402, permute_403, alias_29, permute_404, permute_405, permute_410, permute_415, div_39, permute_417, permute_421, div_40, permute_425, permute_430, permute_431, alias_30, permute_432, permute_433, permute_438, permute_443, permute_445, permute_449, permute_453, div_43, permute_457, permute_462, permute_463, alias_31, permute_464, permute_465, permute_470, permute_475, div_44, permute_477, permute_481, div_45, permute_485, permute_490, permute_491, alias_32, permute_492, permute_493, permute_498, permute_503, permute_505, permute_509, permute_513, div_48, permute_517, permute_522, permute_523, alias_33, permute_524, permute_525, permute_530, permute_535, div_49, permute_537, permute_541, div_50, permute_545, permute_550, permute_551, alias_34, permute_552, permute_553, permute_558, permute_563, permute_565, permute_569, permute_573, div_53, permute_577, permute_582, permute_583, alias_35, permute_584, permute_585, permute_590, permute_595, div_54, permute_597, permute_601, div_55, permute_605, permute_610, permute_611, alias_36, permute_612, permute_613, permute_618, permute_623, permute_625, permute_629, permute_633, div_58, permute_637, permute_642, permute_643, alias_37, permute_644, permute_645, permute_650, permute_655, div_59, permute_657, permute_661, div_60, permute_665, permute_670, permute_671, alias_38, permute_672, permute_673, permute_678, permute_683, permute_685, permute_689, permute_693, div_63, permute_697, permute_702, permute_703, alias_39, permute_704, permute_705, permute_710, permute_715, div_64, permute_717, permute_721, div_65, permute_725, permute_730, permute_731, alias_40, permute_732, permute_733, permute_738, permute_743, permute_745, permute_749, permute_753, div_68, permute_757, permute_762, permute_763, alias_41, permute_764, permute_765, permute_770, permute_775, div_69, permute_777, permute_781, div_70, permute_785, permute_790, permute_791, alias_42, permute_792, permute_793, permute_798, permute_803, permute_805, permute_809, permute_813, div_73, permute_817, permute_822, permute_823, alias_43, permute_824, permute_825, permute_830, permute_835, div_74, permute_837, permute_841, div_75, permute_845, permute_850, permute_851, alias_44, permute_852, permute_853, permute_858, permute_863, permute_865, permute_869, permute_873, div_78, permute_877, permute_882, permute_883, alias_45, permute_884, permute_885, permute_890, permute_895, div_79, permute_897, permute_901, div_80, permute_905, permute_910, permute_911, alias_46, permute_912, permute_913, permute_918, permute_923, permute_925, permute_929, permute_933, div_83, permute_937, permute_942, permute_943, alias_47, permute_944, permute_945, permute_950, permute_955, permute_957, tangents_1 = args
    args.clear()
    assert_size_stride(primals_4, (24, 3, 7, 7), (147, 1, 21, 3))
    assert_size_stride(primals_6, (384, ), (1, ))
    assert_size_stride(primals_10, (384, ), (1, ))
    assert_size_stride(primals_12, (24, ), (1, ))
    assert_size_stride(primals_18, (24, ), (1, ))
    assert_size_stride(primals_24, (24, ), (1, ))
    assert_size_stride(primals_28, (384, ), (1, ))
    assert_size_stride(primals_34, (384, ), (1, ))
    assert_size_stride(primals_40, (24, ), (1, ))
    assert_size_stride(primals_46, (24, ), (1, ))
    assert_size_stride(primals_52, (24, ), (1, ))
    assert_size_stride(primals_56, (384, ), (1, ))
    assert_size_stride(primals_62, (384, ), (1, ))
    assert_size_stride(primals_68, (24, ), (1, ))
    assert_size_stride(primals_74, (24, ), (1, ))
    assert_size_stride(primals_80, (24, ), (1, ))
    assert_size_stride(primals_84, (384, ), (1, ))
    assert_size_stride(primals_90, (384, ), (1, ))
    assert_size_stride(primals_96, (24, ), (1, ))
    assert_size_stride(primals_102, (24, ), (1, ))
    assert_size_stride(primals_108, (24, ), (1, ))
    assert_size_stride(primals_112, (384, ), (1, ))
    assert_size_stride(primals_118, (384, ), (1, ))
    assert_size_stride(primals_124, (24, ), (1, ))
    assert_size_stride(primals_130, (24, ), (1, ))
    assert_size_stride(primals_136, (24, ), (1, ))
    assert_size_stride(primals_140, (384, ), (1, ))
    assert_size_stride(primals_146, (384, ), (1, ))
    assert_size_stride(primals_152, (24, ), (1, ))
    assert_size_stride(primals_158, (24, ), (1, ))
    assert_size_stride(primals_164, (24, ), (1, ))
    assert_size_stride(primals_168, (384, ), (1, ))
    assert_size_stride(primals_174, (384, ), (1, ))
    assert_size_stride(primals_180, (24, ), (1, ))
    assert_size_stride(primals_186, (24, ), (1, ))
    assert_size_stride(primals_192, (24, ), (1, ))
    assert_size_stride(primals_196, (384, ), (1, ))
    assert_size_stride(primals_202, (384, ), (1, ))
    assert_size_stride(primals_208, (24, ), (1, ))
    assert_size_stride(primals_214, (24, ), (1, ))
    assert_size_stride(primals_220, (24, ), (1, ))
    assert_size_stride(primals_224, (384, ), (1, ))
    assert_size_stride(primals_230, (384, ), (1, ))
    assert_size_stride(primals_236, (24, ), (1, ))
    assert_size_stride(primals_242, (24, ), (1, ))
    assert_size_stride(primals_248, (24, ), (1, ))
    assert_size_stride(primals_252, (384, ), (1, ))
    assert_size_stride(primals_258, (384, ), (1, ))
    assert_size_stride(primals_264, (24, ), (1, ))
    assert_size_stride(primals_270, (24, ), (1, ))
    assert_size_stride(primals_276, (24, ), (1, ))
    assert_size_stride(primals_280, (384, ), (1, ))
    assert_size_stride(primals_286, (384, ), (1, ))
    assert_size_stride(primals_292, (24, ), (1, ))
    assert_size_stride(primals_298, (24, ), (1, ))
    assert_size_stride(primals_304, (24, ), (1, ))
    assert_size_stride(primals_308, (384, ), (1, ))
    assert_size_stride(primals_314, (384, ), (1, ))
    assert_size_stride(primals_320, (24, ), (1, ))
    assert_size_stride(primals_326, (24, ), (1, ))
    assert_size_stride(primals_332, (24, ), (1, ))
    assert_size_stride(primals_336, (384, ), (1, ))
    assert_size_stride(primals_342, (384, ), (1, ))
    assert_size_stride(primals_348, (384, ), (1, ))
    assert_size_stride(primals_352, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(add, (4, 14), (14, 1))
    assert_size_stride(unsqueeze_5, (4, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(clone_2, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(getitem_1, (8, 196, 1), (196, 1, 1))
    assert_size_stride(rsqrt, (8, 196, 1), (196, 1, 1))
    assert_size_stride(view_4, (1568, 384), (384, 1))
    assert_size_stride(addmm, (1568, 384), (384, 1))
    assert_size_stride(getitem_3, (8, 196, 1), (196, 1, 1))
    assert_size_stride(rsqrt_1, (8, 196, 1), (196, 1, 1))
    assert_size_stride(getitem_5, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(rsqrt_2, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(view_6, (25088, 24), (24, 1))
    assert_size_stride(view_19, (25088, 24), (24, 1))
    assert_size_stride(mul_7, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_21, (25088, 24), (24, 1))
    assert_size_stride(addmm_2, (25088, 96), (96, 1))
    assert_size_stride(view_23, (25088, 96), (96, 1))
    assert_size_stride(mul_12, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_26, (1568, 384), (384, 1))
    assert_size_stride(cat_1, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_13, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_5, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_28, (1576, 384), (384, 1))
    assert_size_stride(view_41, (1576, 384), (384, 1))
    assert_size_stride(mul_17, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_43, (1576, 384), (384, 1))
    assert_size_stride(addmm_6, (1576, 1536), (1536, 1))
    assert_size_stride(view_45, (1576, 1536), (1536, 1))
    assert_size_stride(view_47, (25088, 24), (24, 1))
    assert_size_stride(view_60, (25088, 24), (24, 1))
    assert_size_stride(mul_25, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_62, (25088, 24), (24, 1))
    assert_size_stride(addmm_9, (25088, 96), (96, 1))
    assert_size_stride(view_64, (25088, 96), (96, 1))
    assert_size_stride(mul_30, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_67, (1568, 384), (384, 1))
    assert_size_stride(cat_2, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_27, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_10, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_69, (1576, 384), (384, 1))
    assert_size_stride(view_82, (1576, 384), (384, 1))
    assert_size_stride(mul_35, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_84, (1576, 384), (384, 1))
    assert_size_stride(addmm_13, (1576, 1536), (1536, 1))
    assert_size_stride(view_86, (1576, 1536), (1536, 1))
    assert_size_stride(view_88, (25088, 24), (24, 1))
    assert_size_stride(view_101, (25088, 24), (24, 1))
    assert_size_stride(mul_43, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_103, (25088, 24), (24, 1))
    assert_size_stride(addmm_16, (25088, 96), (96, 1))
    assert_size_stride(view_105, (25088, 96), (96, 1))
    assert_size_stride(mul_48, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_108, (1568, 384), (384, 1))
    assert_size_stride(cat_3, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_41, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_15, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_110, (1576, 384), (384, 1))
    assert_size_stride(view_123, (1576, 384), (384, 1))
    assert_size_stride(mul_53, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_125, (1576, 384), (384, 1))
    assert_size_stride(addmm_20, (1576, 1536), (1536, 1))
    assert_size_stride(view_127, (1576, 1536), (1536, 1))
    assert_size_stride(view_129, (25088, 24), (24, 1))
    assert_size_stride(view_142, (25088, 24), (24, 1))
    assert_size_stride(mul_61, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_144, (25088, 24), (24, 1))
    assert_size_stride(addmm_23, (25088, 96), (96, 1))
    assert_size_stride(view_146, (25088, 96), (96, 1))
    assert_size_stride(mul_66, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_149, (1568, 384), (384, 1))
    assert_size_stride(cat_4, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_55, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_20, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_151, (1576, 384), (384, 1))
    assert_size_stride(view_164, (1576, 384), (384, 1))
    assert_size_stride(mul_71, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_166, (1576, 384), (384, 1))
    assert_size_stride(addmm_27, (1576, 1536), (1536, 1))
    assert_size_stride(view_168, (1576, 1536), (1536, 1))
    assert_size_stride(view_170, (25088, 24), (24, 1))
    assert_size_stride(view_183, (25088, 24), (24, 1))
    assert_size_stride(mul_79, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_185, (25088, 24), (24, 1))
    assert_size_stride(addmm_30, (25088, 96), (96, 1))
    assert_size_stride(view_187, (25088, 96), (96, 1))
    assert_size_stride(mul_84, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_190, (1568, 384), (384, 1))
    assert_size_stride(cat_5, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_69, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_25, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_192, (1576, 384), (384, 1))
    assert_size_stride(view_205, (1576, 384), (384, 1))
    assert_size_stride(mul_89, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_207, (1576, 384), (384, 1))
    assert_size_stride(addmm_34, (1576, 1536), (1536, 1))
    assert_size_stride(view_209, (1576, 1536), (1536, 1))
    assert_size_stride(view_211, (25088, 24), (24, 1))
    assert_size_stride(view_224, (25088, 24), (24, 1))
    assert_size_stride(mul_97, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_226, (25088, 24), (24, 1))
    assert_size_stride(addmm_37, (25088, 96), (96, 1))
    assert_size_stride(view_228, (25088, 96), (96, 1))
    assert_size_stride(mul_102, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_231, (1568, 384), (384, 1))
    assert_size_stride(cat_6, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_83, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_30, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_233, (1576, 384), (384, 1))
    assert_size_stride(view_246, (1576, 384), (384, 1))
    assert_size_stride(mul_107, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_248, (1576, 384), (384, 1))
    assert_size_stride(addmm_41, (1576, 1536), (1536, 1))
    assert_size_stride(view_250, (1576, 1536), (1536, 1))
    assert_size_stride(view_252, (25088, 24), (24, 1))
    assert_size_stride(view_265, (25088, 24), (24, 1))
    assert_size_stride(mul_115, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_267, (25088, 24), (24, 1))
    assert_size_stride(addmm_44, (25088, 96), (96, 1))
    assert_size_stride(view_269, (25088, 96), (96, 1))
    assert_size_stride(mul_120, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_272, (1568, 384), (384, 1))
    assert_size_stride(cat_7, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_97, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_35, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_274, (1576, 384), (384, 1))
    assert_size_stride(view_287, (1576, 384), (384, 1))
    assert_size_stride(mul_125, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_289, (1576, 384), (384, 1))
    assert_size_stride(addmm_48, (1576, 1536), (1536, 1))
    assert_size_stride(view_291, (1576, 1536), (1536, 1))
    assert_size_stride(view_293, (25088, 24), (24, 1))
    assert_size_stride(view_306, (25088, 24), (24, 1))
    assert_size_stride(mul_133, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_308, (25088, 24), (24, 1))
    assert_size_stride(addmm_51, (25088, 96), (96, 1))
    assert_size_stride(view_310, (25088, 96), (96, 1))
    assert_size_stride(mul_138, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_313, (1568, 384), (384, 1))
    assert_size_stride(cat_8, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_111, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_40, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_315, (1576, 384), (384, 1))
    assert_size_stride(view_328, (1576, 384), (384, 1))
    assert_size_stride(mul_143, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_330, (1576, 384), (384, 1))
    assert_size_stride(addmm_55, (1576, 1536), (1536, 1))
    assert_size_stride(view_332, (1576, 1536), (1536, 1))
    assert_size_stride(view_334, (25088, 24), (24, 1))
    assert_size_stride(view_347, (25088, 24), (24, 1))
    assert_size_stride(mul_151, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_349, (25088, 24), (24, 1))
    assert_size_stride(addmm_58, (25088, 96), (96, 1))
    assert_size_stride(view_351, (25088, 96), (96, 1))
    assert_size_stride(mul_156, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_354, (1568, 384), (384, 1))
    assert_size_stride(cat_9, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_125, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_45, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_356, (1576, 384), (384, 1))
    assert_size_stride(view_369, (1576, 384), (384, 1))
    assert_size_stride(mul_161, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_371, (1576, 384), (384, 1))
    assert_size_stride(addmm_62, (1576, 1536), (1536, 1))
    assert_size_stride(view_373, (1576, 1536), (1536, 1))
    assert_size_stride(view_375, (25088, 24), (24, 1))
    assert_size_stride(view_388, (25088, 24), (24, 1))
    assert_size_stride(mul_169, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_390, (25088, 24), (24, 1))
    assert_size_stride(addmm_65, (25088, 96), (96, 1))
    assert_size_stride(view_392, (25088, 96), (96, 1))
    assert_size_stride(mul_174, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_395, (1568, 384), (384, 1))
    assert_size_stride(cat_10, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_139, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_50, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_397, (1576, 384), (384, 1))
    assert_size_stride(view_410, (1576, 384), (384, 1))
    assert_size_stride(mul_179, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_412, (1576, 384), (384, 1))
    assert_size_stride(addmm_69, (1576, 1536), (1536, 1))
    assert_size_stride(view_414, (1576, 1536), (1536, 1))
    assert_size_stride(view_416, (25088, 24), (24, 1))
    assert_size_stride(view_429, (25088, 24), (24, 1))
    assert_size_stride(mul_187, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_431, (25088, 24), (24, 1))
    assert_size_stride(addmm_72, (25088, 96), (96, 1))
    assert_size_stride(view_433, (25088, 96), (96, 1))
    assert_size_stride(mul_192, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_436, (1568, 384), (384, 1))
    assert_size_stride(cat_11, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_153, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_55, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_438, (1576, 384), (384, 1))
    assert_size_stride(view_451, (1576, 384), (384, 1))
    assert_size_stride(mul_197, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_453, (1576, 384), (384, 1))
    assert_size_stride(addmm_76, (1576, 1536), (1536, 1))
    assert_size_stride(view_455, (1576, 1536), (1536, 1))
    assert_size_stride(view_457, (25088, 24), (24, 1))
    assert_size_stride(view_470, (25088, 24), (24, 1))
    assert_size_stride(mul_205, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_472, (25088, 24), (24, 1))
    assert_size_stride(addmm_79, (25088, 96), (96, 1))
    assert_size_stride(view_474, (25088, 96), (96, 1))
    assert_size_stride(mul_210, (1568, 16, 24), (384, 24, 1))
    assert_size_stride(view_477, (1568, 384), (384, 1))
    assert_size_stride(cat_12, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_167, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_60, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_479, (1576, 384), (384, 1))
    assert_size_stride(view_492, (1576, 384), (384, 1))
    assert_size_stride(mul_215, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(view_494, (1576, 384), (384, 1))
    assert_size_stride(addmm_83, (1576, 1536), (1536, 1))
    assert_size_stride(view_496, (1576, 1536), (1536, 1))
    assert_size_stride(mul_220, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(clone_184, (8, 384), (384, 1))
    assert_size_stride(permute_233, (1000, 384), (384, 1))
    assert_size_stride(div_24, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_237, (384, 1536), (1536, 1))
    assert_size_stride(permute_241, (1536, 384), (384, 1))
    assert_size_stride(div_25, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_245, (384, 384), (384, 1))
    assert_size_stride(permute_250, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_251, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_24, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_252, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_253, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_258, (384, 384), (384, 1))
    assert_size_stride(permute_263, (768, 384), (384, 1))
    assert_size_stride(permute_265, (384, 384), (384, 1))
    assert_size_stride(div_27, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_269, (24, 96), (96, 1))
    assert_size_stride(permute_273, (96, 24), (24, 1))
    assert_size_stride(div_28, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_277, (24, 24), (24, 1))
    assert_size_stride(permute_282, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_283, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_25, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_284, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_285, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_290, (24, 24), (24, 1))
    assert_size_stride(permute_295, (48, 24), (24, 1))
    assert_size_stride(div_29, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_297, (384, 1536), (1536, 1))
    assert_size_stride(permute_301, (1536, 384), (384, 1))
    assert_size_stride(div_30, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_305, (384, 384), (384, 1))
    assert_size_stride(permute_310, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_311, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_26, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_312, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_313, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_318, (384, 384), (384, 1))
    assert_size_stride(permute_323, (768, 384), (384, 1))
    assert_size_stride(permute_325, (384, 384), (384, 1))
    assert_size_stride(permute_329, (24, 96), (96, 1))
    assert_size_stride(permute_333, (96, 24), (24, 1))
    assert_size_stride(div_33, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_337, (24, 24), (24, 1))
    assert_size_stride(permute_342, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_343, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_27, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_344, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_345, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_350, (24, 24), (24, 1))
    assert_size_stride(permute_355, (48, 24), (24, 1))
    assert_size_stride(div_34, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_357, (384, 1536), (1536, 1))
    assert_size_stride(permute_361, (1536, 384), (384, 1))
    assert_size_stride(div_35, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_365, (384, 384), (384, 1))
    assert_size_stride(permute_370, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_371, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_28, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_372, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_373, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_378, (384, 384), (384, 1))
    assert_size_stride(permute_383, (768, 384), (384, 1))
    assert_size_stride(permute_385, (384, 384), (384, 1))
    assert_size_stride(permute_389, (24, 96), (96, 1))
    assert_size_stride(permute_393, (96, 24), (24, 1))
    assert_size_stride(div_38, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_397, (24, 24), (24, 1))
    assert_size_stride(permute_402, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_403, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_29, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_404, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_405, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_410, (24, 24), (24, 1))
    assert_size_stride(permute_415, (48, 24), (24, 1))
    assert_size_stride(div_39, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_417, (384, 1536), (1536, 1))
    assert_size_stride(permute_421, (1536, 384), (384, 1))
    assert_size_stride(div_40, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_425, (384, 384), (384, 1))
    assert_size_stride(permute_430, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_431, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_30, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_432, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_433, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_438, (384, 384), (384, 1))
    assert_size_stride(permute_443, (768, 384), (384, 1))
    assert_size_stride(permute_445, (384, 384), (384, 1))
    assert_size_stride(permute_449, (24, 96), (96, 1))
    assert_size_stride(permute_453, (96, 24), (24, 1))
    assert_size_stride(div_43, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_457, (24, 24), (24, 1))
    assert_size_stride(permute_462, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_463, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_31, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_464, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_465, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_470, (24, 24), (24, 1))
    assert_size_stride(permute_475, (48, 24), (24, 1))
    assert_size_stride(div_44, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_477, (384, 1536), (1536, 1))
    assert_size_stride(permute_481, (1536, 384), (384, 1))
    assert_size_stride(div_45, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_485, (384, 384), (384, 1))
    assert_size_stride(permute_490, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_491, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_32, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_492, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_493, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_498, (384, 384), (384, 1))
    assert_size_stride(permute_503, (768, 384), (384, 1))
    assert_size_stride(permute_505, (384, 384), (384, 1))
    assert_size_stride(permute_509, (24, 96), (96, 1))
    assert_size_stride(permute_513, (96, 24), (24, 1))
    assert_size_stride(div_48, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_517, (24, 24), (24, 1))
    assert_size_stride(permute_522, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_523, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_33, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_524, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_525, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_530, (24, 24), (24, 1))
    assert_size_stride(permute_535, (48, 24), (24, 1))
    assert_size_stride(div_49, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_537, (384, 1536), (1536, 1))
    assert_size_stride(permute_541, (1536, 384), (384, 1))
    assert_size_stride(div_50, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_545, (384, 384), (384, 1))
    assert_size_stride(permute_550, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_551, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_34, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_552, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_553, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_558, (384, 384), (384, 1))
    assert_size_stride(permute_563, (768, 384), (384, 1))
    assert_size_stride(permute_565, (384, 384), (384, 1))
    assert_size_stride(permute_569, (24, 96), (96, 1))
    assert_size_stride(permute_573, (96, 24), (24, 1))
    assert_size_stride(div_53, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_577, (24, 24), (24, 1))
    assert_size_stride(permute_582, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_583, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_35, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_584, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_585, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_590, (24, 24), (24, 1))
    assert_size_stride(permute_595, (48, 24), (24, 1))
    assert_size_stride(div_54, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_597, (384, 1536), (1536, 1))
    assert_size_stride(permute_601, (1536, 384), (384, 1))
    assert_size_stride(div_55, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_605, (384, 384), (384, 1))
    assert_size_stride(permute_610, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_611, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_36, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_612, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_613, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_618, (384, 384), (384, 1))
    assert_size_stride(permute_623, (768, 384), (384, 1))
    assert_size_stride(permute_625, (384, 384), (384, 1))
    assert_size_stride(permute_629, (24, 96), (96, 1))
    assert_size_stride(permute_633, (96, 24), (24, 1))
    assert_size_stride(div_58, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_637, (24, 24), (24, 1))
    assert_size_stride(permute_642, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_643, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_37, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_644, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_645, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_650, (24, 24), (24, 1))
    assert_size_stride(permute_655, (48, 24), (24, 1))
    assert_size_stride(div_59, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_657, (384, 1536), (1536, 1))
    assert_size_stride(permute_661, (1536, 384), (384, 1))
    assert_size_stride(div_60, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_665, (384, 384), (384, 1))
    assert_size_stride(permute_670, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_671, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_38, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_672, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_673, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_678, (384, 384), (384, 1))
    assert_size_stride(permute_683, (768, 384), (384, 1))
    assert_size_stride(permute_685, (384, 384), (384, 1))
    assert_size_stride(permute_689, (24, 96), (96, 1))
    assert_size_stride(permute_693, (96, 24), (24, 1))
    assert_size_stride(div_63, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_697, (24, 24), (24, 1))
    assert_size_stride(permute_702, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_703, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_39, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_704, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_705, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_710, (24, 24), (24, 1))
    assert_size_stride(permute_715, (48, 24), (24, 1))
    assert_size_stride(div_64, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_717, (384, 1536), (1536, 1))
    assert_size_stride(permute_721, (1536, 384), (384, 1))
    assert_size_stride(div_65, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_725, (384, 384), (384, 1))
    assert_size_stride(permute_730, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_731, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_40, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_732, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_733, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_738, (384, 384), (384, 1))
    assert_size_stride(permute_743, (768, 384), (384, 1))
    assert_size_stride(permute_745, (384, 384), (384, 1))
    assert_size_stride(permute_749, (24, 96), (96, 1))
    assert_size_stride(permute_753, (96, 24), (24, 1))
    assert_size_stride(div_68, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_757, (24, 24), (24, 1))
    assert_size_stride(permute_762, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_763, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_41, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_764, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_765, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_770, (24, 24), (24, 1))
    assert_size_stride(permute_775, (48, 24), (24, 1))
    assert_size_stride(div_69, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_777, (384, 1536), (1536, 1))
    assert_size_stride(permute_781, (1536, 384), (384, 1))
    assert_size_stride(div_70, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_785, (384, 384), (384, 1))
    assert_size_stride(permute_790, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_791, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_42, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_792, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_793, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_798, (384, 384), (384, 1))
    assert_size_stride(permute_803, (768, 384), (384, 1))
    assert_size_stride(permute_805, (384, 384), (384, 1))
    assert_size_stride(permute_809, (24, 96), (96, 1))
    assert_size_stride(permute_813, (96, 24), (24, 1))
    assert_size_stride(div_73, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_817, (24, 24), (24, 1))
    assert_size_stride(permute_822, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_823, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_43, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_824, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_825, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_830, (24, 24), (24, 1))
    assert_size_stride(permute_835, (48, 24), (24, 1))
    assert_size_stride(div_74, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_837, (384, 1536), (1536, 1))
    assert_size_stride(permute_841, (1536, 384), (384, 1))
    assert_size_stride(div_75, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_845, (384, 384), (384, 1))
    assert_size_stride(permute_850, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_851, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_44, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_852, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_853, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_858, (384, 384), (384, 1))
    assert_size_stride(permute_863, (768, 384), (384, 1))
    assert_size_stride(permute_865, (384, 384), (384, 1))
    assert_size_stride(permute_869, (24, 96), (96, 1))
    assert_size_stride(permute_873, (96, 24), (24, 1))
    assert_size_stride(div_78, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_877, (24, 24), (24, 1))
    assert_size_stride(permute_882, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_883, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_45, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_884, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_885, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_890, (24, 24), (24, 1))
    assert_size_stride(permute_895, (48, 24), (24, 1))
    assert_size_stride(div_79, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_897, (384, 1536), (1536, 1))
    assert_size_stride(permute_901, (1536, 384), (384, 1))
    assert_size_stride(div_80, (8, 197, 1), (197, 1, 1))
    assert_size_stride(permute_905, (384, 384), (384, 1))
    assert_size_stride(permute_910, (48, 197, 197), (38809, 1, 197))
    assert_size_stride(permute_911, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(alias_46, (8, 6, 197, 197), (232854, 1, 1182, 6))
    assert_size_stride(permute_912, (48, 64, 197), (12608, 1, 64))
    assert_size_stride(permute_913, (48, 197, 64), (12608, 1, 197))
    assert_size_stride(permute_918, (384, 384), (384, 1))
    assert_size_stride(permute_923, (768, 384), (384, 1))
    assert_size_stride(permute_925, (384, 384), (384, 1))
    assert_size_stride(permute_929, (24, 96), (96, 1))
    assert_size_stride(permute_933, (96, 24), (24, 1))
    assert_size_stride(div_83, (1568, 16, 1), (16, 1, 1))
    assert_size_stride(permute_937, (24, 24), (24, 1))
    assert_size_stride(permute_942, (6272, 16, 16), (256, 1, 16))
    assert_size_stride(permute_943, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(alias_47, (1568, 4, 16, 16), (1024, 1, 64, 4))
    assert_size_stride(permute_944, (6272, 6, 16), (96, 1, 6))
    assert_size_stride(permute_945, (6272, 16, 6), (96, 1, 16))
    assert_size_stride(permute_950, (24, 24), (24, 1))
    assert_size_stride(permute_955, (48, 24), (24, 1))
    assert_size_stride(permute_957, (384, 384), (384, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_233, out=buf0)
    del permute_233
    buf1 = empty((1000, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), clone_184, out=buf1)
    del clone_184
    buf2 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((8, 197, 1), (197, 1, 1576), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((8, 197, 1), (197, 1, 1576), device='cpu', dtype=torch.float32)
    buf5 = empty((8, 197, 384), device='cpu', dtype=torch.float32)
    buf6 = empty((384, ), device='cpu', dtype=torch.float32)
    buf7 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_select_backward_sum_0(c_void_p(tangents_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(primals_348.data_ptr()), c_void_p(mul_220.data_ptr()), c_void_p(div_24.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()))
    del buf0
    del div_24
    del mul_220
    del primals_348
    del tangents_1
    buf8 = empty((1576, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf5, (1576, 384), (384, 1), 0), permute_237, out=buf8)
    del permute_237
    buf9 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf5, (384, 1576), (1, 384), 0), view_496, out=buf9)
    del view_496
    buf10 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf11 = reinterpret_tensor(buf8, (8, 197, 1536), (302592, 1536, 1), 0); del buf8  # reuse
    cpp_fused_gelu_gelu_backward_sum_1(c_void_p(buf11.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(addmm_83.data_ptr()), c_void_p(buf10.data_ptr()))
    del addmm_83
    buf12 = empty((1576, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf11, (1576, 1536), (1536, 1), 0), permute_241, out=buf12)
    del permute_241
    buf13 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf11, (1536, 1576), (1, 1536), 0), view_494, out=buf13)
    del view_494
    buf14 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf15 = buf4; del buf4  # reuse
    buf16 = buf3; del buf3  # reuse
    buf17 = empty((384, ), device='cpu', dtype=torch.float32)
    buf18 = empty((384, ), device='cpu', dtype=torch.float32)
    buf19 = reinterpret_tensor(buf12, (8, 197, 384), (75648, 384, 1), 0); del buf12  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_2(c_void_p(buf19.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(primals_342.data_ptr()), c_void_p(mul_215.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(div_25.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(buf17.data_ptr()), c_void_p(buf18.data_ptr()))
    del div_25
    del mul_215
    del primals_342
    buf20 = reinterpret_tensor(buf5, (1576, 384), (384, 1), 0); del buf5  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf19, (1576, 384), (384, 1), 0), permute_245, out=buf20)
    del permute_245
    buf21 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf19, (384, 1576), (1, 384), 0), view_492, out=buf21)
    del view_492
    buf22 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf23 = empty((8, 6, 197, 64), device='cpu', dtype=torch.float32)
    cpp_fused_clone_sum_3(c_void_p(buf19.data_ptr()), c_void_p(buf20.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf23.data_ptr()))
    buf24 = reinterpret_tensor(buf20, (48, 197, 64), (12608, 64, 1), 0); del buf20  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_250, reinterpret_tensor(buf23, (48, 197, 64), (12608, 64, 1), 0), out=buf24)
    del permute_250
    buf25 = empty((48, 197, 197), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf23, (48, 197, 64), (12608, 64, 1), 0), permute_251, out=buf25)
    del permute_251
    buf26 = empty_strided((8, 6, 197, 1), (1182, 197, 1, 9456), device='cpu', dtype=torch.float32)
    buf27 = reinterpret_tensor(buf25, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf25  # reuse
    cpp_fused__softmax_backward_data_mul_4(c_void_p(buf27.data_ptr()), c_void_p(alias_24.data_ptr()), c_void_p(buf26.data_ptr()))
    del alias_24
    buf28 = reinterpret_tensor(buf23, (48, 64, 197), (12608, 197, 1), 0); del buf23  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_252, reinterpret_tensor(buf27, (48, 197, 197), (38809, 197, 1), 0), out=buf28)
    del permute_252
    buf29 = empty((48, 197, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf27, (48, 197, 197), (38809, 197, 1), 0), permute_253, out=buf29)
    del permute_253
    buf30 = empty((1576, 384), device='cpu', dtype=torch.float32)
    cpp_fused_view_5(c_void_p(buf24.data_ptr()), c_void_p(buf30.data_ptr()))
    buf31 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf30, (384, 1576), (1, 384), 0), view_479, out=buf31)
    buf32 = reinterpret_tensor(buf24, (1576, 384), (384, 1), 0); del buf24  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf30, permute_258, out=buf32)
    del permute_258
    buf33 = empty((8, 197, 2, 6, 64), device='cpu', dtype=torch.float32)
    cpp_fused_clone_6(c_void_p(buf29.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(buf33.data_ptr()))
    buf34 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf33, (768, 1576), (1, 768), 0), view_479, out=buf34)
    del view_479
    buf35 = reinterpret_tensor(buf29, (1576, 384), (384, 1), 0); del buf29  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf33, (1576, 768), (768, 1), 0), permute_263, out=buf35)
    del permute_263
    buf36 = buf16; del buf16  # reuse
    buf37 = buf15; del buf15  # reuse
    buf38 = empty((384, ), device='cpu', dtype=torch.float32)
    buf39 = empty((384, ), device='cpu', dtype=torch.float32)
    buf40 = buf19; del buf19  # reuse
    buf41 = empty((1568, 384), device='cpu', dtype=torch.float32)
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_7(c_void_p(buf40.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(primals_336.data_ptr()), c_void_p(cat_12.data_ptr()), c_void_p(getitem_167.data_ptr()), c_void_p(rsqrt_60.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf39.data_ptr()), c_void_p(buf41.data_ptr()))
    del cat_12
    del getitem_167
    del primals_336
    del rsqrt_60
    buf42 = empty((1568, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf41, permute_265, out=buf42)
    del permute_265
    buf43 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf41, (384, 1568), (1, 384), 0), view_477, out=buf43)
    del view_477
    buf44 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf45 = empty_strided((1568, 16, 1), (16, 1, 25088), device='cpu', dtype=torch.float32)
    buf46 = empty_strided((1568, 16, 1), (16, 1, 25088), device='cpu', dtype=torch.float32)
    buf47 = empty((1568, 16, 24), device='cpu', dtype=torch.float32)
    buf48 = empty((24, ), device='cpu', dtype=torch.float32)
    buf49 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_8(c_void_p(buf41.data_ptr()), c_void_p(buf42.data_ptr()), c_void_p(primals_332.data_ptr()), c_void_p(mul_210.data_ptr()), c_void_p(div_27.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(buf49.data_ptr()))
    del div_27
    del mul_210
    del primals_332
    buf50 = empty((25088, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf47, (25088, 24), (24, 1), 0), permute_269, out=buf50)
    del permute_269
    buf51 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf47, (24, 25088), (1, 24), 0), view_474, out=buf51)
    del view_474
    buf52 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf53 = reinterpret_tensor(buf50, (1568, 16, 96), (1536, 96, 1), 0); del buf50  # reuse
    cpp_fused_gelu_gelu_backward_sum_9(c_void_p(buf53.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(addmm_79.data_ptr()), c_void_p(buf52.data_ptr()))
    del addmm_79
    buf54 = reinterpret_tensor(buf42, (25088, 24), (24, 1), 0); del buf42  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf53, (25088, 96), (96, 1), 0), permute_273, out=buf54)
    del permute_273
    buf55 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf53, (96, 25088), (1, 96), 0), view_472, out=buf55)
    del view_472
    buf56 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf57 = buf46; del buf46  # reuse
    buf58 = buf45; del buf45  # reuse
    buf59 = empty((24, ), device='cpu', dtype=torch.float32)
    buf60 = empty((24, ), device='cpu', dtype=torch.float32)
    buf61 = buf47; del buf47  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_10(c_void_p(buf61.data_ptr()), c_void_p(buf53.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(primals_326.data_ptr()), c_void_p(mul_205.data_ptr()), c_void_p(div_28.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf58.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf60.data_ptr()))
    del div_28
    del mul_205
    del primals_326
    buf62 = buf54; del buf54  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf61, (25088, 24), (24, 1), 0), permute_277, out=buf62)
    del permute_277
    buf63 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf61, (24, 25088), (1, 24), 0), view_470, out=buf63)
    del view_470
    buf64 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf65 = reinterpret_tensor(buf41, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf41  # reuse
    cpp_fused_clone_sum_11(c_void_p(buf61.data_ptr()), c_void_p(buf62.data_ptr()), c_void_p(buf64.data_ptr()), c_void_p(buf65.data_ptr()))
    buf66 = reinterpret_tensor(buf62, (6272, 16, 6), (96, 6, 1), 0); del buf62  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_282, reinterpret_tensor(buf65, (6272, 16, 6), (96, 6, 1), 0), out=buf66)
    del permute_282
    buf67 = empty((6272, 16, 16), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf65, (6272, 16, 6), (96, 6, 1), 0), permute_283, out=buf67)
    del permute_283
    buf68 = empty_strided((1568, 4, 16, 1), (64, 16, 1, 100352), device='cpu', dtype=torch.float32)
    buf69 = reinterpret_tensor(buf67, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf67  # reuse
    cpp_fused__softmax_backward_data_mul_12(c_void_p(buf69.data_ptr()), c_void_p(alias_25.data_ptr()), c_void_p(buf68.data_ptr()))
    del alias_25
    buf70 = reinterpret_tensor(buf65, (6272, 6, 16), (96, 16, 1), 0); del buf65  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_284, reinterpret_tensor(buf69, (6272, 16, 16), (256, 16, 1), 0), out=buf70)
    del permute_284
    buf71 = empty((6272, 16, 6), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf69, (6272, 16, 16), (256, 16, 1), 0), permute_285, out=buf71)
    del permute_285
    buf72 = empty((25088, 24), device='cpu', dtype=torch.float32)
    cpp_fused_view_13(c_void_p(buf66.data_ptr()), c_void_p(buf72.data_ptr()))
    buf73 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf72, (24, 25088), (1, 24), 0), view_457, out=buf73)
    buf74 = reinterpret_tensor(buf66, (25088, 24), (24, 1), 0); del buf66  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf72, permute_290, out=buf74)
    del permute_290
    buf75 = empty((1568, 16, 2, 4, 6), device='cpu', dtype=torch.float32)
    cpp_fused_clone_14(c_void_p(buf71.data_ptr()), c_void_p(buf70.data_ptr()), c_void_p(buf75.data_ptr()))
    buf76 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf75, (48, 25088), (1, 48), 0), view_457, out=buf76)
    del view_457
    buf77 = reinterpret_tensor(buf71, (25088, 24), (24, 1), 0); del buf71  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf75, (25088, 48), (48, 1), 0), permute_295, out=buf77)
    del permute_295
    buf82 = reinterpret_tensor(buf35, (8, 197, 384), (75648, 384, 1), 0); del buf35  # reuse
    cpp_fused_add_select_backward_slice_backward_15(c_void_p(buf40.data_ptr()), c_void_p(buf82.data_ptr()))
    buf83 = reinterpret_tensor(buf11, (1576, 1536), (1536, 1), 0); del buf11  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf82, (1576, 384), (384, 1), 0), permute_297, out=buf83)
    del permute_297
    buf86 = reinterpret_tensor(buf83, (8, 197, 1536), (302592, 1536, 1), 0); del buf83  # reuse
    cpp_fused_gelu_gelu_backward_16(c_void_p(buf86.data_ptr()), c_void_p(addmm_76.data_ptr()))
    del addmm_76
    buf87 = reinterpret_tensor(buf40, (1576, 384), (384, 1), 0); del buf40  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf86, (1576, 1536), (1536, 1), 0), permute_301, out=buf87)
    del permute_301
    buf90 = buf37; del buf37  # reuse
    buf91 = buf36; del buf36  # reuse
    buf94 = reinterpret_tensor(buf32, (8, 197, 384), (75648, 384, 1), 0); del buf32  # reuse
    cpp_fused_add_native_layer_norm_backward_17(c_void_p(buf87.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(mul_197.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(div_30.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf94.data_ptr()))
    del div_30
    del primals_314
    buf95 = reinterpret_tensor(buf28, (1576, 384), (384, 1), 0); del buf28  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf94, (1576, 384), (384, 1), 0), permute_305, out=buf95)
    del permute_305
    buf98 = reinterpret_tensor(buf30, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf30  # reuse
    cpp_fused_clone_18(c_void_p(buf95.data_ptr()), c_void_p(buf98.data_ptr()))
    buf99 = reinterpret_tensor(buf95, (48, 197, 64), (12608, 64, 1), 0); del buf95  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_310, reinterpret_tensor(buf98, (48, 197, 64), (12608, 64, 1), 0), out=buf99)
    del permute_310
    buf105 = empty((1576, 384), device='cpu', dtype=torch.float32)
    cpp_fused_view_19(c_void_p(buf99.data_ptr()), c_void_p(buf105.data_ptr()))
    buf107 = reinterpret_tensor(buf99, (1576, 384), (384, 1), 0); del buf99  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf105, permute_318, out=buf107)
    del permute_318
    buf100 = reinterpret_tensor(buf27, (48, 197, 197), (38809, 197, 1), 0); del buf27  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf98, (48, 197, 64), (12608, 64, 1), 0), permute_311, out=buf100)
    del permute_311
    buf101 = buf26; del buf26  # reuse
    buf102 = reinterpret_tensor(buf100, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf100  # reuse
    cpp_fused__softmax_backward_data_mul_20(c_void_p(buf102.data_ptr()), c_void_p(alias_26.data_ptr()), c_void_p(buf101.data_ptr()))
    del alias_26
    buf103 = reinterpret_tensor(buf98, (48, 64, 197), (12608, 197, 1), 0); del buf98  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_312, reinterpret_tensor(buf102, (48, 197, 197), (38809, 197, 1), 0), out=buf103)
    del permute_312
    buf104 = empty((48, 197, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf102, (48, 197, 197), (38809, 197, 1), 0), permute_313, out=buf104)
    del permute_313
    buf108 = buf33; del buf33  # reuse
    cpp_fused_clone_21(c_void_p(buf104.data_ptr()), c_void_p(buf103.data_ptr()), c_void_p(buf108.data_ptr()))
    buf110 = reinterpret_tensor(buf104, (1576, 384), (384, 1), 0); del buf104  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf108, (1576, 768), (768, 1), 0), permute_323, out=buf110)
    del permute_323
    buf111 = buf91; del buf91  # reuse
    buf112 = buf90; del buf90  # reuse
    buf115 = reinterpret_tensor(buf103, (8, 197, 384), (75648, 384, 1), 0); del buf103  # reuse
    buf116 = reinterpret_tensor(buf70, (1568, 384), (384, 1), 0); del buf70  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_22(c_void_p(buf107.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(primals_308.data_ptr()), c_void_p(cat_11.data_ptr()), c_void_p(getitem_153.data_ptr()), c_void_p(rsqrt_55.data_ptr()), c_void_p(buf94.data_ptr()), c_void_p(buf111.data_ptr()), c_void_p(buf112.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(buf116.data_ptr()))
    del primals_308
    buf117 = reinterpret_tensor(buf72, (1568, 384), (384, 1), 0); del buf72  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf116, permute_325, out=buf117)
    del permute_325
    buf78 = buf58; del buf58  # reuse
    buf79 = buf57; del buf57  # reuse
    buf120 = empty_strided((1568, 16, 1), (16, 1, 25088), device='cpu', dtype=torch.float32)
    buf121 = empty_strided((1568, 16, 1), (16, 1, 25088), device='cpu', dtype=torch.float32)
    buf80 = empty((24, ), device='cpu', dtype=torch.float32)
    buf81 = empty((24, ), device='cpu', dtype=torch.float32)
    buf122 = empty((24, ), device='cpu', dtype=torch.float32)
    buf123 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_23(c_void_p(buf74.data_ptr()), c_void_p(buf77.data_ptr()), c_void_p(primals_320.data_ptr()), c_void_p(mul_192.data_ptr()), c_void_p(buf117.data_ptr()), c_void_p(primals_304.data_ptr()), c_void_p(buf78.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(buf80.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf122.data_ptr()), c_void_p(buf123.data_ptr()))
    buf84 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf82, (384, 1576), (1, 384), 0), view_455, out=buf84)
    del view_455
    buf85 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_24(c_void_p(buf82.data_ptr()), c_void_p(buf85.data_ptr()))
    buf88 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf86, (1536, 1576), (1, 1536), 0), view_453, out=buf88)
    del view_453
    buf89 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf92 = empty((384, ), device='cpu', dtype=torch.float32)
    buf93 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_25(c_void_p(buf86.data_ptr()), c_void_p(buf87.data_ptr()), c_void_p(mul_197.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf93.data_ptr()))
    del mul_197
    buf96 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf94, (384, 1576), (1, 384), 0), view_451, out=buf96)
    del view_451
    buf97 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_26(c_void_p(buf94.data_ptr()), c_void_p(buf97.data_ptr()))
    buf106 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf105, (384, 1576), (1, 384), 0), view_438, out=buf106)
    buf109 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf108, (768, 1576), (1, 768), 0), view_438, out=buf109)
    del view_438
    buf113 = empty((384, ), device='cpu', dtype=torch.float32)
    buf114 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_27(c_void_p(buf107.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(cat_11.data_ptr()), c_void_p(getitem_153.data_ptr()), c_void_p(rsqrt_55.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(buf114.data_ptr()))
    del cat_11
    del getitem_153
    del rsqrt_55
    buf118 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf116, (384, 1568), (1, 384), 0), view_436, out=buf118)
    del view_436
    buf119 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf124 = reinterpret_tensor(buf117, (1568, 16, 24), (384, 24, 1), 0); del buf117  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_28(c_void_p(buf124.data_ptr()), c_void_p(buf116.data_ptr()), c_void_p(buf61.data_ptr()), c_void_p(div_29.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf77.data_ptr()), c_void_p(primals_320.data_ptr()), c_void_p(buf78.data_ptr()), c_void_p(mul_192.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(primals_304.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(buf119.data_ptr()))
    del div_29
    del mul_192
    del primals_304
    del primals_320
    buf125 = reinterpret_tensor(buf53, (25088, 96), (96, 1), 0); del buf53  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf124, (25088, 24), (24, 1), 0), permute_329, out=buf125)
    del permute_329
    buf126 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf124, (24, 25088), (1, 24), 0), view_433, out=buf126)
    del view_433
    buf127 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf128 = reinterpret_tensor(buf125, (1568, 16, 96), (1536, 96, 1), 0); del buf125  # reuse
    cpp_fused_gelu_gelu_backward_sum_29(c_void_p(buf128.data_ptr()), c_void_p(buf124.data_ptr()), c_void_p(addmm_72.data_ptr()), c_void_p(buf127.data_ptr()))
    del addmm_72
    buf129 = buf77; del buf77  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf128, (25088, 96), (96, 1), 0), permute_333, out=buf129)
    del permute_333
    buf130 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf128, (96, 25088), (1, 96), 0), view_431, out=buf130)
    del view_431
    buf131 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf132 = buf79; del buf79  # reuse
    buf133 = buf78; del buf78  # reuse
    buf134 = empty((24, ), device='cpu', dtype=torch.float32)
    buf135 = empty((24, ), device='cpu', dtype=torch.float32)
    buf136 = buf124; del buf124  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_30(c_void_p(buf136.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(buf129.data_ptr()), c_void_p(primals_298.data_ptr()), c_void_p(mul_187.data_ptr()), c_void_p(div_33.data_ptr()), c_void_p(buf131.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(buf133.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(buf135.data_ptr()))
    del div_33
    del mul_187
    del primals_298
    buf137 = buf129; del buf129  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf136, (25088, 24), (24, 1), 0), permute_337, out=buf137)
    del permute_337
    buf138 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf136, (24, 25088), (1, 24), 0), view_429, out=buf138)
    del view_429
    buf139 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf140 = reinterpret_tensor(buf74, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf74  # reuse
    cpp_fused_clone_sum_31(c_void_p(buf136.data_ptr()), c_void_p(buf137.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf140.data_ptr()))
    buf141 = reinterpret_tensor(buf137, (6272, 16, 6), (96, 6, 1), 0); del buf137  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_342, reinterpret_tensor(buf140, (6272, 16, 6), (96, 6, 1), 0), out=buf141)
    del permute_342
    buf142 = reinterpret_tensor(buf69, (6272, 16, 16), (256, 16, 1), 0); del buf69  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf140, (6272, 16, 6), (96, 6, 1), 0), permute_343, out=buf142)
    del permute_343
    buf143 = buf68; del buf68  # reuse
    buf144 = reinterpret_tensor(buf142, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf142  # reuse
    cpp_fused__softmax_backward_data_mul_32(c_void_p(buf144.data_ptr()), c_void_p(alias_27.data_ptr()), c_void_p(buf143.data_ptr()))
    del alias_27
    buf145 = reinterpret_tensor(buf140, (6272, 6, 16), (96, 16, 1), 0); del buf140  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_344, reinterpret_tensor(buf144, (6272, 16, 16), (256, 16, 1), 0), out=buf145)
    del permute_344
    buf146 = reinterpret_tensor(buf61, (6272, 16, 6), (96, 6, 1), 0); del buf61  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf144, (6272, 16, 16), (256, 16, 1), 0), permute_345, out=buf146)
    del permute_345
    buf147 = reinterpret_tensor(buf116, (25088, 24), (24, 1), 0); del buf116  # reuse
    cpp_fused_view_33(c_void_p(buf141.data_ptr()), c_void_p(buf147.data_ptr()))
    buf148 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf147, (24, 25088), (1, 24), 0), view_416, out=buf148)
    buf149 = reinterpret_tensor(buf141, (25088, 24), (24, 1), 0); del buf141  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf147, permute_350, out=buf149)
    del permute_350
    buf150 = buf75; del buf75  # reuse
    cpp_fused_clone_34(c_void_p(buf146.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(buf150.data_ptr()))
    buf151 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf150, (48, 25088), (1, 48), 0), view_416, out=buf151)
    del view_416
    buf152 = reinterpret_tensor(buf146, (25088, 24), (24, 1), 0); del buf146  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf150, (25088, 48), (48, 1), 0), permute_355, out=buf152)
    del permute_355
    buf157 = reinterpret_tensor(buf110, (8, 197, 384), (75648, 384, 1), 0); del buf110  # reuse
    cpp_fused_add_select_backward_slice_backward_35(c_void_p(buf115.data_ptr()), c_void_p(buf157.data_ptr()))
    buf158 = reinterpret_tensor(buf86, (1576, 1536), (1536, 1), 0); del buf86  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf157, (1576, 384), (384, 1), 0), permute_357, out=buf158)
    del permute_357
    buf161 = reinterpret_tensor(buf158, (8, 197, 1536), (302592, 1536, 1), 0); del buf158  # reuse
    cpp_fused_gelu_gelu_backward_36(c_void_p(buf161.data_ptr()), c_void_p(addmm_69.data_ptr()))
    del addmm_69
    buf162 = reinterpret_tensor(buf115, (1576, 384), (384, 1), 0); del buf115  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf161, (1576, 1536), (1536, 1), 0), permute_361, out=buf162)
    del permute_361
    buf165 = buf112; del buf112  # reuse
    buf166 = buf111; del buf111  # reuse
    buf169 = reinterpret_tensor(buf107, (8, 197, 384), (75648, 384, 1), 0); del buf107  # reuse
    cpp_fused_add_native_layer_norm_backward_37(c_void_p(buf162.data_ptr()), c_void_p(primals_286.data_ptr()), c_void_p(mul_179.data_ptr()), c_void_p(buf157.data_ptr()), c_void_p(div_35.data_ptr()), c_void_p(buf165.data_ptr()), c_void_p(buf166.data_ptr()), c_void_p(buf169.data_ptr()))
    del div_35
    del primals_286
    buf170 = buf105; del buf105  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf169, (1576, 384), (384, 1), 0), permute_365, out=buf170)
    del permute_365
    buf173 = reinterpret_tensor(buf94, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf94  # reuse
    cpp_fused_clone_38(c_void_p(buf170.data_ptr()), c_void_p(buf173.data_ptr()))
    buf174 = reinterpret_tensor(buf170, (48, 197, 64), (12608, 64, 1), 0); del buf170  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_370, reinterpret_tensor(buf173, (48, 197, 64), (12608, 64, 1), 0), out=buf174)
    del permute_370
    buf180 = buf87; del buf87  # reuse
    cpp_fused_view_39(c_void_p(buf174.data_ptr()), c_void_p(buf180.data_ptr()))
    buf182 = reinterpret_tensor(buf174, (1576, 384), (384, 1), 0); del buf174  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf180, permute_378, out=buf182)
    del permute_378
    buf175 = reinterpret_tensor(buf102, (48, 197, 197), (38809, 197, 1), 0); del buf102  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf173, (48, 197, 64), (12608, 64, 1), 0), permute_371, out=buf175)
    del permute_371
    buf176 = buf101; del buf101  # reuse
    buf177 = reinterpret_tensor(buf175, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf175  # reuse
    cpp_fused__softmax_backward_data_mul_40(c_void_p(buf177.data_ptr()), c_void_p(alias_28.data_ptr()), c_void_p(buf176.data_ptr()))
    del alias_28
    buf178 = reinterpret_tensor(buf173, (48, 64, 197), (12608, 197, 1), 0); del buf173  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_372, reinterpret_tensor(buf177, (48, 197, 197), (38809, 197, 1), 0), out=buf178)
    del permute_372
    buf179 = reinterpret_tensor(buf82, (48, 197, 64), (12608, 64, 1), 0); del buf82  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf177, (48, 197, 197), (38809, 197, 1), 0), permute_373, out=buf179)
    del permute_373
    buf183 = buf108; del buf108  # reuse
    cpp_fused_clone_41(c_void_p(buf179.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf183.data_ptr()))
    buf185 = reinterpret_tensor(buf179, (1576, 384), (384, 1), 0); del buf179  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf183, (1576, 768), (768, 1), 0), permute_383, out=buf185)
    del permute_383
    buf186 = buf166; del buf166  # reuse
    buf187 = buf165; del buf165  # reuse
    buf190 = reinterpret_tensor(buf178, (8, 197, 384), (75648, 384, 1), 0); del buf178  # reuse
    buf191 = reinterpret_tensor(buf145, (1568, 384), (384, 1), 0); del buf145  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_42(c_void_p(buf182.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(primals_280.data_ptr()), c_void_p(cat_10.data_ptr()), c_void_p(getitem_139.data_ptr()), c_void_p(rsqrt_50.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf187.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(buf191.data_ptr()))
    del primals_280
    buf192 = reinterpret_tensor(buf147, (1568, 384), (384, 1), 0); del buf147  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf191, permute_385, out=buf192)
    del permute_385
    buf153 = buf133; del buf133  # reuse
    buf154 = buf132; del buf132  # reuse
    buf195 = buf121; del buf121  # reuse
    buf196 = buf120; del buf120  # reuse
    buf155 = empty((24, ), device='cpu', dtype=torch.float32)
    buf156 = empty((24, ), device='cpu', dtype=torch.float32)
    buf197 = empty((24, ), device='cpu', dtype=torch.float32)
    buf198 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_43(c_void_p(buf149.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(primals_292.data_ptr()), c_void_p(mul_174.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(primals_276.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf195.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf155.data_ptr()), c_void_p(buf156.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(buf198.data_ptr()))
    buf159 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf157, (384, 1576), (1, 384), 0), view_414, out=buf159)
    del view_414
    buf160 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_44(c_void_p(buf157.data_ptr()), c_void_p(buf160.data_ptr()))
    buf163 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf161, (1536, 1576), (1, 1536), 0), view_412, out=buf163)
    del view_412
    buf164 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf167 = empty((384, ), device='cpu', dtype=torch.float32)
    buf168 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_45(c_void_p(buf161.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(mul_179.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf167.data_ptr()), c_void_p(buf168.data_ptr()))
    del mul_179
    buf171 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf169, (384, 1576), (1, 384), 0), view_410, out=buf171)
    del view_410
    buf172 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_46(c_void_p(buf169.data_ptr()), c_void_p(buf172.data_ptr()))
    buf181 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf180, (384, 1576), (1, 384), 0), view_397, out=buf181)
    buf184 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf183, (768, 1576), (1, 768), 0), view_397, out=buf184)
    del view_397
    buf188 = empty((384, ), device='cpu', dtype=torch.float32)
    buf189 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_47(c_void_p(buf182.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(cat_10.data_ptr()), c_void_p(getitem_139.data_ptr()), c_void_p(rsqrt_50.data_ptr()), c_void_p(buf188.data_ptr()), c_void_p(buf189.data_ptr()))
    del cat_10
    del getitem_139
    del rsqrt_50
    buf193 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf191, (384, 1568), (1, 384), 0), view_395, out=buf193)
    del view_395
    buf194 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf199 = buf136; del buf136  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_48(c_void_p(buf199.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(div_34.data_ptr()), c_void_p(buf149.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(primals_292.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(mul_174.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(primals_276.data_ptr()), c_void_p(buf195.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf194.data_ptr()))
    del div_34
    del mul_174
    del primals_276
    del primals_292
    buf200 = reinterpret_tensor(buf128, (25088, 96), (96, 1), 0); del buf128  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf199, (25088, 24), (24, 1), 0), permute_389, out=buf200)
    del permute_389
    buf201 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf199, (24, 25088), (1, 24), 0), view_392, out=buf201)
    del view_392
    buf202 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf203 = reinterpret_tensor(buf200, (1568, 16, 96), (1536, 96, 1), 0); del buf200  # reuse
    cpp_fused_gelu_gelu_backward_sum_49(c_void_p(buf203.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(addmm_65.data_ptr()), c_void_p(buf202.data_ptr()))
    del addmm_65
    buf204 = reinterpret_tensor(buf192, (25088, 24), (24, 1), 0); del buf192  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf203, (25088, 96), (96, 1), 0), permute_393, out=buf204)
    del permute_393
    buf205 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf203, (96, 25088), (1, 96), 0), view_390, out=buf205)
    del view_390
    buf206 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf207 = buf196; del buf196  # reuse
    buf208 = buf195; del buf195  # reuse
    buf209 = empty((24, ), device='cpu', dtype=torch.float32)
    buf210 = empty((24, ), device='cpu', dtype=torch.float32)
    buf211 = buf199; del buf199  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_50(c_void_p(buf211.data_ptr()), c_void_p(buf203.data_ptr()), c_void_p(buf204.data_ptr()), c_void_p(primals_270.data_ptr()), c_void_p(mul_169.data_ptr()), c_void_p(div_38.data_ptr()), c_void_p(buf206.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(buf208.data_ptr()), c_void_p(buf209.data_ptr()), c_void_p(buf210.data_ptr()))
    del div_38
    del mul_169
    del primals_270
    buf212 = buf204; del buf204  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf211, (25088, 24), (24, 1), 0), permute_397, out=buf212)
    del permute_397
    buf213 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf211, (24, 25088), (1, 24), 0), view_388, out=buf213)
    del view_388
    buf214 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf215 = reinterpret_tensor(buf191, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf191  # reuse
    cpp_fused_clone_sum_51(c_void_p(buf211.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf215.data_ptr()))
    buf216 = reinterpret_tensor(buf212, (6272, 16, 6), (96, 6, 1), 0); del buf212  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_402, reinterpret_tensor(buf215, (6272, 16, 6), (96, 6, 1), 0), out=buf216)
    del permute_402
    buf217 = reinterpret_tensor(buf144, (6272, 16, 16), (256, 16, 1), 0); del buf144  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf215, (6272, 16, 6), (96, 6, 1), 0), permute_403, out=buf217)
    del permute_403
    buf218 = buf143; del buf143  # reuse
    buf219 = reinterpret_tensor(buf217, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf217  # reuse
    cpp_fused__softmax_backward_data_mul_52(c_void_p(buf219.data_ptr()), c_void_p(alias_29.data_ptr()), c_void_p(buf218.data_ptr()))
    del alias_29
    buf220 = reinterpret_tensor(buf215, (6272, 6, 16), (96, 16, 1), 0); del buf215  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_404, reinterpret_tensor(buf219, (6272, 16, 16), (256, 16, 1), 0), out=buf220)
    del permute_404
    buf221 = reinterpret_tensor(buf152, (6272, 16, 6), (96, 6, 1), 0); del buf152  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf219, (6272, 16, 16), (256, 16, 1), 0), permute_405, out=buf221)
    del permute_405
    buf222 = buf149; del buf149  # reuse
    cpp_fused_view_53(c_void_p(buf216.data_ptr()), c_void_p(buf222.data_ptr()))
    buf223 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf222, (24, 25088), (1, 24), 0), view_375, out=buf223)
    buf224 = reinterpret_tensor(buf216, (25088, 24), (24, 1), 0); del buf216  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf222, permute_410, out=buf224)
    del permute_410
    buf225 = buf150; del buf150  # reuse
    cpp_fused_clone_54(c_void_p(buf221.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(buf225.data_ptr()))
    buf226 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf225, (48, 25088), (1, 48), 0), view_375, out=buf226)
    del view_375
    buf227 = reinterpret_tensor(buf221, (25088, 24), (24, 1), 0); del buf221  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf225, (25088, 48), (48, 1), 0), permute_415, out=buf227)
    del permute_415
    buf232 = reinterpret_tensor(buf185, (8, 197, 384), (75648, 384, 1), 0); del buf185  # reuse
    cpp_fused_add_select_backward_slice_backward_55(c_void_p(buf190.data_ptr()), c_void_p(buf232.data_ptr()))
    buf233 = reinterpret_tensor(buf161, (1576, 1536), (1536, 1), 0); del buf161  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf232, (1576, 384), (384, 1), 0), permute_417, out=buf233)
    del permute_417
    buf236 = reinterpret_tensor(buf233, (8, 197, 1536), (302592, 1536, 1), 0); del buf233  # reuse
    cpp_fused_gelu_gelu_backward_56(c_void_p(buf236.data_ptr()), c_void_p(addmm_62.data_ptr()))
    del addmm_62
    buf237 = reinterpret_tensor(buf190, (1576, 384), (384, 1), 0); del buf190  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf236, (1576, 1536), (1536, 1), 0), permute_421, out=buf237)
    del permute_421
    buf240 = buf187; del buf187  # reuse
    buf241 = buf186; del buf186  # reuse
    buf244 = reinterpret_tensor(buf182, (8, 197, 384), (75648, 384, 1), 0); del buf182  # reuse
    cpp_fused_add_native_layer_norm_backward_57(c_void_p(buf237.data_ptr()), c_void_p(primals_258.data_ptr()), c_void_p(mul_161.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(div_40.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(buf241.data_ptr()), c_void_p(buf244.data_ptr()))
    del div_40
    del primals_258
    buf245 = buf180; del buf180  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf244, (1576, 384), (384, 1), 0), permute_425, out=buf245)
    del permute_425
    buf248 = reinterpret_tensor(buf169, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf169  # reuse
    cpp_fused_clone_58(c_void_p(buf245.data_ptr()), c_void_p(buf248.data_ptr()))
    buf249 = reinterpret_tensor(buf245, (48, 197, 64), (12608, 64, 1), 0); del buf245  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_430, reinterpret_tensor(buf248, (48, 197, 64), (12608, 64, 1), 0), out=buf249)
    del permute_430
    buf255 = buf162; del buf162  # reuse
    cpp_fused_view_59(c_void_p(buf249.data_ptr()), c_void_p(buf255.data_ptr()))
    buf257 = reinterpret_tensor(buf249, (1576, 384), (384, 1), 0); del buf249  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf255, permute_438, out=buf257)
    del permute_438
    buf250 = reinterpret_tensor(buf177, (48, 197, 197), (38809, 197, 1), 0); del buf177  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf248, (48, 197, 64), (12608, 64, 1), 0), permute_431, out=buf250)
    del permute_431
    buf251 = buf176; del buf176  # reuse
    buf252 = reinterpret_tensor(buf250, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf250  # reuse
    cpp_fused__softmax_backward_data_mul_60(c_void_p(buf252.data_ptr()), c_void_p(alias_30.data_ptr()), c_void_p(buf251.data_ptr()))
    del alias_30
    buf253 = reinterpret_tensor(buf248, (48, 64, 197), (12608, 197, 1), 0); del buf248  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_432, reinterpret_tensor(buf252, (48, 197, 197), (38809, 197, 1), 0), out=buf253)
    del permute_432
    buf254 = reinterpret_tensor(buf157, (48, 197, 64), (12608, 64, 1), 0); del buf157  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf252, (48, 197, 197), (38809, 197, 1), 0), permute_433, out=buf254)
    del permute_433
    buf258 = buf183; del buf183  # reuse
    cpp_fused_clone_61(c_void_p(buf254.data_ptr()), c_void_p(buf253.data_ptr()), c_void_p(buf258.data_ptr()))
    buf260 = reinterpret_tensor(buf254, (1576, 384), (384, 1), 0); del buf254  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf258, (1576, 768), (768, 1), 0), permute_443, out=buf260)
    del permute_443
    buf261 = buf241; del buf241  # reuse
    buf262 = buf240; del buf240  # reuse
    buf265 = reinterpret_tensor(buf253, (8, 197, 384), (75648, 384, 1), 0); del buf253  # reuse
    buf266 = reinterpret_tensor(buf220, (1568, 384), (384, 1), 0); del buf220  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_62(c_void_p(buf257.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(primals_252.data_ptr()), c_void_p(cat_9.data_ptr()), c_void_p(getitem_125.data_ptr()), c_void_p(rsqrt_45.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf261.data_ptr()), c_void_p(buf262.data_ptr()), c_void_p(buf265.data_ptr()), c_void_p(buf266.data_ptr()))
    del primals_252
    buf267 = reinterpret_tensor(buf222, (1568, 384), (384, 1), 0); del buf222  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf266, permute_445, out=buf267)
    del permute_445
    buf228 = buf208; del buf208  # reuse
    buf229 = buf207; del buf207  # reuse
    buf270 = buf154; del buf154  # reuse
    buf271 = buf153; del buf153  # reuse
    buf230 = empty((24, ), device='cpu', dtype=torch.float32)
    buf231 = empty((24, ), device='cpu', dtype=torch.float32)
    buf272 = empty((24, ), device='cpu', dtype=torch.float32)
    buf273 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_63(c_void_p(buf224.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(primals_264.data_ptr()), c_void_p(mul_156.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf230.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()))
    buf234 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf232, (384, 1576), (1, 384), 0), view_373, out=buf234)
    del view_373
    buf235 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_64(c_void_p(buf232.data_ptr()), c_void_p(buf235.data_ptr()))
    buf238 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf236, (1536, 1576), (1, 1536), 0), view_371, out=buf238)
    del view_371
    buf239 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf242 = empty((384, ), device='cpu', dtype=torch.float32)
    buf243 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_65(c_void_p(buf236.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(mul_161.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(buf243.data_ptr()))
    del mul_161
    buf246 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf244, (384, 1576), (1, 384), 0), view_369, out=buf246)
    del view_369
    buf247 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_66(c_void_p(buf244.data_ptr()), c_void_p(buf247.data_ptr()))
    buf256 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf255, (384, 1576), (1, 384), 0), view_356, out=buf256)
    buf259 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf258, (768, 1576), (1, 768), 0), view_356, out=buf259)
    del view_356
    buf263 = empty((384, ), device='cpu', dtype=torch.float32)
    buf264 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_67(c_void_p(buf257.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(cat_9.data_ptr()), c_void_p(getitem_125.data_ptr()), c_void_p(rsqrt_45.data_ptr()), c_void_p(buf263.data_ptr()), c_void_p(buf264.data_ptr()))
    del cat_9
    del getitem_125
    del rsqrt_45
    buf268 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf266, (384, 1568), (1, 384), 0), view_354, out=buf268)
    del view_354
    buf269 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf274 = buf211; del buf211  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_68(c_void_p(buf274.data_ptr()), c_void_p(buf266.data_ptr()), c_void_p(div_39.data_ptr()), c_void_p(buf224.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(primals_264.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(mul_156.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf269.data_ptr()))
    del div_39
    del mul_156
    del primals_248
    del primals_264
    buf275 = reinterpret_tensor(buf203, (25088, 96), (96, 1), 0); del buf203  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf274, (25088, 24), (24, 1), 0), permute_449, out=buf275)
    del permute_449
    buf276 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf274, (24, 25088), (1, 24), 0), view_351, out=buf276)
    del view_351
    buf277 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf278 = reinterpret_tensor(buf275, (1568, 16, 96), (1536, 96, 1), 0); del buf275  # reuse
    cpp_fused_gelu_gelu_backward_sum_69(c_void_p(buf278.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(addmm_58.data_ptr()), c_void_p(buf277.data_ptr()))
    del addmm_58
    buf279 = reinterpret_tensor(buf267, (25088, 24), (24, 1), 0); del buf267  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf278, (25088, 96), (96, 1), 0), permute_453, out=buf279)
    del permute_453
    buf280 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf278, (96, 25088), (1, 96), 0), view_349, out=buf280)
    del view_349
    buf281 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf282 = buf271; del buf271  # reuse
    buf283 = buf270; del buf270  # reuse
    buf284 = empty((24, ), device='cpu', dtype=torch.float32)
    buf285 = empty((24, ), device='cpu', dtype=torch.float32)
    buf286 = buf274; del buf274  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_70(c_void_p(buf286.data_ptr()), c_void_p(buf278.data_ptr()), c_void_p(buf279.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(mul_151.data_ptr()), c_void_p(div_43.data_ptr()), c_void_p(buf281.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(buf283.data_ptr()), c_void_p(buf284.data_ptr()), c_void_p(buf285.data_ptr()))
    del div_43
    del mul_151
    del primals_242
    buf287 = buf279; del buf279  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf286, (25088, 24), (24, 1), 0), permute_457, out=buf287)
    del permute_457
    buf288 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf286, (24, 25088), (1, 24), 0), view_347, out=buf288)
    del view_347
    buf289 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf290 = reinterpret_tensor(buf266, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf266  # reuse
    cpp_fused_clone_sum_71(c_void_p(buf286.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(buf290.data_ptr()))
    buf291 = reinterpret_tensor(buf287, (6272, 16, 6), (96, 6, 1), 0); del buf287  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_462, reinterpret_tensor(buf290, (6272, 16, 6), (96, 6, 1), 0), out=buf291)
    del permute_462
    buf292 = reinterpret_tensor(buf219, (6272, 16, 16), (256, 16, 1), 0); del buf219  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf290, (6272, 16, 6), (96, 6, 1), 0), permute_463, out=buf292)
    del permute_463
    buf293 = buf218; del buf218  # reuse
    buf294 = reinterpret_tensor(buf292, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf292  # reuse
    cpp_fused__softmax_backward_data_mul_72(c_void_p(buf294.data_ptr()), c_void_p(alias_31.data_ptr()), c_void_p(buf293.data_ptr()))
    del alias_31
    buf295 = reinterpret_tensor(buf290, (6272, 6, 16), (96, 16, 1), 0); del buf290  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_464, reinterpret_tensor(buf294, (6272, 16, 16), (256, 16, 1), 0), out=buf295)
    del permute_464
    buf296 = reinterpret_tensor(buf227, (6272, 16, 6), (96, 6, 1), 0); del buf227  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf294, (6272, 16, 16), (256, 16, 1), 0), permute_465, out=buf296)
    del permute_465
    buf297 = buf224; del buf224  # reuse
    cpp_fused_view_73(c_void_p(buf291.data_ptr()), c_void_p(buf297.data_ptr()))
    buf298 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf297, (24, 25088), (1, 24), 0), view_334, out=buf298)
    buf299 = reinterpret_tensor(buf291, (25088, 24), (24, 1), 0); del buf291  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf297, permute_470, out=buf299)
    del permute_470
    buf300 = buf225; del buf225  # reuse
    cpp_fused_clone_74(c_void_p(buf296.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(buf300.data_ptr()))
    buf301 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf300, (48, 25088), (1, 48), 0), view_334, out=buf301)
    del view_334
    buf302 = reinterpret_tensor(buf296, (25088, 24), (24, 1), 0); del buf296  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf300, (25088, 48), (48, 1), 0), permute_475, out=buf302)
    del permute_475
    buf307 = reinterpret_tensor(buf260, (8, 197, 384), (75648, 384, 1), 0); del buf260  # reuse
    cpp_fused_add_select_backward_slice_backward_75(c_void_p(buf265.data_ptr()), c_void_p(buf307.data_ptr()))
    buf308 = reinterpret_tensor(buf236, (1576, 1536), (1536, 1), 0); del buf236  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf307, (1576, 384), (384, 1), 0), permute_477, out=buf308)
    del permute_477
    buf311 = reinterpret_tensor(buf308, (8, 197, 1536), (302592, 1536, 1), 0); del buf308  # reuse
    cpp_fused_gelu_gelu_backward_76(c_void_p(buf311.data_ptr()), c_void_p(addmm_55.data_ptr()))
    del addmm_55
    buf312 = reinterpret_tensor(buf265, (1576, 384), (384, 1), 0); del buf265  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf311, (1576, 1536), (1536, 1), 0), permute_481, out=buf312)
    del permute_481
    buf315 = buf262; del buf262  # reuse
    buf316 = buf261; del buf261  # reuse
    buf319 = reinterpret_tensor(buf257, (8, 197, 384), (75648, 384, 1), 0); del buf257  # reuse
    cpp_fused_add_native_layer_norm_backward_77(c_void_p(buf312.data_ptr()), c_void_p(primals_230.data_ptr()), c_void_p(mul_143.data_ptr()), c_void_p(buf307.data_ptr()), c_void_p(div_45.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf319.data_ptr()))
    del div_45
    del primals_230
    buf320 = buf255; del buf255  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf319, (1576, 384), (384, 1), 0), permute_485, out=buf320)
    del permute_485
    buf323 = reinterpret_tensor(buf244, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf244  # reuse
    cpp_fused_clone_78(c_void_p(buf320.data_ptr()), c_void_p(buf323.data_ptr()))
    buf324 = reinterpret_tensor(buf320, (48, 197, 64), (12608, 64, 1), 0); del buf320  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_490, reinterpret_tensor(buf323, (48, 197, 64), (12608, 64, 1), 0), out=buf324)
    del permute_490
    buf330 = buf237; del buf237  # reuse
    cpp_fused_view_79(c_void_p(buf324.data_ptr()), c_void_p(buf330.data_ptr()))
    buf332 = reinterpret_tensor(buf324, (1576, 384), (384, 1), 0); del buf324  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf330, permute_498, out=buf332)
    del permute_498
    buf325 = reinterpret_tensor(buf252, (48, 197, 197), (38809, 197, 1), 0); del buf252  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf323, (48, 197, 64), (12608, 64, 1), 0), permute_491, out=buf325)
    del permute_491
    buf326 = buf251; del buf251  # reuse
    buf327 = reinterpret_tensor(buf325, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf325  # reuse
    cpp_fused__softmax_backward_data_mul_80(c_void_p(buf327.data_ptr()), c_void_p(alias_32.data_ptr()), c_void_p(buf326.data_ptr()))
    del alias_32
    buf328 = reinterpret_tensor(buf323, (48, 64, 197), (12608, 197, 1), 0); del buf323  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_492, reinterpret_tensor(buf327, (48, 197, 197), (38809, 197, 1), 0), out=buf328)
    del permute_492
    buf329 = reinterpret_tensor(buf232, (48, 197, 64), (12608, 64, 1), 0); del buf232  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf327, (48, 197, 197), (38809, 197, 1), 0), permute_493, out=buf329)
    del permute_493
    buf333 = buf258; del buf258  # reuse
    cpp_fused_clone_81(c_void_p(buf329.data_ptr()), c_void_p(buf328.data_ptr()), c_void_p(buf333.data_ptr()))
    buf335 = reinterpret_tensor(buf329, (1576, 384), (384, 1), 0); del buf329  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf333, (1576, 768), (768, 1), 0), permute_503, out=buf335)
    del permute_503
    buf336 = buf316; del buf316  # reuse
    buf337 = buf315; del buf315  # reuse
    buf340 = reinterpret_tensor(buf328, (8, 197, 384), (75648, 384, 1), 0); del buf328  # reuse
    buf341 = reinterpret_tensor(buf295, (1568, 384), (384, 1), 0); del buf295  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_82(c_void_p(buf332.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(primals_224.data_ptr()), c_void_p(cat_8.data_ptr()), c_void_p(getitem_111.data_ptr()), c_void_p(rsqrt_40.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf336.data_ptr()), c_void_p(buf337.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(buf341.data_ptr()))
    del primals_224
    buf342 = reinterpret_tensor(buf297, (1568, 384), (384, 1), 0); del buf297  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf341, permute_505, out=buf342)
    del permute_505
    buf303 = buf283; del buf283  # reuse
    buf304 = buf282; del buf282  # reuse
    buf345 = buf229; del buf229  # reuse
    buf346 = buf228; del buf228  # reuse
    buf305 = empty((24, ), device='cpu', dtype=torch.float32)
    buf306 = empty((24, ), device='cpu', dtype=torch.float32)
    buf347 = empty((24, ), device='cpu', dtype=torch.float32)
    buf348 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_83(c_void_p(buf299.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(primals_236.data_ptr()), c_void_p(mul_138.data_ptr()), c_void_p(buf342.data_ptr()), c_void_p(primals_220.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf345.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf306.data_ptr()), c_void_p(buf347.data_ptr()), c_void_p(buf348.data_ptr()))
    buf309 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf307, (384, 1576), (1, 384), 0), view_332, out=buf309)
    del view_332
    buf310 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_84(c_void_p(buf307.data_ptr()), c_void_p(buf310.data_ptr()))
    buf313 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf311, (1536, 1576), (1, 1536), 0), view_330, out=buf313)
    del view_330
    buf314 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf317 = empty((384, ), device='cpu', dtype=torch.float32)
    buf318 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_85(c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(mul_143.data_ptr()), c_void_p(buf314.data_ptr()), c_void_p(buf317.data_ptr()), c_void_p(buf318.data_ptr()))
    del mul_143
    buf321 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf319, (384, 1576), (1, 384), 0), view_328, out=buf321)
    del view_328
    buf322 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_86(c_void_p(buf319.data_ptr()), c_void_p(buf322.data_ptr()))
    buf331 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf330, (384, 1576), (1, 384), 0), view_315, out=buf331)
    buf334 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf333, (768, 1576), (1, 768), 0), view_315, out=buf334)
    del view_315
    buf338 = empty((384, ), device='cpu', dtype=torch.float32)
    buf339 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_87(c_void_p(buf332.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(cat_8.data_ptr()), c_void_p(getitem_111.data_ptr()), c_void_p(rsqrt_40.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(buf339.data_ptr()))
    del cat_8
    del getitem_111
    del rsqrt_40
    buf343 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf341, (384, 1568), (1, 384), 0), view_313, out=buf343)
    del view_313
    buf344 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf349 = buf286; del buf286  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_88(c_void_p(buf349.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(div_44.data_ptr()), c_void_p(buf299.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(primals_236.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(mul_138.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf342.data_ptr()), c_void_p(primals_220.data_ptr()), c_void_p(buf345.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(buf344.data_ptr()))
    del div_44
    del mul_138
    del primals_220
    del primals_236
    buf350 = reinterpret_tensor(buf278, (25088, 96), (96, 1), 0); del buf278  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf349, (25088, 24), (24, 1), 0), permute_509, out=buf350)
    del permute_509
    buf351 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf349, (24, 25088), (1, 24), 0), view_310, out=buf351)
    del view_310
    buf352 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf353 = reinterpret_tensor(buf350, (1568, 16, 96), (1536, 96, 1), 0); del buf350  # reuse
    cpp_fused_gelu_gelu_backward_sum_89(c_void_p(buf353.data_ptr()), c_void_p(buf349.data_ptr()), c_void_p(addmm_51.data_ptr()), c_void_p(buf352.data_ptr()))
    del addmm_51
    buf354 = reinterpret_tensor(buf342, (25088, 24), (24, 1), 0); del buf342  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf353, (25088, 96), (96, 1), 0), permute_513, out=buf354)
    del permute_513
    buf355 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf353, (96, 25088), (1, 96), 0), view_308, out=buf355)
    del view_308
    buf356 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf357 = buf346; del buf346  # reuse
    buf358 = buf345; del buf345  # reuse
    buf359 = empty((24, ), device='cpu', dtype=torch.float32)
    buf360 = empty((24, ), device='cpu', dtype=torch.float32)
    buf361 = buf349; del buf349  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_90(c_void_p(buf361.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(primals_214.data_ptr()), c_void_p(mul_133.data_ptr()), c_void_p(div_48.data_ptr()), c_void_p(buf356.data_ptr()), c_void_p(buf357.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf360.data_ptr()))
    del div_48
    del mul_133
    del primals_214
    buf362 = buf354; del buf354  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf361, (25088, 24), (24, 1), 0), permute_517, out=buf362)
    del permute_517
    buf363 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf361, (24, 25088), (1, 24), 0), view_306, out=buf363)
    del view_306
    buf364 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf365 = reinterpret_tensor(buf341, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf341  # reuse
    cpp_fused_clone_sum_91(c_void_p(buf361.data_ptr()), c_void_p(buf362.data_ptr()), c_void_p(buf364.data_ptr()), c_void_p(buf365.data_ptr()))
    buf366 = reinterpret_tensor(buf362, (6272, 16, 6), (96, 6, 1), 0); del buf362  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_522, reinterpret_tensor(buf365, (6272, 16, 6), (96, 6, 1), 0), out=buf366)
    del permute_522
    buf367 = reinterpret_tensor(buf294, (6272, 16, 16), (256, 16, 1), 0); del buf294  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf365, (6272, 16, 6), (96, 6, 1), 0), permute_523, out=buf367)
    del permute_523
    buf368 = buf293; del buf293  # reuse
    buf369 = reinterpret_tensor(buf367, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf367  # reuse
    cpp_fused__softmax_backward_data_mul_92(c_void_p(buf369.data_ptr()), c_void_p(alias_33.data_ptr()), c_void_p(buf368.data_ptr()))
    del alias_33
    buf370 = reinterpret_tensor(buf365, (6272, 6, 16), (96, 16, 1), 0); del buf365  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_524, reinterpret_tensor(buf369, (6272, 16, 16), (256, 16, 1), 0), out=buf370)
    del permute_524
    buf371 = reinterpret_tensor(buf302, (6272, 16, 6), (96, 6, 1), 0); del buf302  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf369, (6272, 16, 16), (256, 16, 1), 0), permute_525, out=buf371)
    del permute_525
    buf372 = buf299; del buf299  # reuse
    cpp_fused_view_93(c_void_p(buf366.data_ptr()), c_void_p(buf372.data_ptr()))
    buf373 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf372, (24, 25088), (1, 24), 0), view_293, out=buf373)
    buf374 = reinterpret_tensor(buf366, (25088, 24), (24, 1), 0); del buf366  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf372, permute_530, out=buf374)
    del permute_530
    buf375 = buf300; del buf300  # reuse
    cpp_fused_clone_94(c_void_p(buf371.data_ptr()), c_void_p(buf370.data_ptr()), c_void_p(buf375.data_ptr()))
    buf376 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf375, (48, 25088), (1, 48), 0), view_293, out=buf376)
    del view_293
    buf377 = reinterpret_tensor(buf371, (25088, 24), (24, 1), 0); del buf371  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf375, (25088, 48), (48, 1), 0), permute_535, out=buf377)
    del permute_535
    buf382 = reinterpret_tensor(buf335, (8, 197, 384), (75648, 384, 1), 0); del buf335  # reuse
    cpp_fused_add_select_backward_slice_backward_95(c_void_p(buf340.data_ptr()), c_void_p(buf382.data_ptr()))
    buf383 = reinterpret_tensor(buf311, (1576, 1536), (1536, 1), 0); del buf311  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf382, (1576, 384), (384, 1), 0), permute_537, out=buf383)
    del permute_537
    buf386 = reinterpret_tensor(buf383, (8, 197, 1536), (302592, 1536, 1), 0); del buf383  # reuse
    cpp_fused_gelu_gelu_backward_96(c_void_p(buf386.data_ptr()), c_void_p(addmm_48.data_ptr()))
    del addmm_48
    buf387 = reinterpret_tensor(buf340, (1576, 384), (384, 1), 0); del buf340  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf386, (1576, 1536), (1536, 1), 0), permute_541, out=buf387)
    del permute_541
    buf390 = buf337; del buf337  # reuse
    buf391 = buf336; del buf336  # reuse
    buf394 = reinterpret_tensor(buf332, (8, 197, 384), (75648, 384, 1), 0); del buf332  # reuse
    cpp_fused_add_native_layer_norm_backward_97(c_void_p(buf387.data_ptr()), c_void_p(primals_202.data_ptr()), c_void_p(mul_125.data_ptr()), c_void_p(buf382.data_ptr()), c_void_p(div_50.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(buf394.data_ptr()))
    del div_50
    del primals_202
    buf395 = buf330; del buf330  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf394, (1576, 384), (384, 1), 0), permute_545, out=buf395)
    del permute_545
    buf398 = reinterpret_tensor(buf319, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf319  # reuse
    cpp_fused_clone_98(c_void_p(buf395.data_ptr()), c_void_p(buf398.data_ptr()))
    buf399 = reinterpret_tensor(buf395, (48, 197, 64), (12608, 64, 1), 0); del buf395  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_550, reinterpret_tensor(buf398, (48, 197, 64), (12608, 64, 1), 0), out=buf399)
    del permute_550
    buf405 = buf312; del buf312  # reuse
    cpp_fused_view_99(c_void_p(buf399.data_ptr()), c_void_p(buf405.data_ptr()))
    buf407 = reinterpret_tensor(buf399, (1576, 384), (384, 1), 0); del buf399  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf405, permute_558, out=buf407)
    del permute_558
    buf400 = reinterpret_tensor(buf327, (48, 197, 197), (38809, 197, 1), 0); del buf327  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf398, (48, 197, 64), (12608, 64, 1), 0), permute_551, out=buf400)
    del permute_551
    buf401 = buf326; del buf326  # reuse
    buf402 = reinterpret_tensor(buf400, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf400  # reuse
    cpp_fused__softmax_backward_data_mul_100(c_void_p(buf402.data_ptr()), c_void_p(alias_34.data_ptr()), c_void_p(buf401.data_ptr()))
    del alias_34
    buf403 = reinterpret_tensor(buf398, (48, 64, 197), (12608, 197, 1), 0); del buf398  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_552, reinterpret_tensor(buf402, (48, 197, 197), (38809, 197, 1), 0), out=buf403)
    del permute_552
    buf404 = reinterpret_tensor(buf307, (48, 197, 64), (12608, 64, 1), 0); del buf307  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf402, (48, 197, 197), (38809, 197, 1), 0), permute_553, out=buf404)
    del permute_553
    buf408 = buf333; del buf333  # reuse
    cpp_fused_clone_101(c_void_p(buf404.data_ptr()), c_void_p(buf403.data_ptr()), c_void_p(buf408.data_ptr()))
    buf410 = reinterpret_tensor(buf404, (1576, 384), (384, 1), 0); del buf404  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf408, (1576, 768), (768, 1), 0), permute_563, out=buf410)
    del permute_563
    buf411 = buf391; del buf391  # reuse
    buf412 = buf390; del buf390  # reuse
    buf415 = reinterpret_tensor(buf403, (8, 197, 384), (75648, 384, 1), 0); del buf403  # reuse
    buf416 = reinterpret_tensor(buf370, (1568, 384), (384, 1), 0); del buf370  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_102(c_void_p(buf407.data_ptr()), c_void_p(buf410.data_ptr()), c_void_p(primals_196.data_ptr()), c_void_p(cat_7.data_ptr()), c_void_p(getitem_97.data_ptr()), c_void_p(rsqrt_35.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(buf411.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf416.data_ptr()))
    del primals_196
    buf417 = reinterpret_tensor(buf372, (1568, 384), (384, 1), 0); del buf372  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf416, permute_565, out=buf417)
    del permute_565
    buf378 = buf358; del buf358  # reuse
    buf379 = buf357; del buf357  # reuse
    buf420 = buf304; del buf304  # reuse
    buf421 = buf303; del buf303  # reuse
    buf380 = empty((24, ), device='cpu', dtype=torch.float32)
    buf381 = empty((24, ), device='cpu', dtype=torch.float32)
    buf422 = empty((24, ), device='cpu', dtype=torch.float32)
    buf423 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_103(c_void_p(buf374.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(primals_208.data_ptr()), c_void_p(mul_120.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(primals_192.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf380.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf422.data_ptr()), c_void_p(buf423.data_ptr()))
    buf384 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf382, (384, 1576), (1, 384), 0), view_291, out=buf384)
    del view_291
    buf385 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_104(c_void_p(buf382.data_ptr()), c_void_p(buf385.data_ptr()))
    buf388 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf386, (1536, 1576), (1, 1536), 0), view_289, out=buf388)
    del view_289
    buf389 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf392 = empty((384, ), device='cpu', dtype=torch.float32)
    buf393 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_105(c_void_p(buf386.data_ptr()), c_void_p(buf387.data_ptr()), c_void_p(mul_125.data_ptr()), c_void_p(buf389.data_ptr()), c_void_p(buf392.data_ptr()), c_void_p(buf393.data_ptr()))
    del mul_125
    buf396 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf394, (384, 1576), (1, 384), 0), view_287, out=buf396)
    del view_287
    buf397 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_106(c_void_p(buf394.data_ptr()), c_void_p(buf397.data_ptr()))
    buf406 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf405, (384, 1576), (1, 384), 0), view_274, out=buf406)
    buf409 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf408, (768, 1576), (1, 768), 0), view_274, out=buf409)
    del view_274
    buf413 = empty((384, ), device='cpu', dtype=torch.float32)
    buf414 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_107(c_void_p(buf407.data_ptr()), c_void_p(buf410.data_ptr()), c_void_p(cat_7.data_ptr()), c_void_p(getitem_97.data_ptr()), c_void_p(rsqrt_35.data_ptr()), c_void_p(buf413.data_ptr()), c_void_p(buf414.data_ptr()))
    del cat_7
    del getitem_97
    del rsqrt_35
    buf418 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf416, (384, 1568), (1, 384), 0), view_272, out=buf418)
    del view_272
    buf419 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf424 = buf361; del buf361  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_108(c_void_p(buf424.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(div_49.data_ptr()), c_void_p(buf374.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(primals_208.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(mul_120.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(primals_192.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf419.data_ptr()))
    del div_49
    del mul_120
    del primals_192
    del primals_208
    buf425 = reinterpret_tensor(buf353, (25088, 96), (96, 1), 0); del buf353  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf424, (25088, 24), (24, 1), 0), permute_569, out=buf425)
    del permute_569
    buf426 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf424, (24, 25088), (1, 24), 0), view_269, out=buf426)
    del view_269
    buf427 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf428 = reinterpret_tensor(buf425, (1568, 16, 96), (1536, 96, 1), 0); del buf425  # reuse
    cpp_fused_gelu_gelu_backward_sum_109(c_void_p(buf428.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(addmm_44.data_ptr()), c_void_p(buf427.data_ptr()))
    del addmm_44
    buf429 = reinterpret_tensor(buf417, (25088, 24), (24, 1), 0); del buf417  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf428, (25088, 96), (96, 1), 0), permute_573, out=buf429)
    del permute_573
    buf430 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf428, (96, 25088), (1, 96), 0), view_267, out=buf430)
    del view_267
    buf431 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf432 = buf421; del buf421  # reuse
    buf433 = buf420; del buf420  # reuse
    buf434 = empty((24, ), device='cpu', dtype=torch.float32)
    buf435 = empty((24, ), device='cpu', dtype=torch.float32)
    buf436 = buf424; del buf424  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_110(c_void_p(buf436.data_ptr()), c_void_p(buf428.data_ptr()), c_void_p(buf429.data_ptr()), c_void_p(primals_186.data_ptr()), c_void_p(mul_115.data_ptr()), c_void_p(div_53.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(buf432.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(buf435.data_ptr()))
    del div_53
    del mul_115
    del primals_186
    buf437 = buf429; del buf429  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf436, (25088, 24), (24, 1), 0), permute_577, out=buf437)
    del permute_577
    buf438 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf436, (24, 25088), (1, 24), 0), view_265, out=buf438)
    del view_265
    buf439 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf440 = reinterpret_tensor(buf416, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf416  # reuse
    cpp_fused_clone_sum_111(c_void_p(buf436.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(buf439.data_ptr()), c_void_p(buf440.data_ptr()))
    buf441 = reinterpret_tensor(buf437, (6272, 16, 6), (96, 6, 1), 0); del buf437  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_582, reinterpret_tensor(buf440, (6272, 16, 6), (96, 6, 1), 0), out=buf441)
    del permute_582
    buf442 = reinterpret_tensor(buf369, (6272, 16, 16), (256, 16, 1), 0); del buf369  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf440, (6272, 16, 6), (96, 6, 1), 0), permute_583, out=buf442)
    del permute_583
    buf443 = buf368; del buf368  # reuse
    buf444 = reinterpret_tensor(buf442, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf442  # reuse
    cpp_fused__softmax_backward_data_mul_112(c_void_p(buf444.data_ptr()), c_void_p(alias_35.data_ptr()), c_void_p(buf443.data_ptr()))
    del alias_35
    buf445 = reinterpret_tensor(buf440, (6272, 6, 16), (96, 16, 1), 0); del buf440  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_584, reinterpret_tensor(buf444, (6272, 16, 16), (256, 16, 1), 0), out=buf445)
    del permute_584
    buf446 = reinterpret_tensor(buf377, (6272, 16, 6), (96, 6, 1), 0); del buf377  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf444, (6272, 16, 16), (256, 16, 1), 0), permute_585, out=buf446)
    del permute_585
    buf447 = buf374; del buf374  # reuse
    cpp_fused_view_113(c_void_p(buf441.data_ptr()), c_void_p(buf447.data_ptr()))
    buf448 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf447, (24, 25088), (1, 24), 0), view_252, out=buf448)
    buf449 = reinterpret_tensor(buf441, (25088, 24), (24, 1), 0); del buf441  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf447, permute_590, out=buf449)
    del permute_590
    buf450 = buf375; del buf375  # reuse
    cpp_fused_clone_114(c_void_p(buf446.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf450.data_ptr()))
    buf451 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf450, (48, 25088), (1, 48), 0), view_252, out=buf451)
    del view_252
    buf452 = reinterpret_tensor(buf446, (25088, 24), (24, 1), 0); del buf446  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf450, (25088, 48), (48, 1), 0), permute_595, out=buf452)
    del permute_595
    buf457 = reinterpret_tensor(buf410, (8, 197, 384), (75648, 384, 1), 0); del buf410  # reuse
    cpp_fused_add_select_backward_slice_backward_115(c_void_p(buf415.data_ptr()), c_void_p(buf457.data_ptr()))
    buf458 = reinterpret_tensor(buf386, (1576, 1536), (1536, 1), 0); del buf386  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf457, (1576, 384), (384, 1), 0), permute_597, out=buf458)
    del permute_597
    buf461 = reinterpret_tensor(buf458, (8, 197, 1536), (302592, 1536, 1), 0); del buf458  # reuse
    cpp_fused_gelu_gelu_backward_116(c_void_p(buf461.data_ptr()), c_void_p(addmm_41.data_ptr()))
    del addmm_41
    buf462 = reinterpret_tensor(buf415, (1576, 384), (384, 1), 0); del buf415  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf461, (1576, 1536), (1536, 1), 0), permute_601, out=buf462)
    del permute_601
    buf465 = buf412; del buf412  # reuse
    buf466 = buf411; del buf411  # reuse
    buf469 = reinterpret_tensor(buf407, (8, 197, 384), (75648, 384, 1), 0); del buf407  # reuse
    cpp_fused_add_native_layer_norm_backward_117(c_void_p(buf462.data_ptr()), c_void_p(primals_174.data_ptr()), c_void_p(mul_107.data_ptr()), c_void_p(buf457.data_ptr()), c_void_p(div_55.data_ptr()), c_void_p(buf465.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(buf469.data_ptr()))
    del div_55
    del primals_174
    buf470 = buf405; del buf405  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf469, (1576, 384), (384, 1), 0), permute_605, out=buf470)
    del permute_605
    buf473 = reinterpret_tensor(buf394, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf394  # reuse
    cpp_fused_clone_118(c_void_p(buf470.data_ptr()), c_void_p(buf473.data_ptr()))
    buf474 = reinterpret_tensor(buf470, (48, 197, 64), (12608, 64, 1), 0); del buf470  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_610, reinterpret_tensor(buf473, (48, 197, 64), (12608, 64, 1), 0), out=buf474)
    del permute_610
    buf480 = buf387; del buf387  # reuse
    cpp_fused_view_119(c_void_p(buf474.data_ptr()), c_void_p(buf480.data_ptr()))
    buf482 = reinterpret_tensor(buf474, (1576, 384), (384, 1), 0); del buf474  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf480, permute_618, out=buf482)
    del permute_618
    buf475 = reinterpret_tensor(buf402, (48, 197, 197), (38809, 197, 1), 0); del buf402  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf473, (48, 197, 64), (12608, 64, 1), 0), permute_611, out=buf475)
    del permute_611
    buf476 = buf401; del buf401  # reuse
    buf477 = reinterpret_tensor(buf475, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf475  # reuse
    cpp_fused__softmax_backward_data_mul_120(c_void_p(buf477.data_ptr()), c_void_p(alias_36.data_ptr()), c_void_p(buf476.data_ptr()))
    del alias_36
    buf478 = reinterpret_tensor(buf473, (48, 64, 197), (12608, 197, 1), 0); del buf473  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_612, reinterpret_tensor(buf477, (48, 197, 197), (38809, 197, 1), 0), out=buf478)
    del permute_612
    buf479 = reinterpret_tensor(buf382, (48, 197, 64), (12608, 64, 1), 0); del buf382  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf477, (48, 197, 197), (38809, 197, 1), 0), permute_613, out=buf479)
    del permute_613
    buf483 = buf408; del buf408  # reuse
    cpp_fused_clone_121(c_void_p(buf479.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(buf483.data_ptr()))
    buf485 = reinterpret_tensor(buf479, (1576, 384), (384, 1), 0); del buf479  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf483, (1576, 768), (768, 1), 0), permute_623, out=buf485)
    del permute_623
    buf486 = buf466; del buf466  # reuse
    buf487 = buf465; del buf465  # reuse
    buf490 = reinterpret_tensor(buf478, (8, 197, 384), (75648, 384, 1), 0); del buf478  # reuse
    buf491 = reinterpret_tensor(buf445, (1568, 384), (384, 1), 0); del buf445  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_122(c_void_p(buf482.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(primals_168.data_ptr()), c_void_p(cat_6.data_ptr()), c_void_p(getitem_83.data_ptr()), c_void_p(rsqrt_30.data_ptr()), c_void_p(buf469.data_ptr()), c_void_p(buf486.data_ptr()), c_void_p(buf487.data_ptr()), c_void_p(buf490.data_ptr()), c_void_p(buf491.data_ptr()))
    del primals_168
    buf492 = reinterpret_tensor(buf447, (1568, 384), (384, 1), 0); del buf447  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf491, permute_625, out=buf492)
    del permute_625
    buf453 = buf433; del buf433  # reuse
    buf454 = buf432; del buf432  # reuse
    buf495 = buf379; del buf379  # reuse
    buf496 = buf378; del buf378  # reuse
    buf455 = empty((24, ), device='cpu', dtype=torch.float32)
    buf456 = empty((24, ), device='cpu', dtype=torch.float32)
    buf497 = empty((24, ), device='cpu', dtype=torch.float32)
    buf498 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_123(c_void_p(buf449.data_ptr()), c_void_p(buf452.data_ptr()), c_void_p(primals_180.data_ptr()), c_void_p(mul_102.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(buf453.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf495.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(buf455.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(buf498.data_ptr()))
    buf459 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf457, (384, 1576), (1, 384), 0), view_250, out=buf459)
    del view_250
    buf460 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_124(c_void_p(buf457.data_ptr()), c_void_p(buf460.data_ptr()))
    buf463 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf461, (1536, 1576), (1, 1536), 0), view_248, out=buf463)
    del view_248
    buf464 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf467 = empty((384, ), device='cpu', dtype=torch.float32)
    buf468 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_125(c_void_p(buf461.data_ptr()), c_void_p(buf462.data_ptr()), c_void_p(mul_107.data_ptr()), c_void_p(buf464.data_ptr()), c_void_p(buf467.data_ptr()), c_void_p(buf468.data_ptr()))
    del mul_107
    buf471 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf469, (384, 1576), (1, 384), 0), view_246, out=buf471)
    del view_246
    buf472 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_126(c_void_p(buf469.data_ptr()), c_void_p(buf472.data_ptr()))
    buf481 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf480, (384, 1576), (1, 384), 0), view_233, out=buf481)
    buf484 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf483, (768, 1576), (1, 768), 0), view_233, out=buf484)
    del view_233
    buf488 = empty((384, ), device='cpu', dtype=torch.float32)
    buf489 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_127(c_void_p(buf482.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(cat_6.data_ptr()), c_void_p(getitem_83.data_ptr()), c_void_p(rsqrt_30.data_ptr()), c_void_p(buf488.data_ptr()), c_void_p(buf489.data_ptr()))
    del cat_6
    del getitem_83
    del rsqrt_30
    buf493 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf491, (384, 1568), (1, 384), 0), view_231, out=buf493)
    del view_231
    buf494 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf499 = buf436; del buf436  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_128(c_void_p(buf499.data_ptr()), c_void_p(buf491.data_ptr()), c_void_p(div_54.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(buf452.data_ptr()), c_void_p(primals_180.data_ptr()), c_void_p(buf453.data_ptr()), c_void_p(mul_102.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(buf495.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(buf494.data_ptr()))
    del div_54
    del mul_102
    del primals_164
    del primals_180
    buf500 = reinterpret_tensor(buf428, (25088, 96), (96, 1), 0); del buf428  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf499, (25088, 24), (24, 1), 0), permute_629, out=buf500)
    del permute_629
    buf501 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf499, (24, 25088), (1, 24), 0), view_228, out=buf501)
    del view_228
    buf502 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf503 = reinterpret_tensor(buf500, (1568, 16, 96), (1536, 96, 1), 0); del buf500  # reuse
    cpp_fused_gelu_gelu_backward_sum_129(c_void_p(buf503.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(addmm_37.data_ptr()), c_void_p(buf502.data_ptr()))
    del addmm_37
    buf504 = reinterpret_tensor(buf492, (25088, 24), (24, 1), 0); del buf492  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf503, (25088, 96), (96, 1), 0), permute_633, out=buf504)
    del permute_633
    buf505 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf503, (96, 25088), (1, 96), 0), view_226, out=buf505)
    del view_226
    buf506 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf507 = buf496; del buf496  # reuse
    buf508 = buf495; del buf495  # reuse
    buf509 = empty((24, ), device='cpu', dtype=torch.float32)
    buf510 = empty((24, ), device='cpu', dtype=torch.float32)
    buf511 = buf499; del buf499  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_130(c_void_p(buf511.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(primals_158.data_ptr()), c_void_p(mul_97.data_ptr()), c_void_p(div_58.data_ptr()), c_void_p(buf506.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(buf508.data_ptr()), c_void_p(buf509.data_ptr()), c_void_p(buf510.data_ptr()))
    del div_58
    del mul_97
    del primals_158
    buf512 = buf504; del buf504  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf511, (25088, 24), (24, 1), 0), permute_637, out=buf512)
    del permute_637
    buf513 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf511, (24, 25088), (1, 24), 0), view_224, out=buf513)
    del view_224
    buf514 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf515 = reinterpret_tensor(buf491, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf491  # reuse
    cpp_fused_clone_sum_131(c_void_p(buf511.data_ptr()), c_void_p(buf512.data_ptr()), c_void_p(buf514.data_ptr()), c_void_p(buf515.data_ptr()))
    buf516 = reinterpret_tensor(buf512, (6272, 16, 6), (96, 6, 1), 0); del buf512  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_642, reinterpret_tensor(buf515, (6272, 16, 6), (96, 6, 1), 0), out=buf516)
    del permute_642
    buf517 = reinterpret_tensor(buf444, (6272, 16, 16), (256, 16, 1), 0); del buf444  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf515, (6272, 16, 6), (96, 6, 1), 0), permute_643, out=buf517)
    del permute_643
    buf518 = buf443; del buf443  # reuse
    buf519 = reinterpret_tensor(buf517, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf517  # reuse
    cpp_fused__softmax_backward_data_mul_132(c_void_p(buf519.data_ptr()), c_void_p(alias_37.data_ptr()), c_void_p(buf518.data_ptr()))
    del alias_37
    buf520 = reinterpret_tensor(buf515, (6272, 6, 16), (96, 16, 1), 0); del buf515  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_644, reinterpret_tensor(buf519, (6272, 16, 16), (256, 16, 1), 0), out=buf520)
    del permute_644
    buf521 = reinterpret_tensor(buf452, (6272, 16, 6), (96, 6, 1), 0); del buf452  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf519, (6272, 16, 16), (256, 16, 1), 0), permute_645, out=buf521)
    del permute_645
    buf522 = buf449; del buf449  # reuse
    cpp_fused_view_133(c_void_p(buf516.data_ptr()), c_void_p(buf522.data_ptr()))
    buf523 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf522, (24, 25088), (1, 24), 0), view_211, out=buf523)
    buf524 = reinterpret_tensor(buf516, (25088, 24), (24, 1), 0); del buf516  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf522, permute_650, out=buf524)
    del permute_650
    buf525 = buf450; del buf450  # reuse
    cpp_fused_clone_134(c_void_p(buf521.data_ptr()), c_void_p(buf520.data_ptr()), c_void_p(buf525.data_ptr()))
    buf526 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf525, (48, 25088), (1, 48), 0), view_211, out=buf526)
    del view_211
    buf527 = reinterpret_tensor(buf521, (25088, 24), (24, 1), 0); del buf521  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf525, (25088, 48), (48, 1), 0), permute_655, out=buf527)
    del permute_655
    buf532 = reinterpret_tensor(buf485, (8, 197, 384), (75648, 384, 1), 0); del buf485  # reuse
    cpp_fused_add_select_backward_slice_backward_135(c_void_p(buf490.data_ptr()), c_void_p(buf532.data_ptr()))
    buf533 = reinterpret_tensor(buf461, (1576, 1536), (1536, 1), 0); del buf461  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf532, (1576, 384), (384, 1), 0), permute_657, out=buf533)
    del permute_657
    buf536 = reinterpret_tensor(buf533, (8, 197, 1536), (302592, 1536, 1), 0); del buf533  # reuse
    cpp_fused_gelu_gelu_backward_136(c_void_p(buf536.data_ptr()), c_void_p(addmm_34.data_ptr()))
    del addmm_34
    buf537 = reinterpret_tensor(buf490, (1576, 384), (384, 1), 0); del buf490  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf536, (1576, 1536), (1536, 1), 0), permute_661, out=buf537)
    del permute_661
    buf540 = buf487; del buf487  # reuse
    buf541 = buf486; del buf486  # reuse
    buf544 = reinterpret_tensor(buf482, (8, 197, 384), (75648, 384, 1), 0); del buf482  # reuse
    cpp_fused_add_native_layer_norm_backward_137(c_void_p(buf537.data_ptr()), c_void_p(primals_146.data_ptr()), c_void_p(mul_89.data_ptr()), c_void_p(buf532.data_ptr()), c_void_p(div_60.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(buf544.data_ptr()))
    del div_60
    del primals_146
    buf545 = buf480; del buf480  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf544, (1576, 384), (384, 1), 0), permute_665, out=buf545)
    del permute_665
    buf548 = reinterpret_tensor(buf469, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf469  # reuse
    cpp_fused_clone_138(c_void_p(buf545.data_ptr()), c_void_p(buf548.data_ptr()))
    buf549 = reinterpret_tensor(buf545, (48, 197, 64), (12608, 64, 1), 0); del buf545  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_670, reinterpret_tensor(buf548, (48, 197, 64), (12608, 64, 1), 0), out=buf549)
    del permute_670
    buf555 = buf462; del buf462  # reuse
    cpp_fused_view_139(c_void_p(buf549.data_ptr()), c_void_p(buf555.data_ptr()))
    buf557 = reinterpret_tensor(buf549, (1576, 384), (384, 1), 0); del buf549  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf555, permute_678, out=buf557)
    del permute_678
    buf550 = reinterpret_tensor(buf477, (48, 197, 197), (38809, 197, 1), 0); del buf477  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf548, (48, 197, 64), (12608, 64, 1), 0), permute_671, out=buf550)
    del permute_671
    buf551 = buf476; del buf476  # reuse
    buf552 = reinterpret_tensor(buf550, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf550  # reuse
    cpp_fused__softmax_backward_data_mul_140(c_void_p(buf552.data_ptr()), c_void_p(alias_38.data_ptr()), c_void_p(buf551.data_ptr()))
    del alias_38
    buf553 = reinterpret_tensor(buf548, (48, 64, 197), (12608, 197, 1), 0); del buf548  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_672, reinterpret_tensor(buf552, (48, 197, 197), (38809, 197, 1), 0), out=buf553)
    del permute_672
    buf554 = reinterpret_tensor(buf457, (48, 197, 64), (12608, 64, 1), 0); del buf457  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf552, (48, 197, 197), (38809, 197, 1), 0), permute_673, out=buf554)
    del permute_673
    buf558 = buf483; del buf483  # reuse
    cpp_fused_clone_141(c_void_p(buf554.data_ptr()), c_void_p(buf553.data_ptr()), c_void_p(buf558.data_ptr()))
    buf560 = reinterpret_tensor(buf554, (1576, 384), (384, 1), 0); del buf554  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf558, (1576, 768), (768, 1), 0), permute_683, out=buf560)
    del permute_683
    buf561 = buf541; del buf541  # reuse
    buf562 = buf540; del buf540  # reuse
    buf565 = reinterpret_tensor(buf553, (8, 197, 384), (75648, 384, 1), 0); del buf553  # reuse
    buf566 = reinterpret_tensor(buf520, (1568, 384), (384, 1), 0); del buf520  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_142(c_void_p(buf557.data_ptr()), c_void_p(buf560.data_ptr()), c_void_p(primals_140.data_ptr()), c_void_p(cat_5.data_ptr()), c_void_p(getitem_69.data_ptr()), c_void_p(rsqrt_25.data_ptr()), c_void_p(buf544.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf562.data_ptr()), c_void_p(buf565.data_ptr()), c_void_p(buf566.data_ptr()))
    del primals_140
    buf567 = reinterpret_tensor(buf522, (1568, 384), (384, 1), 0); del buf522  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf566, permute_685, out=buf567)
    del permute_685
    buf528 = buf508; del buf508  # reuse
    buf529 = buf507; del buf507  # reuse
    buf570 = buf454; del buf454  # reuse
    buf571 = buf453; del buf453  # reuse
    buf530 = empty((24, ), device='cpu', dtype=torch.float32)
    buf531 = empty((24, ), device='cpu', dtype=torch.float32)
    buf572 = empty((24, ), device='cpu', dtype=torch.float32)
    buf573 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_143(c_void_p(buf524.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(mul_84.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(primals_136.data_ptr()), c_void_p(buf528.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(buf530.data_ptr()), c_void_p(buf531.data_ptr()), c_void_p(buf572.data_ptr()), c_void_p(buf573.data_ptr()))
    buf534 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf532, (384, 1576), (1, 384), 0), view_209, out=buf534)
    del view_209
    buf535 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_144(c_void_p(buf532.data_ptr()), c_void_p(buf535.data_ptr()))
    buf538 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf536, (1536, 1576), (1, 1536), 0), view_207, out=buf538)
    del view_207
    buf539 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf542 = empty((384, ), device='cpu', dtype=torch.float32)
    buf543 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_145(c_void_p(buf536.data_ptr()), c_void_p(buf537.data_ptr()), c_void_p(mul_89.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(buf542.data_ptr()), c_void_p(buf543.data_ptr()))
    del mul_89
    buf546 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf544, (384, 1576), (1, 384), 0), view_205, out=buf546)
    del view_205
    buf547 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_146(c_void_p(buf544.data_ptr()), c_void_p(buf547.data_ptr()))
    buf556 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf555, (384, 1576), (1, 384), 0), view_192, out=buf556)
    buf559 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf558, (768, 1576), (1, 768), 0), view_192, out=buf559)
    del view_192
    buf563 = empty((384, ), device='cpu', dtype=torch.float32)
    buf564 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_147(c_void_p(buf557.data_ptr()), c_void_p(buf560.data_ptr()), c_void_p(cat_5.data_ptr()), c_void_p(getitem_69.data_ptr()), c_void_p(rsqrt_25.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf564.data_ptr()))
    del cat_5
    del getitem_69
    del rsqrt_25
    buf568 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf566, (384, 1568), (1, 384), 0), view_190, out=buf568)
    del view_190
    buf569 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf574 = buf511; del buf511  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_148(c_void_p(buf574.data_ptr()), c_void_p(buf566.data_ptr()), c_void_p(div_59.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(buf528.data_ptr()), c_void_p(mul_84.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(primals_136.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(buf569.data_ptr()))
    del div_59
    del mul_84
    del primals_136
    del primals_152
    buf575 = reinterpret_tensor(buf503, (25088, 96), (96, 1), 0); del buf503  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf574, (25088, 24), (24, 1), 0), permute_689, out=buf575)
    del permute_689
    buf576 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf574, (24, 25088), (1, 24), 0), view_187, out=buf576)
    del view_187
    buf577 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf578 = reinterpret_tensor(buf575, (1568, 16, 96), (1536, 96, 1), 0); del buf575  # reuse
    cpp_fused_gelu_gelu_backward_sum_149(c_void_p(buf578.data_ptr()), c_void_p(buf574.data_ptr()), c_void_p(addmm_30.data_ptr()), c_void_p(buf577.data_ptr()))
    del addmm_30
    buf579 = reinterpret_tensor(buf567, (25088, 24), (24, 1), 0); del buf567  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (25088, 96), (96, 1), 0), permute_693, out=buf579)
    del permute_693
    buf580 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (96, 25088), (1, 96), 0), view_185, out=buf580)
    del view_185
    buf581 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf582 = buf571; del buf571  # reuse
    buf583 = buf570; del buf570  # reuse
    buf584 = empty((24, ), device='cpu', dtype=torch.float32)
    buf585 = empty((24, ), device='cpu', dtype=torch.float32)
    buf586 = buf574; del buf574  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_150(c_void_p(buf586.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(primals_130.data_ptr()), c_void_p(mul_79.data_ptr()), c_void_p(div_63.data_ptr()), c_void_p(buf581.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(buf584.data_ptr()), c_void_p(buf585.data_ptr()))
    del div_63
    del mul_79
    del primals_130
    buf587 = buf579; del buf579  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (25088, 24), (24, 1), 0), permute_697, out=buf587)
    del permute_697
    buf588 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (24, 25088), (1, 24), 0), view_183, out=buf588)
    del view_183
    buf589 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf590 = reinterpret_tensor(buf566, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf566  # reuse
    cpp_fused_clone_sum_151(c_void_p(buf586.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(buf589.data_ptr()), c_void_p(buf590.data_ptr()))
    buf591 = reinterpret_tensor(buf587, (6272, 16, 6), (96, 6, 1), 0); del buf587  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_702, reinterpret_tensor(buf590, (6272, 16, 6), (96, 6, 1), 0), out=buf591)
    del permute_702
    buf592 = reinterpret_tensor(buf519, (6272, 16, 16), (256, 16, 1), 0); del buf519  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf590, (6272, 16, 6), (96, 6, 1), 0), permute_703, out=buf592)
    del permute_703
    buf593 = buf518; del buf518  # reuse
    buf594 = reinterpret_tensor(buf592, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf592  # reuse
    cpp_fused__softmax_backward_data_mul_152(c_void_p(buf594.data_ptr()), c_void_p(alias_39.data_ptr()), c_void_p(buf593.data_ptr()))
    del alias_39
    buf595 = reinterpret_tensor(buf590, (6272, 6, 16), (96, 16, 1), 0); del buf590  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_704, reinterpret_tensor(buf594, (6272, 16, 16), (256, 16, 1), 0), out=buf595)
    del permute_704
    buf596 = reinterpret_tensor(buf527, (6272, 16, 6), (96, 6, 1), 0); del buf527  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf594, (6272, 16, 16), (256, 16, 1), 0), permute_705, out=buf596)
    del permute_705
    buf597 = buf524; del buf524  # reuse
    cpp_fused_view_153(c_void_p(buf591.data_ptr()), c_void_p(buf597.data_ptr()))
    buf598 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf597, (24, 25088), (1, 24), 0), view_170, out=buf598)
    buf599 = reinterpret_tensor(buf591, (25088, 24), (24, 1), 0); del buf591  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf597, permute_710, out=buf599)
    del permute_710
    buf600 = buf525; del buf525  # reuse
    cpp_fused_clone_154(c_void_p(buf596.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf600.data_ptr()))
    buf601 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf600, (48, 25088), (1, 48), 0), view_170, out=buf601)
    del view_170
    buf602 = reinterpret_tensor(buf596, (25088, 24), (24, 1), 0); del buf596  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf600, (25088, 48), (48, 1), 0), permute_715, out=buf602)
    del permute_715
    buf607 = reinterpret_tensor(buf560, (8, 197, 384), (75648, 384, 1), 0); del buf560  # reuse
    cpp_fused_add_select_backward_slice_backward_155(c_void_p(buf565.data_ptr()), c_void_p(buf607.data_ptr()))
    buf608 = reinterpret_tensor(buf536, (1576, 1536), (1536, 1), 0); del buf536  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf607, (1576, 384), (384, 1), 0), permute_717, out=buf608)
    del permute_717
    buf611 = reinterpret_tensor(buf608, (8, 197, 1536), (302592, 1536, 1), 0); del buf608  # reuse
    cpp_fused_gelu_gelu_backward_156(c_void_p(buf611.data_ptr()), c_void_p(addmm_27.data_ptr()))
    del addmm_27
    buf612 = reinterpret_tensor(buf565, (1576, 384), (384, 1), 0); del buf565  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf611, (1576, 1536), (1536, 1), 0), permute_721, out=buf612)
    del permute_721
    buf615 = buf562; del buf562  # reuse
    buf616 = buf561; del buf561  # reuse
    buf619 = reinterpret_tensor(buf557, (8, 197, 384), (75648, 384, 1), 0); del buf557  # reuse
    cpp_fused_add_native_layer_norm_backward_157(c_void_p(buf612.data_ptr()), c_void_p(primals_118.data_ptr()), c_void_p(mul_71.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(div_65.data_ptr()), c_void_p(buf615.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf619.data_ptr()))
    del div_65
    del primals_118
    buf620 = buf555; del buf555  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf619, (1576, 384), (384, 1), 0), permute_725, out=buf620)
    del permute_725
    buf623 = reinterpret_tensor(buf544, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf544  # reuse
    cpp_fused_clone_158(c_void_p(buf620.data_ptr()), c_void_p(buf623.data_ptr()))
    buf624 = reinterpret_tensor(buf620, (48, 197, 64), (12608, 64, 1), 0); del buf620  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_730, reinterpret_tensor(buf623, (48, 197, 64), (12608, 64, 1), 0), out=buf624)
    del permute_730
    buf630 = buf537; del buf537  # reuse
    cpp_fused_view_159(c_void_p(buf624.data_ptr()), c_void_p(buf630.data_ptr()))
    buf632 = reinterpret_tensor(buf624, (1576, 384), (384, 1), 0); del buf624  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf630, permute_738, out=buf632)
    del permute_738
    buf625 = reinterpret_tensor(buf552, (48, 197, 197), (38809, 197, 1), 0); del buf552  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf623, (48, 197, 64), (12608, 64, 1), 0), permute_731, out=buf625)
    del permute_731
    buf626 = buf551; del buf551  # reuse
    buf627 = reinterpret_tensor(buf625, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf625  # reuse
    cpp_fused__softmax_backward_data_mul_160(c_void_p(buf627.data_ptr()), c_void_p(alias_40.data_ptr()), c_void_p(buf626.data_ptr()))
    del alias_40
    buf628 = reinterpret_tensor(buf623, (48, 64, 197), (12608, 197, 1), 0); del buf623  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_732, reinterpret_tensor(buf627, (48, 197, 197), (38809, 197, 1), 0), out=buf628)
    del permute_732
    buf629 = reinterpret_tensor(buf532, (48, 197, 64), (12608, 64, 1), 0); del buf532  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf627, (48, 197, 197), (38809, 197, 1), 0), permute_733, out=buf629)
    del permute_733
    buf633 = buf558; del buf558  # reuse
    cpp_fused_clone_161(c_void_p(buf629.data_ptr()), c_void_p(buf628.data_ptr()), c_void_p(buf633.data_ptr()))
    buf635 = reinterpret_tensor(buf629, (1576, 384), (384, 1), 0); del buf629  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf633, (1576, 768), (768, 1), 0), permute_743, out=buf635)
    del permute_743
    buf636 = buf616; del buf616  # reuse
    buf637 = buf615; del buf615  # reuse
    buf640 = reinterpret_tensor(buf628, (8, 197, 384), (75648, 384, 1), 0); del buf628  # reuse
    buf641 = reinterpret_tensor(buf595, (1568, 384), (384, 1), 0); del buf595  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_162(c_void_p(buf632.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(primals_112.data_ptr()), c_void_p(cat_4.data_ptr()), c_void_p(getitem_55.data_ptr()), c_void_p(rsqrt_20.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf637.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(buf641.data_ptr()))
    del primals_112
    buf642 = reinterpret_tensor(buf597, (1568, 384), (384, 1), 0); del buf597  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf641, permute_745, out=buf642)
    del permute_745
    buf603 = buf583; del buf583  # reuse
    buf604 = buf582; del buf582  # reuse
    buf645 = buf529; del buf529  # reuse
    buf646 = buf528; del buf528  # reuse
    buf605 = empty((24, ), device='cpu', dtype=torch.float32)
    buf606 = empty((24, ), device='cpu', dtype=torch.float32)
    buf647 = empty((24, ), device='cpu', dtype=torch.float32)
    buf648 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_163(c_void_p(buf599.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(primals_124.data_ptr()), c_void_p(mul_66.data_ptr()), c_void_p(buf642.data_ptr()), c_void_p(primals_108.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(buf604.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf605.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(buf647.data_ptr()), c_void_p(buf648.data_ptr()))
    buf609 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf607, (384, 1576), (1, 384), 0), view_168, out=buf609)
    del view_168
    buf610 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_164(c_void_p(buf607.data_ptr()), c_void_p(buf610.data_ptr()))
    buf613 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf611, (1536, 1576), (1, 1536), 0), view_166, out=buf613)
    del view_166
    buf614 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf617 = empty((384, ), device='cpu', dtype=torch.float32)
    buf618 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_165(c_void_p(buf611.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(mul_71.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(buf617.data_ptr()), c_void_p(buf618.data_ptr()))
    del mul_71
    buf621 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf619, (384, 1576), (1, 384), 0), view_164, out=buf621)
    del view_164
    buf622 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_166(c_void_p(buf619.data_ptr()), c_void_p(buf622.data_ptr()))
    buf631 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf630, (384, 1576), (1, 384), 0), view_151, out=buf631)
    buf634 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf633, (768, 1576), (1, 768), 0), view_151, out=buf634)
    del view_151
    buf638 = empty((384, ), device='cpu', dtype=torch.float32)
    buf639 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_167(c_void_p(buf632.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(cat_4.data_ptr()), c_void_p(getitem_55.data_ptr()), c_void_p(rsqrt_20.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(buf639.data_ptr()))
    del cat_4
    del getitem_55
    del rsqrt_20
    buf643 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf641, (384, 1568), (1, 384), 0), view_149, out=buf643)
    del view_149
    buf644 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf649 = buf586; del buf586  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_168(c_void_p(buf649.data_ptr()), c_void_p(buf641.data_ptr()), c_void_p(div_64.data_ptr()), c_void_p(buf599.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(primals_124.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(mul_66.data_ptr()), c_void_p(buf604.data_ptr()), c_void_p(buf642.data_ptr()), c_void_p(primals_108.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf644.data_ptr()))
    del div_64
    del mul_66
    del primals_108
    del primals_124
    buf650 = reinterpret_tensor(buf578, (25088, 96), (96, 1), 0); del buf578  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf649, (25088, 24), (24, 1), 0), permute_749, out=buf650)
    del permute_749
    buf651 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf649, (24, 25088), (1, 24), 0), view_146, out=buf651)
    del view_146
    buf652 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf653 = reinterpret_tensor(buf650, (1568, 16, 96), (1536, 96, 1), 0); del buf650  # reuse
    cpp_fused_gelu_gelu_backward_sum_169(c_void_p(buf653.data_ptr()), c_void_p(buf649.data_ptr()), c_void_p(addmm_23.data_ptr()), c_void_p(buf652.data_ptr()))
    del addmm_23
    buf654 = reinterpret_tensor(buf642, (25088, 24), (24, 1), 0); del buf642  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf653, (25088, 96), (96, 1), 0), permute_753, out=buf654)
    del permute_753
    buf655 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf653, (96, 25088), (1, 96), 0), view_144, out=buf655)
    del view_144
    buf656 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf657 = buf646; del buf646  # reuse
    buf658 = buf645; del buf645  # reuse
    buf659 = empty((24, ), device='cpu', dtype=torch.float32)
    buf660 = empty((24, ), device='cpu', dtype=torch.float32)
    buf661 = buf649; del buf649  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_170(c_void_p(buf661.data_ptr()), c_void_p(buf653.data_ptr()), c_void_p(buf654.data_ptr()), c_void_p(primals_102.data_ptr()), c_void_p(mul_61.data_ptr()), c_void_p(div_68.data_ptr()), c_void_p(buf656.data_ptr()), c_void_p(buf657.data_ptr()), c_void_p(buf658.data_ptr()), c_void_p(buf659.data_ptr()), c_void_p(buf660.data_ptr()))
    del div_68
    del mul_61
    del primals_102
    buf662 = buf654; del buf654  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf661, (25088, 24), (24, 1), 0), permute_757, out=buf662)
    del permute_757
    buf663 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf661, (24, 25088), (1, 24), 0), view_142, out=buf663)
    del view_142
    buf664 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf665 = reinterpret_tensor(buf641, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf641  # reuse
    cpp_fused_clone_sum_171(c_void_p(buf661.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf664.data_ptr()), c_void_p(buf665.data_ptr()))
    buf666 = reinterpret_tensor(buf662, (6272, 16, 6), (96, 6, 1), 0); del buf662  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_762, reinterpret_tensor(buf665, (6272, 16, 6), (96, 6, 1), 0), out=buf666)
    del permute_762
    buf667 = reinterpret_tensor(buf594, (6272, 16, 16), (256, 16, 1), 0); del buf594  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf665, (6272, 16, 6), (96, 6, 1), 0), permute_763, out=buf667)
    del permute_763
    buf668 = buf593; del buf593  # reuse
    buf669 = reinterpret_tensor(buf667, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf667  # reuse
    cpp_fused__softmax_backward_data_mul_172(c_void_p(buf669.data_ptr()), c_void_p(alias_41.data_ptr()), c_void_p(buf668.data_ptr()))
    del alias_41
    buf670 = reinterpret_tensor(buf665, (6272, 6, 16), (96, 16, 1), 0); del buf665  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_764, reinterpret_tensor(buf669, (6272, 16, 16), (256, 16, 1), 0), out=buf670)
    del permute_764
    buf671 = reinterpret_tensor(buf602, (6272, 16, 6), (96, 6, 1), 0); del buf602  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf669, (6272, 16, 16), (256, 16, 1), 0), permute_765, out=buf671)
    del permute_765
    buf672 = buf599; del buf599  # reuse
    cpp_fused_view_173(c_void_p(buf666.data_ptr()), c_void_p(buf672.data_ptr()))
    buf673 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf672, (24, 25088), (1, 24), 0), view_129, out=buf673)
    buf674 = reinterpret_tensor(buf666, (25088, 24), (24, 1), 0); del buf666  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf672, permute_770, out=buf674)
    del permute_770
    buf675 = buf600; del buf600  # reuse
    cpp_fused_clone_174(c_void_p(buf671.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(buf675.data_ptr()))
    buf676 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf675, (48, 25088), (1, 48), 0), view_129, out=buf676)
    del view_129
    buf677 = reinterpret_tensor(buf671, (25088, 24), (24, 1), 0); del buf671  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf675, (25088, 48), (48, 1), 0), permute_775, out=buf677)
    del permute_775
    buf682 = reinterpret_tensor(buf635, (8, 197, 384), (75648, 384, 1), 0); del buf635  # reuse
    cpp_fused_add_select_backward_slice_backward_175(c_void_p(buf640.data_ptr()), c_void_p(buf682.data_ptr()))
    buf683 = reinterpret_tensor(buf611, (1576, 1536), (1536, 1), 0); del buf611  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf682, (1576, 384), (384, 1), 0), permute_777, out=buf683)
    del permute_777
    buf686 = reinterpret_tensor(buf683, (8, 197, 1536), (302592, 1536, 1), 0); del buf683  # reuse
    cpp_fused_gelu_gelu_backward_176(c_void_p(buf686.data_ptr()), c_void_p(addmm_20.data_ptr()))
    del addmm_20
    buf687 = reinterpret_tensor(buf640, (1576, 384), (384, 1), 0); del buf640  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf686, (1576, 1536), (1536, 1), 0), permute_781, out=buf687)
    del permute_781
    buf690 = buf637; del buf637  # reuse
    buf691 = buf636; del buf636  # reuse
    buf694 = reinterpret_tensor(buf632, (8, 197, 384), (75648, 384, 1), 0); del buf632  # reuse
    cpp_fused_add_native_layer_norm_backward_177(c_void_p(buf687.data_ptr()), c_void_p(primals_90.data_ptr()), c_void_p(mul_53.data_ptr()), c_void_p(buf682.data_ptr()), c_void_p(div_70.data_ptr()), c_void_p(buf690.data_ptr()), c_void_p(buf691.data_ptr()), c_void_p(buf694.data_ptr()))
    del div_70
    del primals_90
    buf695 = buf630; del buf630  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf694, (1576, 384), (384, 1), 0), permute_785, out=buf695)
    del permute_785
    buf698 = reinterpret_tensor(buf619, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf619  # reuse
    cpp_fused_clone_178(c_void_p(buf695.data_ptr()), c_void_p(buf698.data_ptr()))
    buf699 = reinterpret_tensor(buf695, (48, 197, 64), (12608, 64, 1), 0); del buf695  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_790, reinterpret_tensor(buf698, (48, 197, 64), (12608, 64, 1), 0), out=buf699)
    del permute_790
    buf705 = buf612; del buf612  # reuse
    cpp_fused_view_179(c_void_p(buf699.data_ptr()), c_void_p(buf705.data_ptr()))
    buf707 = reinterpret_tensor(buf699, (1576, 384), (384, 1), 0); del buf699  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf705, permute_798, out=buf707)
    del permute_798
    buf700 = reinterpret_tensor(buf627, (48, 197, 197), (38809, 197, 1), 0); del buf627  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf698, (48, 197, 64), (12608, 64, 1), 0), permute_791, out=buf700)
    del permute_791
    buf701 = buf626; del buf626  # reuse
    buf702 = reinterpret_tensor(buf700, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf700  # reuse
    cpp_fused__softmax_backward_data_mul_180(c_void_p(buf702.data_ptr()), c_void_p(alias_42.data_ptr()), c_void_p(buf701.data_ptr()))
    del alias_42
    buf703 = reinterpret_tensor(buf698, (48, 64, 197), (12608, 197, 1), 0); del buf698  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_792, reinterpret_tensor(buf702, (48, 197, 197), (38809, 197, 1), 0), out=buf703)
    del permute_792
    buf704 = reinterpret_tensor(buf607, (48, 197, 64), (12608, 64, 1), 0); del buf607  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf702, (48, 197, 197), (38809, 197, 1), 0), permute_793, out=buf704)
    del permute_793
    buf708 = buf633; del buf633  # reuse
    cpp_fused_clone_181(c_void_p(buf704.data_ptr()), c_void_p(buf703.data_ptr()), c_void_p(buf708.data_ptr()))
    buf710 = reinterpret_tensor(buf704, (1576, 384), (384, 1), 0); del buf704  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf708, (1576, 768), (768, 1), 0), permute_803, out=buf710)
    del permute_803
    buf711 = buf691; del buf691  # reuse
    buf712 = buf690; del buf690  # reuse
    buf715 = reinterpret_tensor(buf703, (8, 197, 384), (75648, 384, 1), 0); del buf703  # reuse
    buf716 = reinterpret_tensor(buf670, (1568, 384), (384, 1), 0); del buf670  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_182(c_void_p(buf707.data_ptr()), c_void_p(buf710.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(cat_3.data_ptr()), c_void_p(getitem_41.data_ptr()), c_void_p(rsqrt_15.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf711.data_ptr()), c_void_p(buf712.data_ptr()), c_void_p(buf715.data_ptr()), c_void_p(buf716.data_ptr()))
    del primals_84
    buf717 = reinterpret_tensor(buf672, (1568, 384), (384, 1), 0); del buf672  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf716, permute_805, out=buf717)
    del permute_805
    buf678 = buf658; del buf658  # reuse
    buf679 = buf657; del buf657  # reuse
    buf720 = buf604; del buf604  # reuse
    buf721 = buf603; del buf603  # reuse
    buf680 = empty((24, ), device='cpu', dtype=torch.float32)
    buf681 = empty((24, ), device='cpu', dtype=torch.float32)
    buf722 = empty((24, ), device='cpu', dtype=torch.float32)
    buf723 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_183(c_void_p(buf674.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(primals_96.data_ptr()), c_void_p(mul_48.data_ptr()), c_void_p(buf717.data_ptr()), c_void_p(primals_80.data_ptr()), c_void_p(buf678.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(buf720.data_ptr()), c_void_p(buf721.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(buf681.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(buf723.data_ptr()))
    buf684 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf682, (384, 1576), (1, 384), 0), view_127, out=buf684)
    del view_127
    buf685 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_184(c_void_p(buf682.data_ptr()), c_void_p(buf685.data_ptr()))
    buf688 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf686, (1536, 1576), (1, 1536), 0), view_125, out=buf688)
    del view_125
    buf689 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf692 = empty((384, ), device='cpu', dtype=torch.float32)
    buf693 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_185(c_void_p(buf686.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(mul_53.data_ptr()), c_void_p(buf689.data_ptr()), c_void_p(buf692.data_ptr()), c_void_p(buf693.data_ptr()))
    del mul_53
    buf696 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf694, (384, 1576), (1, 384), 0), view_123, out=buf696)
    del view_123
    buf697 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_186(c_void_p(buf694.data_ptr()), c_void_p(buf697.data_ptr()))
    buf706 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf705, (384, 1576), (1, 384), 0), view_110, out=buf706)
    buf709 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf708, (768, 1576), (1, 768), 0), view_110, out=buf709)
    del view_110
    buf713 = empty((384, ), device='cpu', dtype=torch.float32)
    buf714 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_187(c_void_p(buf707.data_ptr()), c_void_p(buf710.data_ptr()), c_void_p(cat_3.data_ptr()), c_void_p(getitem_41.data_ptr()), c_void_p(rsqrt_15.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(buf714.data_ptr()))
    del cat_3
    del getitem_41
    del rsqrt_15
    buf718 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf716, (384, 1568), (1, 384), 0), view_108, out=buf718)
    del view_108
    buf719 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf724 = buf661; del buf661  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_188(c_void_p(buf724.data_ptr()), c_void_p(buf716.data_ptr()), c_void_p(div_69.data_ptr()), c_void_p(buf674.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(primals_96.data_ptr()), c_void_p(buf678.data_ptr()), c_void_p(mul_48.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(buf717.data_ptr()), c_void_p(primals_80.data_ptr()), c_void_p(buf720.data_ptr()), c_void_p(buf721.data_ptr()), c_void_p(buf719.data_ptr()))
    del div_69
    del mul_48
    del primals_80
    del primals_96
    buf725 = reinterpret_tensor(buf653, (25088, 96), (96, 1), 0); del buf653  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf724, (25088, 24), (24, 1), 0), permute_809, out=buf725)
    del permute_809
    buf726 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf724, (24, 25088), (1, 24), 0), view_105, out=buf726)
    del view_105
    buf727 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf728 = reinterpret_tensor(buf725, (1568, 16, 96), (1536, 96, 1), 0); del buf725  # reuse
    cpp_fused_gelu_gelu_backward_sum_189(c_void_p(buf728.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(addmm_16.data_ptr()), c_void_p(buf727.data_ptr()))
    del addmm_16
    buf729 = reinterpret_tensor(buf717, (25088, 24), (24, 1), 0); del buf717  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf728, (25088, 96), (96, 1), 0), permute_813, out=buf729)
    del permute_813
    buf730 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf728, (96, 25088), (1, 96), 0), view_103, out=buf730)
    del view_103
    buf731 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf732 = buf721; del buf721  # reuse
    buf733 = buf720; del buf720  # reuse
    buf734 = empty((24, ), device='cpu', dtype=torch.float32)
    buf735 = empty((24, ), device='cpu', dtype=torch.float32)
    buf736 = buf724; del buf724  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_190(c_void_p(buf736.data_ptr()), c_void_p(buf728.data_ptr()), c_void_p(buf729.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(mul_43.data_ptr()), c_void_p(div_73.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf733.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf735.data_ptr()))
    del div_73
    del mul_43
    del primals_74
    buf737 = buf729; del buf729  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf736, (25088, 24), (24, 1), 0), permute_817, out=buf737)
    del permute_817
    buf738 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf736, (24, 25088), (1, 24), 0), view_101, out=buf738)
    del view_101
    buf739 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf740 = reinterpret_tensor(buf716, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf716  # reuse
    cpp_fused_clone_sum_191(c_void_p(buf736.data_ptr()), c_void_p(buf737.data_ptr()), c_void_p(buf739.data_ptr()), c_void_p(buf740.data_ptr()))
    buf741 = reinterpret_tensor(buf737, (6272, 16, 6), (96, 6, 1), 0); del buf737  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_822, reinterpret_tensor(buf740, (6272, 16, 6), (96, 6, 1), 0), out=buf741)
    del permute_822
    buf742 = reinterpret_tensor(buf669, (6272, 16, 16), (256, 16, 1), 0); del buf669  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf740, (6272, 16, 6), (96, 6, 1), 0), permute_823, out=buf742)
    del permute_823
    buf743 = buf668; del buf668  # reuse
    buf744 = reinterpret_tensor(buf742, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf742  # reuse
    cpp_fused__softmax_backward_data_mul_192(c_void_p(buf744.data_ptr()), c_void_p(alias_43.data_ptr()), c_void_p(buf743.data_ptr()))
    del alias_43
    buf745 = reinterpret_tensor(buf740, (6272, 6, 16), (96, 16, 1), 0); del buf740  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_824, reinterpret_tensor(buf744, (6272, 16, 16), (256, 16, 1), 0), out=buf745)
    del permute_824
    buf746 = reinterpret_tensor(buf677, (6272, 16, 6), (96, 6, 1), 0); del buf677  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf744, (6272, 16, 16), (256, 16, 1), 0), permute_825, out=buf746)
    del permute_825
    buf747 = buf674; del buf674  # reuse
    cpp_fused_view_193(c_void_p(buf741.data_ptr()), c_void_p(buf747.data_ptr()))
    buf748 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf747, (24, 25088), (1, 24), 0), view_88, out=buf748)
    buf749 = reinterpret_tensor(buf741, (25088, 24), (24, 1), 0); del buf741  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf747, permute_830, out=buf749)
    del permute_830
    buf750 = buf675; del buf675  # reuse
    cpp_fused_clone_194(c_void_p(buf746.data_ptr()), c_void_p(buf745.data_ptr()), c_void_p(buf750.data_ptr()))
    buf751 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf750, (48, 25088), (1, 48), 0), view_88, out=buf751)
    del view_88
    buf752 = reinterpret_tensor(buf746, (25088, 24), (24, 1), 0); del buf746  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf750, (25088, 48), (48, 1), 0), permute_835, out=buf752)
    del permute_835
    buf757 = reinterpret_tensor(buf710, (8, 197, 384), (75648, 384, 1), 0); del buf710  # reuse
    cpp_fused_add_select_backward_slice_backward_195(c_void_p(buf715.data_ptr()), c_void_p(buf757.data_ptr()))
    buf758 = reinterpret_tensor(buf686, (1576, 1536), (1536, 1), 0); del buf686  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf757, (1576, 384), (384, 1), 0), permute_837, out=buf758)
    del permute_837
    buf761 = reinterpret_tensor(buf758, (8, 197, 1536), (302592, 1536, 1), 0); del buf758  # reuse
    cpp_fused_gelu_gelu_backward_196(c_void_p(buf761.data_ptr()), c_void_p(addmm_13.data_ptr()))
    del addmm_13
    buf762 = reinterpret_tensor(buf715, (1576, 384), (384, 1), 0); del buf715  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf761, (1576, 1536), (1536, 1), 0), permute_841, out=buf762)
    del permute_841
    buf765 = buf712; del buf712  # reuse
    buf766 = buf711; del buf711  # reuse
    buf769 = reinterpret_tensor(buf707, (8, 197, 384), (75648, 384, 1), 0); del buf707  # reuse
    cpp_fused_add_native_layer_norm_backward_197(c_void_p(buf762.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(mul_35.data_ptr()), c_void_p(buf757.data_ptr()), c_void_p(div_75.data_ptr()), c_void_p(buf765.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(buf769.data_ptr()))
    del div_75
    del primals_62
    buf770 = buf705; del buf705  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf769, (1576, 384), (384, 1), 0), permute_845, out=buf770)
    del permute_845
    buf773 = reinterpret_tensor(buf694, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf694  # reuse
    cpp_fused_clone_198(c_void_p(buf770.data_ptr()), c_void_p(buf773.data_ptr()))
    buf774 = reinterpret_tensor(buf770, (48, 197, 64), (12608, 64, 1), 0); del buf770  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_850, reinterpret_tensor(buf773, (48, 197, 64), (12608, 64, 1), 0), out=buf774)
    del permute_850
    buf780 = buf687; del buf687  # reuse
    cpp_fused_view_199(c_void_p(buf774.data_ptr()), c_void_p(buf780.data_ptr()))
    buf782 = reinterpret_tensor(buf774, (1576, 384), (384, 1), 0); del buf774  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf780, permute_858, out=buf782)
    del permute_858
    buf775 = reinterpret_tensor(buf702, (48, 197, 197), (38809, 197, 1), 0); del buf702  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf773, (48, 197, 64), (12608, 64, 1), 0), permute_851, out=buf775)
    del permute_851
    buf776 = buf701; del buf701  # reuse
    buf777 = reinterpret_tensor(buf775, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf775  # reuse
    cpp_fused__softmax_backward_data_mul_200(c_void_p(buf777.data_ptr()), c_void_p(alias_44.data_ptr()), c_void_p(buf776.data_ptr()))
    del alias_44
    buf778 = reinterpret_tensor(buf773, (48, 64, 197), (12608, 197, 1), 0); del buf773  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_852, reinterpret_tensor(buf777, (48, 197, 197), (38809, 197, 1), 0), out=buf778)
    del permute_852
    buf779 = reinterpret_tensor(buf682, (48, 197, 64), (12608, 64, 1), 0); del buf682  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf777, (48, 197, 197), (38809, 197, 1), 0), permute_853, out=buf779)
    del permute_853
    buf783 = buf708; del buf708  # reuse
    cpp_fused_clone_201(c_void_p(buf779.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(buf783.data_ptr()))
    buf785 = reinterpret_tensor(buf779, (1576, 384), (384, 1), 0); del buf779  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf783, (1576, 768), (768, 1), 0), permute_863, out=buf785)
    del permute_863
    buf786 = buf766; del buf766  # reuse
    buf787 = buf765; del buf765  # reuse
    buf790 = reinterpret_tensor(buf778, (8, 197, 384), (75648, 384, 1), 0); del buf778  # reuse
    buf791 = reinterpret_tensor(buf745, (1568, 384), (384, 1), 0); del buf745  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_202(c_void_p(buf782.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(cat_2.data_ptr()), c_void_p(getitem_27.data_ptr()), c_void_p(rsqrt_10.data_ptr()), c_void_p(buf769.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(buf787.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(buf791.data_ptr()))
    del primals_56
    buf792 = reinterpret_tensor(buf747, (1568, 384), (384, 1), 0); del buf747  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf791, permute_865, out=buf792)
    del permute_865
    buf753 = buf733; del buf733  # reuse
    buf754 = buf732; del buf732  # reuse
    buf795 = buf679; del buf679  # reuse
    buf796 = buf678; del buf678  # reuse
    buf755 = empty((24, ), device='cpu', dtype=torch.float32)
    buf756 = empty((24, ), device='cpu', dtype=torch.float32)
    buf797 = empty((24, ), device='cpu', dtype=torch.float32)
    buf798 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_203(c_void_p(buf749.data_ptr()), c_void_p(buf752.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(mul_30.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf795.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(buf756.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(buf798.data_ptr()))
    buf759 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf757, (384, 1576), (1, 384), 0), view_86, out=buf759)
    del view_86
    buf760 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_204(c_void_p(buf757.data_ptr()), c_void_p(buf760.data_ptr()))
    buf763 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf761, (1536, 1576), (1, 1536), 0), view_84, out=buf763)
    del view_84
    buf764 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf767 = empty((384, ), device='cpu', dtype=torch.float32)
    buf768 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_205(c_void_p(buf761.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(mul_35.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf767.data_ptr()), c_void_p(buf768.data_ptr()))
    del mul_35
    buf771 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf769, (384, 1576), (1, 384), 0), view_82, out=buf771)
    del view_82
    buf772 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_206(c_void_p(buf769.data_ptr()), c_void_p(buf772.data_ptr()))
    buf781 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf780, (384, 1576), (1, 384), 0), view_69, out=buf781)
    buf784 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf783, (768, 1576), (1, 768), 0), view_69, out=buf784)
    del view_69
    buf788 = empty((384, ), device='cpu', dtype=torch.float32)
    buf789 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_207(c_void_p(buf782.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(cat_2.data_ptr()), c_void_p(getitem_27.data_ptr()), c_void_p(rsqrt_10.data_ptr()), c_void_p(buf788.data_ptr()), c_void_p(buf789.data_ptr()))
    del cat_2
    del getitem_27
    del rsqrt_10
    buf793 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf791, (384, 1568), (1, 384), 0), view_67, out=buf793)
    del view_67
    buf794 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf799 = buf736; del buf736  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_208(c_void_p(buf799.data_ptr()), c_void_p(buf791.data_ptr()), c_void_p(div_74.data_ptr()), c_void_p(buf749.data_ptr()), c_void_p(buf752.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(mul_30.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(buf795.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf794.data_ptr()))
    del div_74
    del mul_30
    del primals_52
    del primals_68
    buf800 = reinterpret_tensor(buf728, (25088, 96), (96, 1), 0); del buf728  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf799, (25088, 24), (24, 1), 0), permute_869, out=buf800)
    del permute_869
    buf801 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf799, (24, 25088), (1, 24), 0), view_64, out=buf801)
    del view_64
    buf802 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf803 = reinterpret_tensor(buf800, (1568, 16, 96), (1536, 96, 1), 0); del buf800  # reuse
    cpp_fused_gelu_gelu_backward_sum_209(c_void_p(buf803.data_ptr()), c_void_p(buf799.data_ptr()), c_void_p(addmm_9.data_ptr()), c_void_p(buf802.data_ptr()))
    del addmm_9
    buf804 = reinterpret_tensor(buf792, (25088, 24), (24, 1), 0); del buf792  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf803, (25088, 96), (96, 1), 0), permute_873, out=buf804)
    del permute_873
    buf805 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf803, (96, 25088), (1, 96), 0), view_62, out=buf805)
    del view_62
    buf806 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf807 = buf796; del buf796  # reuse
    buf808 = buf795; del buf795  # reuse
    buf809 = empty((24, ), device='cpu', dtype=torch.float32)
    buf810 = empty((24, ), device='cpu', dtype=torch.float32)
    buf811 = buf799; del buf799  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_210(c_void_p(buf811.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(buf804.data_ptr()), c_void_p(primals_46.data_ptr()), c_void_p(mul_25.data_ptr()), c_void_p(div_78.data_ptr()), c_void_p(buf806.data_ptr()), c_void_p(buf807.data_ptr()), c_void_p(buf808.data_ptr()), c_void_p(buf809.data_ptr()), c_void_p(buf810.data_ptr()))
    del div_78
    del mul_25
    del primals_46
    buf812 = buf804; del buf804  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf811, (25088, 24), (24, 1), 0), permute_877, out=buf812)
    del permute_877
    buf813 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf811, (24, 25088), (1, 24), 0), view_60, out=buf813)
    del view_60
    buf814 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf815 = reinterpret_tensor(buf791, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf791  # reuse
    cpp_fused_clone_sum_211(c_void_p(buf811.data_ptr()), c_void_p(buf812.data_ptr()), c_void_p(buf814.data_ptr()), c_void_p(buf815.data_ptr()))
    buf816 = reinterpret_tensor(buf812, (6272, 16, 6), (96, 6, 1), 0); del buf812  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_882, reinterpret_tensor(buf815, (6272, 16, 6), (96, 6, 1), 0), out=buf816)
    del permute_882
    buf817 = reinterpret_tensor(buf744, (6272, 16, 16), (256, 16, 1), 0); del buf744  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf815, (6272, 16, 6), (96, 6, 1), 0), permute_883, out=buf817)
    del permute_883
    buf818 = buf743; del buf743  # reuse
    buf819 = reinterpret_tensor(buf817, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf817  # reuse
    cpp_fused__softmax_backward_data_mul_212(c_void_p(buf819.data_ptr()), c_void_p(alias_45.data_ptr()), c_void_p(buf818.data_ptr()))
    del alias_45
    buf820 = reinterpret_tensor(buf815, (6272, 6, 16), (96, 16, 1), 0); del buf815  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_884, reinterpret_tensor(buf819, (6272, 16, 16), (256, 16, 1), 0), out=buf820)
    del permute_884
    buf821 = reinterpret_tensor(buf752, (6272, 16, 6), (96, 6, 1), 0); del buf752  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf819, (6272, 16, 16), (256, 16, 1), 0), permute_885, out=buf821)
    del permute_885
    buf822 = buf749; del buf749  # reuse
    cpp_fused_view_213(c_void_p(buf816.data_ptr()), c_void_p(buf822.data_ptr()))
    buf823 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf822, (24, 25088), (1, 24), 0), view_47, out=buf823)
    buf824 = reinterpret_tensor(buf816, (25088, 24), (24, 1), 0); del buf816  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf822, permute_890, out=buf824)
    del permute_890
    buf825 = buf750; del buf750  # reuse
    cpp_fused_clone_214(c_void_p(buf821.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf825.data_ptr()))
    buf826 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf825, (48, 25088), (1, 48), 0), view_47, out=buf826)
    del view_47
    buf827 = reinterpret_tensor(buf821, (25088, 24), (24, 1), 0); del buf821  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf825, (25088, 48), (48, 1), 0), permute_895, out=buf827)
    del permute_895
    buf832 = reinterpret_tensor(buf785, (8, 197, 384), (75648, 384, 1), 0); del buf785  # reuse
    cpp_fused_add_select_backward_slice_backward_215(c_void_p(buf790.data_ptr()), c_void_p(buf832.data_ptr()))
    buf833 = reinterpret_tensor(buf761, (1576, 1536), (1536, 1), 0); del buf761  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf832, (1576, 384), (384, 1), 0), permute_897, out=buf833)
    del permute_897
    buf836 = reinterpret_tensor(buf833, (8, 197, 1536), (302592, 1536, 1), 0); del buf833  # reuse
    cpp_fused_gelu_gelu_backward_216(c_void_p(buf836.data_ptr()), c_void_p(addmm_6.data_ptr()))
    del addmm_6
    buf837 = reinterpret_tensor(buf790, (1576, 384), (384, 1), 0); del buf790  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf836, (1576, 1536), (1536, 1), 0), permute_901, out=buf837)
    del permute_901
    buf840 = buf787; del buf787  # reuse
    buf841 = buf786; del buf786  # reuse
    buf844 = reinterpret_tensor(buf782, (8, 197, 384), (75648, 384, 1), 0); del buf782  # reuse
    cpp_fused_add_native_layer_norm_backward_217(c_void_p(buf837.data_ptr()), c_void_p(primals_34.data_ptr()), c_void_p(mul_17.data_ptr()), c_void_p(buf832.data_ptr()), c_void_p(div_80.data_ptr()), c_void_p(buf840.data_ptr()), c_void_p(buf841.data_ptr()), c_void_p(buf844.data_ptr()))
    del div_80
    del primals_34
    buf845 = buf780; del buf780  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf844, (1576, 384), (384, 1), 0), permute_905, out=buf845)
    del permute_905
    buf848 = reinterpret_tensor(buf769, (8, 6, 197, 64), (75648, 12608, 64, 1), 0); del buf769  # reuse
    cpp_fused_clone_218(c_void_p(buf845.data_ptr()), c_void_p(buf848.data_ptr()))
    buf849 = reinterpret_tensor(buf845, (48, 197, 64), (12608, 64, 1), 0); del buf845  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_910, reinterpret_tensor(buf848, (48, 197, 64), (12608, 64, 1), 0), out=buf849)
    del permute_910
    buf855 = buf762; del buf762  # reuse
    cpp_fused_view_219(c_void_p(buf849.data_ptr()), c_void_p(buf855.data_ptr()))
    buf857 = reinterpret_tensor(buf849, (1576, 384), (384, 1), 0); del buf849  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf855, permute_918, out=buf857)
    del permute_918
    buf850 = reinterpret_tensor(buf777, (48, 197, 197), (38809, 197, 1), 0); del buf777  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf848, (48, 197, 64), (12608, 64, 1), 0), permute_911, out=buf850)
    del permute_911
    buf851 = buf776; del buf776  # reuse
    buf852 = reinterpret_tensor(buf850, (8, 6, 197, 197), (232854, 38809, 197, 1), 0); del buf850  # reuse
    cpp_fused__softmax_backward_data_mul_220(c_void_p(buf852.data_ptr()), c_void_p(alias_46.data_ptr()), c_void_p(buf851.data_ptr()))
    del alias_46
    del buf851
    buf853 = reinterpret_tensor(buf848, (48, 64, 197), (12608, 197, 1), 0); del buf848  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_912, reinterpret_tensor(buf852, (48, 197, 197), (38809, 197, 1), 0), out=buf853)
    del permute_912
    buf854 = reinterpret_tensor(buf757, (48, 197, 64), (12608, 64, 1), 0); del buf757  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf852, (48, 197, 197), (38809, 197, 1), 0), permute_913, out=buf854)
    del buf852
    del permute_913
    buf858 = buf783; del buf783  # reuse
    cpp_fused_clone_221(c_void_p(buf854.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(buf858.data_ptr()))
    buf860 = reinterpret_tensor(buf854, (1576, 384), (384, 1), 0); del buf854  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf858, (1576, 768), (768, 1), 0), permute_923, out=buf860)
    del permute_923
    buf861 = buf841; del buf841  # reuse
    buf862 = buf840; del buf840  # reuse
    buf865 = reinterpret_tensor(buf853, (8, 197, 384), (75648, 384, 1), 0); del buf853  # reuse
    buf866 = reinterpret_tensor(buf820, (1568, 384), (384, 1), 0); del buf820  # reuse
    cpp_fused__unsafe_view_add_clone_native_layer_norm_native_layer_norm_backward_222(c_void_p(buf857.data_ptr()), c_void_p(buf860.data_ptr()), c_void_p(primals_28.data_ptr()), c_void_p(cat_1.data_ptr()), c_void_p(getitem_13.data_ptr()), c_void_p(rsqrt_5.data_ptr()), c_void_p(buf844.data_ptr()), c_void_p(buf861.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(buf865.data_ptr()), c_void_p(buf866.data_ptr()))
    del buf861
    del buf862
    del primals_28
    buf867 = reinterpret_tensor(buf822, (1568, 384), (384, 1), 0); del buf822  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf866, permute_925, out=buf867)
    del permute_925
    buf828 = buf808; del buf808  # reuse
    buf829 = buf807; del buf807  # reuse
    buf870 = buf754; del buf754  # reuse
    buf871 = buf753; del buf753  # reuse
    buf830 = empty((24, ), device='cpu', dtype=torch.float32)
    buf831 = empty((24, ), device='cpu', dtype=torch.float32)
    buf872 = empty((24, ), device='cpu', dtype=torch.float32)
    buf873 = empty((24, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_223(c_void_p(buf824.data_ptr()), c_void_p(buf827.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(mul_12.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(buf828.data_ptr()), c_void_p(buf829.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf830.data_ptr()), c_void_p(buf831.data_ptr()), c_void_p(buf872.data_ptr()), c_void_p(buf873.data_ptr()))
    buf834 = empty((384, 1536), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf832, (384, 1576), (1, 384), 0), view_45, out=buf834)
    del view_45
    buf835 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_224(c_void_p(buf832.data_ptr()), c_void_p(buf835.data_ptr()))
    del buf832
    buf838 = empty((1536, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf836, (1536, 1576), (1, 1536), 0), view_43, out=buf838)
    del view_43
    buf839 = empty((1, 1536), device='cpu', dtype=torch.float32)
    buf842 = empty((384, ), device='cpu', dtype=torch.float32)
    buf843 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_225(c_void_p(buf836.data_ptr()), c_void_p(buf837.data_ptr()), c_void_p(mul_17.data_ptr()), c_void_p(buf839.data_ptr()), c_void_p(buf842.data_ptr()), c_void_p(buf843.data_ptr()))
    del buf836
    del buf837
    del mul_17
    buf846 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf844, (384, 1576), (1, 384), 0), view_41, out=buf846)
    del view_41
    buf847 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_226(c_void_p(buf844.data_ptr()), c_void_p(buf847.data_ptr()))
    del buf844
    buf856 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf855, (384, 1576), (1, 384), 0), view_28, out=buf856)
    del buf855
    buf859 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf858, (768, 1576), (1, 768), 0), view_28, out=buf859)
    del buf858
    del view_28
    buf863 = empty((384, ), device='cpu', dtype=torch.float32)
    buf864 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_227(c_void_p(buf857.data_ptr()), c_void_p(buf860.data_ptr()), c_void_p(cat_1.data_ptr()), c_void_p(getitem_13.data_ptr()), c_void_p(rsqrt_5.data_ptr()), c_void_p(buf863.data_ptr()), c_void_p(buf864.data_ptr()))
    del buf857
    del buf860
    del cat_1
    del getitem_13
    del rsqrt_5
    buf868 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf866, (384, 1568), (1, 384), 0), view_26, out=buf868)
    del view_26
    buf869 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf874 = buf811; del buf811  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_228(c_void_p(buf874.data_ptr()), c_void_p(buf866.data_ptr()), c_void_p(div_79.data_ptr()), c_void_p(buf824.data_ptr()), c_void_p(buf827.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(buf828.data_ptr()), c_void_p(mul_12.data_ptr()), c_void_p(buf829.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf869.data_ptr()))
    del buf828
    del buf829
    del div_79
    del mul_12
    del primals_24
    del primals_40
    buf875 = reinterpret_tensor(buf803, (25088, 96), (96, 1), 0); del buf803  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf874, (25088, 24), (24, 1), 0), permute_929, out=buf875)
    del permute_929
    buf876 = empty((24, 96), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf874, (24, 25088), (1, 24), 0), view_23, out=buf876)
    del view_23
    buf877 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf878 = reinterpret_tensor(buf875, (1568, 16, 96), (1536, 96, 1), 0); del buf875  # reuse
    cpp_fused_gelu_gelu_backward_sum_229(c_void_p(buf878.data_ptr()), c_void_p(buf874.data_ptr()), c_void_p(addmm_2.data_ptr()), c_void_p(buf877.data_ptr()))
    del addmm_2
    buf879 = reinterpret_tensor(buf867, (25088, 24), (24, 1), 0); del buf867  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf878, (25088, 96), (96, 1), 0), permute_933, out=buf879)
    del permute_933
    buf880 = empty((96, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf878, (96, 25088), (1, 96), 0), view_21, out=buf880)
    del view_21
    buf881 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf882 = buf871; del buf871  # reuse
    buf883 = buf870; del buf870  # reuse
    buf884 = empty((24, ), device='cpu', dtype=torch.float32)
    buf885 = empty((24, ), device='cpu', dtype=torch.float32)
    buf886 = buf874; del buf874  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_230(c_void_p(buf886.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf879.data_ptr()), c_void_p(primals_18.data_ptr()), c_void_p(mul_7.data_ptr()), c_void_p(div_83.data_ptr()), c_void_p(buf881.data_ptr()), c_void_p(buf882.data_ptr()), c_void_p(buf883.data_ptr()), c_void_p(buf884.data_ptr()), c_void_p(buf885.data_ptr()))
    del buf878
    del div_83
    del mul_7
    del primals_18
    buf887 = buf879; del buf879  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf886, (25088, 24), (24, 1), 0), permute_937, out=buf887)
    del permute_937
    buf888 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf886, (24, 25088), (1, 24), 0), view_19, out=buf888)
    del view_19
    buf889 = empty((1, 24), device='cpu', dtype=torch.float32)
    buf890 = reinterpret_tensor(buf866, (1568, 4, 16, 6), (384, 96, 6, 1), 0); del buf866  # reuse
    cpp_fused_clone_sum_231(c_void_p(buf886.data_ptr()), c_void_p(buf887.data_ptr()), c_void_p(buf889.data_ptr()), c_void_p(buf890.data_ptr()))
    buf891 = reinterpret_tensor(buf887, (6272, 16, 6), (96, 6, 1), 0); del buf887  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_942, reinterpret_tensor(buf890, (6272, 16, 6), (96, 6, 1), 0), out=buf891)
    del permute_942
    buf892 = reinterpret_tensor(buf819, (6272, 16, 16), (256, 16, 1), 0); del buf819  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf890, (6272, 16, 6), (96, 6, 1), 0), permute_943, out=buf892)
    del permute_943
    buf893 = buf818; del buf818  # reuse
    buf894 = reinterpret_tensor(buf892, (1568, 4, 16, 16), (1024, 256, 16, 1), 0); del buf892  # reuse
    cpp_fused__softmax_backward_data_mul_232(c_void_p(buf894.data_ptr()), c_void_p(alias_47.data_ptr()), c_void_p(buf893.data_ptr()))
    del alias_47
    del buf893
    buf895 = reinterpret_tensor(buf890, (6272, 6, 16), (96, 16, 1), 0); del buf890  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_944, reinterpret_tensor(buf894, (6272, 16, 16), (256, 16, 1), 0), out=buf895)
    del permute_944
    buf896 = reinterpret_tensor(buf827, (6272, 16, 6), (96, 6, 1), 0); del buf827  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf894, (6272, 16, 16), (256, 16, 1), 0), permute_945, out=buf896)
    del buf894
    del permute_945
    buf897 = buf824; del buf824  # reuse
    cpp_fused_view_233(c_void_p(buf891.data_ptr()), c_void_p(buf897.data_ptr()))
    buf898 = empty((24, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf897, (24, 25088), (1, 24), 0), view_6, out=buf898)
    buf899 = reinterpret_tensor(buf891, (25088, 24), (24, 1), 0); del buf891  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf897, permute_950, out=buf899)
    del permute_950
    buf900 = buf825; del buf825  # reuse
    cpp_fused_clone_234(c_void_p(buf896.data_ptr()), c_void_p(buf895.data_ptr()), c_void_p(buf900.data_ptr()))
    buf901 = empty((48, 24), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf900, (48, 25088), (1, 48), 0), view_6, out=buf901)
    del view_6
    buf902 = reinterpret_tensor(buf896, (25088, 24), (24, 1), 0); del buf896  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf900, (25088, 48), (48, 1), 0), permute_955, out=buf902)
    del buf900
    del permute_955
    buf903 = buf883; del buf883  # reuse
    buf904 = buf882; del buf882  # reuse
    buf905 = empty((24, ), device='cpu', dtype=torch.float32)
    buf906 = empty((24, ), device='cpu', dtype=torch.float32)
    buf907 = buf886; del buf886  # reuse
    buf908 = empty((1, 197, 384), device='cpu', dtype=torch.float32)
    buf909 = empty((1, 1, 384), device='cpu', dtype=torch.float32)
    buf910 = empty_strided((8, 196, 1), (196, 1, 1568), device='cpu', dtype=torch.float32)
    buf911 = empty_strided((8, 196, 1), (196, 1, 1568), device='cpu', dtype=torch.float32)
    buf912 = empty((384, ), device='cpu', dtype=torch.float32)
    buf913 = empty((384, ), device='cpu', dtype=torch.float32)
    buf914 = reinterpret_tensor(buf895, (8, 196, 384), (75264, 384, 1), 0); del buf895  # reuse
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_select_backward_slice_backward_sum_235(c_void_p(buf907.data_ptr()), c_void_p(buf899.data_ptr()), c_void_p(buf902.data_ptr()), c_void_p(primals_12.data_ptr()), c_void_p(clone_2.data_ptr()), c_void_p(getitem_5.data_ptr()), c_void_p(rsqrt_2.data_ptr()), c_void_p(buf865.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(addmm.data_ptr()), c_void_p(getitem_3.data_ptr()), c_void_p(rsqrt_1.data_ptr()), c_void_p(buf903.data_ptr()), c_void_p(buf904.data_ptr()), c_void_p(buf905.data_ptr()), c_void_p(buf906.data_ptr()), c_void_p(buf908.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf910.data_ptr()), c_void_p(buf911.data_ptr()), c_void_p(buf912.data_ptr()), c_void_p(buf913.data_ptr()), c_void_p(buf914.data_ptr()))
    del addmm
    del buf865
    del buf903
    del buf904
    del getitem_3
    del getitem_5
    del primals_10
    del primals_12
    del rsqrt_1
    del rsqrt_2
    buf915 = reinterpret_tensor(buf902, (1568, 384), (384, 1), 0); del buf902  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf914, (1568, 384), (384, 1), 0), permute_957, out=buf915)
    del permute_957
    buf916 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf914, (384, 1568), (1, 384), 0), view_4, out=buf916)
    del view_4
    buf917 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf918 = buf911; del buf911  # reuse
    buf919 = buf910; del buf910  # reuse
    buf920 = empty((384, ), device='cpu', dtype=torch.float32)
    buf921 = empty((384, ), device='cpu', dtype=torch.float32)
    buf922 = buf907; del buf907  # reuse
    buf923 = empty((1, 24, 4, 4), device='cpu', dtype=torch.float32)
    buf924 = reinterpret_tensor(buf899, (8, 24, 56, 56), (75264, 3136, 56, 1), 0); del buf899  # reuse
    buf925 = reinterpret_tensor(buf897, (1568, 24, 4, 4), (384, 16, 4, 1), 0); del buf897  # reuse
    buf926 = reinterpret_tensor(buf925, (8, 24, 4, 14, 4, 14), (75264, 16, 4, 5376, 1, 384), 0); del buf925  # reuse
    cpp_fused_add_clone_col2im_native_layer_norm_native_layer_norm_backward_sum_236(c_void_p(buf922.data_ptr()), c_void_p(buf926.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()), c_void_p(primals_6.data_ptr()), c_void_p(clone_2.data_ptr()), c_void_p(getitem_1.data_ptr()), c_void_p(rsqrt.data_ptr()), c_void_p(buf917.data_ptr()), c_void_p(buf918.data_ptr()), c_void_p(buf919.data_ptr()), c_void_p(buf920.data_ptr()), c_void_p(buf921.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(buf924.data_ptr()))
    del buf914
    del buf915
    del buf918
    del buf919
    del buf922
    del clone_2
    del getitem_1
    del primals_6
    del rsqrt
    aten.index_put_(buf924, [None, None, unsqueeze_5, add], buf926, True)
    del add
    del buf926
    del unsqueeze_5
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf929 = aten.convolution_backward(buf924, primals_352, primals_4, [24], [4, 4], [3, 3], [1, 1], False, [0, 0], 1, [False, True, True])
    del buf924
    del primals_352
    del primals_4
    buf930 = buf929[1]
    buf931 = buf929[2]
    return (buf923, buf909, buf908, buf930, buf931, buf920, buf921, reinterpret_tensor(buf916, (384, 384), (384, 1), 0), reinterpret_tensor(buf917, (384, ), (1, ), 0), buf912, buf913, buf905, buf906, reinterpret_tensor(buf901, (48, 24), (24, 1), 0), reinterpret_tensor(buf898, (24, 24), (24, 1), 0), reinterpret_tensor(buf888, (24, 24), (24, 1), 0), reinterpret_tensor(buf889, (24, ), (1, ), 0), buf884, buf885, reinterpret_tensor(buf880, (96, 24), (24, 1), 0), reinterpret_tensor(buf881, (96, ), (1, ), 0), reinterpret_tensor(buf876, (24, 96), (96, 1), 0), reinterpret_tensor(buf877, (24, ), (1, ), 0), buf872, buf873, reinterpret_tensor(buf868, (384, 384), (384, 1), 0), reinterpret_tensor(buf869, (384, ), (1, ), 0), buf863, buf864, reinterpret_tensor(buf859, (768, 384), (384, 1), 0), reinterpret_tensor(buf856, (384, 384), (384, 1), 0), reinterpret_tensor(buf846, (384, 384), (384, 1), 0), reinterpret_tensor(buf847, (384, ), (1, ), 0), buf842, buf843, reinterpret_tensor(buf838, (1536, 384), (384, 1), 0), reinterpret_tensor(buf839, (1536, ), (1, ), 0), reinterpret_tensor(buf834, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf835, (384, ), (1, ), 0), buf830, buf831, reinterpret_tensor(buf826, (48, 24), (24, 1), 0), reinterpret_tensor(buf823, (24, 24), (24, 1), 0), reinterpret_tensor(buf813, (24, 24), (24, 1), 0), reinterpret_tensor(buf814, (24, ), (1, ), 0), buf809, buf810, reinterpret_tensor(buf805, (96, 24), (24, 1), 0), reinterpret_tensor(buf806, (96, ), (1, ), 0), reinterpret_tensor(buf801, (24, 96), (96, 1), 0), reinterpret_tensor(buf802, (24, ), (1, ), 0), buf797, buf798, reinterpret_tensor(buf793, (384, 384), (384, 1), 0), reinterpret_tensor(buf794, (384, ), (1, ), 0), buf788, buf789, reinterpret_tensor(buf784, (768, 384), (384, 1), 0), reinterpret_tensor(buf781, (384, 384), (384, 1), 0), reinterpret_tensor(buf771, (384, 384), (384, 1), 0), reinterpret_tensor(buf772, (384, ), (1, ), 0), buf767, buf768, reinterpret_tensor(buf763, (1536, 384), (384, 1), 0), reinterpret_tensor(buf764, (1536, ), (1, ), 0), reinterpret_tensor(buf759, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf760, (384, ), (1, ), 0), buf755, buf756, reinterpret_tensor(buf751, (48, 24), (24, 1), 0), reinterpret_tensor(buf748, (24, 24), (24, 1), 0), reinterpret_tensor(buf738, (24, 24), (24, 1), 0), reinterpret_tensor(buf739, (24, ), (1, ), 0), buf734, buf735, reinterpret_tensor(buf730, (96, 24), (24, 1), 0), reinterpret_tensor(buf731, (96, ), (1, ), 0), reinterpret_tensor(buf726, (24, 96), (96, 1), 0), reinterpret_tensor(buf727, (24, ), (1, ), 0), buf722, buf723, reinterpret_tensor(buf718, (384, 384), (384, 1), 0), reinterpret_tensor(buf719, (384, ), (1, ), 0), buf713, buf714, reinterpret_tensor(buf709, (768, 384), (384, 1), 0), reinterpret_tensor(buf706, (384, 384), (384, 1), 0), reinterpret_tensor(buf696, (384, 384), (384, 1), 0), reinterpret_tensor(buf697, (384, ), (1, ), 0), buf692, buf693, reinterpret_tensor(buf688, (1536, 384), (384, 1), 0), reinterpret_tensor(buf689, (1536, ), (1, ), 0), reinterpret_tensor(buf684, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf685, (384, ), (1, ), 0), buf680, buf681, reinterpret_tensor(buf676, (48, 24), (24, 1), 0), reinterpret_tensor(buf673, (24, 24), (24, 1), 0), reinterpret_tensor(buf663, (24, 24), (24, 1), 0), reinterpret_tensor(buf664, (24, ), (1, ), 0), buf659, buf660, reinterpret_tensor(buf655, (96, 24), (24, 1), 0), reinterpret_tensor(buf656, (96, ), (1, ), 0), reinterpret_tensor(buf651, (24, 96), (96, 1), 0), reinterpret_tensor(buf652, (24, ), (1, ), 0), buf647, buf648, reinterpret_tensor(buf643, (384, 384), (384, 1), 0), reinterpret_tensor(buf644, (384, ), (1, ), 0), buf638, buf639, reinterpret_tensor(buf634, (768, 384), (384, 1), 0), reinterpret_tensor(buf631, (384, 384), (384, 1), 0), reinterpret_tensor(buf621, (384, 384), (384, 1), 0), reinterpret_tensor(buf622, (384, ), (1, ), 0), buf617, buf618, reinterpret_tensor(buf613, (1536, 384), (384, 1), 0), reinterpret_tensor(buf614, (1536, ), (1, ), 0), reinterpret_tensor(buf609, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf610, (384, ), (1, ), 0), buf605, buf606, reinterpret_tensor(buf601, (48, 24), (24, 1), 0), reinterpret_tensor(buf598, (24, 24), (24, 1), 0), reinterpret_tensor(buf588, (24, 24), (24, 1), 0), reinterpret_tensor(buf589, (24, ), (1, ), 0), buf584, buf585, reinterpret_tensor(buf580, (96, 24), (24, 1), 0), reinterpret_tensor(buf581, (96, ), (1, ), 0), reinterpret_tensor(buf576, (24, 96), (96, 1), 0), reinterpret_tensor(buf577, (24, ), (1, ), 0), buf572, buf573, reinterpret_tensor(buf568, (384, 384), (384, 1), 0), reinterpret_tensor(buf569, (384, ), (1, ), 0), buf563, buf564, reinterpret_tensor(buf559, (768, 384), (384, 1), 0), reinterpret_tensor(buf556, (384, 384), (384, 1), 0), reinterpret_tensor(buf546, (384, 384), (384, 1), 0), reinterpret_tensor(buf547, (384, ), (1, ), 0), buf542, buf543, reinterpret_tensor(buf538, (1536, 384), (384, 1), 0), reinterpret_tensor(buf539, (1536, ), (1, ), 0), reinterpret_tensor(buf534, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf535, (384, ), (1, ), 0), buf530, buf531, reinterpret_tensor(buf526, (48, 24), (24, 1), 0), reinterpret_tensor(buf523, (24, 24), (24, 1), 0), reinterpret_tensor(buf513, (24, 24), (24, 1), 0), reinterpret_tensor(buf514, (24, ), (1, ), 0), buf509, buf510, reinterpret_tensor(buf505, (96, 24), (24, 1), 0), reinterpret_tensor(buf506, (96, ), (1, ), 0), reinterpret_tensor(buf501, (24, 96), (96, 1), 0), reinterpret_tensor(buf502, (24, ), (1, ), 0), buf497, buf498, reinterpret_tensor(buf493, (384, 384), (384, 1), 0), reinterpret_tensor(buf494, (384, ), (1, ), 0), buf488, buf489, reinterpret_tensor(buf484, (768, 384), (384, 1), 0), reinterpret_tensor(buf481, (384, 384), (384, 1), 0), reinterpret_tensor(buf471, (384, 384), (384, 1), 0), reinterpret_tensor(buf472, (384, ), (1, ), 0), buf467, buf468, reinterpret_tensor(buf463, (1536, 384), (384, 1), 0), reinterpret_tensor(buf464, (1536, ), (1, ), 0), reinterpret_tensor(buf459, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf460, (384, ), (1, ), 0), buf455, buf456, reinterpret_tensor(buf451, (48, 24), (24, 1), 0), reinterpret_tensor(buf448, (24, 24), (24, 1), 0), reinterpret_tensor(buf438, (24, 24), (24, 1), 0), reinterpret_tensor(buf439, (24, ), (1, ), 0), buf434, buf435, reinterpret_tensor(buf430, (96, 24), (24, 1), 0), reinterpret_tensor(buf431, (96, ), (1, ), 0), reinterpret_tensor(buf426, (24, 96), (96, 1), 0), reinterpret_tensor(buf427, (24, ), (1, ), 0), buf422, buf423, reinterpret_tensor(buf418, (384, 384), (384, 1), 0), reinterpret_tensor(buf419, (384, ), (1, ), 0), buf413, buf414, reinterpret_tensor(buf409, (768, 384), (384, 1), 0), reinterpret_tensor(buf406, (384, 384), (384, 1), 0), reinterpret_tensor(buf396, (384, 384), (384, 1), 0), reinterpret_tensor(buf397, (384, ), (1, ), 0), buf392, buf393, reinterpret_tensor(buf388, (1536, 384), (384, 1), 0), reinterpret_tensor(buf389, (1536, ), (1, ), 0), reinterpret_tensor(buf384, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf385, (384, ), (1, ), 0), buf380, buf381, reinterpret_tensor(buf376, (48, 24), (24, 1), 0), reinterpret_tensor(buf373, (24, 24), (24, 1), 0), reinterpret_tensor(buf363, (24, 24), (24, 1), 0), reinterpret_tensor(buf364, (24, ), (1, ), 0), buf359, buf360, reinterpret_tensor(buf355, (96, 24), (24, 1), 0), reinterpret_tensor(buf356, (96, ), (1, ), 0), reinterpret_tensor(buf351, (24, 96), (96, 1), 0), reinterpret_tensor(buf352, (24, ), (1, ), 0), buf347, buf348, reinterpret_tensor(buf343, (384, 384), (384, 1), 0), reinterpret_tensor(buf344, (384, ), (1, ), 0), buf338, buf339, reinterpret_tensor(buf334, (768, 384), (384, 1), 0), reinterpret_tensor(buf331, (384, 384), (384, 1), 0), reinterpret_tensor(buf321, (384, 384), (384, 1), 0), reinterpret_tensor(buf322, (384, ), (1, ), 0), buf317, buf318, reinterpret_tensor(buf313, (1536, 384), (384, 1), 0), reinterpret_tensor(buf314, (1536, ), (1, ), 0), reinterpret_tensor(buf309, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf310, (384, ), (1, ), 0), buf305, buf306, reinterpret_tensor(buf301, (48, 24), (24, 1), 0), reinterpret_tensor(buf298, (24, 24), (24, 1), 0), reinterpret_tensor(buf288, (24, 24), (24, 1), 0), reinterpret_tensor(buf289, (24, ), (1, ), 0), buf284, buf285, reinterpret_tensor(buf280, (96, 24), (24, 1), 0), reinterpret_tensor(buf281, (96, ), (1, ), 0), reinterpret_tensor(buf276, (24, 96), (96, 1), 0), reinterpret_tensor(buf277, (24, ), (1, ), 0), buf272, buf273, reinterpret_tensor(buf268, (384, 384), (384, 1), 0), reinterpret_tensor(buf269, (384, ), (1, ), 0), buf263, buf264, reinterpret_tensor(buf259, (768, 384), (384, 1), 0), reinterpret_tensor(buf256, (384, 384), (384, 1), 0), reinterpret_tensor(buf246, (384, 384), (384, 1), 0), reinterpret_tensor(buf247, (384, ), (1, ), 0), buf242, buf243, reinterpret_tensor(buf238, (1536, 384), (384, 1), 0), reinterpret_tensor(buf239, (1536, ), (1, ), 0), reinterpret_tensor(buf234, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf235, (384, ), (1, ), 0), buf230, buf231, reinterpret_tensor(buf226, (48, 24), (24, 1), 0), reinterpret_tensor(buf223, (24, 24), (24, 1), 0), reinterpret_tensor(buf213, (24, 24), (24, 1), 0), reinterpret_tensor(buf214, (24, ), (1, ), 0), buf209, buf210, reinterpret_tensor(buf205, (96, 24), (24, 1), 0), reinterpret_tensor(buf206, (96, ), (1, ), 0), reinterpret_tensor(buf201, (24, 96), (96, 1), 0), reinterpret_tensor(buf202, (24, ), (1, ), 0), buf197, buf198, reinterpret_tensor(buf193, (384, 384), (384, 1), 0), reinterpret_tensor(buf194, (384, ), (1, ), 0), buf188, buf189, reinterpret_tensor(buf184, (768, 384), (384, 1), 0), reinterpret_tensor(buf181, (384, 384), (384, 1), 0), reinterpret_tensor(buf171, (384, 384), (384, 1), 0), reinterpret_tensor(buf172, (384, ), (1, ), 0), buf167, buf168, reinterpret_tensor(buf163, (1536, 384), (384, 1), 0), reinterpret_tensor(buf164, (1536, ), (1, ), 0), reinterpret_tensor(buf159, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf160, (384, ), (1, ), 0), buf155, buf156, reinterpret_tensor(buf151, (48, 24), (24, 1), 0), reinterpret_tensor(buf148, (24, 24), (24, 1), 0), reinterpret_tensor(buf138, (24, 24), (24, 1), 0), reinterpret_tensor(buf139, (24, ), (1, ), 0), buf134, buf135, reinterpret_tensor(buf130, (96, 24), (24, 1), 0), reinterpret_tensor(buf131, (96, ), (1, ), 0), reinterpret_tensor(buf126, (24, 96), (96, 1), 0), reinterpret_tensor(buf127, (24, ), (1, ), 0), buf122, buf123, reinterpret_tensor(buf118, (384, 384), (384, 1), 0), reinterpret_tensor(buf119, (384, ), (1, ), 0), buf113, buf114, reinterpret_tensor(buf109, (768, 384), (384, 1), 0), reinterpret_tensor(buf106, (384, 384), (384, 1), 0), reinterpret_tensor(buf96, (384, 384), (384, 1), 0), reinterpret_tensor(buf97, (384, ), (1, ), 0), buf92, buf93, reinterpret_tensor(buf88, (1536, 384), (384, 1), 0), reinterpret_tensor(buf89, (1536, ), (1, ), 0), reinterpret_tensor(buf84, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf85, (384, ), (1, ), 0), buf80, buf81, reinterpret_tensor(buf76, (48, 24), (24, 1), 0), reinterpret_tensor(buf73, (24, 24), (24, 1), 0), reinterpret_tensor(buf63, (24, 24), (24, 1), 0), reinterpret_tensor(buf64, (24, ), (1, ), 0), buf59, buf60, reinterpret_tensor(buf55, (96, 24), (24, 1), 0), reinterpret_tensor(buf56, (96, ), (1, ), 0), reinterpret_tensor(buf51, (24, 96), (96, 1), 0), reinterpret_tensor(buf52, (24, ), (1, ), 0), buf48, buf49, reinterpret_tensor(buf43, (384, 384), (384, 1), 0), reinterpret_tensor(buf44, (384, ), (1, ), 0), buf38, buf39, reinterpret_tensor(buf34, (768, 384), (384, 1), 0), reinterpret_tensor(buf31, (384, 384), (384, 1), 0), reinterpret_tensor(buf21, (384, 384), (384, 1), 0), reinterpret_tensor(buf22, (384, ), (1, ), 0), buf17, buf18, reinterpret_tensor(buf13, (1536, 384), (384, 1), 0), reinterpret_tensor(buf14, (1536, ), (1, ), 0), reinterpret_tensor(buf9, (384, 1536), (1536, 1), 0), reinterpret_tensor(buf10, (384, ), (1, ), 0), buf6, buf7, reinterpret_tensor(buf1, (1000, 384), (384, 1), 0), reinterpret_tensor(buf2, (1000, ), (1, ), 0), None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_4 = rand_strided((24, 3, 7, 7), (147, 1, 21, 3), device='cpu', dtype=torch.float32)
    primals_6 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_12 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_18 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_24 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_80 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_84 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_90 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_96 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_102 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_108 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_118 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_130 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_140 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_146 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_158 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_164 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_168 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_174 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_180 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_186 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_192 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_214 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_220 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_224 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_230 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_236 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_252 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_258 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_264 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_270 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_276 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_286 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_292 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_304 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_308 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_320 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_326 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_332 = rand_strided((24, ), (1, ), device='cpu', dtype=torch.float32)
    primals_336 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_342 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_348 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_352 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    add = rand_strided((4, 14), (14, 1), device='cpu', dtype=torch.int64)
    unsqueeze_5 = rand_strided((4, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.int64)
    clone_2 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    getitem_1 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    view_4 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    getitem_3 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_1 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    getitem_5 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_2 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    view_6 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_19 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_7 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_21 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_2 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_23 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_12 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_26 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_1 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_13 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_5 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_28 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_41 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_17 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_43 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_6 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_45 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_47 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_60 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_25 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_62 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_9 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_64 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_30 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_67 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_2 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_27 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_10 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_69 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_82 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_35 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_84 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_13 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_86 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_88 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_101 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_43 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_103 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_16 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_105 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_48 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_108 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_3 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_41 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_15 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_110 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_123 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_53 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_125 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_20 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_127 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_129 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_142 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_61 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_144 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_23 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_146 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_66 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_149 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_4 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_55 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_20 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_151 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_164 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_71 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_166 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_27 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_168 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_170 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_183 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_79 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_185 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_30 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_187 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_84 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_190 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_5 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_69 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_25 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_192 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_205 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_89 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_207 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_34 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_209 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_211 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_224 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_97 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_226 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_37 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_228 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_102 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_231 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_6 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_83 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_30 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_233 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_246 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_107 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_248 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_41 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_250 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_252 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_265 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_115 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_267 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_44 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_269 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_120 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_272 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_7 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_97 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_35 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_274 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_287 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_125 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_289 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_48 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_291 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_293 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_306 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_133 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_308 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_51 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_310 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_138 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_313 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_8 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_111 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_40 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_315 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_328 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_143 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_330 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_55 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_332 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_334 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_347 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_151 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_349 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_58 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_351 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_156 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_354 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_9 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_125 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_45 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_356 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_369 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_161 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_371 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_62 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_373 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_375 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_388 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_169 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_390 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_65 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_392 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_174 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_395 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_10 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_139 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_50 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_397 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_410 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_179 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_412 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_69 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_414 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_416 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_429 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_187 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_431 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_72 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_433 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_192 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_436 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_11 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_153 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_55 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_438 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_451 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_197 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_453 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_76 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_455 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_457 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    view_470 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    mul_205 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_472 = rand_strided((25088, 24), (24, 1), device='cpu', dtype=torch.float32)
    addmm_79 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    view_474 = rand_strided((25088, 96), (96, 1), device='cpu', dtype=torch.float32)
    mul_210 = rand_strided((1568, 16, 24), (384, 24, 1), device='cpu', dtype=torch.float32)
    view_477 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    cat_12 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_167 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_60 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_479 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_492 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_215 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    view_494 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_83 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    view_496 = rand_strided((1576, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    mul_220 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    clone_184 = rand_strided((8, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_233 = rand_strided((1000, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_24 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_237 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_241 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_25 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_245 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_250 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_251 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_24 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_252 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_253 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_258 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_263 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_265 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_27 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_269 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_273 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_28 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_277 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_282 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_283 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_25 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_284 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_285 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_290 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_295 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_29 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_297 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_301 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_30 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_305 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_310 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_311 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_26 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_312 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_313 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_318 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_323 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_325 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_329 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_333 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_33 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_337 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_342 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_343 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_27 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_344 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_345 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_350 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_355 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_34 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_357 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_361 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_35 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_365 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_370 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_371 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_28 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_372 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_373 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_378 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_383 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_385 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_389 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_393 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_38 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_397 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_402 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_403 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_29 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_404 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_405 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_410 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_415 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_39 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_417 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_421 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_40 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_425 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_430 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_431 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_30 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_432 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_433 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_438 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_443 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_445 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_449 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_453 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_43 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_457 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_462 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_463 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_31 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_464 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_465 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_470 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_475 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_44 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_477 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_481 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_45 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_485 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_490 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_491 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_32 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_492 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_493 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_498 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_503 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_505 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_509 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_513 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_48 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_517 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_522 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_523 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_33 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_524 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_525 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_530 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_535 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_49 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_537 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_541 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_50 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_545 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_550 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_551 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_34 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_552 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_553 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_558 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_563 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_565 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_569 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_573 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_53 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_577 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_582 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_583 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_35 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_584 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_585 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_590 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_595 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_54 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_597 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_601 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_55 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_605 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_610 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_611 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_36 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_612 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_613 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_618 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_623 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_625 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_629 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_633 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_58 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_637 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_642 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_643 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_37 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_644 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_645 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_650 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_655 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_59 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_657 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_661 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_60 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_665 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_670 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_671 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_38 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_672 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_673 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_678 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_683 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_685 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_689 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_693 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_63 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_697 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_702 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_703 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_39 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_704 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_705 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_710 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_715 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_64 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_717 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_721 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_65 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_725 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_730 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_731 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_40 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_732 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_733 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_738 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_743 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_745 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_749 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_753 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_68 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_757 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_762 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_763 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_41 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_764 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_765 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_770 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_775 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_69 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_777 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_781 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_70 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_785 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_790 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_791 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_42 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_792 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_793 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_798 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_803 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_805 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_809 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_813 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_73 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_817 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_822 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_823 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_43 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_824 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_825 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_830 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_835 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_74 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_837 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_841 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_75 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_845 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_850 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_851 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_44 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_852 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_853 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_858 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_863 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_865 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_869 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_873 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_78 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_877 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_882 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_883 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_45 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_884 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_885 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_890 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_895 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_79 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_897 = rand_strided((384, 1536), (1536, 1), device='cpu', dtype=torch.float32)
    permute_901 = rand_strided((1536, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_80 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    permute_905 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_910 = rand_strided((48, 197, 197), (38809, 1, 197), device='cpu', dtype=torch.float32)
    permute_911 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    alias_46 = rand_strided((8, 6, 197, 197), (232854, 1, 1182, 6), device='cpu', dtype=torch.float32)
    permute_912 = rand_strided((48, 64, 197), (12608, 1, 64), device='cpu', dtype=torch.float32)
    permute_913 = rand_strided((48, 197, 64), (12608, 1, 197), device='cpu', dtype=torch.float32)
    permute_918 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_923 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_925 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_929 = rand_strided((24, 96), (96, 1), device='cpu', dtype=torch.float32)
    permute_933 = rand_strided((96, 24), (24, 1), device='cpu', dtype=torch.float32)
    div_83 = rand_strided((1568, 16, 1), (16, 1, 1), device='cpu', dtype=torch.float32)
    permute_937 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_942 = rand_strided((6272, 16, 16), (256, 1, 16), device='cpu', dtype=torch.float32)
    permute_943 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    alias_47 = rand_strided((1568, 4, 16, 16), (1024, 1, 64, 4), device='cpu', dtype=torch.float32)
    permute_944 = rand_strided((6272, 6, 16), (96, 1, 6), device='cpu', dtype=torch.float32)
    permute_945 = rand_strided((6272, 16, 6), (96, 1, 16), device='cpu', dtype=torch.float32)
    permute_950 = rand_strided((24, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_955 = rand_strided((48, 24), (24, 1), device='cpu', dtype=torch.float32)
    permute_957 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_4, primals_6, primals_10, primals_12, primals_18, primals_24, primals_28, primals_34, primals_40, primals_46, primals_52, primals_56, primals_62, primals_68, primals_74, primals_80, primals_84, primals_90, primals_96, primals_102, primals_108, primals_112, primals_118, primals_124, primals_130, primals_136, primals_140, primals_146, primals_152, primals_158, primals_164, primals_168, primals_174, primals_180, primals_186, primals_192, primals_196, primals_202, primals_208, primals_214, primals_220, primals_224, primals_230, primals_236, primals_242, primals_248, primals_252, primals_258, primals_264, primals_270, primals_276, primals_280, primals_286, primals_292, primals_298, primals_304, primals_308, primals_314, primals_320, primals_326, primals_332, primals_336, primals_342, primals_348, primals_352, add, unsqueeze_5, clone_2, getitem_1, rsqrt, view_4, addmm, getitem_3, rsqrt_1, getitem_5, rsqrt_2, view_6, view_19, mul_7, view_21, addmm_2, view_23, mul_12, view_26, cat_1, getitem_13, rsqrt_5, view_28, view_41, mul_17, view_43, addmm_6, view_45, view_47, view_60, mul_25, view_62, addmm_9, view_64, mul_30, view_67, cat_2, getitem_27, rsqrt_10, view_69, view_82, mul_35, view_84, addmm_13, view_86, view_88, view_101, mul_43, view_103, addmm_16, view_105, mul_48, view_108, cat_3, getitem_41, rsqrt_15, view_110, view_123, mul_53, view_125, addmm_20, view_127, view_129, view_142, mul_61, view_144, addmm_23, view_146, mul_66, view_149, cat_4, getitem_55, rsqrt_20, view_151, view_164, mul_71, view_166, addmm_27, view_168, view_170, view_183, mul_79, view_185, addmm_30, view_187, mul_84, view_190, cat_5, getitem_69, rsqrt_25, view_192, view_205, mul_89, view_207, addmm_34, view_209, view_211, view_224, mul_97, view_226, addmm_37, view_228, mul_102, view_231, cat_6, getitem_83, rsqrt_30, view_233, view_246, mul_107, view_248, addmm_41, view_250, view_252, view_265, mul_115, view_267, addmm_44, view_269, mul_120, view_272, cat_7, getitem_97, rsqrt_35, view_274, view_287, mul_125, view_289, addmm_48, view_291, view_293, view_306, mul_133, view_308, addmm_51, view_310, mul_138, view_313, cat_8, getitem_111, rsqrt_40, view_315, view_328, mul_143, view_330, addmm_55, view_332, view_334, view_347, mul_151, view_349, addmm_58, view_351, mul_156, view_354, cat_9, getitem_125, rsqrt_45, view_356, view_369, mul_161, view_371, addmm_62, view_373, view_375, view_388, mul_169, view_390, addmm_65, view_392, mul_174, view_395, cat_10, getitem_139, rsqrt_50, view_397, view_410, mul_179, view_412, addmm_69, view_414, view_416, view_429, mul_187, view_431, addmm_72, view_433, mul_192, view_436, cat_11, getitem_153, rsqrt_55, view_438, view_451, mul_197, view_453, addmm_76, view_455, view_457, view_470, mul_205, view_472, addmm_79, view_474, mul_210, view_477, cat_12, getitem_167, rsqrt_60, view_479, view_492, mul_215, view_494, addmm_83, view_496, mul_220, clone_184, permute_233, div_24, permute_237, permute_241, div_25, permute_245, permute_250, permute_251, alias_24, permute_252, permute_253, permute_258, permute_263, permute_265, div_27, permute_269, permute_273, div_28, permute_277, permute_282, permute_283, alias_25, permute_284, permute_285, permute_290, permute_295, div_29, permute_297, permute_301, div_30, permute_305, permute_310, permute_311, alias_26, permute_312, permute_313, permute_318, permute_323, permute_325, permute_329, permute_333, div_33, permute_337, permute_342, permute_343, alias_27, permute_344, permute_345, permute_350, permute_355, div_34, permute_357, permute_361, div_35, permute_365, permute_370, permute_371, alias_28, permute_372, permute_373, permute_378, permute_383, permute_385, permute_389, permute_393, div_38, permute_397, permute_402, permute_403, alias_29, permute_404, permute_405, permute_410, permute_415, div_39, permute_417, permute_421, div_40, permute_425, permute_430, permute_431, alias_30, permute_432, permute_433, permute_438, permute_443, permute_445, permute_449, permute_453, div_43, permute_457, permute_462, permute_463, alias_31, permute_464, permute_465, permute_470, permute_475, div_44, permute_477, permute_481, div_45, permute_485, permute_490, permute_491, alias_32, permute_492, permute_493, permute_498, permute_503, permute_505, permute_509, permute_513, div_48, permute_517, permute_522, permute_523, alias_33, permute_524, permute_525, permute_530, permute_535, div_49, permute_537, permute_541, div_50, permute_545, permute_550, permute_551, alias_34, permute_552, permute_553, permute_558, permute_563, permute_565, permute_569, permute_573, div_53, permute_577, permute_582, permute_583, alias_35, permute_584, permute_585, permute_590, permute_595, div_54, permute_597, permute_601, div_55, permute_605, permute_610, permute_611, alias_36, permute_612, permute_613, permute_618, permute_623, permute_625, permute_629, permute_633, div_58, permute_637, permute_642, permute_643, alias_37, permute_644, permute_645, permute_650, permute_655, div_59, permute_657, permute_661, div_60, permute_665, permute_670, permute_671, alias_38, permute_672, permute_673, permute_678, permute_683, permute_685, permute_689, permute_693, div_63, permute_697, permute_702, permute_703, alias_39, permute_704, permute_705, permute_710, permute_715, div_64, permute_717, permute_721, div_65, permute_725, permute_730, permute_731, alias_40, permute_732, permute_733, permute_738, permute_743, permute_745, permute_749, permute_753, div_68, permute_757, permute_762, permute_763, alias_41, permute_764, permute_765, permute_770, permute_775, div_69, permute_777, permute_781, div_70, permute_785, permute_790, permute_791, alias_42, permute_792, permute_793, permute_798, permute_803, permute_805, permute_809, permute_813, div_73, permute_817, permute_822, permute_823, alias_43, permute_824, permute_825, permute_830, permute_835, div_74, permute_837, permute_841, div_75, permute_845, permute_850, permute_851, alias_44, permute_852, permute_853, permute_858, permute_863, permute_865, permute_869, permute_873, div_78, permute_877, permute_882, permute_883, alias_45, permute_884, permute_885, permute_890, permute_895, div_79, permute_897, permute_901, div_80, permute_905, permute_910, permute_911, alias_46, permute_912, permute_913, permute_918, permute_923, permute_925, permute_929, permute_933, div_83, permute_937, permute_942, permute_943, alias_47, permute_944, permute_945, permute_950, permute_955, permute_957, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('tnt_s_patch16_224', benchmark_compiled_module)
