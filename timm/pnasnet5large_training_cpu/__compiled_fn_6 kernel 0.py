
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(121L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(4320L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x2 + (4320L*x1) + (522720L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (4320L*x0)));
                        auto tmp2 = static_cast<float>(121.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 / tmp3;
                        auto tmp5 = static_cast<float>(0.0);
                        auto tmp6 = at::vec::Vectorized<float>(tmp5);
                        auto tmp7 = decltype(tmp6)::blendv(tmp4, tmp6, tmp0);
                        tmp7.store(out_ptr1 + static_cast<long>(x2 + (4320L*x1) + (522720L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(3456L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(3456L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr5 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0010330578512396695);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(3456L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr2 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(0.0010330578512396695);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    auto tmp27 = tmp18 * tmp26;
                    auto tmp28 = tmp25 * tmp27;
                    tmp28.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4181760L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                tmp5.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(3456L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(3456L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0010330578512396695);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(3456L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(0.0010330578512396695);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    auto tmp27 = tmp18 * tmp26;
                    auto tmp28 = tmp25 * tmp27;
                    tmp28.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4181760L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(3456L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(3456L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0010330578512396695);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(3456L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(0.0010330578512396695);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    tmp25.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(432L + x1 + (864L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(432L + x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(432L + x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(out_ptr2 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(2160L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(21L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(21L); x3+=static_cast<long>(1L))
                        {
                            auto tmp24 = in_ptr1[static_cast<long>(x1 + (2160L*(std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (2160L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 11L)) + (23760L*(std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (23760L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 11L)) + (261360L*x0))];
                            auto tmp0 = c10::convert<long>((-1L) + x2);
                            auto tmp1 = static_cast<long>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<long>(21);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = c10::convert<long>((-1L) + x3);
                            auto tmp6 = tmp5 >= tmp1;
                            auto tmp7 = tmp5 < tmp3;
                            auto tmp8 = tmp2 & tmp4;
                            auto tmp9 = tmp8 & tmp6;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = in_ptr0[static_cast<long>(x1 + (2160L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))))))) + (2160L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L)))))) >= 0L) ? 0L : 11L)) + (23760L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))))))) + (23760L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(11L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L)))))) >= 0L) ? 0L : 11L)) + (261360L*x0))];
                                auto tmp13 = tmp12 / 1;
                                auto tmp14 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp15 = c10::convert<int>(std::min(11L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))));
                                auto tmp16 = tmp14 < tmp15;
                                auto tmp17 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp18 = c10::convert<int>(std::min(11L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))));
                                auto tmp19 = tmp17 < tmp18;
                                auto tmp20 = tmp16 & tmp19;
                                auto tmp21 = static_cast<float>(0.0);
                                auto tmp22 = tmp20 ? tmp13 : tmp21;
                                return tmp22;
                            }
                            ;
                            auto tmp23 = tmp10 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                            auto tmp25 = tmp24 / 1;
                            auto tmp26 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x2), 2L)));
                            auto tmp27 = c10::convert<int>(std::min(11L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp28 = tmp26 < tmp27;
                            auto tmp29 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x3), 2L)));
                            auto tmp30 = c10::convert<int>(std::min(11L, 1L + (c10::div_floor_integer(x3, 2L))));
                            auto tmp31 = tmp29 < tmp30;
                            auto tmp32 = tmp28 & tmp31;
                            auto tmp33 = static_cast<float>(0.0);
                            auto tmp34 = tmp32 ? tmp25 : tmp33;
                            auto tmp35 = decltype(tmp23)(tmp23 + tmp34);
                            out_ptr0[static_cast<long>(x3 + (21L*x2) + (441L*x1) + (952560L*x0))] = tmp35;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4181760L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(3456L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(3456L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    tmp32.store(out_ptr6 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(2592L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0010330578512396695);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_threshold_backward_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(21L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(21L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(864L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                            auto tmp5 = c10::convert<int>(1L + x1);
                            auto tmp6 = static_cast<int>(0);
                            auto tmp7 = tmp5 >= tmp6;
                            auto tmp8 = static_cast<int>(23);
                            auto tmp9 = tmp5 < tmp8;
                            auto tmp10 = c10::convert<int>(1L + x2);
                            auto tmp11 = tmp10 >= tmp6;
                            auto tmp12 = tmp10 < tmp8;
                            auto tmp13 = tmp7 & tmp9;
                            auto tmp14 = tmp13 & tmp11;
                            auto tmp15 = tmp14 & tmp12;
                            auto tmp16 = [&]
                            {
                                auto tmp17 = masked_load(in_ptr1 + static_cast<long>(20736L + x3 + (864L*x2) + (19872L*x1) + (457056L*x0)), to_float_mask(tmp15));
                                return tmp17;
                            }
                            ;
                            auto tmp18 = decltype(tmp16())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp16(), to_float_mask(tmp15));
                            auto tmp19 = tmp4 + tmp18;
                            auto tmp20 = [&]
                            {
                                auto tmp21 = masked_load(in_ptr2 + static_cast<long>(20736L + x3 + (864L*x2) + (19872L*x1) + (457056L*x0)), to_float_mask(tmp15));
                                return tmp21;
                            }
                            ;
                            auto tmp22 = decltype(tmp20())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp20(), to_float_mask(tmp15));
                            auto tmp23 = decltype(tmp3)::blendv(tmp22, tmp3, tmp0);
                            auto tmp24 = tmp19 + tmp23;
                            auto tmp25 = c10::convert<int>(2L + x1);
                            auto tmp26 = tmp25 >= tmp6;
                            auto tmp27 = static_cast<int>(25);
                            auto tmp28 = tmp25 < tmp27;
                            auto tmp29 = c10::convert<int>(2L + x2);
                            auto tmp30 = tmp29 >= tmp6;
                            auto tmp31 = tmp29 < tmp27;
                            auto tmp32 = tmp26 & tmp28;
                            auto tmp33 = tmp32 & tmp30;
                            auto tmp34 = tmp33 & tmp31;
                            auto tmp35 = [&]
                            {
                                auto tmp36 = masked_load(in_ptr3 + static_cast<long>(44928L + x3 + (864L*x2) + (21600L*x1) + (540000L*x0)), to_float_mask(tmp34));
                                return tmp36;
                            }
                            ;
                            auto tmp37 = decltype(tmp35())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp35(), to_float_mask(tmp34));
                            auto tmp38 = decltype(tmp3)::blendv(tmp37, tmp3, tmp0);
                            auto tmp39 = tmp24 + tmp38;
                            tmp39.store(in_out_ptr0 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4320L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0010330578512396695);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(968L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(968L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0010330578512396695);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr4 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(21L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(21L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(864L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                            auto tmp1 = c10::convert<int>(1L + x1);
                            auto tmp2 = static_cast<int>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<int>(23);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<int>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = masked_load(in_ptr1 + static_cast<long>(20736L + x3 + (864L*x2) + (19872L*x1) + (457056L*x0)), to_float_mask(tmp11));
                                return tmp13;
                            }
                            ;
                            auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                            auto tmp15 = static_cast<float>(0.0);
                            auto tmp16 = at::vec::Vectorized<float>(tmp15);
                            auto tmp17 = decltype(tmp16)::blendv(tmp14, tmp16, tmp0);
                            auto tmp18 = [&]
                            {
                                auto tmp19 = masked_load(in_ptr2 + static_cast<long>(20736L + x3 + (864L*x2) + (19872L*x1) + (457056L*x0)), to_float_mask(tmp11));
                                return tmp19;
                            }
                            ;
                            auto tmp20 = decltype(tmp18())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp18(), to_float_mask(tmp11));
                            auto tmp21 = tmp17 + tmp20;
                            auto tmp22 = c10::convert<int>(2L + x1);
                            auto tmp23 = tmp22 >= tmp2;
                            auto tmp24 = static_cast<int>(25);
                            auto tmp25 = tmp22 < tmp24;
                            auto tmp26 = c10::convert<int>(2L + x2);
                            auto tmp27 = tmp26 >= tmp2;
                            auto tmp28 = tmp26 < tmp24;
                            auto tmp29 = tmp23 & tmp25;
                            auto tmp30 = tmp29 & tmp27;
                            auto tmp31 = tmp30 & tmp28;
                            auto tmp32 = [&]
                            {
                                auto tmp33 = masked_load(in_ptr3 + static_cast<long>(44928L + x3 + (864L*x2) + (21600L*x1) + (540000L*x0)), to_float_mask(tmp31));
                                return tmp33;
                            }
                            ;
                            auto tmp34 = decltype(tmp32())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp32(), to_float_mask(tmp31));
                            auto tmp35 = decltype(tmp16)::blendv(tmp34, tmp16, tmp0);
                            auto tmp36 = tmp21 + tmp35;
                            tmp36.store(out_ptr0 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(21L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(21L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (864L*x3) + (18144L*x2) + (381024L*x1)));
                                auto tmp16 = flag_to_float_vec(in_ptr6 + static_cast<long>(x0 + (864L*x3) + (18144L*x2) + (381024L*x1)));
                                auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (864L*x3) + (18144L*x2) + (381024L*x1)));
                                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                                auto tmp1 = c10::convert<int>(1L + x2);
                                auto tmp2 = static_cast<int>(0);
                                auto tmp3 = tmp1 >= tmp2;
                                auto tmp4 = static_cast<int>(23);
                                auto tmp5 = tmp1 < tmp4;
                                auto tmp6 = c10::convert<int>(1L + x3);
                                auto tmp7 = tmp6 >= tmp2;
                                auto tmp8 = tmp6 < tmp4;
                                auto tmp9 = tmp3 & tmp5;
                                auto tmp10 = tmp9 & tmp7;
                                auto tmp11 = tmp10 & tmp8;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = masked_load(in_ptr5 + static_cast<long>(20736L + x0 + (864L*x3) + (19872L*x2) + (457056L*x1)), to_float_mask(tmp11));
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                auto tmp15 = tmp0 + tmp14;
                                auto tmp17 = c10::convert<int>(3L + x2);
                                auto tmp18 = tmp17 >= tmp2;
                                auto tmp19 = static_cast<int>(27);
                                auto tmp20 = tmp17 < tmp19;
                                auto tmp21 = c10::convert<int>(3L + x3);
                                auto tmp22 = tmp21 >= tmp2;
                                auto tmp23 = tmp21 < tmp19;
                                auto tmp24 = tmp18 & tmp20;
                                auto tmp25 = tmp24 & tmp22;
                                auto tmp26 = tmp25 & tmp23;
                                auto tmp27 = [&]
                                {
                                    auto tmp28 = masked_load(in_ptr7 + static_cast<long>(72576L + x0 + (864L*x3) + (23328L*x2) + (629856L*x1)), to_float_mask(tmp26));
                                    return tmp28;
                                }
                                ;
                                auto tmp29 = decltype(tmp27())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp27(), to_float_mask(tmp26));
                                auto tmp30 = static_cast<float>(0.0);
                                auto tmp31 = at::vec::Vectorized<float>(tmp30);
                                auto tmp32 = decltype(tmp31)::blendv(tmp29, tmp31, tmp16);
                                auto tmp33 = tmp15 + tmp32;
                                auto tmp34 = [&]
                                {
                                    auto tmp35 = masked_load(in_ptr5 + static_cast<long>(20736L + x0 + (864L*x3) + (19872L*x2) + (457056L*x1)), to_float_mask(tmp11));
                                    return tmp35;
                                }
                                ;
                                auto tmp36 = decltype(tmp34())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp34(), to_float_mask(tmp11));
                                auto tmp37 = tmp0 + tmp36;
                                auto tmp38 = [&]
                                {
                                    auto tmp39 = masked_load(in_ptr7 + static_cast<long>(72576L + x0 + (864L*x3) + (23328L*x2) + (629856L*x1)), to_float_mask(tmp26));
                                    return tmp39;
                                }
                                ;
                                auto tmp40 = decltype(tmp38())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp38(), to_float_mask(tmp26));
                                auto tmp41 = decltype(tmp31)::blendv(tmp40, tmp31, tmp16);
                                auto tmp42 = tmp37 + tmp41;
                                auto tmp45 = tmp43 - tmp44;
                                auto tmp46 = tmp42 * tmp45;
                                tmp_acc0_vec = tmp_acc0_vec + tmp33;
                                tmp_acc1_vec = tmp_acc1_vec + tmp46;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(21L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(21L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(864L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                            auto tmp16 = flag_to_float_vec(in_ptr6 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                            auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x3));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x3));
                            auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x3));
                            auto tmp1 = c10::convert<int>(1L + x1);
                            auto tmp2 = static_cast<int>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<int>(23);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<int>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = masked_load(in_ptr5 + static_cast<long>(20736L + x3 + (864L*x2) + (19872L*x1) + (457056L*x0)), to_float_mask(tmp11));
                                return tmp13;
                            }
                            ;
                            auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                            auto tmp15 = tmp0 + tmp14;
                            auto tmp17 = c10::convert<int>(3L + x1);
                            auto tmp18 = tmp17 >= tmp2;
                            auto tmp19 = static_cast<int>(27);
                            auto tmp20 = tmp17 < tmp19;
                            auto tmp21 = c10::convert<int>(3L + x2);
                            auto tmp22 = tmp21 >= tmp2;
                            auto tmp23 = tmp21 < tmp19;
                            auto tmp24 = tmp18 & tmp20;
                            auto tmp25 = tmp24 & tmp22;
                            auto tmp26 = tmp25 & tmp23;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = masked_load(in_ptr7 + static_cast<long>(72576L + x3 + (864L*x2) + (23328L*x1) + (629856L*x0)), to_float_mask(tmp26));
                                return tmp28;
                            }
                            ;
                            auto tmp29 = decltype(tmp27())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp27(), to_float_mask(tmp26));
                            auto tmp30 = static_cast<float>(0.0);
                            auto tmp31 = at::vec::Vectorized<float>(tmp30);
                            auto tmp32 = decltype(tmp31)::blendv(tmp29, tmp31, tmp16);
                            auto tmp33 = tmp15 + tmp32;
                            auto tmp36 = tmp34 - tmp35;
                            auto tmp38 = static_cast<float>(0.0002834467120181406);
                            auto tmp39 = at::vec::Vectorized<float>(tmp38);
                            auto tmp40 = tmp37 * tmp39;
                            auto tmp42 = tmp41 * tmp41;
                            auto tmp43 = tmp40 * tmp42;
                            auto tmp44 = tmp36 * tmp43;
                            auto tmp45 = tmp33 - tmp44;
                            tmp45.store(in_out_ptr0 + static_cast<long>(x3 + (864L*x2) + (18144L*x1) + (381024L*x0)));
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(441L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x2) + (381024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                        auto tmp2 = static_cast<float>(0.0002834467120181406);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 * tmp3;
                        auto tmp5 = tmp0 - tmp4;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp9.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x2) + (381024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (864L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(864L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(864L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (864L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (864L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(440L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2160L); x2+=static_cast<long>(8L))
                    {
                        float tmp4[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (441L*x2) + (952560L*x0)), static_cast<long>(441L), tmp4, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (2160L*x1) + (2160L*x1_inner) + (952560L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(tmp4 + static_cast<long>(8L*x1_inner));
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (2160L*x1) + (2160L*x1_inner) + (952560L*x0)));
                            auto tmp1 = static_cast<float>(0.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = to_float_mask(tmp0 <= tmp2);
                            auto tmp6 = decltype(tmp2)::blendv(tmp5, tmp2, tmp3);
                            auto tmp8 = decltype(tmp2)::blendv(tmp7, tmp2, tmp3);
                            auto tmp9 = tmp6 + tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x2 + (2160L*x1) + (2160L*x1_inner) + (952560L*x0)));
                        }
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(440L); x1<static_cast<long>(441L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2160L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (2160L*x1) + (952560L*x0))];
                        auto tmp3 = in_ptr1[static_cast<long>(x1 + (441L*x2) + (952560L*x0))];
                        auto tmp5 = in_out_ptr0[static_cast<long>(x2 + (2160L*x1) + (952560L*x0))];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp7 = decltype(tmp4)(tmp4 + tmp6);
                        in_out_ptr0[static_cast<long>(x2 + (2160L*x1) + (952560L*x0))] = tmp7;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0002834467120181406);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(0.0002834467120181406);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    auto tmp27 = tmp18 * tmp26;
                    auto tmp28 = tmp25 * tmp27;
                    tmp28.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(7620480L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0002834467120181406);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(0.0002834467120181406);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    auto tmp27 = tmp18 * tmp26;
                    auto tmp28 = tmp25 * tmp27;
                    tmp28.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(7620480L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0002834467120181406);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1728L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(0.0002834467120181406);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    tmp25.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(216L + x1 + (432L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(216L + x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(216L + x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(out_ptr2 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1080L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(42L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(42L); x3+=static_cast<long>(1L))
                        {
                            auto tmp24 = in_ptr1[static_cast<long>(x1 + (1080L*(std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (1080L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 21L)) + (22680L*(std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (22680L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 21L)) + (476280L*x0))];
                            auto tmp0 = c10::convert<long>((-1L) + x2);
                            auto tmp1 = static_cast<long>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<long>(42);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = c10::convert<long>((-1L) + x3);
                            auto tmp6 = tmp5 >= tmp1;
                            auto tmp7 = tmp5 < tmp3;
                            auto tmp8 = tmp2 & tmp4;
                            auto tmp9 = tmp8 & tmp6;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = in_ptr0[static_cast<long>(x1 + (1080L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))))))) + (1080L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L)))))) >= 0L) ? 0L : 21L)) + (22680L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))))))) + (22680L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(21L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L)))))) >= 0L) ? 0L : 21L)) + (476280L*x0))];
                                auto tmp13 = tmp12 / 1;
                                auto tmp14 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp15 = c10::convert<int>(std::min(21L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))));
                                auto tmp16 = tmp14 < tmp15;
                                auto tmp17 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp18 = c10::convert<int>(std::min(21L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))));
                                auto tmp19 = tmp17 < tmp18;
                                auto tmp20 = tmp16 & tmp19;
                                auto tmp21 = static_cast<float>(0.0);
                                auto tmp22 = tmp20 ? tmp13 : tmp21;
                                return tmp22;
                            }
                            ;
                            auto tmp23 = tmp10 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                            auto tmp25 = tmp24 / 1;
                            auto tmp26 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x2), 2L)));
                            auto tmp27 = c10::convert<int>(std::min(21L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp28 = tmp26 < tmp27;
                            auto tmp29 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x3), 2L)));
                            auto tmp30 = c10::convert<int>(std::min(21L, 1L + (c10::div_floor_integer(x3, 2L))));
                            auto tmp31 = tmp29 < tmp30;
                            auto tmp32 = tmp28 & tmp31;
                            auto tmp33 = static_cast<float>(0.0);
                            auto tmp34 = tmp32 ? tmp25 : tmp33;
                            auto tmp35 = decltype(tmp23)(tmp23 + tmp34);
                            out_ptr0[static_cast<long>(x3 + (42L*x2) + (1764L*x1) + (1905120L*x0))] = tmp35;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(7620480L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(1728L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    tmp32.store(out_ptr6 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(1296L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0002834467120181406);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_threshold_backward_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(42L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(42L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(432L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                            auto tmp5 = c10::convert<int>(x1);
                            auto tmp6 = static_cast<int>(43);
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = c10::convert<int>(x2);
                            auto tmp9 = tmp8 < tmp6;
                            auto tmp10 = tmp7 & tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>(x3 + (432L*x2) + (18576L*x1) + (798768L*x0)), to_float_mask(tmp10));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                            auto tmp14 = tmp4 + tmp13;
                            auto tmp15 = [&]
                            {
                                auto tmp16 = masked_load(in_ptr2 + static_cast<long>(x3 + (432L*x2) + (18576L*x1) + (798768L*x0)), to_float_mask(tmp10));
                                return tmp16;
                            }
                            ;
                            auto tmp17 = decltype(tmp15())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp15(), to_float_mask(tmp10));
                            auto tmp18 = decltype(tmp3)::blendv(tmp17, tmp3, tmp0);
                            auto tmp19 = tmp14 + tmp18;
                            auto tmp20 = c10::convert<int>(1L + x1);
                            auto tmp21 = static_cast<int>(0);
                            auto tmp22 = tmp20 >= tmp21;
                            auto tmp23 = static_cast<int>(45);
                            auto tmp24 = tmp20 < tmp23;
                            auto tmp25 = c10::convert<int>(1L + x2);
                            auto tmp26 = tmp25 >= tmp21;
                            auto tmp27 = tmp25 < tmp23;
                            auto tmp28 = tmp22 & tmp24;
                            auto tmp29 = tmp28 & tmp26;
                            auto tmp30 = tmp29 & tmp27;
                            auto tmp31 = [&]
                            {
                                auto tmp32 = masked_load(in_ptr3 + static_cast<long>(19872L + x3 + (432L*x2) + (19440L*x1) + (874800L*x0)), to_float_mask(tmp30));
                                return tmp32;
                            }
                            ;
                            auto tmp33 = decltype(tmp31())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp31(), to_float_mask(tmp30));
                            auto tmp34 = decltype(tmp3)::blendv(tmp33, tmp3, tmp0);
                            auto tmp35 = tmp19 + tmp34;
                            tmp35.store(in_out_ptr0 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2160L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (2160L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0002834467120181406);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3528L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (432L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3528L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (432L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0002834467120181406);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(42L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(42L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (432L*x3) + (18144L*x2) + (762048L*x1)));
                                auto tmp11 = flag_to_float_vec(in_ptr2 + static_cast<long>(x0 + (432L*x3) + (18144L*x2) + (762048L*x1)));
                                auto tmp39 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (432L*x3) + (18144L*x2) + (762048L*x1)));
                                auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                                auto tmp1 = c10::convert<int>(x2);
                                auto tmp2 = static_cast<int>(43);
                                auto tmp3 = tmp1 < tmp2;
                                auto tmp4 = c10::convert<int>(x3);
                                auto tmp5 = tmp4 < tmp2;
                                auto tmp6 = tmp3 & tmp5;
                                auto tmp7 = [&]
                                {
                                    auto tmp8 = masked_load(in_ptr1 + static_cast<long>(x0 + (432L*x3) + (18576L*x2) + (798768L*x1)), to_float_mask(tmp6));
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = decltype(tmp7())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp7(), to_float_mask(tmp6));
                                auto tmp10 = tmp0 + tmp9;
                                auto tmp12 = c10::convert<int>(2L + x2);
                                auto tmp13 = static_cast<int>(0);
                                auto tmp14 = tmp12 >= tmp13;
                                auto tmp15 = static_cast<int>(47);
                                auto tmp16 = tmp12 < tmp15;
                                auto tmp17 = c10::convert<int>(2L + x3);
                                auto tmp18 = tmp17 >= tmp13;
                                auto tmp19 = tmp17 < tmp15;
                                auto tmp20 = tmp14 & tmp16;
                                auto tmp21 = tmp20 & tmp18;
                                auto tmp22 = tmp21 & tmp19;
                                auto tmp23 = [&]
                                {
                                    auto tmp24 = masked_load(in_ptr3 + static_cast<long>(41472L + x0 + (432L*x3) + (20304L*x2) + (954288L*x1)), to_float_mask(tmp22));
                                    return tmp24;
                                }
                                ;
                                auto tmp25 = decltype(tmp23())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp23(), to_float_mask(tmp22));
                                auto tmp26 = static_cast<float>(0.0);
                                auto tmp27 = at::vec::Vectorized<float>(tmp26);
                                auto tmp28 = decltype(tmp27)::blendv(tmp25, tmp27, tmp11);
                                auto tmp29 = tmp10 + tmp28;
                                auto tmp30 = [&]
                                {
                                    auto tmp31 = masked_load(in_ptr1 + static_cast<long>(x0 + (432L*x3) + (18576L*x2) + (798768L*x1)), to_float_mask(tmp6));
                                    return tmp31;
                                }
                                ;
                                auto tmp32 = decltype(tmp30())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp30(), to_float_mask(tmp6));
                                auto tmp33 = tmp0 + tmp32;
                                auto tmp34 = [&]
                                {
                                    auto tmp35 = masked_load(in_ptr3 + static_cast<long>(41472L + x0 + (432L*x3) + (20304L*x2) + (954288L*x1)), to_float_mask(tmp22));
                                    return tmp35;
                                }
                                ;
                                auto tmp36 = decltype(tmp34())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp34(), to_float_mask(tmp22));
                                auto tmp37 = decltype(tmp27)::blendv(tmp36, tmp27, tmp11);
                                auto tmp38 = tmp33 + tmp37;
                                auto tmp41 = tmp39 - tmp40;
                                auto tmp42 = tmp38 * tmp41;
                                tmp_acc0_vec = tmp_acc0_vec + tmp29;
                                tmp_acc1_vec = tmp_acc1_vec + tmp42;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(42L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(42L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(432L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                            auto tmp11 = flag_to_float_vec(in_ptr2 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                            auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                            auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x3));
                            auto tmp33 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x3));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x3));
                            auto tmp42 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x3));
                            auto tmp1 = c10::convert<int>(x1);
                            auto tmp2 = static_cast<int>(43);
                            auto tmp3 = tmp1 < tmp2;
                            auto tmp4 = c10::convert<int>(x2);
                            auto tmp5 = tmp4 < tmp2;
                            auto tmp6 = tmp3 & tmp5;
                            auto tmp7 = [&]
                            {
                                auto tmp8 = masked_load(in_ptr1 + static_cast<long>(x3 + (432L*x2) + (18576L*x1) + (798768L*x0)), to_float_mask(tmp6));
                                return tmp8;
                            }
                            ;
                            auto tmp9 = decltype(tmp7())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp7(), to_float_mask(tmp6));
                            auto tmp10 = tmp0 + tmp9;
                            auto tmp12 = c10::convert<int>(2L + x1);
                            auto tmp13 = static_cast<int>(0);
                            auto tmp14 = tmp12 >= tmp13;
                            auto tmp15 = static_cast<int>(47);
                            auto tmp16 = tmp12 < tmp15;
                            auto tmp17 = c10::convert<int>(2L + x2);
                            auto tmp18 = tmp17 >= tmp13;
                            auto tmp19 = tmp17 < tmp15;
                            auto tmp20 = tmp14 & tmp16;
                            auto tmp21 = tmp20 & tmp18;
                            auto tmp22 = tmp21 & tmp19;
                            auto tmp23 = [&]
                            {
                                auto tmp24 = masked_load(in_ptr3 + static_cast<long>(41472L + x3 + (432L*x2) + (20304L*x1) + (954288L*x0)), to_float_mask(tmp22));
                                return tmp24;
                            }
                            ;
                            auto tmp25 = decltype(tmp23())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp23(), to_float_mask(tmp22));
                            auto tmp26 = static_cast<float>(0.0);
                            auto tmp27 = at::vec::Vectorized<float>(tmp26);
                            auto tmp28 = decltype(tmp27)::blendv(tmp25, tmp27, tmp11);
                            auto tmp29 = tmp10 + tmp28;
                            auto tmp32 = tmp30 - tmp31;
                            auto tmp34 = static_cast<float>(7.086167800453515e-05);
                            auto tmp35 = at::vec::Vectorized<float>(tmp34);
                            auto tmp36 = tmp33 * tmp35;
                            auto tmp38 = tmp37 * tmp37;
                            auto tmp39 = tmp36 * tmp38;
                            auto tmp40 = tmp32 * tmp39;
                            auto tmp41 = tmp29 - tmp40;
                            auto tmp43 = tmp42 * tmp35;
                            auto tmp44 = tmp41 - tmp43;
                            tmp44.store(in_out_ptr0 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(1764L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (432L*x2) + (762048L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (432L*x2) + (762048L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(42L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(42L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (432L*x3) + (18144L*x2) + (762048L*x1)));
                                auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (432L*x3) + (18144L*x2) + (762048L*x1)));
                                auto tmp47 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                                auto tmp1 = c10::convert<int>(x2);
                                auto tmp2 = static_cast<int>(43);
                                auto tmp3 = tmp1 < tmp2;
                                auto tmp4 = c10::convert<int>(x3);
                                auto tmp5 = tmp4 < tmp2;
                                auto tmp6 = tmp3 & tmp5;
                                auto tmp7 = [&]
                                {
                                    auto tmp8 = masked_load(in_ptr1 + static_cast<long>(x0 + (432L*x3) + (18576L*x2) + (798768L*x1)), to_float_mask(tmp6));
                                    return tmp8;
                                }
                                ;
                                auto tmp9 = decltype(tmp7())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp7(), to_float_mask(tmp6));
                                auto tmp10 = static_cast<float>(0.0);
                                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                                auto tmp12 = decltype(tmp11)::blendv(tmp9, tmp11, tmp0);
                                auto tmp13 = [&]
                                {
                                    auto tmp14 = masked_load(in_ptr2 + static_cast<long>(x0 + (432L*x3) + (18576L*x2) + (798768L*x1)), to_float_mask(tmp6));
                                    return tmp14;
                                }
                                ;
                                auto tmp15 = decltype(tmp13())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp13(), to_float_mask(tmp6));
                                auto tmp16 = tmp12 + tmp15;
                                auto tmp17 = c10::convert<int>(1L + x2);
                                auto tmp18 = static_cast<int>(0);
                                auto tmp19 = tmp17 >= tmp18;
                                auto tmp20 = static_cast<int>(45);
                                auto tmp21 = tmp17 < tmp20;
                                auto tmp22 = c10::convert<int>(1L + x3);
                                auto tmp23 = tmp22 >= tmp18;
                                auto tmp24 = tmp22 < tmp20;
                                auto tmp25 = tmp19 & tmp21;
                                auto tmp26 = tmp25 & tmp23;
                                auto tmp27 = tmp26 & tmp24;
                                auto tmp28 = [&]
                                {
                                    auto tmp29 = masked_load(in_ptr3 + static_cast<long>(19872L + x0 + (432L*x3) + (19440L*x2) + (874800L*x1)), to_float_mask(tmp27));
                                    return tmp29;
                                }
                                ;
                                auto tmp30 = decltype(tmp28())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp28(), to_float_mask(tmp27));
                                auto tmp31 = decltype(tmp11)::blendv(tmp30, tmp11, tmp0);
                                auto tmp32 = tmp16 + tmp31;
                                auto tmp33 = [&]
                                {
                                    auto tmp34 = masked_load(in_ptr1 + static_cast<long>(x0 + (432L*x3) + (18576L*x2) + (798768L*x1)), to_float_mask(tmp6));
                                    return tmp34;
                                }
                                ;
                                auto tmp35 = decltype(tmp33())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp33(), to_float_mask(tmp6));
                                auto tmp36 = decltype(tmp11)::blendv(tmp35, tmp11, tmp0);
                                auto tmp37 = [&]
                                {
                                    auto tmp38 = masked_load(in_ptr2 + static_cast<long>(x0 + (432L*x3) + (18576L*x2) + (798768L*x1)), to_float_mask(tmp6));
                                    return tmp38;
                                }
                                ;
                                auto tmp39 = decltype(tmp37())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp37(), to_float_mask(tmp6));
                                auto tmp40 = tmp36 + tmp39;
                                auto tmp41 = [&]
                                {
                                    auto tmp42 = masked_load(in_ptr3 + static_cast<long>(19872L + x0 + (432L*x3) + (19440L*x2) + (874800L*x1)), to_float_mask(tmp27));
                                    return tmp42;
                                }
                                ;
                                auto tmp43 = decltype(tmp41())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp41(), to_float_mask(tmp27));
                                auto tmp44 = decltype(tmp11)::blendv(tmp43, tmp11, tmp0);
                                auto tmp45 = tmp40 + tmp44;
                                auto tmp48 = tmp46 - tmp47;
                                auto tmp49 = tmp45 * tmp48;
                                tmp_acc0_vec = tmp_acc0_vec + tmp32;
                                tmp_acc1_vec = tmp_acc1_vec + tmp49;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(42L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(42L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(432L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                            auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x3));
                            auto tmp36 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x3));
                            auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x3));
                            auto tmp1 = c10::convert<int>(x1);
                            auto tmp2 = static_cast<int>(43);
                            auto tmp3 = tmp1 < tmp2;
                            auto tmp4 = c10::convert<int>(x2);
                            auto tmp5 = tmp4 < tmp2;
                            auto tmp6 = tmp3 & tmp5;
                            auto tmp7 = [&]
                            {
                                auto tmp8 = masked_load(in_ptr1 + static_cast<long>(x3 + (432L*x2) + (18576L*x1) + (798768L*x0)), to_float_mask(tmp6));
                                return tmp8;
                            }
                            ;
                            auto tmp9 = decltype(tmp7())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp7(), to_float_mask(tmp6));
                            auto tmp10 = static_cast<float>(0.0);
                            auto tmp11 = at::vec::Vectorized<float>(tmp10);
                            auto tmp12 = decltype(tmp11)::blendv(tmp9, tmp11, tmp0);
                            auto tmp13 = [&]
                            {
                                auto tmp14 = masked_load(in_ptr2 + static_cast<long>(x3 + (432L*x2) + (18576L*x1) + (798768L*x0)), to_float_mask(tmp6));
                                return tmp14;
                            }
                            ;
                            auto tmp15 = decltype(tmp13())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp13(), to_float_mask(tmp6));
                            auto tmp16 = tmp12 + tmp15;
                            auto tmp17 = c10::convert<int>(1L + x1);
                            auto tmp18 = static_cast<int>(0);
                            auto tmp19 = tmp17 >= tmp18;
                            auto tmp20 = static_cast<int>(45);
                            auto tmp21 = tmp17 < tmp20;
                            auto tmp22 = c10::convert<int>(1L + x2);
                            auto tmp23 = tmp22 >= tmp18;
                            auto tmp24 = tmp22 < tmp20;
                            auto tmp25 = tmp19 & tmp21;
                            auto tmp26 = tmp25 & tmp23;
                            auto tmp27 = tmp26 & tmp24;
                            auto tmp28 = [&]
                            {
                                auto tmp29 = masked_load(in_ptr3 + static_cast<long>(19872L + x3 + (432L*x2) + (19440L*x1) + (874800L*x0)), to_float_mask(tmp27));
                                return tmp29;
                            }
                            ;
                            auto tmp30 = decltype(tmp28())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp28(), to_float_mask(tmp27));
                            auto tmp31 = decltype(tmp11)::blendv(tmp30, tmp11, tmp0);
                            auto tmp32 = tmp16 + tmp31;
                            auto tmp35 = tmp33 - tmp34;
                            auto tmp37 = static_cast<float>(7.086167800453515e-05);
                            auto tmp38 = at::vec::Vectorized<float>(tmp37);
                            auto tmp39 = tmp36 * tmp38;
                            auto tmp41 = tmp40 * tmp40;
                            auto tmp42 = tmp39 * tmp41;
                            auto tmp43 = tmp35 * tmp42;
                            auto tmp44 = tmp32 - tmp43;
                            tmp44.store(out_ptr2 + static_cast<long>(x3 + (432L*x2) + (18144L*x1) + (762048L*x0)));
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(432L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(432L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(1764L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1 + (432L*x2) + (762048L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                        auto tmp2 = static_cast<float>(7.086167800453515e-05);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 * tmp3;
                        auto tmp5 = tmp0 - tmp4;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp9.store(in_out_ptr1 + static_cast<long>(x1 + (432L*x2) + (762048L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1760L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(1080L); x2+=static_cast<long>(8L))
                    {
                        float tmp4[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (1764L*x2) + (1905120L*x0)), static_cast<long>(1764L), tmp4, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (1080L*x1) + (1080L*x1_inner) + (1905120L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(tmp4 + static_cast<long>(8L*x1_inner));
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (1080L*x1) + (1080L*x1_inner) + (1905120L*x0)));
                            auto tmp1 = static_cast<float>(0.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = to_float_mask(tmp0 <= tmp2);
                            auto tmp6 = decltype(tmp2)::blendv(tmp5, tmp2, tmp3);
                            auto tmp8 = decltype(tmp2)::blendv(tmp7, tmp2, tmp3);
                            auto tmp9 = tmp6 + tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x2 + (1080L*x1) + (1080L*x1_inner) + (1905120L*x0)));
                        }
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(1760L); x1<static_cast<long>(1764L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(1080L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (1080L*x1) + (1905120L*x0))];
                        auto tmp3 = in_ptr1[static_cast<long>(x1 + (1764L*x2) + (1905120L*x0))];
                        auto tmp5 = in_out_ptr0[static_cast<long>(x2 + (1080L*x1) + (1905120L*x0))];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp7 = decltype(tmp4)(tmp4 + tmp6);
                        in_out_ptr0[static_cast<long>(x2 + (1080L*x1) + (1905120L*x0))] = tmp7;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(7.086167800453515e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(7.086167800453515e-05);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    auto tmp27 = tmp18 * tmp26;
                    auto tmp28 = tmp25 * tmp27;
                    tmp28.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(15240960L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(7.086167800453515e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(7.086167800453515e-05);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    auto tmp27 = tmp18 * tmp26;
                    auto tmp28 = tmp25 * tmp27;
                    tmp28.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(15240960L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(7.086167800453515e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(7.086167800453515e-05);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    auto tmp27 = tmp18 * tmp26;
                    auto tmp28 = tmp25 * tmp27;
                    tmp28.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(15240960L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(648L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(432L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(7.086167800453515e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_threshold_backward_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(864L + x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = to_float_mask(tmp3 <= tmp5);
                    auto tmp8 = decltype(tmp5)::blendv(tmp7, tmp5, tmp6);
                    auto tmp9 = tmp2 + tmp8;
                    auto tmp11 = decltype(tmp5)::blendv(tmp10, tmp5, tmp6);
                    auto tmp12 = tmp9 + tmp11;
                    auto tmp14 = tmp12 + tmp13;
                    auto tmp16 = decltype(tmp5)::blendv(tmp15, tmp5, tmp6);
                    auto tmp17 = tmp14 + tmp16;
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1080L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1080L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (216L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = tmp5 + tmp6;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp10 = tmp7 + tmp9;
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                        tmp_acc1_vec = tmp_acc1_vec + tmp14;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(216L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp7 = tmp5 + tmp6;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp10 = tmp7 + tmp9;
                    auto tmp13 = tmp11 - tmp12;
                    auto tmp15 = static_cast<float>(7.086167800453515e-05);
                    auto tmp16 = at::vec::Vectorized<float>(tmp15);
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp19 = tmp18 * tmp18;
                    auto tmp20 = tmp17 * tmp19;
                    auto tmp21 = tmp13 * tmp20;
                    auto tmp22 = tmp10 - tmp21;
                    auto tmp24 = tmp23 * tmp16;
                    auto tmp25 = tmp22 - tmp24;
                    tmp25.store(in_out_ptr0 + static_cast<long>(x1 + (216L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(216L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(108L + x1 + (216L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(108L + x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(108L + x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(out_ptr2 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(108L + x1 + (216L*x0))];
                    auto tmp1 = in_ptr6[static_cast<long>(108L + x1)];
                    auto tmp2 = in_ptr7[static_cast<long>(108L + x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
                    auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                    out_ptr2[static_cast<long>(x1 + (108L*x0))] = tmp4;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (216L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (216L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
                    auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                    out_ptr0[static_cast<long>(x1 + (108L*x0))] = tmp4;
                }
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(270L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(83L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(83L); x3+=static_cast<long>(1L))
                        {
                            auto tmp24 = in_ptr1[static_cast<long>(x1 + (270L*(std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (270L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 42L)) + (11340L*(std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (11340L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 42L)) + (476280L*x0))];
                            auto tmp0 = c10::convert<long>((-1L) + x2);
                            auto tmp1 = static_cast<long>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<long>(83);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = c10::convert<long>((-1L) + x3);
                            auto tmp6 = tmp5 >= tmp1;
                            auto tmp7 = tmp5 < tmp3;
                            auto tmp8 = tmp2 & tmp4;
                            auto tmp9 = tmp8 & tmp6;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = in_ptr0[static_cast<long>(x1 + (270L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))))))) + (270L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L)))))) >= 0L) ? 0L : 42L)) + (11340L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))))))) + (11340L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(42L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L)))))) >= 0L) ? 0L : 42L)) + (476280L*x0))];
                                auto tmp13 = tmp12 / 1;
                                auto tmp14 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp15 = c10::convert<int>(std::min(42L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))));
                                auto tmp16 = tmp14 < tmp15;
                                auto tmp17 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp18 = c10::convert<int>(std::min(42L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))));
                                auto tmp19 = tmp17 < tmp18;
                                auto tmp20 = tmp16 & tmp19;
                                auto tmp21 = static_cast<float>(0.0);
                                auto tmp22 = tmp20 ? tmp13 : tmp21;
                                return tmp22;
                            }
                            ;
                            auto tmp23 = tmp10 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                            auto tmp25 = tmp24 / 1;
                            auto tmp26 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x2), 2L)));
                            auto tmp27 = c10::convert<int>(std::min(42L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp28 = tmp26 < tmp27;
                            auto tmp29 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x3), 2L)));
                            auto tmp30 = c10::convert<int>(std::min(42L, 1L + (c10::div_floor_integer(x3, 2L))));
                            auto tmp31 = tmp29 < tmp30;
                            auto tmp32 = tmp28 & tmp31;
                            auto tmp33 = static_cast<float>(0.0);
                            auto tmp34 = tmp32 ? tmp25 : tmp33;
                            auto tmp35 = decltype(tmp23)(tmp23 + tmp34);
                            out_ptr0[static_cast<long>(x3 + (83L*x2) + (6889L*x1) + (1860030L*x0))] = tmp35;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(7620480L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp8 = tmp5 + tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(432L + x0 + (540L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    float tmp_acc2 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(432L + x0 + (540L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (108L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp5 = in_ptr6[static_cast<long>(x0 + (108L*x1))];
                        auto tmp6 = in_ptr7[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp0)(tmp0 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                        tmp_acc2 = tmp_acc2 + tmp8;
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                    out_ptr3[static_cast<long>(x0)] = tmp_acc2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr8[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr4[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(432L + x1 + (540L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr5 + static_cast<long>(x1 + (108L*x0)));
                    tmp32.store(out_ptr6 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(432L + x1 + (540L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (108L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr2[static_cast<long>(x1)];
                    auto tmp7 = in_ptr8[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr9[static_cast<long>(x1)];
                    auto tmp18 = in_ptr6[static_cast<long>(x1 + (108L*x0))];
                    auto tmp19 = in_ptr7[static_cast<long>(x1)];
                    auto tmp21 = out_ptr3[static_cast<long>(x1)];
                    auto tmp23 = in_ptr10[static_cast<long>(x1)];
                    auto tmp29 = in_ptr11[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                    auto tmp22 = decltype(tmp21)(tmp21 * tmp5);
                    auto tmp24 = decltype(tmp23)(tmp23 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    auto tmp26 = decltype(tmp20)(tmp20 * tmp25);
                    auto tmp27 = decltype(tmp0)(tmp0 - tmp26);
                    auto tmp28 = decltype(tmp27)(tmp27 - tmp13);
                    auto tmp30 = decltype(tmp23)(tmp23 * tmp29);
                    auto tmp31 = decltype(tmp28)(tmp28 * tmp30);
                    out_ptr5[static_cast<long>(x1 + (108L*x0))] = tmp17;
                    out_ptr6[static_cast<long>(x1 + (108L*x0))] = tmp31;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (108L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (108L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (108L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(7.086167800453515e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (108L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(324L + x0 + (540L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(324L + x0 + (540L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(324L + x1 + (540L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(324L + x1 + (540L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (108L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (108L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (108L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (108L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (108L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(7.086167800453515e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (108L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x0 + (540L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    float tmp_acc2 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(216L + x0 + (540L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (108L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (108L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp11 = in_ptr5[static_cast<long>(x0 + (108L*x1))];
                        auto tmp12 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp1 <= tmp2;
                        auto tmp5 = tmp3 ? tmp2 : tmp4;
                        auto tmp6 = decltype(tmp0)(tmp0 + tmp5);
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        auto tmp13 = decltype(tmp11)(tmp11 - tmp12);
                        auto tmp14 = decltype(tmp6)(tmp6 * tmp13);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                        tmp_acc2 = tmp_acc2 + tmp14;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(216L + x1 + (540L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(7.086167800453515e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (108L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(216L + x1 + (540L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (108L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (108L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (108L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr7[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr8[static_cast<long>(x1)];
                    auto tmp24 = in_ptr5[static_cast<long>(x1 + (108L*x0))];
                    auto tmp25 = in_ptr6[static_cast<long>(x1)];
                    auto tmp27 = out_ptr2[static_cast<long>(x1)];
                    auto tmp29 = in_ptr9[static_cast<long>(x1)];
                    auto tmp35 = in_ptr10[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp1 <= tmp2;
                    auto tmp5 = tmp3 ? tmp2 : tmp4;
                    auto tmp6 = decltype(tmp0)(tmp0 + tmp5);
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(7.086167800453515e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    auto tmp26 = decltype(tmp24)(tmp24 - tmp25);
                    auto tmp28 = decltype(tmp27)(tmp27 * tmp11);
                    auto tmp30 = decltype(tmp29)(tmp29 * tmp29);
                    auto tmp31 = decltype(tmp28)(tmp28 * tmp30);
                    auto tmp32 = decltype(tmp26)(tmp26 * tmp31);
                    auto tmp33 = decltype(tmp6)(tmp6 - tmp32);
                    auto tmp34 = decltype(tmp33)(tmp33 - tmp19);
                    auto tmp36 = decltype(tmp29)(tmp29 * tmp35);
                    auto tmp37 = decltype(tmp34)(tmp34 * tmp36);
                    out_ptr3[static_cast<long>(x1 + (108L*x0))] = tmp23;
                    out_ptr4[static_cast<long>(x1 + (108L*x0))] = tmp37;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (108L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (108L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (108L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(7.086167800453515e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (108L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (108L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (108L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (108L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(7.086167800453515e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (108L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_threshold_backward_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(83L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(83L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(104L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                            auto tmp5 = c10::convert<int>(1L + x1);
                            auto tmp6 = static_cast<int>(0);
                            auto tmp7 = tmp5 >= tmp6;
                            auto tmp8 = static_cast<int>(85);
                            auto tmp9 = tmp5 < tmp8;
                            auto tmp10 = c10::convert<int>(1L + x2);
                            auto tmp11 = tmp10 >= tmp6;
                            auto tmp12 = tmp10 < tmp8;
                            auto tmp13 = tmp7 & tmp9;
                            auto tmp14 = tmp13 & tmp11;
                            auto tmp15 = tmp14 & tmp12;
                            auto tmp16 = [&]
                            {
                                auto tmp17 = masked_load(in_ptr1 + static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0)), to_float_mask(tmp15));
                                return tmp17;
                            }
                            ;
                            auto tmp18 = decltype(tmp16())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp16(), to_float_mask(tmp15));
                            auto tmp19 = tmp4 + tmp18;
                            auto tmp20 = [&]
                            {
                                auto tmp21 = masked_load(in_ptr2 + static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0)), to_float_mask(tmp15));
                                return tmp21;
                            }
                            ;
                            auto tmp22 = decltype(tmp20())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp20(), to_float_mask(tmp15));
                            auto tmp23 = decltype(tmp3)::blendv(tmp22, tmp3, tmp0);
                            auto tmp24 = tmp19 + tmp23;
                            auto tmp25 = c10::convert<int>(2L + x1);
                            auto tmp26 = tmp25 >= tmp6;
                            auto tmp27 = static_cast<int>(87);
                            auto tmp28 = tmp25 < tmp27;
                            auto tmp29 = c10::convert<int>(2L + x2);
                            auto tmp30 = tmp29 >= tmp6;
                            auto tmp31 = tmp29 < tmp27;
                            auto tmp32 = tmp26 & tmp28;
                            auto tmp33 = tmp32 & tmp30;
                            auto tmp34 = tmp33 & tmp31;
                            auto tmp35 = [&]
                            {
                                auto tmp36 = masked_load(in_ptr3 + static_cast<long>(19008L + x3 + (108L*x2) + (9396L*x1) + (817452L*x0)), to_float_mask(tmp34));
                                return tmp36;
                            }
                            ;
                            auto tmp37 = decltype(tmp35())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp35(), to_float_mask(tmp34));
                            auto tmp38 = decltype(tmp3)::blendv(tmp37, tmp3, tmp0);
                            auto tmp39 = tmp24 + tmp38;
                            tmp39.store(in_out_ptr0 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(104L); x3<static_cast<long>(108L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))];
                            auto tmp1 = in_out_ptr0[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))];
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = tmp0 ? tmp2 : tmp1;
                            auto tmp4 = c10::convert<long>(1L + x1);
                            auto tmp5 = static_cast<long>(0);
                            auto tmp6 = tmp4 >= tmp5;
                            auto tmp7 = static_cast<long>(85);
                            auto tmp8 = tmp4 < tmp7;
                            auto tmp9 = c10::convert<long>(1L + x2);
                            auto tmp10 = tmp9 >= tmp5;
                            auto tmp11 = tmp9 < tmp7;
                            auto tmp12 = tmp6 & tmp8;
                            auto tmp13 = tmp12 & tmp10;
                            auto tmp14 = tmp13 & tmp11;
                            auto tmp15 = [&]
                            {
                                auto tmp16 = in_ptr1[static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0))];
                                return tmp16;
                            }
                            ;
                            auto tmp17 = tmp14 ? tmp15() : static_cast<decltype(tmp15())>(0.0);
                            auto tmp18 = decltype(tmp3)(tmp3 + tmp17);
                            auto tmp19 = [&]
                            {
                                auto tmp20 = in_ptr2[static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0))];
                                return tmp20;
                            }
                            ;
                            auto tmp21 = tmp14 ? tmp19() : static_cast<decltype(tmp19())>(0.0);
                            auto tmp22 = tmp0 ? tmp2 : tmp21;
                            auto tmp23 = decltype(tmp18)(tmp18 + tmp22);
                            auto tmp24 = c10::convert<long>(2L + x1);
                            auto tmp25 = tmp24 >= tmp5;
                            auto tmp26 = static_cast<long>(87);
                            auto tmp27 = tmp24 < tmp26;
                            auto tmp28 = c10::convert<long>(2L + x2);
                            auto tmp29 = tmp28 >= tmp5;
                            auto tmp30 = tmp28 < tmp26;
                            auto tmp31 = tmp25 & tmp27;
                            auto tmp32 = tmp31 & tmp29;
                            auto tmp33 = tmp32 & tmp30;
                            auto tmp34 = [&]
                            {
                                auto tmp35 = in_ptr3[static_cast<long>(19008L + x3 + (108L*x2) + (9396L*x1) + (817452L*x0))];
                                return tmp35;
                            }
                            ;
                            auto tmp36 = tmp33 ? tmp34() : static_cast<decltype(tmp34())>(0.0);
                            auto tmp37 = tmp0 ? tmp2 : tmp36;
                            auto tmp38 = decltype(tmp23)(tmp23 + tmp37);
                            in_out_ptr0[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))] = tmp38;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(108L + x0 + (540L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(108L + x0 + (540L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(108L + x1 + (540L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(108L + x1 + (540L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (108L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (108L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (108L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (108L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (108L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(7.086167800453515e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (108L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (540L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (540L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (540L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (540L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (108L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(7.086167800453515e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (108L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(14112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (108L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (108L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (108L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(7.086167800453515e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (108L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (108L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (108L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(7.086167800453515e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (108L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr4 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(83L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(83L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(104L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                            auto tmp1 = c10::convert<int>(1L + x1);
                            auto tmp2 = static_cast<int>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<int>(85);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<int>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = masked_load(in_ptr1 + static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0)), to_float_mask(tmp11));
                                return tmp13;
                            }
                            ;
                            auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                            auto tmp15 = static_cast<float>(0.0);
                            auto tmp16 = at::vec::Vectorized<float>(tmp15);
                            auto tmp17 = decltype(tmp16)::blendv(tmp14, tmp16, tmp0);
                            auto tmp18 = [&]
                            {
                                auto tmp19 = masked_load(in_ptr2 + static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0)), to_float_mask(tmp11));
                                return tmp19;
                            }
                            ;
                            auto tmp20 = decltype(tmp18())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp18(), to_float_mask(tmp11));
                            auto tmp21 = tmp17 + tmp20;
                            auto tmp22 = c10::convert<int>(2L + x1);
                            auto tmp23 = tmp22 >= tmp2;
                            auto tmp24 = static_cast<int>(87);
                            auto tmp25 = tmp22 < tmp24;
                            auto tmp26 = c10::convert<int>(2L + x2);
                            auto tmp27 = tmp26 >= tmp2;
                            auto tmp28 = tmp26 < tmp24;
                            auto tmp29 = tmp23 & tmp25;
                            auto tmp30 = tmp29 & tmp27;
                            auto tmp31 = tmp30 & tmp28;
                            auto tmp32 = [&]
                            {
                                auto tmp33 = masked_load(in_ptr3 + static_cast<long>(19008L + x3 + (108L*x2) + (9396L*x1) + (817452L*x0)), to_float_mask(tmp31));
                                return tmp33;
                            }
                            ;
                            auto tmp34 = decltype(tmp32())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp32(), to_float_mask(tmp31));
                            auto tmp35 = decltype(tmp16)::blendv(tmp34, tmp16, tmp0);
                            auto tmp36 = tmp21 + tmp35;
                            tmp36.store(out_ptr0 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(104L); x3<static_cast<long>(108L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))];
                            auto tmp1 = c10::convert<long>(1L + x1);
                            auto tmp2 = static_cast<long>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<long>(85);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<long>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = in_ptr1[static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0))];
                                return tmp13;
                            }
                            ;
                            auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                            auto tmp15 = static_cast<float>(0.0);
                            auto tmp16 = tmp0 ? tmp15 : tmp14;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr2[static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0))];
                                return tmp18;
                            }
                            ;
                            auto tmp19 = tmp11 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp20 = decltype(tmp16)(tmp16 + tmp19);
                            auto tmp21 = c10::convert<long>(2L + x1);
                            auto tmp22 = tmp21 >= tmp2;
                            auto tmp23 = static_cast<long>(87);
                            auto tmp24 = tmp21 < tmp23;
                            auto tmp25 = c10::convert<long>(2L + x2);
                            auto tmp26 = tmp25 >= tmp2;
                            auto tmp27 = tmp25 < tmp23;
                            auto tmp28 = tmp22 & tmp24;
                            auto tmp29 = tmp28 & tmp26;
                            auto tmp30 = tmp29 & tmp27;
                            auto tmp31 = [&]
                            {
                                auto tmp32 = in_ptr3[static_cast<long>(19008L + x3 + (108L*x2) + (9396L*x1) + (817452L*x0))];
                                return tmp32;
                            }
                            ;
                            auto tmp33 = tmp30 ? tmp31() : static_cast<decltype(tmp31())>(0.0);
                            auto tmp34 = tmp0 ? tmp15 : tmp33;
                            auto tmp35 = decltype(tmp20)(tmp20 + tmp34);
                            out_ptr0[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))] = tmp35;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(83L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(83L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (108L*x3) + (8964L*x2) + (744012L*x1)));
                                auto tmp16 = flag_to_float_vec(in_ptr6 + static_cast<long>(x0 + (108L*x3) + (8964L*x2) + (744012L*x1)));
                                auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (108L*x3) + (8964L*x2) + (744012L*x1)));
                                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                                auto tmp1 = c10::convert<int>(1L + x2);
                                auto tmp2 = static_cast<int>(0);
                                auto tmp3 = tmp1 >= tmp2;
                                auto tmp4 = static_cast<int>(85);
                                auto tmp5 = tmp1 < tmp4;
                                auto tmp6 = c10::convert<int>(1L + x3);
                                auto tmp7 = tmp6 >= tmp2;
                                auto tmp8 = tmp6 < tmp4;
                                auto tmp9 = tmp3 & tmp5;
                                auto tmp10 = tmp9 & tmp7;
                                auto tmp11 = tmp10 & tmp8;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = masked_load(in_ptr5 + static_cast<long>(9288L + x0 + (108L*x3) + (9180L*x2) + (780300L*x1)), to_float_mask(tmp11));
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                auto tmp15 = tmp0 + tmp14;
                                auto tmp17 = c10::convert<int>(3L + x2);
                                auto tmp18 = tmp17 >= tmp2;
                                auto tmp19 = static_cast<int>(89);
                                auto tmp20 = tmp17 < tmp19;
                                auto tmp21 = c10::convert<int>(3L + x3);
                                auto tmp22 = tmp21 >= tmp2;
                                auto tmp23 = tmp21 < tmp19;
                                auto tmp24 = tmp18 & tmp20;
                                auto tmp25 = tmp24 & tmp22;
                                auto tmp26 = tmp25 & tmp23;
                                auto tmp27 = [&]
                                {
                                    auto tmp28 = masked_load(in_ptr7 + static_cast<long>(29160L + x0 + (108L*x3) + (9612L*x2) + (855468L*x1)), to_float_mask(tmp26));
                                    return tmp28;
                                }
                                ;
                                auto tmp29 = decltype(tmp27())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp27(), to_float_mask(tmp26));
                                auto tmp30 = static_cast<float>(0.0);
                                auto tmp31 = at::vec::Vectorized<float>(tmp30);
                                auto tmp32 = decltype(tmp31)::blendv(tmp29, tmp31, tmp16);
                                auto tmp33 = tmp15 + tmp32;
                                auto tmp34 = [&]
                                {
                                    auto tmp35 = masked_load(in_ptr5 + static_cast<long>(9288L + x0 + (108L*x3) + (9180L*x2) + (780300L*x1)), to_float_mask(tmp11));
                                    return tmp35;
                                }
                                ;
                                auto tmp36 = decltype(tmp34())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp34(), to_float_mask(tmp11));
                                auto tmp37 = tmp0 + tmp36;
                                auto tmp38 = [&]
                                {
                                    auto tmp39 = masked_load(in_ptr7 + static_cast<long>(29160L + x0 + (108L*x3) + (9612L*x2) + (855468L*x1)), to_float_mask(tmp26));
                                    return tmp39;
                                }
                                ;
                                auto tmp40 = decltype(tmp38())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp38(), to_float_mask(tmp26));
                                auto tmp41 = decltype(tmp31)::blendv(tmp40, tmp31, tmp16);
                                auto tmp42 = tmp37 + tmp41;
                                auto tmp45 = tmp43 - tmp44;
                                auto tmp46 = tmp42 * tmp45;
                                tmp_acc0_vec = tmp_acc0_vec + tmp33;
                                tmp_acc1_vec = tmp_acc1_vec + tmp46;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(83L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(83L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr4[static_cast<long>(x0 + (108L*x3) + (8964L*x2) + (744012L*x1))];
                                auto tmp16 = in_ptr6[static_cast<long>(x0 + (108L*x3) + (8964L*x2) + (744012L*x1))];
                                auto tmp42 = in_ptr8[static_cast<long>(x0 + (108L*x3) + (8964L*x2) + (744012L*x1))];
                                auto tmp43 = in_ptr9[static_cast<long>(x0)];
                                auto tmp1 = c10::convert<long>(1L + x2);
                                auto tmp2 = static_cast<long>(0);
                                auto tmp3 = tmp1 >= tmp2;
                                auto tmp4 = static_cast<long>(85);
                                auto tmp5 = tmp1 < tmp4;
                                auto tmp6 = c10::convert<long>(1L + x3);
                                auto tmp7 = tmp6 >= tmp2;
                                auto tmp8 = tmp6 < tmp4;
                                auto tmp9 = tmp3 & tmp5;
                                auto tmp10 = tmp9 & tmp7;
                                auto tmp11 = tmp10 & tmp8;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr5[static_cast<long>(9288L + x0 + (108L*x3) + (9180L*x2) + (780300L*x1))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = decltype(tmp0)(tmp0 + tmp14);
                                auto tmp17 = c10::convert<long>(3L + x2);
                                auto tmp18 = tmp17 >= tmp2;
                                auto tmp19 = static_cast<long>(89);
                                auto tmp20 = tmp17 < tmp19;
                                auto tmp21 = c10::convert<long>(3L + x3);
                                auto tmp22 = tmp21 >= tmp2;
                                auto tmp23 = tmp21 < tmp19;
                                auto tmp24 = tmp18 & tmp20;
                                auto tmp25 = tmp24 & tmp22;
                                auto tmp26 = tmp25 & tmp23;
                                auto tmp27 = [&]
                                {
                                    auto tmp28 = in_ptr7[static_cast<long>(29160L + x0 + (108L*x3) + (9612L*x2) + (855468L*x1))];
                                    return tmp28;
                                }
                                ;
                                auto tmp29 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                                auto tmp30 = static_cast<float>(0.0);
                                auto tmp31 = tmp16 ? tmp30 : tmp29;
                                auto tmp32 = decltype(tmp15)(tmp15 + tmp31);
                                auto tmp33 = [&]
                                {
                                    auto tmp34 = in_ptr5[static_cast<long>(9288L + x0 + (108L*x3) + (9180L*x2) + (780300L*x1))];
                                    return tmp34;
                                }
                                ;
                                auto tmp35 = tmp11 ? tmp33() : static_cast<decltype(tmp33())>(0.0);
                                auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                                auto tmp37 = [&]
                                {
                                    auto tmp38 = in_ptr7[static_cast<long>(29160L + x0 + (108L*x3) + (9612L*x2) + (855468L*x1))];
                                    return tmp38;
                                }
                                ;
                                auto tmp39 = tmp26 ? tmp37() : static_cast<decltype(tmp37())>(0.0);
                                auto tmp40 = tmp16 ? tmp30 : tmp39;
                                auto tmp41 = decltype(tmp36)(tmp36 + tmp40);
                                auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                                auto tmp45 = decltype(tmp41)(tmp41 * tmp44);
                                tmp_acc0 = tmp_acc0 + tmp32;
                                tmp_acc1 = tmp_acc1 + tmp45;
                            }
                        }
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(83L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(83L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(104L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                            auto tmp16 = flag_to_float_vec(in_ptr6 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                            auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x3));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x3));
                            auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x3));
                            auto tmp1 = c10::convert<int>(1L + x1);
                            auto tmp2 = static_cast<int>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<int>(85);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<int>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = masked_load(in_ptr5 + static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0)), to_float_mask(tmp11));
                                return tmp13;
                            }
                            ;
                            auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                            auto tmp15 = tmp0 + tmp14;
                            auto tmp17 = c10::convert<int>(3L + x1);
                            auto tmp18 = tmp17 >= tmp2;
                            auto tmp19 = static_cast<int>(89);
                            auto tmp20 = tmp17 < tmp19;
                            auto tmp21 = c10::convert<int>(3L + x2);
                            auto tmp22 = tmp21 >= tmp2;
                            auto tmp23 = tmp21 < tmp19;
                            auto tmp24 = tmp18 & tmp20;
                            auto tmp25 = tmp24 & tmp22;
                            auto tmp26 = tmp25 & tmp23;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = masked_load(in_ptr7 + static_cast<long>(29160L + x3 + (108L*x2) + (9612L*x1) + (855468L*x0)), to_float_mask(tmp26));
                                return tmp28;
                            }
                            ;
                            auto tmp29 = decltype(tmp27())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp27(), to_float_mask(tmp26));
                            auto tmp30 = static_cast<float>(0.0);
                            auto tmp31 = at::vec::Vectorized<float>(tmp30);
                            auto tmp32 = decltype(tmp31)::blendv(tmp29, tmp31, tmp16);
                            auto tmp33 = tmp15 + tmp32;
                            auto tmp36 = tmp34 - tmp35;
                            auto tmp38 = static_cast<float>(1.814486863115111e-05);
                            auto tmp39 = at::vec::Vectorized<float>(tmp38);
                            auto tmp40 = tmp37 * tmp39;
                            auto tmp42 = tmp41 * tmp41;
                            auto tmp43 = tmp40 * tmp42;
                            auto tmp44 = tmp36 * tmp43;
                            auto tmp45 = tmp33 - tmp44;
                            tmp45.store(in_out_ptr0 + static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(104L); x3<static_cast<long>(108L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))];
                            auto tmp16 = in_ptr6[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))];
                            auto tmp33 = in_ptr8[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))];
                            auto tmp34 = in_ptr9[static_cast<long>(x3)];
                            auto tmp36 = out_ptr2[static_cast<long>(x3)];
                            auto tmp39 = in_ptr10[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(1L + x1);
                            auto tmp2 = static_cast<long>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<long>(85);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<long>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = in_ptr5[static_cast<long>(9288L + x3 + (108L*x2) + (9180L*x1) + (780300L*x0))];
                                return tmp13;
                            }
                            ;
                            auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                            auto tmp15 = decltype(tmp0)(tmp0 + tmp14);
                            auto tmp17 = c10::convert<long>(3L + x1);
                            auto tmp18 = tmp17 >= tmp2;
                            auto tmp19 = static_cast<long>(89);
                            auto tmp20 = tmp17 < tmp19;
                            auto tmp21 = c10::convert<long>(3L + x2);
                            auto tmp22 = tmp21 >= tmp2;
                            auto tmp23 = tmp21 < tmp19;
                            auto tmp24 = tmp18 & tmp20;
                            auto tmp25 = tmp24 & tmp22;
                            auto tmp26 = tmp25 & tmp23;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr7[static_cast<long>(29160L + x3 + (108L*x2) + (9612L*x1) + (855468L*x0))];
                                return tmp28;
                            }
                            ;
                            auto tmp29 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp30 = static_cast<float>(0.0);
                            auto tmp31 = tmp16 ? tmp30 : tmp29;
                            auto tmp32 = decltype(tmp15)(tmp15 + tmp31);
                            auto tmp35 = decltype(tmp33)(tmp33 - tmp34);
                            auto tmp37 = static_cast<float>(1.814486863115111e-05);
                            auto tmp38 = decltype(tmp36)(tmp36 * tmp37);
                            auto tmp40 = decltype(tmp39)(tmp39 * tmp39);
                            auto tmp41 = decltype(tmp38)(tmp38 * tmp40);
                            auto tmp42 = decltype(tmp35)(tmp35 * tmp41);
                            auto tmp43 = decltype(tmp32)(tmp32 - tmp42);
                            in_out_ptr0[static_cast<long>(x3 + (108L*x2) + (8964L*x1) + (744012L*x0))] = tmp43;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr10[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (108L*x2) + (744012L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                        auto tmp2 = static_cast<float>(1.814486863115111e-05);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 * tmp3;
                        auto tmp5 = tmp0 - tmp4;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp9.store(in_out_ptr0 + static_cast<long>(x1 + (108L*x2) + (744012L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (108L*x2) + (744012L*x0))];
                        auto tmp1 = out_ptr1[static_cast<long>(x1)];
                        auto tmp5 = in_ptr10[static_cast<long>(x1)];
                        auto tmp6 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = static_cast<float>(1.814486863115111e-05);
                        auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 - tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        in_out_ptr0[static_cast<long>(x1 + (108L*x2) + (744012L*x0))] = tmp8;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (108L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (108L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (108L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6888L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x1 + (108L*x2) + (744012L*x0)), static_cast<long>(108L), tmp0, 8);
                        float tmp2[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (108L*x2) + (744012L*x0)), static_cast<long>(108L), tmp2, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(tmp2 + static_cast<long>(8L*x1_inner));
                            auto tmp4 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                            auto tmp7 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                            auto tmp10 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                            auto tmp16 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                            auto tmp20 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                            auto tmp5 = at::vec::Vectorized<float>(tmp4);
                            auto tmp6 = tmp3 - tmp5;
                            auto tmp8 = static_cast<float>(1.814486863115111e-05);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                            auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp6 * tmp13;
                            auto tmp15 = tmp1 - tmp14;
                            auto tmp17 = decltype(tmp16)(tmp16 * tmp8);
                            auto tmp18 = at::vec::Vectorized<float>(tmp17);
                            auto tmp19 = tmp15 - tmp18;
                            auto tmp21 = decltype(tmp10)(tmp10 * tmp20);
                            auto tmp22 = at::vec::Vectorized<float>(tmp21);
                            auto tmp23 = tmp19 * tmp22;
                            tmp23.store(out_ptr2 + static_cast<long>(x2 + (6889L*x1) + (6889L*x1_inner) + (744012L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(6888L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (108L*x2) + (744012L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (108L*x2) + (744012L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                        auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp5 = static_cast<float>(1.814486863115111e-05);
                        auto tmp6 = at::vec::Vectorized<float>(tmp5);
                        auto tmp7 = tmp4 * tmp6;
                        auto tmp9 = tmp8 * tmp8;
                        auto tmp10 = tmp7 * tmp9;
                        auto tmp11 = tmp3 * tmp10;
                        auto tmp12 = tmp0 - tmp11;
                        auto tmp14 = tmp13 * tmp6;
                        auto tmp15 = tmp12 - tmp14;
                        auto tmp17 = tmp8 * tmp16;
                        auto tmp18 = tmp15 * tmp17;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) out_ptr2[static_cast<long>(x2 + (6889L*x1) + (6889L*x1_inner) + (744012L*x0))] = tmpbuf[x1_inner]; }
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(104L); x1<static_cast<long>(108L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (108L*x2) + (744012L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (108L*x2) + (744012L*x0))];
                        auto tmp2 = in_ptr2[static_cast<long>(x1)];
                        auto tmp4 = out_ptr1[static_cast<long>(x1)];
                        auto tmp7 = in_ptr3[static_cast<long>(x1)];
                        auto tmp12 = out_ptr0[static_cast<long>(x1)];
                        auto tmp15 = in_ptr4[static_cast<long>(x1)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp5 = static_cast<float>(1.814486863115111e-05);
                        auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                        auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                        auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                        auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                        auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                        auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                        auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                        auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                        auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                        out_ptr2[static_cast<long>(x2 + (6889L*x1) + (744012L*x0))] = tmp17;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(104L); x0<static_cast<long>(108L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6888L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(372006L + x2 + (6889L*x1) + (6889L*x1_inner) + (744012L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr3 + static_cast<long>(x1 + (54L*x2) + (372006L*x0)), static_cast<long>(54L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(6888L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr2[static_cast<long>(372006L + x2 + (6889L*x1) + (6889L*x1_inner) + (744012L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr3 + static_cast<long>(x1 + (54L*x2) + (372006L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr2[static_cast<long>(372006L + x2 + (6889L*x1) + (744012L*x0))];
                        out_ptr3[static_cast<long>(x1 + (54L*x2) + (372006L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6888L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (6889L*x1) + (6889L*x1_inner) + (744012L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (54L*x2) + (372006L*x0)), static_cast<long>(54L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(6888L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (6889L*x1) + (6889L*x1_inner) + (744012L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (54L*x2) + (372006L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(6889L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (6889L*x1) + (744012L*x0))];
                        out_ptr0[static_cast<long>(x1 + (54L*x2) + (372006L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(165L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(165L); x3+=static_cast<long>(1L))
                        {
                            auto tmp24 = in_ptr1[static_cast<long>(x1 + (96L*(std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (96L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x3), 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 83L)) + (7968L*(std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (7968L*(((std::min(std::max(0L, c10::div_floor_integer((1L + x2), 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 83L)) + (661344L*x0))];
                            auto tmp0 = c10::convert<long>((-1L) + x2);
                            auto tmp1 = static_cast<long>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<long>(165);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = c10::convert<long>((-1L) + x3);
                            auto tmp6 = tmp5 >= tmp1;
                            auto tmp7 = tmp5 < tmp3;
                            auto tmp8 = tmp2 & tmp4;
                            auto tmp9 = tmp8 & tmp6;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = in_ptr0[static_cast<long>(x1 + (96L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))))))) + (96L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L)))))) >= 0L) ? 0L : 83L)) + (7968L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))))))) + (7968L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(83L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L)))))) >= 0L) ? 0L : 83L)) + (661344L*x0))];
                                auto tmp13 = tmp12 / 1;
                                auto tmp14 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp15 = c10::convert<int>(std::min(83L, 1L + (c10::div_floor_integer(((-1L) + x2), 2L))));
                                auto tmp16 = tmp14 < tmp15;
                                auto tmp17 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp18 = c10::convert<int>(std::min(83L, 1L + (c10::div_floor_integer(((-1L) + x3), 2L))));
                                auto tmp19 = tmp17 < tmp18;
                                auto tmp20 = tmp16 & tmp19;
                                auto tmp21 = static_cast<float>(0.0);
                                auto tmp22 = tmp20 ? tmp13 : tmp21;
                                return tmp22;
                            }
                            ;
                            auto tmp23 = tmp10 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                            auto tmp25 = tmp24 / 1;
                            auto tmp26 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x2), 2L)));
                            auto tmp27 = c10::convert<int>(std::min(83L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp28 = tmp26 < tmp27;
                            auto tmp29 = c10::convert<int>(std::max(0L, c10::div_floor_integer((1L + x3), 2L)));
                            auto tmp30 = c10::convert<int>(std::min(83L, 1L + (c10::div_floor_integer(x3, 2L))));
                            auto tmp31 = tmp29 < tmp30;
                            auto tmp32 = tmp28 & tmp31;
                            auto tmp33 = static_cast<float>(0.0);
                            auto tmp34 = tmp32 ? tmp25 : tmp33;
                            auto tmp35 = decltype(tmp23)(tmp23 + tmp34);
                            out_ptr0[static_cast<long>(x3 + (165L*x2) + (27225L*x1) + (2613600L*x0))] = tmp35;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6888L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(264L); x2+=static_cast<long>(8L))
                    {
                        float tmp4[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr3 + static_cast<long>(x1 + (6889L*x2) + (1860030L*x0)), static_cast<long>(6889L), tmp4, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (270L*x1) + (270L*x1_inner) + (1860030L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(tmp4 + static_cast<long>(8L*x1_inner));
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (270L*x1) + (270L*x1_inner) + (1860030L*x0)));
                            auto tmp1 = static_cast<float>(0.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = to_float_mask(tmp0 <= tmp2);
                            auto tmp6 = decltype(tmp2)::blendv(tmp5, tmp2, tmp3);
                            auto tmp8 = decltype(tmp2)::blendv(tmp7, tmp2, tmp3);
                            auto tmp9 = tmp6 + tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x2 + (270L*x1) + (270L*x1_inner) + (1860030L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(264L); x2<static_cast<long>(270L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr2[static_cast<long>(x2 + (270L*x1) + (270L*x1_inner) + (1860030L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (6889L*x2) + (1860030L*x0)));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_out_ptr0[static_cast<long>(x2 + (270L*x1) + (270L*x1_inner) + (1860030L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp8 = tmp5 + tmp7;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp8.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (270L*x1) + (270L*x1_inner) + (1860030L*x0))] = tmpbuf[x1_inner]; }
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(6888L); x1<static_cast<long>(6889L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(270L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr2[static_cast<long>(x2 + (270L*x1) + (1860030L*x0))];
                        auto tmp3 = in_ptr3[static_cast<long>(x1 + (6889L*x2) + (1860030L*x0))];
                        auto tmp5 = in_out_ptr0[static_cast<long>(x2 + (270L*x1) + (1860030L*x0))];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp7 = decltype(tmp4)(tmp4 + tmp6);
                        in_out_ptr0[static_cast<long>(x2 + (270L*x1) + (1860030L*x0))] = tmp7;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(216L + x0 + (270L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    float tmp_acc2 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(216L + x0 + (270L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (54L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp5 = in_ptr6[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr7[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp0)(tmp0 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                        tmp_acc2 = tmp_acc2 + tmp8;
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                    out_ptr3[static_cast<long>(x0)] = tmp_acc2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr4 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr8[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr4[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(216L + x1 + (270L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr5 + static_cast<long>(x1 + (54L*x0)));
                    tmp32.store(out_ptr6 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(216L + x1 + (270L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (54L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr2[static_cast<long>(x1)];
                    auto tmp7 = in_ptr8[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr9[static_cast<long>(x1)];
                    auto tmp18 = in_ptr6[static_cast<long>(x1 + (54L*x0))];
                    auto tmp19 = in_ptr7[static_cast<long>(x1)];
                    auto tmp21 = out_ptr3[static_cast<long>(x1)];
                    auto tmp23 = in_ptr10[static_cast<long>(x1)];
                    auto tmp29 = in_ptr11[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                    auto tmp22 = decltype(tmp21)(tmp21 * tmp5);
                    auto tmp24 = decltype(tmp23)(tmp23 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    auto tmp26 = decltype(tmp20)(tmp20 * tmp25);
                    auto tmp27 = decltype(tmp0)(tmp0 - tmp26);
                    auto tmp28 = decltype(tmp27)(tmp27 - tmp13);
                    auto tmp30 = decltype(tmp23)(tmp23 * tmp29);
                    auto tmp31 = decltype(tmp28)(tmp28 * tmp30);
                    out_ptr5[static_cast<long>(x1 + (54L*x0))] = tmp17;
                    out_ptr6[static_cast<long>(x1 + (54L*x0))] = tmp31;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (54L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(1.814486863115111e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (54L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(1.814486863115111e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (54L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(162L + x0 + (270L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(162L + x0 + (270L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(162L + x1 + (270L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(162L + x1 + (270L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (54L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (54L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (54L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(1.814486863115111e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (54L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(1.814486863115111e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (54L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(108L + x0 + (270L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    float tmp_acc2 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(108L + x0 + (270L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (54L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (54L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp11 = in_ptr5[static_cast<long>(x0 + (54L*x1))];
                        auto tmp12 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp1 <= tmp2;
                        auto tmp5 = tmp3 ? tmp2 : tmp4;
                        auto tmp6 = decltype(tmp0)(tmp0 + tmp5);
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        auto tmp13 = decltype(tmp11)(tmp11 - tmp12);
                        auto tmp14 = decltype(tmp6)(tmp6 * tmp13);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                        tmp_acc2 = tmp_acc2 + tmp14;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(108L + x1 + (270L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(1.814486863115111e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (54L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(108L + x1 + (270L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (54L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (54L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (54L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr7[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr8[static_cast<long>(x1)];
                    auto tmp24 = in_ptr5[static_cast<long>(x1 + (54L*x0))];
                    auto tmp25 = in_ptr6[static_cast<long>(x1)];
                    auto tmp27 = out_ptr2[static_cast<long>(x1)];
                    auto tmp29 = in_ptr9[static_cast<long>(x1)];
                    auto tmp35 = in_ptr10[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp1 <= tmp2;
                    auto tmp5 = tmp3 ? tmp2 : tmp4;
                    auto tmp6 = decltype(tmp0)(tmp0 + tmp5);
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(1.814486863115111e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    auto tmp26 = decltype(tmp24)(tmp24 - tmp25);
                    auto tmp28 = decltype(tmp27)(tmp27 * tmp11);
                    auto tmp30 = decltype(tmp29)(tmp29 * tmp29);
                    auto tmp31 = decltype(tmp28)(tmp28 * tmp30);
                    auto tmp32 = decltype(tmp26)(tmp26 * tmp31);
                    auto tmp33 = decltype(tmp6)(tmp6 - tmp32);
                    auto tmp34 = decltype(tmp33)(tmp33 - tmp19);
                    auto tmp36 = decltype(tmp29)(tmp29 * tmp35);
                    auto tmp37 = decltype(tmp34)(tmp34 * tmp36);
                    out_ptr3[static_cast<long>(x1 + (54L*x0))] = tmp23;
                    out_ptr4[static_cast<long>(x1 + (54L*x0))] = tmp37;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (54L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(1.814486863115111e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (54L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(1.814486863115111e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (54L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (54L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(1.814486863115111e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (54L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(1.814486863115111e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (54L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_threshold_backward_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(165L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(165L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0)));
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                            auto tmp5 = c10::convert<int>(1L + x1);
                            auto tmp6 = static_cast<int>(0);
                            auto tmp7 = tmp5 >= tmp6;
                            auto tmp8 = static_cast<int>(167);
                            auto tmp9 = tmp5 < tmp8;
                            auto tmp10 = c10::convert<int>(1L + x2);
                            auto tmp11 = tmp10 >= tmp6;
                            auto tmp12 = tmp10 < tmp8;
                            auto tmp13 = tmp7 & tmp9;
                            auto tmp14 = tmp13 & tmp11;
                            auto tmp15 = tmp14 & tmp12;
                            auto tmp16 = [&]
                            {
                                auto tmp17 = masked_load(in_ptr1 + static_cast<long>(9072L + x3 + (54L*x2) + (9018L*x1) + (1506006L*x0)), to_float_mask(tmp15));
                                return tmp17;
                            }
                            ;
                            auto tmp18 = decltype(tmp16())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp16(), to_float_mask(tmp15));
                            auto tmp19 = tmp4 + tmp18;
                            auto tmp20 = [&]
                            {
                                auto tmp21 = masked_load(in_ptr2 + static_cast<long>(9072L + x3 + (54L*x2) + (9018L*x1) + (1506006L*x0)), to_float_mask(tmp15));
                                return tmp21;
                            }
                            ;
                            auto tmp22 = decltype(tmp20())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp20(), to_float_mask(tmp15));
                            auto tmp23 = decltype(tmp3)::blendv(tmp22, tmp3, tmp0);
                            auto tmp24 = tmp19 + tmp23;
                            auto tmp25 = c10::convert<int>(2L + x1);
                            auto tmp26 = tmp25 >= tmp6;
                            auto tmp27 = static_cast<int>(169);
                            auto tmp28 = tmp25 < tmp27;
                            auto tmp29 = c10::convert<int>(2L + x2);
                            auto tmp30 = tmp29 >= tmp6;
                            auto tmp31 = tmp29 < tmp27;
                            auto tmp32 = tmp26 & tmp28;
                            auto tmp33 = tmp32 & tmp30;
                            auto tmp34 = tmp33 & tmp31;
                            auto tmp35 = [&]
                            {
                                auto tmp36 = masked_load(in_ptr3 + static_cast<long>(18360L + x3 + (54L*x2) + (9126L*x1) + (1542294L*x0)), to_float_mask(tmp34));
                                return tmp36;
                            }
                            ;
                            auto tmp37 = decltype(tmp35())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp35(), to_float_mask(tmp34));
                            auto tmp38 = decltype(tmp3)::blendv(tmp37, tmp3, tmp0);
                            auto tmp39 = tmp24 + tmp38;
                            tmp39.store(in_out_ptr0 + static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(48L); x3<static_cast<long>(54L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0))];
                            auto tmp1 = in_out_ptr0[static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0))];
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = tmp0 ? tmp2 : tmp1;
                            auto tmp4 = c10::convert<long>(1L + x1);
                            auto tmp5 = static_cast<long>(0);
                            auto tmp6 = tmp4 >= tmp5;
                            auto tmp7 = static_cast<long>(167);
                            auto tmp8 = tmp4 < tmp7;
                            auto tmp9 = c10::convert<long>(1L + x2);
                            auto tmp10 = tmp9 >= tmp5;
                            auto tmp11 = tmp9 < tmp7;
                            auto tmp12 = tmp6 & tmp8;
                            auto tmp13 = tmp12 & tmp10;
                            auto tmp14 = tmp13 & tmp11;
                            auto tmp15 = [&]
                            {
                                auto tmp16 = in_ptr1[static_cast<long>(9072L + x3 + (54L*x2) + (9018L*x1) + (1506006L*x0))];
                                return tmp16;
                            }
                            ;
                            auto tmp17 = tmp14 ? tmp15() : static_cast<decltype(tmp15())>(0.0);
                            auto tmp18 = decltype(tmp3)(tmp3 + tmp17);
                            auto tmp19 = [&]
                            {
                                auto tmp20 = in_ptr2[static_cast<long>(9072L + x3 + (54L*x2) + (9018L*x1) + (1506006L*x0))];
                                return tmp20;
                            }
                            ;
                            auto tmp21 = tmp14 ? tmp19() : static_cast<decltype(tmp19())>(0.0);
                            auto tmp22 = tmp0 ? tmp2 : tmp21;
                            auto tmp23 = decltype(tmp18)(tmp18 + tmp22);
                            auto tmp24 = c10::convert<long>(2L + x1);
                            auto tmp25 = tmp24 >= tmp5;
                            auto tmp26 = static_cast<long>(169);
                            auto tmp27 = tmp24 < tmp26;
                            auto tmp28 = c10::convert<long>(2L + x2);
                            auto tmp29 = tmp28 >= tmp5;
                            auto tmp30 = tmp28 < tmp26;
                            auto tmp31 = tmp25 & tmp27;
                            auto tmp32 = tmp31 & tmp29;
                            auto tmp33 = tmp32 & tmp30;
                            auto tmp34 = [&]
                            {
                                auto tmp35 = in_ptr3[static_cast<long>(18360L + x3 + (54L*x2) + (9126L*x1) + (1542294L*x0))];
                                return tmp35;
                            }
                            ;
                            auto tmp36 = tmp33 ? tmp34() : static_cast<decltype(tmp34())>(0.0);
                            auto tmp37 = tmp0 ? tmp2 : tmp36;
                            auto tmp38 = decltype(tmp23)(tmp23 + tmp37);
                            in_out_ptr0[static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0))] = tmp38;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(54L + x0 + (270L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(54L + x0 + (270L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(54L + x1 + (270L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(54L + x1 + (270L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (54L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (54L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (54L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(1.814486863115111e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (54L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(1.814486863115111e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (54L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (270L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    float tmp_acc2 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (270L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp5 = in_ptr3[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp0)(tmp0 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                        tmp_acc2 = tmp_acc2 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc2;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr3[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (270L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr4 + static_cast<long>(x1 + (54L*x0)));
                    tmp32.store(out_ptr5 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (270L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (54L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp18 = in_ptr3[static_cast<long>(x1 + (54L*x0))];
                    auto tmp19 = in_ptr4[static_cast<long>(x1)];
                    auto tmp21 = out_ptr2[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp29 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(1.814486863115111e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                    auto tmp22 = decltype(tmp21)(tmp21 * tmp5);
                    auto tmp24 = decltype(tmp23)(tmp23 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    auto tmp26 = decltype(tmp20)(tmp20 * tmp25);
                    auto tmp27 = decltype(tmp0)(tmp0 - tmp26);
                    auto tmp28 = decltype(tmp27)(tmp27 - tmp13);
                    auto tmp30 = decltype(tmp23)(tmp23 * tmp29);
                    auto tmp31 = decltype(tmp28)(tmp28 * tmp30);
                    out_ptr4[static_cast<long>(x1 + (54L*x0))] = tmp17;
                    out_ptr5[static_cast<long>(x1 + (54L*x0))] = tmp31;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (54L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(55112L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (54L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (54L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (54L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(55112L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (54L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(1.814486863115111e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (54L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (54L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (54L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(1.814486863115111e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (54L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr5 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(165L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(165L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(96L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (96L*x2) + (15840L*x1) + (2613600L*x0))];
                            auto tmp3 = in_ptr1[static_cast<long>(x2 + (165L*x1) + (27225L*x3) + (2613600L*x0))];
                            auto tmp1 = static_cast<float>(0.0);
                            auto tmp2 = tmp0 <= tmp1;
                            auto tmp4 = tmp2 ? tmp1 : tmp3;
                            auto tmp5 = c10::convert<long>(1L + x1);
                            auto tmp6 = static_cast<long>(0);
                            auto tmp7 = tmp5 >= tmp6;
                            auto tmp8 = static_cast<long>(167);
                            auto tmp9 = tmp5 < tmp8;
                            auto tmp10 = c10::convert<long>(1L + x2);
                            auto tmp11 = tmp10 >= tmp6;
                            auto tmp12 = tmp10 < tmp8;
                            auto tmp13 = tmp7 & tmp9;
                            auto tmp14 = tmp13 & tmp11;
                            auto tmp15 = tmp14 & tmp12;
                            auto tmp16 = [&]
                            {
                                auto tmp17 = in_ptr2[static_cast<long>(16128L + x3 + (96L*x2) + (16032L*x1) + (2677344L*x0))];
                                return tmp17;
                            }
                            ;
                            auto tmp18 = tmp15 ? tmp16() : static_cast<decltype(tmp16())>(0.0);
                            auto tmp19 = tmp2 ? tmp1 : tmp18;
                            auto tmp20 = decltype(tmp4)(tmp4 + tmp19);
                            auto tmp21 = [&]
                            {
                                auto tmp22 = in_ptr3[static_cast<long>(16128L + x3 + (96L*x2) + (16032L*x1) + (2677344L*x0))];
                                return tmp22;
                            }
                            ;
                            auto tmp23 = tmp15 ? tmp21() : static_cast<decltype(tmp21())>(0.0);
                            auto tmp24 = decltype(tmp20)(tmp20 + tmp23);
                            auto tmp25 = c10::convert<long>(2L + x1);
                            auto tmp26 = tmp25 >= tmp6;
                            auto tmp27 = static_cast<long>(169);
                            auto tmp28 = tmp25 < tmp27;
                            auto tmp29 = c10::convert<long>(2L + x2);
                            auto tmp30 = tmp29 >= tmp6;
                            auto tmp31 = tmp29 < tmp27;
                            auto tmp32 = tmp26 & tmp28;
                            auto tmp33 = tmp32 & tmp30;
                            auto tmp34 = tmp33 & tmp31;
                            auto tmp35 = [&]
                            {
                                auto tmp36 = in_ptr4[static_cast<long>(32640L + x3 + (96L*x2) + (16224L*x1) + (2741856L*x0))];
                                return tmp36;
                            }
                            ;
                            auto tmp37 = tmp34 ? tmp35() : static_cast<decltype(tmp35())>(0.0);
                            auto tmp38 = tmp2 ? tmp1 : tmp37;
                            auto tmp39 = decltype(tmp24)(tmp24 + tmp38);
                            out_ptr0[static_cast<long>(x3 + (96L*x2) + (15840L*x1) + (2613600L*x0))] = tmp39;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(165L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(165L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (54L*x3) + (8910L*x2) + (1470150L*x1)));
                                auto tmp16 = flag_to_float_vec(in_ptr7 + static_cast<long>(x0 + (54L*x3) + (8910L*x2) + (1470150L*x1)));
                                auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0 + (54L*x3) + (8910L*x2) + (1470150L*x1)));
                                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                                auto tmp1 = c10::convert<int>(1L + x2);
                                auto tmp2 = static_cast<int>(0);
                                auto tmp3 = tmp1 >= tmp2;
                                auto tmp4 = static_cast<int>(167);
                                auto tmp5 = tmp1 < tmp4;
                                auto tmp6 = c10::convert<int>(1L + x3);
                                auto tmp7 = tmp6 >= tmp2;
                                auto tmp8 = tmp6 < tmp4;
                                auto tmp9 = tmp3 & tmp5;
                                auto tmp10 = tmp9 & tmp7;
                                auto tmp11 = tmp10 & tmp8;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = masked_load(in_ptr6 + static_cast<long>(9072L + x0 + (54L*x3) + (9018L*x2) + (1506006L*x1)), to_float_mask(tmp11));
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                auto tmp15 = tmp0 + tmp14;
                                auto tmp17 = c10::convert<int>(3L + x2);
                                auto tmp18 = tmp17 >= tmp2;
                                auto tmp19 = static_cast<int>(171);
                                auto tmp20 = tmp17 < tmp19;
                                auto tmp21 = c10::convert<int>(3L + x3);
                                auto tmp22 = tmp21 >= tmp2;
                                auto tmp23 = tmp21 < tmp19;
                                auto tmp24 = tmp18 & tmp20;
                                auto tmp25 = tmp24 & tmp22;
                                auto tmp26 = tmp25 & tmp23;
                                auto tmp27 = [&]
                                {
                                    auto tmp28 = masked_load(in_ptr8 + static_cast<long>(27864L + x0 + (54L*x3) + (9234L*x2) + (1579014L*x1)), to_float_mask(tmp26));
                                    return tmp28;
                                }
                                ;
                                auto tmp29 = decltype(tmp27())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp27(), to_float_mask(tmp26));
                                auto tmp30 = static_cast<float>(0.0);
                                auto tmp31 = at::vec::Vectorized<float>(tmp30);
                                auto tmp32 = decltype(tmp31)::blendv(tmp29, tmp31, tmp16);
                                auto tmp33 = tmp15 + tmp32;
                                auto tmp34 = [&]
                                {
                                    auto tmp35 = masked_load(in_ptr6 + static_cast<long>(9072L + x0 + (54L*x3) + (9018L*x2) + (1506006L*x1)), to_float_mask(tmp11));
                                    return tmp35;
                                }
                                ;
                                auto tmp36 = decltype(tmp34())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp34(), to_float_mask(tmp11));
                                auto tmp37 = tmp0 + tmp36;
                                auto tmp38 = [&]
                                {
                                    auto tmp39 = masked_load(in_ptr8 + static_cast<long>(27864L + x0 + (54L*x3) + (9234L*x2) + (1579014L*x1)), to_float_mask(tmp26));
                                    return tmp39;
                                }
                                ;
                                auto tmp40 = decltype(tmp38())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp38(), to_float_mask(tmp26));
                                auto tmp41 = decltype(tmp31)::blendv(tmp40, tmp31, tmp16);
                                auto tmp42 = tmp37 + tmp41;
                                auto tmp45 = tmp43 - tmp44;
                                auto tmp46 = tmp42 * tmp45;
                                tmp_acc0_vec = tmp_acc0_vec + tmp33;
                                tmp_acc1_vec = tmp_acc1_vec + tmp46;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(165L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(165L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr5[static_cast<long>(x0 + (54L*x3) + (8910L*x2) + (1470150L*x1))];
                                auto tmp16 = in_ptr7[static_cast<long>(x0 + (54L*x3) + (8910L*x2) + (1470150L*x1))];
                                auto tmp42 = in_ptr9[static_cast<long>(x0 + (54L*x3) + (8910L*x2) + (1470150L*x1))];
                                auto tmp43 = in_ptr10[static_cast<long>(x0)];
                                auto tmp1 = c10::convert<long>(1L + x2);
                                auto tmp2 = static_cast<long>(0);
                                auto tmp3 = tmp1 >= tmp2;
                                auto tmp4 = static_cast<long>(167);
                                auto tmp5 = tmp1 < tmp4;
                                auto tmp6 = c10::convert<long>(1L + x3);
                                auto tmp7 = tmp6 >= tmp2;
                                auto tmp8 = tmp6 < tmp4;
                                auto tmp9 = tmp3 & tmp5;
                                auto tmp10 = tmp9 & tmp7;
                                auto tmp11 = tmp10 & tmp8;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr6[static_cast<long>(9072L + x0 + (54L*x3) + (9018L*x2) + (1506006L*x1))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = decltype(tmp0)(tmp0 + tmp14);
                                auto tmp17 = c10::convert<long>(3L + x2);
                                auto tmp18 = tmp17 >= tmp2;
                                auto tmp19 = static_cast<long>(171);
                                auto tmp20 = tmp17 < tmp19;
                                auto tmp21 = c10::convert<long>(3L + x3);
                                auto tmp22 = tmp21 >= tmp2;
                                auto tmp23 = tmp21 < tmp19;
                                auto tmp24 = tmp18 & tmp20;
                                auto tmp25 = tmp24 & tmp22;
                                auto tmp26 = tmp25 & tmp23;
                                auto tmp27 = [&]
                                {
                                    auto tmp28 = in_ptr8[static_cast<long>(27864L + x0 + (54L*x3) + (9234L*x2) + (1579014L*x1))];
                                    return tmp28;
                                }
                                ;
                                auto tmp29 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                                auto tmp30 = static_cast<float>(0.0);
                                auto tmp31 = tmp16 ? tmp30 : tmp29;
                                auto tmp32 = decltype(tmp15)(tmp15 + tmp31);
                                auto tmp33 = [&]
                                {
                                    auto tmp34 = in_ptr6[static_cast<long>(9072L + x0 + (54L*x3) + (9018L*x2) + (1506006L*x1))];
                                    return tmp34;
                                }
                                ;
                                auto tmp35 = tmp11 ? tmp33() : static_cast<decltype(tmp33())>(0.0);
                                auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                                auto tmp37 = [&]
                                {
                                    auto tmp38 = in_ptr8[static_cast<long>(27864L + x0 + (54L*x3) + (9234L*x2) + (1579014L*x1))];
                                    return tmp38;
                                }
                                ;
                                auto tmp39 = tmp26 ? tmp37() : static_cast<decltype(tmp37())>(0.0);
                                auto tmp40 = tmp16 ? tmp30 : tmp39;
                                auto tmp41 = decltype(tmp36)(tmp36 + tmp40);
                                auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                                auto tmp45 = decltype(tmp41)(tmp41 * tmp44);
                                tmp_acc0 = tmp_acc0 + tmp32;
                                tmp_acc1 = tmp_acc1 + tmp45;
                            }
                        }
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(165L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(165L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(48L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0)));
                            auto tmp16 = flag_to_float_vec(in_ptr7 + static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0)));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0)));
                            auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x3));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x3));
                            auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x3));
                            auto tmp1 = c10::convert<int>(1L + x1);
                            auto tmp2 = static_cast<int>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<int>(167);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<int>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = masked_load(in_ptr6 + static_cast<long>(9072L + x3 + (54L*x2) + (9018L*x1) + (1506006L*x0)), to_float_mask(tmp11));
                                return tmp13;
                            }
                            ;
                            auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                            auto tmp15 = tmp0 + tmp14;
                            auto tmp17 = c10::convert<int>(3L + x1);
                            auto tmp18 = tmp17 >= tmp2;
                            auto tmp19 = static_cast<int>(171);
                            auto tmp20 = tmp17 < tmp19;
                            auto tmp21 = c10::convert<int>(3L + x2);
                            auto tmp22 = tmp21 >= tmp2;
                            auto tmp23 = tmp21 < tmp19;
                            auto tmp24 = tmp18 & tmp20;
                            auto tmp25 = tmp24 & tmp22;
                            auto tmp26 = tmp25 & tmp23;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = masked_load(in_ptr8 + static_cast<long>(27864L + x3 + (54L*x2) + (9234L*x1) + (1579014L*x0)), to_float_mask(tmp26));
                                return tmp28;
                            }
                            ;
                            auto tmp29 = decltype(tmp27())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp27(), to_float_mask(tmp26));
                            auto tmp30 = static_cast<float>(0.0);
                            auto tmp31 = at::vec::Vectorized<float>(tmp30);
                            auto tmp32 = decltype(tmp31)::blendv(tmp29, tmp31, tmp16);
                            auto tmp33 = tmp15 + tmp32;
                            auto tmp36 = tmp34 - tmp35;
                            auto tmp38 = static_cast<float>(4.591368227731864e-06);
                            auto tmp39 = at::vec::Vectorized<float>(tmp38);
                            auto tmp40 = tmp37 * tmp39;
                            auto tmp42 = tmp41 * tmp41;
                            auto tmp43 = tmp40 * tmp42;
                            auto tmp44 = tmp36 * tmp43;
                            auto tmp45 = tmp33 - tmp44;
                            tmp45.store(in_out_ptr0 + static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(48L); x3<static_cast<long>(54L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0))];
                            auto tmp16 = in_ptr7[static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0))];
                            auto tmp33 = in_ptr9[static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0))];
                            auto tmp34 = in_ptr10[static_cast<long>(x3)];
                            auto tmp36 = out_ptr2[static_cast<long>(x3)];
                            auto tmp39 = in_ptr11[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(1L + x1);
                            auto tmp2 = static_cast<long>(0);
                            auto tmp3 = tmp1 >= tmp2;
                            auto tmp4 = static_cast<long>(167);
                            auto tmp5 = tmp1 < tmp4;
                            auto tmp6 = c10::convert<long>(1L + x2);
                            auto tmp7 = tmp6 >= tmp2;
                            auto tmp8 = tmp6 < tmp4;
                            auto tmp9 = tmp3 & tmp5;
                            auto tmp10 = tmp9 & tmp7;
                            auto tmp11 = tmp10 & tmp8;
                            auto tmp12 = [&]
                            {
                                auto tmp13 = in_ptr6[static_cast<long>(9072L + x3 + (54L*x2) + (9018L*x1) + (1506006L*x0))];
                                return tmp13;
                            }
                            ;
                            auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                            auto tmp15 = decltype(tmp0)(tmp0 + tmp14);
                            auto tmp17 = c10::convert<long>(3L + x1);
                            auto tmp18 = tmp17 >= tmp2;
                            auto tmp19 = static_cast<long>(171);
                            auto tmp20 = tmp17 < tmp19;
                            auto tmp21 = c10::convert<long>(3L + x2);
                            auto tmp22 = tmp21 >= tmp2;
                            auto tmp23 = tmp21 < tmp19;
                            auto tmp24 = tmp18 & tmp20;
                            auto tmp25 = tmp24 & tmp22;
                            auto tmp26 = tmp25 & tmp23;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr8[static_cast<long>(27864L + x3 + (54L*x2) + (9234L*x1) + (1579014L*x0))];
                                return tmp28;
                            }
                            ;
                            auto tmp29 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp30 = static_cast<float>(0.0);
                            auto tmp31 = tmp16 ? tmp30 : tmp29;
                            auto tmp32 = decltype(tmp15)(tmp15 + tmp31);
                            auto tmp35 = decltype(tmp33)(tmp33 - tmp34);
                            auto tmp37 = static_cast<float>(4.591368227731864e-06);
                            auto tmp38 = decltype(tmp36)(tmp36 * tmp37);
                            auto tmp40 = decltype(tmp39)(tmp39 * tmp39);
                            auto tmp41 = decltype(tmp38)(tmp38 * tmp40);
                            auto tmp42 = decltype(tmp35)(tmp35 * tmp41);
                            auto tmp43 = decltype(tmp32)(tmp32 - tmp42);
                            in_out_ptr0[static_cast<long>(x3 + (54L*x2) + (8910L*x1) + (1470150L*x0))] = tmp43;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(54L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr11[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(27225L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (54L*x2) + (1470150L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                        auto tmp2 = static_cast<float>(4.591368227731864e-06);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 * tmp3;
                        auto tmp5 = tmp0 - tmp4;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp9.store(in_out_ptr0 + static_cast<long>(x1 + (54L*x2) + (1470150L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(54L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(27225L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (54L*x2) + (1470150L*x0))];
                        auto tmp1 = out_ptr1[static_cast<long>(x1)];
                        auto tmp5 = in_ptr11[static_cast<long>(x1)];
                        auto tmp6 = in_ptr12[static_cast<long>(x1)];
                        auto tmp2 = static_cast<float>(4.591368227731864e-06);
                        auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 - tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        in_out_ptr0[static_cast<long>(x1 + (54L*x2) + (1470150L*x0))] = tmp8;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(217800L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = to_float_mask(tmp1 <= tmp3);
                        auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                        auto tmp7 = tmp0 + tmp6;
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(217800L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (96L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (96L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = to_float_mask(tmp1 <= tmp3);
                    auto tmp6 = decltype(tmp3)::blendv(tmp5, tmp3, tmp4);
                    auto tmp7 = tmp0 + tmp6;
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(4.591368227731864e-06);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(in_out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_36, primals_38, primals_39, primals_41, primals_42, primals_44, primals_45, primals_46, primals_48, primals_49, primals_51, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_60, primals_62, primals_63, primals_64, primals_66, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_75, primals_77, primals_79, primals_80, primals_81, primals_83, primals_84, primals_86, primals_87, primals_89, primals_90, primals_91, primals_93, primals_94, primals_96, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_105, primals_107, primals_108, primals_110, primals_111, primals_112, primals_114, primals_115, primals_116, primals_118, primals_119, primals_120, primals_122, primals_123, primals_125, primals_126, primals_127, primals_129, primals_131, primals_132, primals_133, primals_135, primals_136, primals_138, primals_139, primals_140, primals_142, primals_143, primals_144, primals_146, primals_147, primals_148, primals_150, primals_151, primals_152, primals_154, primals_155, primals_156, primals_158, primals_159, primals_160, primals_162, primals_163, primals_164, primals_166, primals_167, primals_168, primals_170, primals_171, primals_172, primals_174, primals_175, primals_176, primals_178, primals_179, primals_180, primals_182, primals_183, primals_184, primals_186, primals_187, primals_189, primals_190, primals_192, primals_193, primals_194, primals_196, primals_197, primals_198, primals_200, primals_201, primals_202, primals_204, primals_205, primals_206, primals_208, primals_209, primals_210, primals_212, primals_213, primals_214, primals_216, primals_217, primals_218, primals_220, primals_221, primals_222, primals_224, primals_225, primals_226, primals_228, primals_229, primals_230, primals_232, primals_233, primals_234, primals_236, primals_237, primals_238, primals_240, primals_241, primals_243, primals_244, primals_246, primals_247, primals_248, primals_250, primals_251, primals_252, primals_254, primals_255, primals_256, primals_258, primals_259, primals_260, primals_262, primals_263, primals_264, primals_266, primals_267, primals_268, primals_270, primals_271, primals_272, primals_274, primals_275, primals_276, primals_278, primals_279, primals_280, primals_282, primals_283, primals_284, primals_286, primals_287, primals_288, primals_290, primals_291, primals_292, primals_294, primals_295, primals_297, primals_298, primals_300, primals_301, primals_302, primals_304, primals_305, primals_306, primals_308, primals_309, primals_310, primals_312, primals_313, primals_314, primals_316, primals_317, primals_318, primals_320, primals_321, primals_322, primals_324, primals_325, primals_326, primals_328, primals_329, primals_330, primals_332, primals_333, primals_334, primals_336, primals_337, primals_338, primals_340, primals_341, primals_342, primals_344, primals_345, primals_346, primals_348, primals_349, primals_351, primals_352, primals_354, primals_355, primals_357, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_366, primals_368, primals_369, primals_371, primals_372, primals_373, primals_375, primals_376, primals_378, primals_379, primals_380, primals_382, primals_383, primals_384, primals_386, primals_387, primals_388, primals_390, primals_391, primals_393, primals_394, primals_395, primals_397, primals_399, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_408, primals_410, primals_411, primals_412, primals_414, primals_415, primals_416, primals_418, primals_419, primals_420, primals_422, primals_423, primals_424, primals_426, primals_427, primals_428, primals_430, primals_431, primals_432, primals_434, primals_435, primals_436, primals_438, primals_439, primals_440, primals_442, primals_443, primals_444, primals_446, primals_447, primals_448, primals_450, primals_451, primals_452, primals_454, primals_455, primals_457, primals_458, primals_460, primals_461, primals_462, primals_464, primals_465, primals_466, primals_468, primals_469, primals_470, primals_472, primals_473, primals_474, primals_476, primals_477, primals_478, primals_480, primals_481, primals_482, primals_484, primals_485, primals_486, primals_488, primals_489, primals_490, primals_492, primals_493, primals_494, primals_496, primals_497, primals_498, primals_500, primals_501, primals_502, primals_504, primals_505, primals_506, primals_508, primals_509, primals_511, primals_512, primals_514, primals_515, primals_516, primals_518, primals_519, primals_520, primals_522, primals_523, primals_524, primals_526, primals_527, primals_528, primals_530, primals_531, primals_532, primals_534, primals_535, primals_536, primals_538, primals_539, primals_540, primals_542, primals_543, primals_544, primals_546, primals_547, primals_548, primals_550, primals_551, primals_552, primals_554, primals_555, primals_556, primals_558, primals_559, primals_560, primals_562, primals_563, primals_565, primals_566, primals_568, primals_569, primals_571, primals_572, primals_573, primals_575, primals_576, primals_578, primals_579, primals_580, primals_582, primals_583, primals_585, primals_586, primals_587, primals_589, primals_590, primals_592, primals_593, primals_594, primals_596, primals_597, primals_598, primals_600, primals_601, primals_602, primals_604, primals_605, primals_607, primals_608, primals_609, primals_611, primals_613, primals_614, primals_615, primals_617, primals_618, primals_620, primals_621, primals_622, primals_624, primals_625, primals_626, primals_628, primals_629, primals_630, primals_632, primals_633, primals_634, primals_636, primals_637, primals_638, primals_640, primals_641, primals_642, primals_644, primals_645, primals_646, primals_648, primals_649, primals_650, primals_652, primals_653, primals_654, primals_656, primals_657, primals_658, primals_660, primals_661, primals_662, primals_664, primals_665, primals_666, primals_668, primals_669, primals_671, primals_672, primals_674, primals_675, primals_676, primals_678, primals_679, primals_680, primals_682, primals_683, primals_684, primals_686, primals_687, primals_688, primals_690, primals_691, primals_692, primals_694, primals_695, primals_696, primals_698, primals_699, primals_700, primals_702, primals_703, primals_704, primals_706, primals_707, primals_708, primals_710, primals_711, primals_712, primals_714, primals_715, primals_716, primals_718, primals_719, primals_720, primals_722, primals_723, primals_725, primals_726, primals_728, primals_729, primals_730, primals_732, primals_733, primals_734, primals_736, primals_737, primals_738, primals_740, primals_741, primals_742, primals_744, primals_745, primals_746, primals_748, primals_749, primals_750, primals_752, primals_753, primals_754, primals_756, primals_757, primals_758, primals_760, primals_761, primals_762, primals_764, primals_765, primals_766, primals_768, primals_769, primals_770, primals_772, primals_773, primals_774, primals_1381, convolution, squeeze_1, relu, convolution_1, squeeze_4, constant_pad_nd, convolution_2, convolution_3, squeeze_7, relu_2, convolution_4, convolution_5, squeeze_10, constant_pad_nd_1, getitem_8, getitem_9, convolution_6, squeeze_13, constant_pad_nd_2, convolution_7, convolution_8, squeeze_16, relu_4, convolution_9, convolution_10, squeeze_19, constant_pad_nd_3, getitem_17, constant_pad_nd_4, convolution_11, convolution_12, squeeze_22, relu_6, convolution_13, convolution_14, squeeze_25, constant_pad_nd_5, convolution_15, convolution_16, squeeze_28, relu_8, convolution_17, convolution_18, squeeze_31, relu_9, convolution_19, convolution_20, squeeze_34, relu_10, convolution_21, convolution_22, squeeze_37, constant_pad_nd_7, convolution_23, convolution_24, squeeze_40, relu_12, convolution_25, convolution_26, squeeze_43, constant_pad_nd_8, convolution_27, squeeze_46, avg_pool2d, constant_pad_nd_9, avg_pool2d_1, cat_1, squeeze_49, relu_15, convolution_30, squeeze_52, constant_pad_nd_10, convolution_31, convolution_32, squeeze_55, relu_17, convolution_33, convolution_34, squeeze_58, constant_pad_nd_11, getitem_47, constant_pad_nd_12, convolution_35, convolution_36, squeeze_61, relu_19, convolution_37, convolution_38, squeeze_64, constant_pad_nd_13, getitem_53, constant_pad_nd_14, convolution_39, convolution_40, squeeze_67, relu_21, convolution_41, convolution_42, squeeze_70, constant_pad_nd_15, convolution_43, convolution_44, squeeze_73, relu_23, convolution_45, convolution_46, squeeze_76, relu_24, convolution_47, convolution_48, squeeze_79, relu_25, convolution_49, convolution_50, squeeze_82, constant_pad_nd_17, convolution_51, convolution_52, squeeze_85, relu_27, convolution_53, convolution_54, squeeze_88, constant_pad_nd_18, convolution_55, squeeze_91, avg_pool2d_2, constant_pad_nd_19, avg_pool2d_3, cat_3, squeeze_94, add_169, relu_30, convolution_58, squeeze_97, add_174, relu_31, convolution_59, convolution_60, squeeze_100, relu_32, convolution_61, convolution_62, squeeze_103, getitem_83, relu_33, convolution_63, convolution_64, squeeze_106, relu_34, convolution_65, convolution_66, squeeze_109, getitem_89, convolution_67, convolution_68, squeeze_112, relu_36, convolution_69, convolution_70, squeeze_115, convolution_71, convolution_72, squeeze_118, relu_38, convolution_73, convolution_74, squeeze_121, relu_39, convolution_75, convolution_76, squeeze_124, relu_40, convolution_77, convolution_78, squeeze_127, convolution_79, convolution_80, squeeze_130, relu_42, convolution_81, convolution_82, squeeze_133, convolution_83, squeeze_136, add_244, relu_44, convolution_84, squeeze_139, add_249, relu_45, convolution_85, convolution_86, squeeze_142, relu_46, convolution_87, convolution_88, squeeze_145, getitem_117, relu_47, convolution_89, convolution_90, squeeze_148, relu_48, convolution_91, convolution_92, squeeze_151, getitem_123, convolution_93, convolution_94, squeeze_154, relu_50, convolution_95, convolution_96, squeeze_157, convolution_97, convolution_98, squeeze_160, relu_52, convolution_99, convolution_100, squeeze_163, relu_53, convolution_101, convolution_102, squeeze_166, relu_54, convolution_103, convolution_104, squeeze_169, convolution_105, convolution_106, squeeze_172, relu_56, convolution_107, convolution_108, squeeze_175, convolution_109, squeeze_178, add_319, relu_58, convolution_110, squeeze_181, add_324, relu_59, convolution_111, convolution_112, squeeze_184, relu_60, convolution_113, convolution_114, squeeze_187, getitem_151, relu_61, convolution_115, convolution_116, squeeze_190, relu_62, convolution_117, convolution_118, squeeze_193, getitem_157, convolution_119, convolution_120, squeeze_196, relu_64, convolution_121, convolution_122, squeeze_199, convolution_123, convolution_124, squeeze_202, relu_66, convolution_125, convolution_126, squeeze_205, relu_67, convolution_127, convolution_128, squeeze_208, relu_68, convolution_129, convolution_130, squeeze_211, convolution_131, convolution_132, squeeze_214, relu_70, convolution_133, convolution_134, squeeze_217, convolution_135, squeeze_220, add_394, relu_72, convolution_136, squeeze_223, add_399, relu_73, convolution_137, convolution_138, squeeze_226, relu_74, convolution_139, convolution_140, squeeze_229, getitem_185, relu_75, convolution_141, convolution_142, squeeze_232, relu_76, convolution_143, convolution_144, squeeze_235, getitem_191, convolution_145, convolution_146, squeeze_238, relu_78, convolution_147, convolution_148, squeeze_241, convolution_149, convolution_150, squeeze_244, relu_80, convolution_151, convolution_152, squeeze_247, relu_81, convolution_153, convolution_154, squeeze_250, relu_82, convolution_155, convolution_156, squeeze_253, convolution_157, convolution_158, squeeze_256, relu_84, convolution_159, convolution_160, squeeze_259, convolution_161, squeeze_262, relu_86, convolution_162, squeeze_265, constant_pad_nd_20, convolution_163, convolution_164, squeeze_268, relu_88, convolution_165, convolution_166, squeeze_271, constant_pad_nd_21, getitem_219, constant_pad_nd_22, convolution_167, convolution_168, squeeze_274, relu_90, convolution_169, convolution_170, squeeze_277, constant_pad_nd_23, getitem_225, constant_pad_nd_24, convolution_171, convolution_172, squeeze_280, relu_92, convolution_173, convolution_174, squeeze_283, constant_pad_nd_25, convolution_175, convolution_176, squeeze_286, relu_94, convolution_177, convolution_178, squeeze_289, relu_95, convolution_179, convolution_180, squeeze_292, relu_96, convolution_181, convolution_182, squeeze_295, constant_pad_nd_27, convolution_183, convolution_184, squeeze_298, relu_98, convolution_185, convolution_186, squeeze_301, constant_pad_nd_28, convolution_187, squeeze_304, avg_pool2d_4, constant_pad_nd_29, avg_pool2d_5, cat_9, squeeze_307, add_549, relu_101, convolution_190, squeeze_310, add_554, relu_102, convolution_191, convolution_192, squeeze_313, relu_103, convolution_193, convolution_194, squeeze_316, getitem_255, relu_104, convolution_195, convolution_196, squeeze_319, relu_105, convolution_197, convolution_198, squeeze_322, getitem_261, convolution_199, convolution_200, squeeze_325, relu_107, convolution_201, convolution_202, squeeze_328, convolution_203, convolution_204, squeeze_331, relu_109, convolution_205, convolution_206, squeeze_334, relu_110, convolution_207, convolution_208, squeeze_337, relu_111, convolution_209, convolution_210, squeeze_340, convolution_211, convolution_212, squeeze_343, relu_113, convolution_213, convolution_214, squeeze_346, convolution_215, squeeze_349, add_624, relu_115, convolution_216, squeeze_352, add_629, relu_116, convolution_217, convolution_218, squeeze_355, relu_117, convolution_219, convolution_220, squeeze_358, getitem_289, relu_118, convolution_221, convolution_222, squeeze_361, relu_119, convolution_223, convolution_224, squeeze_364, getitem_295, convolution_225, convolution_226, squeeze_367, relu_121, convolution_227, convolution_228, squeeze_370, convolution_229, convolution_230, squeeze_373, relu_123, convolution_231, convolution_232, squeeze_376, relu_124, convolution_233, convolution_234, squeeze_379, relu_125, convolution_235, convolution_236, squeeze_382, convolution_237, convolution_238, squeeze_385, relu_127, convolution_239, convolution_240, squeeze_388, convolution_241, squeeze_391, add_699, relu_129, convolution_242, squeeze_394, add_704, relu_130, convolution_243, convolution_244, squeeze_397, relu_131, convolution_245, convolution_246, squeeze_400, getitem_323, relu_132, convolution_247, convolution_248, squeeze_403, relu_133, convolution_249, convolution_250, squeeze_406, getitem_329, convolution_251, convolution_252, squeeze_409, relu_135, convolution_253, convolution_254, squeeze_412, convolution_255, convolution_256, squeeze_415, relu_137, convolution_257, convolution_258, squeeze_418, relu_138, convolution_259, convolution_260, squeeze_421, relu_139, convolution_261, convolution_262, squeeze_424, convolution_263, convolution_264, squeeze_427, relu_141, convolution_265, convolution_266, squeeze_430, convolution_267, squeeze_433, relu_143, convolution_268, squeeze_436, constant_pad_nd_30, convolution_269, convolution_270, squeeze_439, relu_145, convolution_271, convolution_272, squeeze_442, constant_pad_nd_31, getitem_357, constant_pad_nd_32, convolution_273, convolution_274, squeeze_445, relu_147, convolution_275, convolution_276, squeeze_448, constant_pad_nd_33, getitem_363, constant_pad_nd_34, convolution_277, convolution_278, squeeze_451, relu_149, convolution_279, convolution_280, squeeze_454, constant_pad_nd_35, convolution_281, convolution_282, squeeze_457, relu_151, convolution_283, convolution_284, squeeze_460, relu_152, convolution_285, convolution_286, squeeze_463, relu_153, convolution_287, convolution_288, squeeze_466, constant_pad_nd_37, convolution_289, convolution_290, squeeze_469, relu_155, convolution_291, convolution_292, squeeze_472, constant_pad_nd_38, convolution_293, squeeze_475, avg_pool2d_6, constant_pad_nd_39, avg_pool2d_7, cat_14, squeeze_478, add_854, relu_158, convolution_296, squeeze_481, add_859, relu_159, convolution_297, convolution_298, squeeze_484, relu_160, convolution_299, convolution_300, squeeze_487, getitem_393, relu_161, convolution_301, convolution_302, squeeze_490, relu_162, convolution_303, convolution_304, squeeze_493, getitem_399, convolution_305, convolution_306, squeeze_496, relu_164, convolution_307, convolution_308, squeeze_499, convolution_309, convolution_310, squeeze_502, relu_166, convolution_311, convolution_312, squeeze_505, relu_167, convolution_313, convolution_314, squeeze_508, relu_168, convolution_315, convolution_316, squeeze_511, convolution_317, convolution_318, squeeze_514, relu_170, convolution_319, convolution_320, squeeze_517, convolution_321, squeeze_520, add_929, relu_172, convolution_322, squeeze_523, add_934, relu_173, convolution_323, convolution_324, squeeze_526, relu_174, convolution_325, convolution_326, squeeze_529, getitem_427, relu_175, convolution_327, convolution_328, squeeze_532, relu_176, convolution_329, convolution_330, squeeze_535, getitem_433, convolution_331, convolution_332, squeeze_538, relu_178, convolution_333, convolution_334, squeeze_541, convolution_335, convolution_336, squeeze_544, relu_180, convolution_337, convolution_338, squeeze_547, relu_181, convolution_339, convolution_340, squeeze_550, relu_182, convolution_341, convolution_342, squeeze_553, convolution_343, convolution_344, squeeze_556, relu_184, convolution_345, convolution_346, squeeze_559, convolution_347, squeeze_562, add_1004, relu_186, convolution_348, squeeze_565, add_1009, relu_187, convolution_349, convolution_350, squeeze_568, relu_188, convolution_351, convolution_352, squeeze_571, getitem_461, relu_189, convolution_353, convolution_354, squeeze_574, relu_190, convolution_355, convolution_356, squeeze_577, getitem_467, convolution_357, convolution_358, squeeze_580, relu_192, convolution_359, convolution_360, squeeze_583, convolution_361, convolution_362, squeeze_586, relu_194, convolution_363, convolution_364, squeeze_589, relu_195, convolution_365, convolution_366, squeeze_592, relu_196, convolution_367, convolution_368, squeeze_595, convolution_369, convolution_370, squeeze_598, relu_198, convolution_371, convolution_372, squeeze_601, clone, permute_1, le, unsqueeze_806, unsqueeze_818, unsqueeze_830, unsqueeze_842, unsqueeze_854, unsqueeze_866, unsqueeze_878, unsqueeze_890, unsqueeze_902, unsqueeze_914, unsqueeze_926, unsqueeze_938, unsqueeze_950, unsqueeze_962, unsqueeze_974, unsqueeze_986, unsqueeze_998, unsqueeze_1010, unsqueeze_1022, unsqueeze_1034, unsqueeze_1046, unsqueeze_1058, unsqueeze_1070, unsqueeze_1082, unsqueeze_1094, unsqueeze_1106, unsqueeze_1118, unsqueeze_1130, unsqueeze_1142, unsqueeze_1154, unsqueeze_1166, unsqueeze_1178, unsqueeze_1190, unsqueeze_1202, unsqueeze_1214, unsqueeze_1226, unsqueeze_1238, unsqueeze_1250, unsqueeze_1262, unsqueeze_1274, unsqueeze_1286, unsqueeze_1298, unsqueeze_1310, le_43, unsqueeze_1322, unsqueeze_1334, le_45, unsqueeze_1346, unsqueeze_1358, unsqueeze_1370, unsqueeze_1382, unsqueeze_1394, unsqueeze_1406, unsqueeze_1418, unsqueeze_1430, unsqueeze_1442, unsqueeze_1454, unsqueeze_1466, unsqueeze_1478, unsqueeze_1490, unsqueeze_1502, unsqueeze_1514, unsqueeze_1526, unsqueeze_1538, unsqueeze_1550, unsqueeze_1562, unsqueeze_1574, unsqueeze_1586, unsqueeze_1598, unsqueeze_1610, unsqueeze_1622, unsqueeze_1634, unsqueeze_1646, unsqueeze_1658, unsqueeze_1670, unsqueeze_1682, unsqueeze_1694, unsqueeze_1706, unsqueeze_1718, unsqueeze_1730, unsqueeze_1742, unsqueeze_1754, unsqueeze_1766, unsqueeze_1778, unsqueeze_1790, unsqueeze_1802, unsqueeze_1814, unsqueeze_1826, unsqueeze_1838, unsqueeze_1850, unsqueeze_1862, unsqueeze_1874, unsqueeze_1886, unsqueeze_1898, unsqueeze_1910, unsqueeze_1922, unsqueeze_1934, unsqueeze_1946, unsqueeze_1958, unsqueeze_1970, unsqueeze_1982, unsqueeze_1994, le_100, unsqueeze_2006, unsqueeze_2018, le_102, unsqueeze_2030, unsqueeze_2042, unsqueeze_2054, unsqueeze_2066, unsqueeze_2078, unsqueeze_2090, unsqueeze_2102, unsqueeze_2114, unsqueeze_2126, unsqueeze_2138, unsqueeze_2150, unsqueeze_2162, unsqueeze_2174, unsqueeze_2186, unsqueeze_2198, unsqueeze_2210, unsqueeze_2222, unsqueeze_2234, unsqueeze_2246, unsqueeze_2258, unsqueeze_2270, unsqueeze_2282, unsqueeze_2294, unsqueeze_2306, unsqueeze_2318, unsqueeze_2330, unsqueeze_2342, unsqueeze_2354, unsqueeze_2366, unsqueeze_2378, unsqueeze_2390, unsqueeze_2402, unsqueeze_2414, unsqueeze_2426, unsqueeze_2438, unsqueeze_2450, unsqueeze_2462, unsqueeze_2474, unsqueeze_2486, unsqueeze_2498, unsqueeze_2510, unsqueeze_2522, unsqueeze_2534, unsqueeze_2546, unsqueeze_2558, unsqueeze_2570, unsqueeze_2582, unsqueeze_2594, unsqueeze_2606, unsqueeze_2618, unsqueeze_2630, unsqueeze_2642, unsqueeze_2654, unsqueeze_2666, unsqueeze_2678, unsqueeze_2690, unsqueeze_2702, unsqueeze_2714, unsqueeze_2726, unsqueeze_2738, unsqueeze_2750, unsqueeze_2762, unsqueeze_2774, unsqueeze_2786, unsqueeze_2798, unsqueeze_2810, unsqueeze_2822, unsqueeze_2834, unsqueeze_2846, le_171, unsqueeze_2858, unsqueeze_2870, le_173, unsqueeze_2882, unsqueeze_2894, unsqueeze_2906, unsqueeze_2918, unsqueeze_2930, unsqueeze_2942, unsqueeze_2954, unsqueeze_2966, unsqueeze_2978, unsqueeze_2990, unsqueeze_3002, unsqueeze_3014, unsqueeze_3026, le_186, unsqueeze_3038, unsqueeze_3050, unsqueeze_3062, unsqueeze_3074, unsqueeze_3086, unsqueeze_3098, unsqueeze_3110, unsqueeze_3122, unsqueeze_3134, unsqueeze_3146, unsqueeze_3158, unsqueeze_3170, unsqueeze_3182, unsqueeze_3194, unsqueeze_3206, tangents_1 = args
    args.clear()
    assert_size_stride(primals_1, (96, ), (1, ))
    assert_size_stride(primals_3, (96, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_4, (54, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_5, (54, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_6, (54, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_7, (96, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_8, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_9, (108, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_10, (108, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_11, (108, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_12, (108, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_13, (108, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_14, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_15, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_16, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_17, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_18, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_19, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_20, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_21, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_22, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_23, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_24, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_25, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_26, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_27, (96, 3, 3, 3), (27, 1, 9, 3))
    assert_size_stride(primals_28, (54, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_29, (54, ), (1, ))
    assert_size_stride(primals_31, (54, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_32, (54, ), (1, ))
    assert_size_stride(primals_34, (54, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_35, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_36, (54, ), (1, ))
    assert_size_stride(primals_38, (54, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_39, (54, ), (1, ))
    assert_size_stride(primals_41, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_42, (54, ), (1, ))
    assert_size_stride(primals_44, (54, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_45, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_46, (54, ), (1, ))
    assert_size_stride(primals_48, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_49, (54, ), (1, ))
    assert_size_stride(primals_51, (54, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_52, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_53, (54, ), (1, ))
    assert_size_stride(primals_55, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_56, (54, ), (1, ))
    assert_size_stride(primals_58, (54, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_59, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_60, (54, ), (1, ))
    assert_size_stride(primals_62, (54, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_63, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_64, (54, ), (1, ))
    assert_size_stride(primals_66, (54, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_67, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_68, (54, ), (1, ))
    assert_size_stride(primals_70, (54, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_71, (54, ), (1, ))
    assert_size_stride(primals_73, (54, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_74, (54, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(primals_75, (54, ), (1, ))
    assert_size_stride(primals_77, (54, ), (1, ))
    assert_size_stride(primals_79, (54, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_80, (54, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_81, (108, ), (1, ))
    assert_size_stride(primals_83, (108, 270, 1, 1), (270, 1, 1, 1))
    assert_size_stride(primals_84, (108, ), (1, ))
    assert_size_stride(primals_86, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_87, (108, ), (1, ))
    assert_size_stride(primals_89, (108, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_90, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_91, (108, ), (1, ))
    assert_size_stride(primals_93, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_94, (108, ), (1, ))
    assert_size_stride(primals_96, (108, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_97, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_98, (108, ), (1, ))
    assert_size_stride(primals_100, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_101, (108, ), (1, ))
    assert_size_stride(primals_103, (108, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_104, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_105, (108, ), (1, ))
    assert_size_stride(primals_107, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_108, (108, ), (1, ))
    assert_size_stride(primals_110, (108, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_111, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_112, (108, ), (1, ))
    assert_size_stride(primals_114, (108, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_115, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_116, (108, ), (1, ))
    assert_size_stride(primals_118, (108, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_119, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_120, (108, ), (1, ))
    assert_size_stride(primals_122, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_123, (108, ), (1, ))
    assert_size_stride(primals_125, (108, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_126, (108, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(primals_127, (108, ), (1, ))
    assert_size_stride(primals_129, (108, ), (1, ))
    assert_size_stride(primals_131, (108, 270, 1, 1), (270, 1, 1, 1))
    assert_size_stride(primals_132, (108, 270, 1, 1), (270, 1, 1, 1))
    assert_size_stride(primals_133, (216, ), (1, ))
    assert_size_stride(primals_135, (216, 540, 1, 1), (540, 1, 1, 1))
    assert_size_stride(primals_136, (216, ), (1, ))
    assert_size_stride(primals_138, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_139, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_140, (216, ), (1, ))
    assert_size_stride(primals_142, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_143, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_144, (216, ), (1, ))
    assert_size_stride(primals_146, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_147, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_148, (216, ), (1, ))
    assert_size_stride(primals_150, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_151, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_152, (216, ), (1, ))
    assert_size_stride(primals_154, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_155, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_156, (216, ), (1, ))
    assert_size_stride(primals_158, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_159, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_160, (216, ), (1, ))
    assert_size_stride(primals_162, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_163, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_164, (216, ), (1, ))
    assert_size_stride(primals_166, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_167, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_168, (216, ), (1, ))
    assert_size_stride(primals_170, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_171, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_172, (216, ), (1, ))
    assert_size_stride(primals_174, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_175, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_176, (216, ), (1, ))
    assert_size_stride(primals_178, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_179, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_180, (216, ), (1, ))
    assert_size_stride(primals_182, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_183, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_184, (216, ), (1, ))
    assert_size_stride(primals_186, (216, 540, 1, 1), (540, 1, 1, 1))
    assert_size_stride(primals_187, (216, ), (1, ))
    assert_size_stride(primals_189, (216, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_190, (216, ), (1, ))
    assert_size_stride(primals_192, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_193, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_194, (216, ), (1, ))
    assert_size_stride(primals_196, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_197, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_198, (216, ), (1, ))
    assert_size_stride(primals_200, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_201, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_202, (216, ), (1, ))
    assert_size_stride(primals_204, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_205, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_206, (216, ), (1, ))
    assert_size_stride(primals_208, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_209, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_210, (216, ), (1, ))
    assert_size_stride(primals_212, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_213, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_214, (216, ), (1, ))
    assert_size_stride(primals_216, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_217, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_218, (216, ), (1, ))
    assert_size_stride(primals_220, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_221, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_222, (216, ), (1, ))
    assert_size_stride(primals_224, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_225, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_226, (216, ), (1, ))
    assert_size_stride(primals_228, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_229, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_230, (216, ), (1, ))
    assert_size_stride(primals_232, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_233, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_234, (216, ), (1, ))
    assert_size_stride(primals_236, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_237, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_238, (216, ), (1, ))
    assert_size_stride(primals_240, (216, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_241, (216, ), (1, ))
    assert_size_stride(primals_243, (216, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_244, (216, ), (1, ))
    assert_size_stride(primals_246, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_247, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_248, (216, ), (1, ))
    assert_size_stride(primals_250, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_251, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_252, (216, ), (1, ))
    assert_size_stride(primals_254, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_255, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_256, (216, ), (1, ))
    assert_size_stride(primals_258, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_259, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_260, (216, ), (1, ))
    assert_size_stride(primals_262, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_263, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_264, (216, ), (1, ))
    assert_size_stride(primals_266, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_267, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_268, (216, ), (1, ))
    assert_size_stride(primals_270, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_271, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_272, (216, ), (1, ))
    assert_size_stride(primals_274, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_275, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_276, (216, ), (1, ))
    assert_size_stride(primals_278, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_279, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_280, (216, ), (1, ))
    assert_size_stride(primals_282, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_283, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_284, (216, ), (1, ))
    assert_size_stride(primals_286, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_287, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_288, (216, ), (1, ))
    assert_size_stride(primals_290, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_291, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_292, (216, ), (1, ))
    assert_size_stride(primals_294, (216, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_295, (216, ), (1, ))
    assert_size_stride(primals_297, (216, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_298, (216, ), (1, ))
    assert_size_stride(primals_300, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_301, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_302, (216, ), (1, ))
    assert_size_stride(primals_304, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_305, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_306, (216, ), (1, ))
    assert_size_stride(primals_308, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_309, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_310, (216, ), (1, ))
    assert_size_stride(primals_312, (216, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_313, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_314, (216, ), (1, ))
    assert_size_stride(primals_316, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_317, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_318, (216, ), (1, ))
    assert_size_stride(primals_320, (216, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_321, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_322, (216, ), (1, ))
    assert_size_stride(primals_324, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_325, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_326, (216, ), (1, ))
    assert_size_stride(primals_328, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_329, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_330, (216, ), (1, ))
    assert_size_stride(primals_332, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_333, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_334, (216, ), (1, ))
    assert_size_stride(primals_336, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_337, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_338, (216, ), (1, ))
    assert_size_stride(primals_340, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_341, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_342, (216, ), (1, ))
    assert_size_stride(primals_344, (216, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_345, (216, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(primals_346, (216, ), (1, ))
    assert_size_stride(primals_348, (432, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_349, (432, ), (1, ))
    assert_size_stride(primals_351, (432, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_352, (432, ), (1, ))
    assert_size_stride(primals_354, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_355, (432, ), (1, ))
    assert_size_stride(primals_357, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_358, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_359, (432, ), (1, ))
    assert_size_stride(primals_361, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_362, (432, ), (1, ))
    assert_size_stride(primals_364, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_365, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_366, (432, ), (1, ))
    assert_size_stride(primals_368, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_369, (432, ), (1, ))
    assert_size_stride(primals_371, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_372, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_373, (432, ), (1, ))
    assert_size_stride(primals_375, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_376, (432, ), (1, ))
    assert_size_stride(primals_378, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_379, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_380, (432, ), (1, ))
    assert_size_stride(primals_382, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_383, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_384, (432, ), (1, ))
    assert_size_stride(primals_386, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_387, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_388, (432, ), (1, ))
    assert_size_stride(primals_390, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_391, (432, ), (1, ))
    assert_size_stride(primals_393, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_394, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_395, (432, ), (1, ))
    assert_size_stride(primals_397, (432, ), (1, ))
    assert_size_stride(primals_399, (216, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_400, (216, 1080, 1, 1), (1080, 1, 1, 1))
    assert_size_stride(primals_401, (432, ), (1, ))
    assert_size_stride(primals_403, (432, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_404, (432, ), (1, ))
    assert_size_stride(primals_406, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_407, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_408, (432, ), (1, ))
    assert_size_stride(primals_410, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_411, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_412, (432, ), (1, ))
    assert_size_stride(primals_414, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_415, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_416, (432, ), (1, ))
    assert_size_stride(primals_418, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_419, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_420, (432, ), (1, ))
    assert_size_stride(primals_422, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_423, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_424, (432, ), (1, ))
    assert_size_stride(primals_426, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_427, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_428, (432, ), (1, ))
    assert_size_stride(primals_430, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_431, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_432, (432, ), (1, ))
    assert_size_stride(primals_434, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_435, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_436, (432, ), (1, ))
    assert_size_stride(primals_438, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_439, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_440, (432, ), (1, ))
    assert_size_stride(primals_442, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_443, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_444, (432, ), (1, ))
    assert_size_stride(primals_446, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_447, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_448, (432, ), (1, ))
    assert_size_stride(primals_450, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_451, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_452, (432, ), (1, ))
    assert_size_stride(primals_454, (432, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_455, (432, ), (1, ))
    assert_size_stride(primals_457, (432, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_458, (432, ), (1, ))
    assert_size_stride(primals_460, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_461, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_462, (432, ), (1, ))
    assert_size_stride(primals_464, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_465, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_466, (432, ), (1, ))
    assert_size_stride(primals_468, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_469, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_470, (432, ), (1, ))
    assert_size_stride(primals_472, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_473, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_474, (432, ), (1, ))
    assert_size_stride(primals_476, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_477, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_478, (432, ), (1, ))
    assert_size_stride(primals_480, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_481, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_482, (432, ), (1, ))
    assert_size_stride(primals_484, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_485, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_486, (432, ), (1, ))
    assert_size_stride(primals_488, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_489, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_490, (432, ), (1, ))
    assert_size_stride(primals_492, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_493, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_494, (432, ), (1, ))
    assert_size_stride(primals_496, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_497, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_498, (432, ), (1, ))
    assert_size_stride(primals_500, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_501, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_502, (432, ), (1, ))
    assert_size_stride(primals_504, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_505, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_506, (432, ), (1, ))
    assert_size_stride(primals_508, (432, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_509, (432, ), (1, ))
    assert_size_stride(primals_511, (432, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_512, (432, ), (1, ))
    assert_size_stride(primals_514, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_515, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_516, (432, ), (1, ))
    assert_size_stride(primals_518, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_519, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_520, (432, ), (1, ))
    assert_size_stride(primals_522, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_523, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_524, (432, ), (1, ))
    assert_size_stride(primals_526, (432, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_527, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_528, (432, ), (1, ))
    assert_size_stride(primals_530, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_531, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_532, (432, ), (1, ))
    assert_size_stride(primals_534, (432, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_535, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_536, (432, ), (1, ))
    assert_size_stride(primals_538, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_539, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_540, (432, ), (1, ))
    assert_size_stride(primals_542, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_543, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_544, (432, ), (1, ))
    assert_size_stride(primals_546, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_547, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_548, (432, ), (1, ))
    assert_size_stride(primals_550, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_551, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_552, (432, ), (1, ))
    assert_size_stride(primals_554, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_555, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_556, (432, ), (1, ))
    assert_size_stride(primals_558, (432, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_559, (432, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(primals_560, (432, ), (1, ))
    assert_size_stride(primals_562, (864, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_563, (864, ), (1, ))
    assert_size_stride(primals_565, (864, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_566, (864, ), (1, ))
    assert_size_stride(primals_568, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_569, (864, ), (1, ))
    assert_size_stride(primals_571, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_572, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_573, (864, ), (1, ))
    assert_size_stride(primals_575, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_576, (864, ), (1, ))
    assert_size_stride(primals_578, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_579, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_580, (864, ), (1, ))
    assert_size_stride(primals_582, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_583, (864, ), (1, ))
    assert_size_stride(primals_585, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_586, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_587, (864, ), (1, ))
    assert_size_stride(primals_589, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_590, (864, ), (1, ))
    assert_size_stride(primals_592, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_593, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_594, (864, ), (1, ))
    assert_size_stride(primals_596, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_597, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_598, (864, ), (1, ))
    assert_size_stride(primals_600, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_601, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_602, (864, ), (1, ))
    assert_size_stride(primals_604, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_605, (864, ), (1, ))
    assert_size_stride(primals_607, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_608, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_609, (864, ), (1, ))
    assert_size_stride(primals_611, (864, ), (1, ))
    assert_size_stride(primals_613, (432, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_614, (432, 2160, 1, 1), (2160, 1, 1, 1))
    assert_size_stride(primals_615, (864, ), (1, ))
    assert_size_stride(primals_617, (864, 4320, 1, 1), (4320, 1, 1, 1))
    assert_size_stride(primals_618, (864, ), (1, ))
    assert_size_stride(primals_620, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_621, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_622, (864, ), (1, ))
    assert_size_stride(primals_624, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_625, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_626, (864, ), (1, ))
    assert_size_stride(primals_628, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_629, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_630, (864, ), (1, ))
    assert_size_stride(primals_632, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_633, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_634, (864, ), (1, ))
    assert_size_stride(primals_636, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_637, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_638, (864, ), (1, ))
    assert_size_stride(primals_640, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_641, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_642, (864, ), (1, ))
    assert_size_stride(primals_644, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_645, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_646, (864, ), (1, ))
    assert_size_stride(primals_648, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_649, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_650, (864, ), (1, ))
    assert_size_stride(primals_652, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_653, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_654, (864, ), (1, ))
    assert_size_stride(primals_656, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_657, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_658, (864, ), (1, ))
    assert_size_stride(primals_660, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_661, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_662, (864, ), (1, ))
    assert_size_stride(primals_664, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_665, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_666, (864, ), (1, ))
    assert_size_stride(primals_668, (864, 4320, 1, 1), (4320, 1, 1, 1))
    assert_size_stride(primals_669, (864, ), (1, ))
    assert_size_stride(primals_671, (864, 4320, 1, 1), (4320, 1, 1, 1))
    assert_size_stride(primals_672, (864, ), (1, ))
    assert_size_stride(primals_674, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_675, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_676, (864, ), (1, ))
    assert_size_stride(primals_678, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_679, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_680, (864, ), (1, ))
    assert_size_stride(primals_682, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_683, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_684, (864, ), (1, ))
    assert_size_stride(primals_686, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_687, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_688, (864, ), (1, ))
    assert_size_stride(primals_690, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_691, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_692, (864, ), (1, ))
    assert_size_stride(primals_694, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_695, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_696, (864, ), (1, ))
    assert_size_stride(primals_698, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_699, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_700, (864, ), (1, ))
    assert_size_stride(primals_702, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_703, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_704, (864, ), (1, ))
    assert_size_stride(primals_706, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_707, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_708, (864, ), (1, ))
    assert_size_stride(primals_710, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_711, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_712, (864, ), (1, ))
    assert_size_stride(primals_714, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_715, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_716, (864, ), (1, ))
    assert_size_stride(primals_718, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_719, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_720, (864, ), (1, ))
    assert_size_stride(primals_722, (864, 4320, 1, 1), (4320, 1, 1, 1))
    assert_size_stride(primals_723, (864, ), (1, ))
    assert_size_stride(primals_725, (864, 4320, 1, 1), (4320, 1, 1, 1))
    assert_size_stride(primals_726, (864, ), (1, ))
    assert_size_stride(primals_728, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_729, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_730, (864, ), (1, ))
    assert_size_stride(primals_732, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_733, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_734, (864, ), (1, ))
    assert_size_stride(primals_736, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_737, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_738, (864, ), (1, ))
    assert_size_stride(primals_740, (864, 1, 7, 7), (49, 49, 7, 1))
    assert_size_stride(primals_741, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_742, (864, ), (1, ))
    assert_size_stride(primals_744, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_745, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_746, (864, ), (1, ))
    assert_size_stride(primals_748, (864, 1, 5, 5), (25, 25, 5, 1))
    assert_size_stride(primals_749, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_750, (864, ), (1, ))
    assert_size_stride(primals_752, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_753, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_754, (864, ), (1, ))
    assert_size_stride(primals_756, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_757, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_758, (864, ), (1, ))
    assert_size_stride(primals_760, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_761, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_762, (864, ), (1, ))
    assert_size_stride(primals_764, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_765, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_766, (864, ), (1, ))
    assert_size_stride(primals_768, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_769, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_770, (864, ), (1, ))
    assert_size_stride(primals_772, (864, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_773, (864, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_774, (864, ), (1, ))
    assert_size_stride(primals_1381, (8, 3, 331, 331), (328683, 1, 993, 3))
    assert_size_stride(convolution, (8, 96, 165, 165), (2613600, 1, 15840, 96))
    assert_size_stride(squeeze_1, (96, ), (1, ))
    assert_size_stride(relu, (8, 96, 165, 165), (2613600, 1, 15840, 96))
    assert_size_stride(convolution_1, (8, 54, 165, 165), (1470150, 1, 8910, 54))
    assert_size_stride(squeeze_4, (54, ), (1, ))
    assert_size_stride(constant_pad_nd, (8, 96, 169, 169), (2741856, 1, 16224, 96))
    assert_size_stride(convolution_2, (8, 96, 83, 83), (661344, 1, 7968, 96))
    assert_size_stride(convolution_3, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_7, (54, ), (1, ))
    assert_size_stride(relu_2, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_4, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_5, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_10, (54, ), (1, ))
    assert_size_stride(constant_pad_nd_1, (8, 96, 167, 167), (2677344, 1, 16032, 96))
    assert_size_stride(getitem_8, (8, 96, 83, 83), (661344, 1, 7968, 96))
    assert_size_stride(getitem_9, (8, 96, 83, 83), (661344, 1, 7968, 96))
    assert_size_stride(convolution_6, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_13, (54, ), (1, ))
    assert_size_stride(constant_pad_nd_2, (8, 54, 171, 171), (1579014, 1, 9234, 54))
    assert_size_stride(convolution_7, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_8, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_16, (54, ), (1, ))
    assert_size_stride(relu_4, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_9, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_10, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_19, (54, ), (1, ))
    assert_size_stride(constant_pad_nd_3, (8, 54, 167, 167), (1506006, 1, 9018, 54))
    assert_size_stride(getitem_17, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(constant_pad_nd_4, (8, 54, 169, 169), (1542294, 1, 9126, 54))
    assert_size_stride(convolution_11, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_12, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_22, (54, ), (1, ))
    assert_size_stride(relu_6, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_13, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_14, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_25, (54, ), (1, ))
    assert_size_stride(constant_pad_nd_5, (8, 54, 167, 167), (1506006, 1, 9018, 54))
    assert_size_stride(convolution_15, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_16, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_28, (54, ), (1, ))
    assert_size_stride(relu_8, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_17, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_18, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_31, (54, ), (1, ))
    assert_size_stride(relu_9, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_19, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_20, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_34, (54, ), (1, ))
    assert_size_stride(relu_10, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_21, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_22, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_37, (54, ), (1, ))
    assert_size_stride(constant_pad_nd_7, (8, 96, 167, 167), (2677344, 1, 16032, 96))
    assert_size_stride(convolution_23, (8, 96, 83, 83), (661344, 1, 7968, 96))
    assert_size_stride(convolution_24, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_40, (54, ), (1, ))
    assert_size_stride(relu_12, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_25, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(convolution_26, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_43, (54, ), (1, ))
    assert_size_stride(constant_pad_nd_8, (8, 54, 165, 165), (1470150, 1, 8910, 54))
    assert_size_stride(convolution_27, (8, 54, 83, 83), (372006, 1, 4482, 54))
    assert_size_stride(squeeze_46, (54, ), (1, ))
    assert_size_stride(avg_pool2d, (8, 96, 83, 83), (661344, 1, 7968, 96))
    assert_size_stride(constant_pad_nd_9, (8, 96, 165, 165), (2613600, 1, 15840, 96))
    assert_size_stride(avg_pool2d_1, (8, 96, 83, 83), (661344, 1, 7968, 96))
    assert_size_stride(cat_1, (8, 108, 83, 83), (744012, 1, 8964, 108))
    assert_size_stride(squeeze_49, (108, ), (1, ))
    assert_size_stride(relu_15, (8, 270, 83, 83), (1860030, 1, 22410, 270))
    assert_size_stride(convolution_30, (8, 108, 83, 83), (744012, 1, 8964, 108))
    assert_size_stride(squeeze_52, (108, ), (1, ))
    assert_size_stride(constant_pad_nd_10, (8, 108, 87, 87), (817452, 1, 9396, 108))
    assert_size_stride(convolution_31, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_32, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_55, (108, ), (1, ))
    assert_size_stride(relu_17, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_33, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_34, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_58, (108, ), (1, ))
    assert_size_stride(constant_pad_nd_11, (8, 108, 85, 85), (780300, 1, 9180, 108))
    assert_size_stride(getitem_47, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(constant_pad_nd_12, (8, 108, 89, 89), (855468, 1, 9612, 108))
    assert_size_stride(convolution_35, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_36, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_61, (108, ), (1, ))
    assert_size_stride(relu_19, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_37, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_38, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_64, (108, ), (1, ))
    assert_size_stride(constant_pad_nd_13, (8, 108, 85, 85), (780300, 1, 9180, 108))
    assert_size_stride(getitem_53, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(constant_pad_nd_14, (8, 108, 87, 87), (817452, 1, 9396, 108))
    assert_size_stride(convolution_39, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_40, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_67, (108, ), (1, ))
    assert_size_stride(relu_21, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_41, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_42, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_70, (108, ), (1, ))
    assert_size_stride(constant_pad_nd_15, (8, 108, 85, 85), (780300, 1, 9180, 108))
    assert_size_stride(convolution_43, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_44, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_73, (108, ), (1, ))
    assert_size_stride(relu_23, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_45, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_46, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_76, (108, ), (1, ))
    assert_size_stride(relu_24, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_47, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_48, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_79, (108, ), (1, ))
    assert_size_stride(relu_25, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_49, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_50, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_82, (108, ), (1, ))
    assert_size_stride(constant_pad_nd_17, (8, 108, 85, 85), (780300, 1, 9180, 108))
    assert_size_stride(convolution_51, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_52, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_85, (108, ), (1, ))
    assert_size_stride(relu_27, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_53, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(convolution_54, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_88, (108, ), (1, ))
    assert_size_stride(constant_pad_nd_18, (8, 108, 83, 83), (744012, 1, 8964, 108))
    assert_size_stride(convolution_55, (8, 108, 42, 42), (190512, 1, 4536, 108))
    assert_size_stride(squeeze_91, (108, ), (1, ))
    assert_size_stride(avg_pool2d_2, (8, 270, 42, 42), (476280, 1, 11340, 270))
    assert_size_stride(constant_pad_nd_19, (8, 270, 83, 83), (1860030, 1, 22410, 270))
    assert_size_stride(avg_pool2d_3, (8, 270, 42, 42), (476280, 1, 11340, 270))
    assert_size_stride(cat_3, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_94, (216, ), (1, ))
    assert_size_stride(add_169, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_30, (8, 540, 42, 42), (952560, 1, 22680, 540))
    assert_size_stride(convolution_58, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_97, (216, ), (1, ))
    assert_size_stride(add_174, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_31, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_59, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_60, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_100, (216, ), (1, ))
    assert_size_stride(relu_32, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_61, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_62, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_103, (216, ), (1, ))
    assert_size_stride(getitem_83, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_33, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_63, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_64, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_106, (216, ), (1, ))
    assert_size_stride(relu_34, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_65, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_66, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_109, (216, ), (1, ))
    assert_size_stride(getitem_89, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_67, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_68, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_112, (216, ), (1, ))
    assert_size_stride(relu_36, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_69, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_70, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_115, (216, ), (1, ))
    assert_size_stride(convolution_71, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_72, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_118, (216, ), (1, ))
    assert_size_stride(relu_38, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_73, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_74, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_121, (216, ), (1, ))
    assert_size_stride(relu_39, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_75, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_76, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_124, (216, ), (1, ))
    assert_size_stride(relu_40, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_77, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_78, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_127, (216, ), (1, ))
    assert_size_stride(convolution_79, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_80, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_130, (216, ), (1, ))
    assert_size_stride(relu_42, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_81, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_82, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_133, (216, ), (1, ))
    assert_size_stride(convolution_83, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_136, (216, ), (1, ))
    assert_size_stride(add_244, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_44, (8, 1080, 42, 42), (1905120, 1, 45360, 1080))
    assert_size_stride(convolution_84, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_139, (216, ), (1, ))
    assert_size_stride(add_249, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_45, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_85, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_86, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_142, (216, ), (1, ))
    assert_size_stride(relu_46, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_87, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_88, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_145, (216, ), (1, ))
    assert_size_stride(getitem_117, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_47, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_89, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_90, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_148, (216, ), (1, ))
    assert_size_stride(relu_48, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_91, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_92, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_151, (216, ), (1, ))
    assert_size_stride(getitem_123, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_93, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_94, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_154, (216, ), (1, ))
    assert_size_stride(relu_50, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_95, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_96, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_157, (216, ), (1, ))
    assert_size_stride(convolution_97, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_98, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_160, (216, ), (1, ))
    assert_size_stride(relu_52, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_99, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_100, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_163, (216, ), (1, ))
    assert_size_stride(relu_53, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_101, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_102, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_166, (216, ), (1, ))
    assert_size_stride(relu_54, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_103, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_104, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_169, (216, ), (1, ))
    assert_size_stride(convolution_105, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_106, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_172, (216, ), (1, ))
    assert_size_stride(relu_56, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_107, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_108, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_175, (216, ), (1, ))
    assert_size_stride(convolution_109, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_178, (216, ), (1, ))
    assert_size_stride(add_319, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_58, (8, 1080, 42, 42), (1905120, 1, 45360, 1080))
    assert_size_stride(convolution_110, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_181, (216, ), (1, ))
    assert_size_stride(add_324, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_59, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_111, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_112, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_184, (216, ), (1, ))
    assert_size_stride(relu_60, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_113, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_114, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_187, (216, ), (1, ))
    assert_size_stride(getitem_151, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_61, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_115, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_116, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_190, (216, ), (1, ))
    assert_size_stride(relu_62, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_117, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_118, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_193, (216, ), (1, ))
    assert_size_stride(getitem_157, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_119, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_120, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_196, (216, ), (1, ))
    assert_size_stride(relu_64, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_121, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_122, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_199, (216, ), (1, ))
    assert_size_stride(convolution_123, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_124, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_202, (216, ), (1, ))
    assert_size_stride(relu_66, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_125, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_126, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_205, (216, ), (1, ))
    assert_size_stride(relu_67, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_127, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_128, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_208, (216, ), (1, ))
    assert_size_stride(relu_68, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_129, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_130, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_211, (216, ), (1, ))
    assert_size_stride(convolution_131, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_132, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_214, (216, ), (1, ))
    assert_size_stride(relu_70, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_133, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_134, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_217, (216, ), (1, ))
    assert_size_stride(convolution_135, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_220, (216, ), (1, ))
    assert_size_stride(add_394, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_72, (8, 1080, 42, 42), (1905120, 1, 45360, 1080))
    assert_size_stride(convolution_136, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_223, (216, ), (1, ))
    assert_size_stride(add_399, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_73, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_137, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_138, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_226, (216, ), (1, ))
    assert_size_stride(relu_74, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_139, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_140, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_229, (216, ), (1, ))
    assert_size_stride(getitem_185, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(relu_75, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_141, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_142, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_232, (216, ), (1, ))
    assert_size_stride(relu_76, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_143, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_144, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_235, (216, ), (1, ))
    assert_size_stride(getitem_191, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_145, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_146, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_238, (216, ), (1, ))
    assert_size_stride(relu_78, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_147, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_148, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_241, (216, ), (1, ))
    assert_size_stride(convolution_149, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_150, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_244, (216, ), (1, ))
    assert_size_stride(relu_80, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_151, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_152, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_247, (216, ), (1, ))
    assert_size_stride(relu_81, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_153, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_154, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_250, (216, ), (1, ))
    assert_size_stride(relu_82, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_155, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_156, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_253, (216, ), (1, ))
    assert_size_stride(convolution_157, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_158, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_256, (216, ), (1, ))
    assert_size_stride(relu_84, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_159, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(convolution_160, (8, 216, 42, 42), (381024, 1, 9072, 216))
    assert_size_stride(squeeze_259, (216, ), (1, ))
    assert_size_stride(convolution_161, (8, 432, 42, 42), (762048, 1, 18144, 432))
    assert_size_stride(squeeze_262, (432, ), (1, ))
    assert_size_stride(relu_86, (8, 1080, 42, 42), (1905120, 1, 45360, 1080))
    assert_size_stride(convolution_162, (8, 432, 42, 42), (762048, 1, 18144, 432))
    assert_size_stride(squeeze_265, (432, ), (1, ))
    assert_size_stride(constant_pad_nd_20, (8, 432, 45, 45), (874800, 1, 19440, 432))
    assert_size_stride(convolution_163, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_164, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_268, (432, ), (1, ))
    assert_size_stride(relu_88, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_165, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_166, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_271, (432, ), (1, ))
    assert_size_stride(constant_pad_nd_21, (8, 432, 43, 43), (798768, 1, 18576, 432))
    assert_size_stride(getitem_219, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(constant_pad_nd_22, (8, 432, 47, 47), (954288, 1, 20304, 432))
    assert_size_stride(convolution_167, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_168, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_274, (432, ), (1, ))
    assert_size_stride(relu_90, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_169, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_170, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_277, (432, ), (1, ))
    assert_size_stride(constant_pad_nd_23, (8, 432, 43, 43), (798768, 1, 18576, 432))
    assert_size_stride(getitem_225, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(constant_pad_nd_24, (8, 432, 45, 45), (874800, 1, 19440, 432))
    assert_size_stride(convolution_171, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_172, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_280, (432, ), (1, ))
    assert_size_stride(relu_92, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_173, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_174, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_283, (432, ), (1, ))
    assert_size_stride(constant_pad_nd_25, (8, 432, 43, 43), (798768, 1, 18576, 432))
    assert_size_stride(convolution_175, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_176, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_286, (432, ), (1, ))
    assert_size_stride(relu_94, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_177, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_178, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_289, (432, ), (1, ))
    assert_size_stride(relu_95, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_179, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_180, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_292, (432, ), (1, ))
    assert_size_stride(relu_96, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_181, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_182, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_295, (432, ), (1, ))
    assert_size_stride(constant_pad_nd_27, (8, 432, 43, 43), (798768, 1, 18576, 432))
    assert_size_stride(convolution_183, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_184, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_298, (432, ), (1, ))
    assert_size_stride(relu_98, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_185, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_186, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_301, (432, ), (1, ))
    assert_size_stride(constant_pad_nd_28, (8, 432, 42, 42), (762048, 1, 18144, 432))
    assert_size_stride(convolution_187, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_304, (432, ), (1, ))
    assert_size_stride(avg_pool2d_4, (8, 1080, 21, 21), (476280, 1, 22680, 1080))
    assert_size_stride(constant_pad_nd_29, (8, 1080, 42, 42), (1905120, 1, 45360, 1080))
    assert_size_stride(avg_pool2d_5, (8, 1080, 21, 21), (476280, 1, 22680, 1080))
    assert_size_stride(cat_9, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_307, (432, ), (1, ))
    assert_size_stride(add_549, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_101, (8, 2160, 21, 21), (952560, 1, 45360, 2160))
    assert_size_stride(convolution_190, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_310, (432, ), (1, ))
    assert_size_stride(add_554, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_102, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_191, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_192, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_313, (432, ), (1, ))
    assert_size_stride(relu_103, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_193, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_194, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_316, (432, ), (1, ))
    assert_size_stride(getitem_255, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_104, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_195, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_196, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_319, (432, ), (1, ))
    assert_size_stride(relu_105, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_197, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_198, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_322, (432, ), (1, ))
    assert_size_stride(getitem_261, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_199, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_200, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_325, (432, ), (1, ))
    assert_size_stride(relu_107, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_201, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_202, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_328, (432, ), (1, ))
    assert_size_stride(convolution_203, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_204, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_331, (432, ), (1, ))
    assert_size_stride(relu_109, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_205, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_206, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_334, (432, ), (1, ))
    assert_size_stride(relu_110, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_207, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_208, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_337, (432, ), (1, ))
    assert_size_stride(relu_111, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_209, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_210, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_340, (432, ), (1, ))
    assert_size_stride(convolution_211, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_212, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_343, (432, ), (1, ))
    assert_size_stride(relu_113, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_213, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_214, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_346, (432, ), (1, ))
    assert_size_stride(convolution_215, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_349, (432, ), (1, ))
    assert_size_stride(add_624, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_115, (8, 2160, 21, 21), (952560, 1, 45360, 2160))
    assert_size_stride(convolution_216, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_352, (432, ), (1, ))
    assert_size_stride(add_629, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_116, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_217, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_218, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_355, (432, ), (1, ))
    assert_size_stride(relu_117, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_219, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_220, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_358, (432, ), (1, ))
    assert_size_stride(getitem_289, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_118, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_221, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_222, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_361, (432, ), (1, ))
    assert_size_stride(relu_119, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_223, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_224, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_364, (432, ), (1, ))
    assert_size_stride(getitem_295, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_225, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_226, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_367, (432, ), (1, ))
    assert_size_stride(relu_121, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_227, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_228, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_370, (432, ), (1, ))
    assert_size_stride(convolution_229, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_230, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_373, (432, ), (1, ))
    assert_size_stride(relu_123, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_231, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_232, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_376, (432, ), (1, ))
    assert_size_stride(relu_124, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_233, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_234, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_379, (432, ), (1, ))
    assert_size_stride(relu_125, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_235, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_236, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_382, (432, ), (1, ))
    assert_size_stride(convolution_237, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_238, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_385, (432, ), (1, ))
    assert_size_stride(relu_127, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_239, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_240, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_388, (432, ), (1, ))
    assert_size_stride(convolution_241, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_391, (432, ), (1, ))
    assert_size_stride(add_699, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_129, (8, 2160, 21, 21), (952560, 1, 45360, 2160))
    assert_size_stride(convolution_242, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_394, (432, ), (1, ))
    assert_size_stride(add_704, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_130, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_243, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_244, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_397, (432, ), (1, ))
    assert_size_stride(relu_131, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_245, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_246, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_400, (432, ), (1, ))
    assert_size_stride(getitem_323, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(relu_132, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_247, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_248, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_403, (432, ), (1, ))
    assert_size_stride(relu_133, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_249, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_250, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_406, (432, ), (1, ))
    assert_size_stride(getitem_329, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_251, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_252, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_409, (432, ), (1, ))
    assert_size_stride(relu_135, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_253, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_254, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_412, (432, ), (1, ))
    assert_size_stride(convolution_255, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_256, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_415, (432, ), (1, ))
    assert_size_stride(relu_137, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_257, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_258, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_418, (432, ), (1, ))
    assert_size_stride(relu_138, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_259, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_260, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_421, (432, ), (1, ))
    assert_size_stride(relu_139, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_261, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_262, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_424, (432, ), (1, ))
    assert_size_stride(convolution_263, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_264, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_427, (432, ), (1, ))
    assert_size_stride(relu_141, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_265, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(convolution_266, (8, 432, 21, 21), (190512, 1, 9072, 432))
    assert_size_stride(squeeze_430, (432, ), (1, ))
    assert_size_stride(convolution_267, (8, 864, 21, 21), (381024, 1, 18144, 864))
    assert_size_stride(squeeze_433, (864, ), (1, ))
    assert_size_stride(relu_143, (8, 2160, 21, 21), (952560, 1, 45360, 2160))
    assert_size_stride(convolution_268, (8, 864, 21, 21), (381024, 1, 18144, 864))
    assert_size_stride(squeeze_436, (864, ), (1, ))
    assert_size_stride(constant_pad_nd_30, (8, 864, 25, 25), (540000, 1, 21600, 864))
    assert_size_stride(convolution_269, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_270, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_439, (864, ), (1, ))
    assert_size_stride(relu_145, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_271, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_272, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_442, (864, ), (1, ))
    assert_size_stride(constant_pad_nd_31, (8, 864, 23, 23), (457056, 1, 19872, 864))
    assert_size_stride(getitem_357, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(constant_pad_nd_32, (8, 864, 27, 27), (629856, 1, 23328, 864))
    assert_size_stride(convolution_273, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_274, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_445, (864, ), (1, ))
    assert_size_stride(relu_147, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_275, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_276, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_448, (864, ), (1, ))
    assert_size_stride(constant_pad_nd_33, (8, 864, 23, 23), (457056, 1, 19872, 864))
    assert_size_stride(getitem_363, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(constant_pad_nd_34, (8, 864, 25, 25), (540000, 1, 21600, 864))
    assert_size_stride(convolution_277, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_278, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_451, (864, ), (1, ))
    assert_size_stride(relu_149, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_279, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_280, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_454, (864, ), (1, ))
    assert_size_stride(constant_pad_nd_35, (8, 864, 23, 23), (457056, 1, 19872, 864))
    assert_size_stride(convolution_281, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_282, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_457, (864, ), (1, ))
    assert_size_stride(relu_151, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_283, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_284, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_460, (864, ), (1, ))
    assert_size_stride(relu_152, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_285, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_286, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_463, (864, ), (1, ))
    assert_size_stride(relu_153, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_287, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_288, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_466, (864, ), (1, ))
    assert_size_stride(constant_pad_nd_37, (8, 864, 23, 23), (457056, 1, 19872, 864))
    assert_size_stride(convolution_289, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_290, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_469, (864, ), (1, ))
    assert_size_stride(relu_155, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_291, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_292, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_472, (864, ), (1, ))
    assert_size_stride(constant_pad_nd_38, (8, 864, 21, 21), (381024, 1, 18144, 864))
    assert_size_stride(convolution_293, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_475, (864, ), (1, ))
    assert_size_stride(avg_pool2d_6, (8, 2160, 11, 11), (261360, 1, 23760, 2160))
    assert_size_stride(constant_pad_nd_39, (8, 2160, 21, 21), (952560, 1, 45360, 2160))
    assert_size_stride(avg_pool2d_7, (8, 2160, 11, 11), (261360, 1, 23760, 2160))
    assert_size_stride(cat_14, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_478, (864, ), (1, ))
    assert_size_stride(add_854, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_158, (8, 4320, 11, 11), (522720, 1, 47520, 4320))
    assert_size_stride(convolution_296, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_481, (864, ), (1, ))
    assert_size_stride(add_859, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_159, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_297, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_298, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_484, (864, ), (1, ))
    assert_size_stride(relu_160, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_299, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_300, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_487, (864, ), (1, ))
    assert_size_stride(getitem_393, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_161, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_301, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_302, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_490, (864, ), (1, ))
    assert_size_stride(relu_162, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_303, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_304, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_493, (864, ), (1, ))
    assert_size_stride(getitem_399, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_305, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_306, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_496, (864, ), (1, ))
    assert_size_stride(relu_164, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_307, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_308, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_499, (864, ), (1, ))
    assert_size_stride(convolution_309, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_310, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_502, (864, ), (1, ))
    assert_size_stride(relu_166, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_311, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_312, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_505, (864, ), (1, ))
    assert_size_stride(relu_167, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_313, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_314, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_508, (864, ), (1, ))
    assert_size_stride(relu_168, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_315, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_316, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_511, (864, ), (1, ))
    assert_size_stride(convolution_317, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_318, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_514, (864, ), (1, ))
    assert_size_stride(relu_170, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_319, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_320, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_517, (864, ), (1, ))
    assert_size_stride(convolution_321, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_520, (864, ), (1, ))
    assert_size_stride(add_929, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_172, (8, 4320, 11, 11), (522720, 1, 47520, 4320))
    assert_size_stride(convolution_322, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_523, (864, ), (1, ))
    assert_size_stride(add_934, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_173, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_323, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_324, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_526, (864, ), (1, ))
    assert_size_stride(relu_174, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_325, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_326, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_529, (864, ), (1, ))
    assert_size_stride(getitem_427, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_175, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_327, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_328, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_532, (864, ), (1, ))
    assert_size_stride(relu_176, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_329, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_330, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_535, (864, ), (1, ))
    assert_size_stride(getitem_433, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_331, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_332, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_538, (864, ), (1, ))
    assert_size_stride(relu_178, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_333, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_334, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_541, (864, ), (1, ))
    assert_size_stride(convolution_335, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_336, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_544, (864, ), (1, ))
    assert_size_stride(relu_180, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_337, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_338, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_547, (864, ), (1, ))
    assert_size_stride(relu_181, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_339, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_340, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_550, (864, ), (1, ))
    assert_size_stride(relu_182, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_341, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_342, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_553, (864, ), (1, ))
    assert_size_stride(convolution_343, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_344, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_556, (864, ), (1, ))
    assert_size_stride(relu_184, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_345, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_346, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_559, (864, ), (1, ))
    assert_size_stride(convolution_347, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_562, (864, ), (1, ))
    assert_size_stride(add_1004, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_186, (8, 4320, 11, 11), (522720, 1, 47520, 4320))
    assert_size_stride(convolution_348, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_565, (864, ), (1, ))
    assert_size_stride(add_1009, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_187, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_349, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_350, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_568, (864, ), (1, ))
    assert_size_stride(relu_188, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_351, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_352, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_571, (864, ), (1, ))
    assert_size_stride(getitem_461, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(relu_189, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_353, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_354, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_574, (864, ), (1, ))
    assert_size_stride(relu_190, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_355, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_356, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_577, (864, ), (1, ))
    assert_size_stride(getitem_467, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_357, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_358, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_580, (864, ), (1, ))
    assert_size_stride(relu_192, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_359, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_360, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_583, (864, ), (1, ))
    assert_size_stride(convolution_361, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_362, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_586, (864, ), (1, ))
    assert_size_stride(relu_194, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_363, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_364, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_589, (864, ), (1, ))
    assert_size_stride(relu_195, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_365, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_366, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_592, (864, ), (1, ))
    assert_size_stride(relu_196, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_367, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_368, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_595, (864, ), (1, ))
    assert_size_stride(convolution_369, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_370, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_598, (864, ), (1, ))
    assert_size_stride(relu_198, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_371, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(convolution_372, (8, 864, 11, 11), (104544, 1, 9504, 864))
    assert_size_stride(squeeze_601, (864, ), (1, ))
    assert_size_stride(clone, (8, 4320), (4320, 1))
    assert_size_stride(permute_1, (1000, 4320), (4320, 1))
    assert_size_stride(le, (8, 4320, 11, 11), (522720, 1, 47520, 4320))
    assert_size_stride(unsqueeze_806, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_818, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_830, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_842, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_854, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_866, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_878, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_890, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_902, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_914, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_926, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_938, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_950, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_962, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_974, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_986, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_998, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1010, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1022, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1034, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1046, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1058, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1070, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1082, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1094, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1106, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1118, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1130, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1142, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1154, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1166, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1178, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1190, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1202, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1214, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1226, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1238, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1250, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1262, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1274, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1286, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1298, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1310, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(le_43, (8, 864, 21, 21), (381024, 1, 18144, 864))
    assert_size_stride(unsqueeze_1322, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1334, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(le_45, (8, 864, 21, 21), (381024, 1, 18144, 864))
    assert_size_stride(unsqueeze_1346, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1358, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1370, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1382, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1394, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1406, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1418, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1430, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1442, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1454, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1466, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1478, (1, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(unsqueeze_1490, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1502, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1514, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1526, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1538, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1550, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1562, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1574, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1586, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1598, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1610, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1622, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1634, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1646, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1658, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1670, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1682, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1694, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1706, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1718, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1730, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1742, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1754, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1766, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1778, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1790, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1802, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1814, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1826, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1838, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1850, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1862, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1874, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1886, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1898, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1910, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1922, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1934, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1946, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1958, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1970, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1982, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_1994, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(le_100, (8, 432, 42, 42), (762048, 1, 18144, 432))
    assert_size_stride(unsqueeze_2006, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2018, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(le_102, (8, 432, 42, 42), (762048, 1, 18144, 432))
    assert_size_stride(unsqueeze_2030, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2042, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2054, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2066, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2078, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2090, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2102, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2114, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2126, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2138, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2150, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2162, (1, 432, 1, 1), (432, 1, 1, 1))
    assert_size_stride(unsqueeze_2174, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2186, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2198, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2210, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2222, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2234, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2246, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2258, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2270, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2282, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2294, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2306, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2318, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2330, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2342, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2354, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2366, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2378, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2390, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2402, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2414, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2426, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2438, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2450, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2462, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2474, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2486, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2498, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2510, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2522, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2534, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2546, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2558, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2570, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2582, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2594, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2606, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2618, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2630, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2642, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2654, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2666, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2678, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2690, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2702, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2714, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2726, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2738, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2750, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2762, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2774, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2786, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2798, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2810, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2822, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2834, (1, 216, 1, 1), (216, 1, 1, 1))
    assert_size_stride(unsqueeze_2846, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(le_171, (8, 108, 83, 83), (744012, 1, 8964, 108))
    assert_size_stride(unsqueeze_2858, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2870, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(le_173, (8, 108, 83, 83), (744012, 1, 8964, 108))
    assert_size_stride(unsqueeze_2882, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2894, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2906, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2918, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2930, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2942, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2954, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2966, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2978, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_2990, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_3002, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_3014, (1, 108, 1, 1), (108, 1, 1, 1))
    assert_size_stride(unsqueeze_3026, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(le_186, (8, 54, 165, 165), (1470150, 1, 8910, 54))
    assert_size_stride(unsqueeze_3038, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3050, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3062, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3074, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3086, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3098, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3110, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3122, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3134, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3146, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3158, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3170, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3182, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3194, (1, 54, 1, 1), (54, 1, 1, 1))
    assert_size_stride(unsqueeze_3206, (1, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 4320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_1, out=buf0)
    del permute_1
    buf1 = empty((1000, 4320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), clone, out=buf1)
    del clone
    buf2 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((8, 4320, 11, 11), (522720, 1, 47520, 4320), device='cpu', dtype=torch.float32)
    buf4 = empty((864, ), device='cpu', dtype=torch.float32)
    buf5 = empty((864, ), device='cpu', dtype=torch.float32)
    buf6 = empty((864, ), device='cpu', dtype=torch.float32)
    buf7 = empty_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0(c_void_p(tangents_1.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(convolution_372.data_ptr()), c_void_p(unsqueeze_806.data_ptr()), c_void_p(squeeze_601.data_ptr()), c_void_p(primals_774.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()))
    del buf0
    del convolution_372
    del le
    del primals_774
    del squeeze_601
    del tangents_1
    del unsqueeze_806
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf8 = aten.convolution_backward(buf7, convolution_371, primals_773, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf7
    del convolution_371
    del primals_773
    buf9 = buf8[0]
    buf10 = buf8[1]
    del buf8
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf11 = aten.convolution_backward(buf9, relu_198, primals_772, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf9
    del primals_772
    buf12 = buf11[0]
    buf13 = buf11[1]
    del buf11
    buf14 = buf5; del buf5  # reuse
    buf15 = empty((864, ), device='cpu', dtype=torch.float32)
    buf16 = empty((864, ), device='cpu', dtype=torch.float32)
    buf17 = buf12; del buf12  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1(c_void_p(buf17.data_ptr()), c_void_p(relu_198.data_ptr()), c_void_p(convolution_370.data_ptr()), c_void_p(unsqueeze_818.data_ptr()), c_void_p(squeeze_598.data_ptr()), c_void_p(primals_770.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(buf16.data_ptr()))
    del convolution_370
    del primals_770
    del relu_198
    del squeeze_598
    del unsqueeze_818
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf18 = aten.convolution_backward(buf17, convolution_369, primals_769, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf17
    del convolution_369
    del primals_769
    buf19 = buf18[0]
    buf20 = buf18[1]
    del buf18
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf21 = aten.convolution_backward(buf19, relu_187, primals_768, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_768
    buf22 = buf21[0]
    buf23 = buf21[1]
    del buf21
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf24 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf3, (8, 864, 11, 11), (522720, 1, 47520, 4320), 2592), add_1009, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_467)
    buf25 = buf24
    del buf24
    buf26 = buf15; del buf15  # reuse
    buf27 = empty((864, ), device='cpu', dtype=torch.float32)
    buf28 = empty((864, ), device='cpu', dtype=torch.float32)
    buf29 = buf19; del buf19  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_2(c_void_p(buf3.data_ptr()), c_void_p(convolution_368.data_ptr()), c_void_p(unsqueeze_830.data_ptr()), c_void_p(squeeze_595.data_ptr()), c_void_p(primals_766.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf27.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(buf29.data_ptr()))
    del convolution_368
    del primals_766
    del squeeze_595
    del unsqueeze_830
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf30 = aten.convolution_backward(buf29, convolution_367, primals_765, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf29
    del convolution_367
    del primals_765
    buf31 = buf30[0]
    buf32 = buf30[1]
    del buf30
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf33 = aten.convolution_backward(buf31, relu_196, primals_764, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf31
    del primals_764
    buf34 = buf33[0]
    buf35 = buf33[1]
    del buf33
    buf36 = buf27; del buf27  # reuse
    buf37 = empty((864, ), device='cpu', dtype=torch.float32)
    buf38 = empty((864, ), device='cpu', dtype=torch.float32)
    buf39 = buf34; del buf34  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_3(c_void_p(buf39.data_ptr()), c_void_p(relu_196.data_ptr()), c_void_p(convolution_366.data_ptr()), c_void_p(unsqueeze_842.data_ptr()), c_void_p(squeeze_592.data_ptr()), c_void_p(primals_762.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(buf38.data_ptr()))
    del convolution_366
    del primals_762
    del relu_196
    del squeeze_592
    del unsqueeze_842
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf40 = aten.convolution_backward(buf39, convolution_365, primals_761, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_365
    del primals_761
    buf41 = buf40[0]
    buf42 = buf40[1]
    del buf40
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf43 = aten.convolution_backward(buf41, relu_195, primals_760, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_760
    buf44 = buf43[0]
    buf45 = buf43[1]
    del buf43
    buf46 = buf37; del buf37  # reuse
    buf47 = empty((864, ), device='cpu', dtype=torch.float32)
    buf66 = empty((864, ), device='cpu', dtype=torch.float32)
    buf48 = buf41; del buf41  # reuse
    buf67 = buf39; del buf39  # reuse
    buf49 = buf47; del buf47  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_4(c_void_p(buf49.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(relu_195.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(convolution_364.data_ptr()), c_void_p(unsqueeze_854.data_ptr()), c_void_p(convolution_360.data_ptr()), c_void_p(unsqueeze_878.data_ptr()), c_void_p(squeeze_589.data_ptr()), c_void_p(primals_758.data_ptr()), c_void_p(squeeze_583.data_ptr()), c_void_p(primals_750.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(buf67.data_ptr()))
    del buf44
    del convolution_360
    del convolution_364
    del primals_750
    del primals_758
    del relu_195
    del squeeze_589
    del unsqueeze_854
    del unsqueeze_878
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf50 = aten.convolution_backward(buf48, convolution_363, primals_757, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf48
    del convolution_363
    del primals_757
    buf51 = buf50[0]
    buf52 = buf50[1]
    del buf50
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf53 = aten.convolution_backward(buf51, relu_194, primals_756, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf51
    del primals_756
    buf54 = buf53[0]
    buf55 = buf53[1]
    del buf53
    buf56 = empty((864, ), device='cpu', dtype=torch.float32)
    buf57 = empty((864, ), device='cpu', dtype=torch.float32)
    buf58 = empty((864, ), device='cpu', dtype=torch.float32)
    buf59 = buf54; del buf54  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_5(c_void_p(buf59.data_ptr()), c_void_p(relu_194.data_ptr()), c_void_p(convolution_362.data_ptr()), c_void_p(unsqueeze_866.data_ptr()), c_void_p(squeeze_586.data_ptr()), c_void_p(primals_754.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf58.data_ptr()))
    del convolution_362
    del primals_754
    del relu_194
    del squeeze_586
    del unsqueeze_866
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf60 = aten.convolution_backward(buf59, convolution_361, primals_753, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf59
    del convolution_361
    del primals_753
    buf61 = buf60[0]
    buf62 = buf60[1]
    del buf60
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf63 = aten.convolution_backward(buf61, relu_189, primals_752, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf61
    del primals_752
    buf64 = buf63[0]
    buf65 = buf63[1]
    del buf63
    buf68 = buf66; del buf66  # reuse
    cpp_fused_native_batch_norm_backward_6(c_void_p(buf68.data_ptr()), c_void_p(squeeze_583.data_ptr()))
    del squeeze_583
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf69 = aten.convolution_backward(buf67, convolution_359, primals_749, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf67
    del convolution_359
    del primals_749
    buf70 = buf69[0]
    buf71 = buf69[1]
    del buf69
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf72 = aten.convolution_backward(buf70, relu_192, primals_748, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf70
    del primals_748
    buf73 = buf72[0]
    buf74 = buf72[1]
    del buf72
    buf75 = buf57; del buf57  # reuse
    buf76 = empty((864, ), device='cpu', dtype=torch.float32)
    buf77 = empty((864, ), device='cpu', dtype=torch.float32)
    buf78 = buf73; del buf73  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_7(c_void_p(buf78.data_ptr()), c_void_p(relu_192.data_ptr()), c_void_p(convolution_358.data_ptr()), c_void_p(unsqueeze_890.data_ptr()), c_void_p(squeeze_580.data_ptr()), c_void_p(primals_746.data_ptr()), c_void_p(buf75.data_ptr()), c_void_p(buf76.data_ptr()), c_void_p(buf77.data_ptr()))
    del convolution_358
    del primals_746
    del relu_192
    del squeeze_580
    del unsqueeze_890
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf79 = aten.convolution_backward(buf78, convolution_357, primals_745, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf78
    del convolution_357
    del primals_745
    buf80 = buf79[0]
    buf81 = buf79[1]
    del buf79
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf82 = aten.convolution_backward(buf80, relu_189, primals_744, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_744
    buf83 = buf82[0]
    buf84 = buf82[1]
    del buf82
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf85 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf3, (8, 864, 11, 11), (522720, 1, 47520, 4320), 864), add_1009, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_467)
    del add_1009
    del getitem_467
    buf86 = buf85
    del buf85
    buf87 = buf76; del buf76  # reuse
    buf88 = empty((864, ), device='cpu', dtype=torch.float32)
    buf89 = empty((864, ), device='cpu', dtype=torch.float32)
    buf90 = buf80; del buf80  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_8(c_void_p(buf3.data_ptr()), c_void_p(convolution_356.data_ptr()), c_void_p(unsqueeze_902.data_ptr()), c_void_p(squeeze_577.data_ptr()), c_void_p(primals_742.data_ptr()), c_void_p(buf87.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(buf90.data_ptr()))
    del convolution_356
    del primals_742
    del squeeze_577
    del unsqueeze_902
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf91 = aten.convolution_backward(buf90, convolution_355, primals_741, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf90
    del convolution_355
    del primals_741
    buf92 = buf91[0]
    buf93 = buf91[1]
    del buf91
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf94 = aten.convolution_backward(buf92, relu_190, primals_740, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf92
    del primals_740
    buf95 = buf94[0]
    buf96 = buf94[1]
    del buf94
    buf97 = buf88; del buf88  # reuse
    buf98 = empty((864, ), device='cpu', dtype=torch.float32)
    buf99 = empty((864, ), device='cpu', dtype=torch.float32)
    buf100 = buf95; del buf95  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9(c_void_p(buf100.data_ptr()), c_void_p(relu_190.data_ptr()), c_void_p(convolution_354.data_ptr()), c_void_p(unsqueeze_914.data_ptr()), c_void_p(squeeze_574.data_ptr()), c_void_p(primals_738.data_ptr()), c_void_p(buf97.data_ptr()), c_void_p(buf98.data_ptr()), c_void_p(buf99.data_ptr()))
    del convolution_354
    del primals_738
    del relu_190
    del squeeze_574
    del unsqueeze_914
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf101 = aten.convolution_backward(buf100, convolution_353, primals_737, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf100
    del convolution_353
    del primals_737
    buf102 = buf101[0]
    buf103 = buf101[1]
    del buf101
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf104 = aten.convolution_backward(buf102, relu_189, primals_736, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf102
    del primals_736
    buf105 = buf104[0]
    buf106 = buf104[1]
    del buf104
    buf107 = buf105; del buf105  # reuse
    cpp_fused_add_threshold_backward_10(c_void_p(buf107.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf25.data_ptr()), c_void_p(relu_189.data_ptr()), c_void_p(buf64.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(buf86.data_ptr()))
    del buf25
    del buf64
    del buf83
    del relu_189
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf108 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf3, (8, 864, 11, 11), (522720, 1, 47520, 4320), 0), add_1004, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_461)
    del add_1004
    del getitem_461
    buf109 = buf108
    del buf108
    buf110 = buf98; del buf98  # reuse
    buf111 = empty((864, ), device='cpu', dtype=torch.float32)
    buf112 = empty((864, ), device='cpu', dtype=torch.float32)
    buf113 = buf86; del buf86  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_11(c_void_p(buf3.data_ptr()), c_void_p(convolution_352.data_ptr()), c_void_p(unsqueeze_926.data_ptr()), c_void_p(squeeze_571.data_ptr()), c_void_p(primals_734.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(buf111.data_ptr()), c_void_p(buf112.data_ptr()), c_void_p(buf113.data_ptr()))
    del buf3
    del convolution_352
    del primals_734
    del squeeze_571
    del unsqueeze_926
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf114 = aten.convolution_backward(buf113, convolution_351, primals_733, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf113
    del convolution_351
    del primals_733
    buf115 = buf114[0]
    buf116 = buf114[1]
    del buf114
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf117 = aten.convolution_backward(buf115, relu_188, primals_732, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf115
    del primals_732
    buf118 = buf117[0]
    buf119 = buf117[1]
    del buf117
    buf120 = buf111; del buf111  # reuse
    buf121 = empty((864, ), device='cpu', dtype=torch.float32)
    buf122 = empty((864, ), device='cpu', dtype=torch.float32)
    buf123 = buf118; del buf118  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_12(c_void_p(buf123.data_ptr()), c_void_p(relu_188.data_ptr()), c_void_p(convolution_350.data_ptr()), c_void_p(unsqueeze_938.data_ptr()), c_void_p(squeeze_568.data_ptr()), c_void_p(primals_730.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(buf122.data_ptr()))
    del convolution_350
    del primals_730
    del relu_188
    del squeeze_568
    del unsqueeze_938
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf124 = aten.convolution_backward(buf123, convolution_349, primals_729, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf123
    del convolution_349
    del primals_729
    buf125 = buf124[0]
    buf126 = buf124[1]
    del buf124
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf127 = aten.convolution_backward(buf125, relu_187, primals_728, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf125
    del primals_728
    buf128 = buf127[0]
    buf129 = buf127[1]
    del buf127
    buf130 = buf121; del buf121  # reuse
    buf131 = empty((864, ), device='cpu', dtype=torch.float32)
    buf132 = empty((864, ), device='cpu', dtype=torch.float32)
    buf133 = buf107; del buf107  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_13(c_void_p(buf133.data_ptr()), c_void_p(convolution_348.data_ptr()), c_void_p(unsqueeze_950.data_ptr()), c_void_p(squeeze_565.data_ptr()), c_void_p(primals_726.data_ptr()), c_void_p(buf130.data_ptr()), c_void_p(buf131.data_ptr()), c_void_p(buf132.data_ptr()))
    del convolution_348
    del primals_726
    del squeeze_565
    del unsqueeze_950
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf134 = aten.convolution_backward(buf133, relu_186, primals_725, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf133
    del primals_725
    buf135 = buf134[0]
    buf136 = buf134[1]
    del buf134
    buf137 = buf131; del buf131  # reuse
    buf138 = empty((864, ), device='cpu', dtype=torch.float32)
    buf139 = buf109; del buf109  # reuse
    buf141 = buf139; del buf139  # reuse
    buf140 = buf138; del buf138  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_14(c_void_p(buf141.data_ptr()), c_void_p(buf140.data_ptr()), c_void_p(relu_187.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(convolution_347.data_ptr()), c_void_p(unsqueeze_962.data_ptr()), c_void_p(squeeze_562.data_ptr()), c_void_p(primals_723.data_ptr()), c_void_p(buf137.data_ptr()))
    del buf128
    del buf22
    del convolution_347
    del primals_723
    del relu_187
    del squeeze_562
    del unsqueeze_962
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf142 = aten.convolution_backward(buf141, relu_172, primals_722, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_722
    buf143 = buf142[0]
    buf144 = buf142[1]
    del buf142
    buf145 = buf135; del buf135  # reuse
    buf146 = empty((864, ), device='cpu', dtype=torch.float32)
    buf147 = empty((864, ), device='cpu', dtype=torch.float32)
    buf148 = empty((864, ), device='cpu', dtype=torch.float32)
    buf149 = buf141; del buf141  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_15(c_void_p(buf145.data_ptr()), c_void_p(relu_186.data_ptr()), c_void_p(convolution_346.data_ptr()), c_void_p(unsqueeze_974.data_ptr()), c_void_p(squeeze_559.data_ptr()), c_void_p(primals_720.data_ptr()), c_void_p(buf146.data_ptr()), c_void_p(buf147.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(buf149.data_ptr()))
    del convolution_346
    del primals_720
    del relu_186
    del squeeze_559
    del unsqueeze_974
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf150 = aten.convolution_backward(buf149, convolution_345, primals_719, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf149
    del convolution_345
    del primals_719
    buf151 = buf150[0]
    buf152 = buf150[1]
    del buf150
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf153 = aten.convolution_backward(buf151, relu_184, primals_718, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf151
    del primals_718
    buf154 = buf153[0]
    buf155 = buf153[1]
    del buf153
    buf156 = buf147; del buf147  # reuse
    buf157 = empty((864, ), device='cpu', dtype=torch.float32)
    buf158 = empty((864, ), device='cpu', dtype=torch.float32)
    buf159 = buf154; del buf154  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_16(c_void_p(buf159.data_ptr()), c_void_p(relu_184.data_ptr()), c_void_p(convolution_344.data_ptr()), c_void_p(unsqueeze_986.data_ptr()), c_void_p(squeeze_556.data_ptr()), c_void_p(primals_716.data_ptr()), c_void_p(buf156.data_ptr()), c_void_p(buf157.data_ptr()), c_void_p(buf158.data_ptr()))
    del convolution_344
    del primals_716
    del relu_184
    del squeeze_556
    del unsqueeze_986
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf160 = aten.convolution_backward(buf159, convolution_343, primals_715, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf159
    del convolution_343
    del primals_715
    buf161 = buf160[0]
    buf162 = buf160[1]
    del buf160
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf163 = aten.convolution_backward(buf161, relu_173, primals_714, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_714
    buf164 = buf163[0]
    buf165 = buf163[1]
    del buf163
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf166 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf145, (8, 864, 11, 11), (522720, 1, 47520, 4320), 2592), add_934, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_433)
    buf167 = buf166
    del buf166
    buf168 = buf157; del buf157  # reuse
    buf169 = empty((864, ), device='cpu', dtype=torch.float32)
    buf170 = empty((864, ), device='cpu', dtype=torch.float32)
    buf171 = buf161; del buf161  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_17(c_void_p(buf145.data_ptr()), c_void_p(convolution_342.data_ptr()), c_void_p(unsqueeze_998.data_ptr()), c_void_p(squeeze_553.data_ptr()), c_void_p(primals_712.data_ptr()), c_void_p(buf168.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(buf171.data_ptr()))
    del convolution_342
    del primals_712
    del squeeze_553
    del unsqueeze_998
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf172 = aten.convolution_backward(buf171, convolution_341, primals_711, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf171
    del convolution_341
    del primals_711
    buf173 = buf172[0]
    buf174 = buf172[1]
    del buf172
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf175 = aten.convolution_backward(buf173, relu_182, primals_710, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf173
    del primals_710
    buf176 = buf175[0]
    buf177 = buf175[1]
    del buf175
    buf178 = buf169; del buf169  # reuse
    buf179 = empty((864, ), device='cpu', dtype=torch.float32)
    buf180 = empty((864, ), device='cpu', dtype=torch.float32)
    buf181 = buf176; del buf176  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_18(c_void_p(buf181.data_ptr()), c_void_p(relu_182.data_ptr()), c_void_p(convolution_340.data_ptr()), c_void_p(unsqueeze_1010.data_ptr()), c_void_p(squeeze_550.data_ptr()), c_void_p(primals_708.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf179.data_ptr()), c_void_p(buf180.data_ptr()))
    del convolution_340
    del primals_708
    del relu_182
    del squeeze_550
    del unsqueeze_1010
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf182 = aten.convolution_backward(buf181, convolution_339, primals_707, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_339
    del primals_707
    buf183 = buf182[0]
    buf184 = buf182[1]
    del buf182
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf185 = aten.convolution_backward(buf183, relu_181, primals_706, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_706
    buf186 = buf185[0]
    buf187 = buf185[1]
    del buf185
    buf188 = buf179; del buf179  # reuse
    buf189 = empty((864, ), device='cpu', dtype=torch.float32)
    buf208 = empty((864, ), device='cpu', dtype=torch.float32)
    buf190 = buf183; del buf183  # reuse
    buf209 = buf181; del buf181  # reuse
    buf191 = buf189; del buf189  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_19(c_void_p(buf191.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(relu_181.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(convolution_338.data_ptr()), c_void_p(unsqueeze_1022.data_ptr()), c_void_p(convolution_334.data_ptr()), c_void_p(unsqueeze_1046.data_ptr()), c_void_p(squeeze_547.data_ptr()), c_void_p(primals_704.data_ptr()), c_void_p(squeeze_541.data_ptr()), c_void_p(primals_696.data_ptr()), c_void_p(buf188.data_ptr()), c_void_p(buf208.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(buf209.data_ptr()))
    del buf186
    del convolution_334
    del convolution_338
    del primals_696
    del primals_704
    del relu_181
    del squeeze_547
    del unsqueeze_1022
    del unsqueeze_1046
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf192 = aten.convolution_backward(buf190, convolution_337, primals_703, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf190
    del convolution_337
    del primals_703
    buf193 = buf192[0]
    buf194 = buf192[1]
    del buf192
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf195 = aten.convolution_backward(buf193, relu_180, primals_702, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf193
    del primals_702
    buf196 = buf195[0]
    buf197 = buf195[1]
    del buf195
    buf198 = empty((864, ), device='cpu', dtype=torch.float32)
    buf199 = empty((864, ), device='cpu', dtype=torch.float32)
    buf200 = empty((864, ), device='cpu', dtype=torch.float32)
    buf201 = buf196; del buf196  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_20(c_void_p(buf201.data_ptr()), c_void_p(relu_180.data_ptr()), c_void_p(convolution_336.data_ptr()), c_void_p(unsqueeze_1034.data_ptr()), c_void_p(squeeze_544.data_ptr()), c_void_p(primals_700.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf200.data_ptr()))
    del convolution_336
    del primals_700
    del relu_180
    del squeeze_544
    del unsqueeze_1034
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf202 = aten.convolution_backward(buf201, convolution_335, primals_699, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf201
    del convolution_335
    del primals_699
    buf203 = buf202[0]
    buf204 = buf202[1]
    del buf202
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf205 = aten.convolution_backward(buf203, relu_175, primals_698, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf203
    del primals_698
    buf206 = buf205[0]
    buf207 = buf205[1]
    del buf205
    buf210 = buf208; del buf208  # reuse
    cpp_fused_native_batch_norm_backward_21(c_void_p(buf210.data_ptr()), c_void_p(squeeze_541.data_ptr()))
    del squeeze_541
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf211 = aten.convolution_backward(buf209, convolution_333, primals_695, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf209
    del convolution_333
    del primals_695
    buf212 = buf211[0]
    buf213 = buf211[1]
    del buf211
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf214 = aten.convolution_backward(buf212, relu_178, primals_694, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf212
    del primals_694
    buf215 = buf214[0]
    buf216 = buf214[1]
    del buf214
    buf217 = buf199; del buf199  # reuse
    buf218 = empty((864, ), device='cpu', dtype=torch.float32)
    buf219 = empty((864, ), device='cpu', dtype=torch.float32)
    buf220 = buf215; del buf215  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22(c_void_p(buf220.data_ptr()), c_void_p(relu_178.data_ptr()), c_void_p(convolution_332.data_ptr()), c_void_p(unsqueeze_1058.data_ptr()), c_void_p(squeeze_538.data_ptr()), c_void_p(primals_692.data_ptr()), c_void_p(buf217.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf219.data_ptr()))
    del convolution_332
    del primals_692
    del relu_178
    del squeeze_538
    del unsqueeze_1058
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf221 = aten.convolution_backward(buf220, convolution_331, primals_691, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf220
    del convolution_331
    del primals_691
    buf222 = buf221[0]
    buf223 = buf221[1]
    del buf221
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf224 = aten.convolution_backward(buf222, relu_175, primals_690, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_690
    buf225 = buf224[0]
    buf226 = buf224[1]
    del buf224
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf227 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf145, (8, 864, 11, 11), (522720, 1, 47520, 4320), 864), add_934, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_433)
    del add_934
    del getitem_433
    buf228 = buf227
    del buf227
    buf229 = buf218; del buf218  # reuse
    buf230 = empty((864, ), device='cpu', dtype=torch.float32)
    buf231 = empty((864, ), device='cpu', dtype=torch.float32)
    buf232 = buf222; del buf222  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_23(c_void_p(buf145.data_ptr()), c_void_p(convolution_330.data_ptr()), c_void_p(unsqueeze_1070.data_ptr()), c_void_p(squeeze_535.data_ptr()), c_void_p(primals_688.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf230.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf232.data_ptr()))
    del convolution_330
    del primals_688
    del squeeze_535
    del unsqueeze_1070
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf233 = aten.convolution_backward(buf232, convolution_329, primals_687, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf232
    del convolution_329
    del primals_687
    buf234 = buf233[0]
    buf235 = buf233[1]
    del buf233
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf236 = aten.convolution_backward(buf234, relu_176, primals_686, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf234
    del primals_686
    buf237 = buf236[0]
    buf238 = buf236[1]
    del buf236
    buf239 = buf230; del buf230  # reuse
    buf240 = empty((864, ), device='cpu', dtype=torch.float32)
    buf241 = empty((864, ), device='cpu', dtype=torch.float32)
    buf242 = buf237; del buf237  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_24(c_void_p(buf242.data_ptr()), c_void_p(relu_176.data_ptr()), c_void_p(convolution_328.data_ptr()), c_void_p(unsqueeze_1082.data_ptr()), c_void_p(squeeze_532.data_ptr()), c_void_p(primals_684.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(buf241.data_ptr()))
    del convolution_328
    del primals_684
    del relu_176
    del squeeze_532
    del unsqueeze_1082
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf243 = aten.convolution_backward(buf242, convolution_327, primals_683, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf242
    del convolution_327
    del primals_683
    buf244 = buf243[0]
    buf245 = buf243[1]
    del buf243
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf246 = aten.convolution_backward(buf244, relu_175, primals_682, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf244
    del primals_682
    buf247 = buf246[0]
    buf248 = buf246[1]
    del buf246
    buf249 = buf167; del buf167  # reuse
    cpp_fused_add_threshold_backward_25(c_void_p(buf249.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(relu_175.data_ptr()), c_void_p(buf206.data_ptr()), c_void_p(buf225.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(buf247.data_ptr()))
    del buf206
    del buf225
    del buf228
    del relu_175
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf250 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf145, (8, 864, 11, 11), (522720, 1, 47520, 4320), 0), add_929, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_427)
    del add_929
    del getitem_427
    buf251 = buf250
    del buf250
    buf252 = buf240; del buf240  # reuse
    buf253 = empty((864, ), device='cpu', dtype=torch.float32)
    buf254 = empty((864, ), device='cpu', dtype=torch.float32)
    buf255 = buf247; del buf247  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_26(c_void_p(buf145.data_ptr()), c_void_p(convolution_326.data_ptr()), c_void_p(unsqueeze_1094.data_ptr()), c_void_p(squeeze_529.data_ptr()), c_void_p(primals_680.data_ptr()), c_void_p(buf252.data_ptr()), c_void_p(buf253.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(buf255.data_ptr()))
    del buf145
    del convolution_326
    del primals_680
    del squeeze_529
    del unsqueeze_1094
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf256 = aten.convolution_backward(buf255, convolution_325, primals_679, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf255
    del convolution_325
    del primals_679
    buf257 = buf256[0]
    buf258 = buf256[1]
    del buf256
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf259 = aten.convolution_backward(buf257, relu_174, primals_678, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf257
    del primals_678
    buf260 = buf259[0]
    buf261 = buf259[1]
    del buf259
    buf262 = buf253; del buf253  # reuse
    buf263 = empty((864, ), device='cpu', dtype=torch.float32)
    buf264 = empty((864, ), device='cpu', dtype=torch.float32)
    buf265 = buf260; del buf260  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_27(c_void_p(buf265.data_ptr()), c_void_p(relu_174.data_ptr()), c_void_p(convolution_324.data_ptr()), c_void_p(unsqueeze_1106.data_ptr()), c_void_p(squeeze_526.data_ptr()), c_void_p(primals_676.data_ptr()), c_void_p(buf262.data_ptr()), c_void_p(buf263.data_ptr()), c_void_p(buf264.data_ptr()))
    del convolution_324
    del primals_676
    del relu_174
    del squeeze_526
    del unsqueeze_1106
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf266 = aten.convolution_backward(buf265, convolution_323, primals_675, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf265
    del convolution_323
    del primals_675
    buf267 = buf266[0]
    buf268 = buf266[1]
    del buf266
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf269 = aten.convolution_backward(buf267, relu_173, primals_674, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf267
    del primals_674
    buf270 = buf269[0]
    buf271 = buf269[1]
    del buf269
    buf272 = buf263; del buf263  # reuse
    buf273 = empty((864, ), device='cpu', dtype=torch.float32)
    buf274 = empty((864, ), device='cpu', dtype=torch.float32)
    buf275 = buf249; del buf249  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_28(c_void_p(buf275.data_ptr()), c_void_p(convolution_322.data_ptr()), c_void_p(unsqueeze_1118.data_ptr()), c_void_p(squeeze_523.data_ptr()), c_void_p(primals_672.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf274.data_ptr()))
    del convolution_322
    del primals_672
    del squeeze_523
    del unsqueeze_1118
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf276 = aten.convolution_backward(buf275, relu_172, primals_671, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf275
    del primals_671
    buf277 = buf276[0]
    buf278 = buf276[1]
    del buf276
    buf279 = buf273; del buf273  # reuse
    buf280 = empty((864, ), device='cpu', dtype=torch.float32)
    buf281 = buf164; del buf164  # reuse
    buf283 = buf281; del buf281  # reuse
    buf282 = buf280; del buf280  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_29(c_void_p(buf283.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(relu_173.data_ptr()), c_void_p(buf251.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(convolution_321.data_ptr()), c_void_p(unsqueeze_1130.data_ptr()), c_void_p(squeeze_520.data_ptr()), c_void_p(primals_669.data_ptr()), c_void_p(buf279.data_ptr()))
    del buf251
    del buf270
    del convolution_321
    del primals_669
    del relu_173
    del squeeze_520
    del unsqueeze_1130
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf284 = aten.convolution_backward(buf283, relu_158, primals_668, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_668
    buf285 = buf284[0]
    buf286 = buf284[1]
    del buf284
    buf287 = buf143; del buf143  # reuse
    buf288 = empty((864, ), device='cpu', dtype=torch.float32)
    buf289 = empty((864, ), device='cpu', dtype=torch.float32)
    buf290 = empty((864, ), device='cpu', dtype=torch.float32)
    buf291 = buf283; del buf283  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_30(c_void_p(buf287.data_ptr()), c_void_p(relu_172.data_ptr()), c_void_p(buf277.data_ptr()), c_void_p(convolution_320.data_ptr()), c_void_p(unsqueeze_1142.data_ptr()), c_void_p(squeeze_517.data_ptr()), c_void_p(primals_666.data_ptr()), c_void_p(buf288.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(buf290.data_ptr()), c_void_p(buf291.data_ptr()))
    del buf277
    del convolution_320
    del primals_666
    del relu_172
    del squeeze_517
    del unsqueeze_1142
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf292 = aten.convolution_backward(buf291, convolution_319, primals_665, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf291
    del convolution_319
    del primals_665
    buf293 = buf292[0]
    buf294 = buf292[1]
    del buf292
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf295 = aten.convolution_backward(buf293, relu_170, primals_664, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf293
    del primals_664
    buf296 = buf295[0]
    buf297 = buf295[1]
    del buf295
    buf298 = buf289; del buf289  # reuse
    buf299 = empty((864, ), device='cpu', dtype=torch.float32)
    buf300 = empty((864, ), device='cpu', dtype=torch.float32)
    buf301 = buf296; del buf296  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_31(c_void_p(buf301.data_ptr()), c_void_p(relu_170.data_ptr()), c_void_p(convolution_318.data_ptr()), c_void_p(unsqueeze_1154.data_ptr()), c_void_p(squeeze_514.data_ptr()), c_void_p(primals_662.data_ptr()), c_void_p(buf298.data_ptr()), c_void_p(buf299.data_ptr()), c_void_p(buf300.data_ptr()))
    del convolution_318
    del primals_662
    del relu_170
    del squeeze_514
    del unsqueeze_1154
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf302 = aten.convolution_backward(buf301, convolution_317, primals_661, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf301
    del convolution_317
    del primals_661
    buf303 = buf302[0]
    buf304 = buf302[1]
    del buf302
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf305 = aten.convolution_backward(buf303, relu_159, primals_660, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_660
    buf306 = buf305[0]
    buf307 = buf305[1]
    del buf305
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf308 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf287, (8, 864, 11, 11), (522720, 1, 47520, 4320), 2592), add_859, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_399)
    buf309 = buf308
    del buf308
    buf310 = buf299; del buf299  # reuse
    buf311 = empty((864, ), device='cpu', dtype=torch.float32)
    buf312 = empty((864, ), device='cpu', dtype=torch.float32)
    buf313 = buf303; del buf303  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_32(c_void_p(buf287.data_ptr()), c_void_p(convolution_316.data_ptr()), c_void_p(unsqueeze_1166.data_ptr()), c_void_p(squeeze_511.data_ptr()), c_void_p(primals_658.data_ptr()), c_void_p(buf310.data_ptr()), c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf313.data_ptr()))
    del convolution_316
    del primals_658
    del squeeze_511
    del unsqueeze_1166
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf314 = aten.convolution_backward(buf313, convolution_315, primals_657, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf313
    del convolution_315
    del primals_657
    buf315 = buf314[0]
    buf316 = buf314[1]
    del buf314
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf317 = aten.convolution_backward(buf315, relu_168, primals_656, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf315
    del primals_656
    buf318 = buf317[0]
    buf319 = buf317[1]
    del buf317
    buf320 = buf311; del buf311  # reuse
    buf321 = empty((864, ), device='cpu', dtype=torch.float32)
    buf322 = empty((864, ), device='cpu', dtype=torch.float32)
    buf323 = buf318; del buf318  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_33(c_void_p(buf323.data_ptr()), c_void_p(relu_168.data_ptr()), c_void_p(convolution_314.data_ptr()), c_void_p(unsqueeze_1178.data_ptr()), c_void_p(squeeze_508.data_ptr()), c_void_p(primals_654.data_ptr()), c_void_p(buf320.data_ptr()), c_void_p(buf321.data_ptr()), c_void_p(buf322.data_ptr()))
    del convolution_314
    del primals_654
    del relu_168
    del squeeze_508
    del unsqueeze_1178
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf324 = aten.convolution_backward(buf323, convolution_313, primals_653, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_313
    del primals_653
    buf325 = buf324[0]
    buf326 = buf324[1]
    del buf324
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf327 = aten.convolution_backward(buf325, relu_167, primals_652, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_652
    buf328 = buf327[0]
    buf329 = buf327[1]
    del buf327
    buf330 = buf321; del buf321  # reuse
    buf331 = empty((864, ), device='cpu', dtype=torch.float32)
    buf350 = empty((864, ), device='cpu', dtype=torch.float32)
    buf332 = buf325; del buf325  # reuse
    buf351 = buf323; del buf323  # reuse
    buf333 = buf331; del buf331  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_34(c_void_p(buf333.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(relu_167.data_ptr()), c_void_p(buf328.data_ptr()), c_void_p(convolution_312.data_ptr()), c_void_p(unsqueeze_1190.data_ptr()), c_void_p(convolution_308.data_ptr()), c_void_p(unsqueeze_1214.data_ptr()), c_void_p(squeeze_505.data_ptr()), c_void_p(primals_650.data_ptr()), c_void_p(squeeze_499.data_ptr()), c_void_p(primals_642.data_ptr()), c_void_p(buf330.data_ptr()), c_void_p(buf350.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf351.data_ptr()))
    del buf328
    del convolution_308
    del convolution_312
    del primals_642
    del primals_650
    del relu_167
    del squeeze_505
    del unsqueeze_1190
    del unsqueeze_1214
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf334 = aten.convolution_backward(buf332, convolution_311, primals_649, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf332
    del convolution_311
    del primals_649
    buf335 = buf334[0]
    buf336 = buf334[1]
    del buf334
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf337 = aten.convolution_backward(buf335, relu_166, primals_648, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf335
    del primals_648
    buf338 = buf337[0]
    buf339 = buf337[1]
    del buf337
    buf340 = empty((864, ), device='cpu', dtype=torch.float32)
    buf341 = empty((864, ), device='cpu', dtype=torch.float32)
    buf342 = empty((864, ), device='cpu', dtype=torch.float32)
    buf343 = buf338; del buf338  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_35(c_void_p(buf343.data_ptr()), c_void_p(relu_166.data_ptr()), c_void_p(convolution_310.data_ptr()), c_void_p(unsqueeze_1202.data_ptr()), c_void_p(squeeze_502.data_ptr()), c_void_p(primals_646.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(buf342.data_ptr()))
    del convolution_310
    del primals_646
    del relu_166
    del squeeze_502
    del unsqueeze_1202
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf344 = aten.convolution_backward(buf343, convolution_309, primals_645, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf343
    del convolution_309
    del primals_645
    buf345 = buf344[0]
    buf346 = buf344[1]
    del buf344
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf347 = aten.convolution_backward(buf345, relu_161, primals_644, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf345
    del primals_644
    buf348 = buf347[0]
    buf349 = buf347[1]
    del buf347
    buf352 = buf350; del buf350  # reuse
    cpp_fused_native_batch_norm_backward_36(c_void_p(buf352.data_ptr()), c_void_p(squeeze_499.data_ptr()))
    del squeeze_499
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf353 = aten.convolution_backward(buf351, convolution_307, primals_641, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf351
    del convolution_307
    del primals_641
    buf354 = buf353[0]
    buf355 = buf353[1]
    del buf353
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf356 = aten.convolution_backward(buf354, relu_164, primals_640, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf354
    del primals_640
    buf357 = buf356[0]
    buf358 = buf356[1]
    del buf356
    buf359 = buf341; del buf341  # reuse
    buf360 = empty((864, ), device='cpu', dtype=torch.float32)
    buf361 = empty((864, ), device='cpu', dtype=torch.float32)
    buf362 = buf357; del buf357  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_37(c_void_p(buf362.data_ptr()), c_void_p(relu_164.data_ptr()), c_void_p(convolution_306.data_ptr()), c_void_p(unsqueeze_1226.data_ptr()), c_void_p(squeeze_496.data_ptr()), c_void_p(primals_638.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(buf361.data_ptr()))
    del convolution_306
    del primals_638
    del relu_164
    del squeeze_496
    del unsqueeze_1226
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf363 = aten.convolution_backward(buf362, convolution_305, primals_637, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf362
    del convolution_305
    del primals_637
    buf364 = buf363[0]
    buf365 = buf363[1]
    del buf363
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf366 = aten.convolution_backward(buf364, relu_161, primals_636, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_636
    buf367 = buf366[0]
    buf368 = buf366[1]
    del buf366
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf369 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf287, (8, 864, 11, 11), (522720, 1, 47520, 4320), 864), add_859, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_399)
    del add_859
    del getitem_399
    buf370 = buf369
    del buf369
    buf371 = buf360; del buf360  # reuse
    buf372 = empty((864, ), device='cpu', dtype=torch.float32)
    buf373 = empty((864, ), device='cpu', dtype=torch.float32)
    buf374 = buf364; del buf364  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_38(c_void_p(buf287.data_ptr()), c_void_p(convolution_304.data_ptr()), c_void_p(unsqueeze_1238.data_ptr()), c_void_p(squeeze_493.data_ptr()), c_void_p(primals_634.data_ptr()), c_void_p(buf371.data_ptr()), c_void_p(buf372.data_ptr()), c_void_p(buf373.data_ptr()), c_void_p(buf374.data_ptr()))
    del convolution_304
    del primals_634
    del squeeze_493
    del unsqueeze_1238
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf375 = aten.convolution_backward(buf374, convolution_303, primals_633, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf374
    del convolution_303
    del primals_633
    buf376 = buf375[0]
    buf377 = buf375[1]
    del buf375
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf378 = aten.convolution_backward(buf376, relu_162, primals_632, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf376
    del primals_632
    buf379 = buf378[0]
    buf380 = buf378[1]
    del buf378
    buf381 = buf372; del buf372  # reuse
    buf382 = empty((864, ), device='cpu', dtype=torch.float32)
    buf383 = empty((864, ), device='cpu', dtype=torch.float32)
    buf384 = buf379; del buf379  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_39(c_void_p(buf384.data_ptr()), c_void_p(relu_162.data_ptr()), c_void_p(convolution_302.data_ptr()), c_void_p(unsqueeze_1250.data_ptr()), c_void_p(squeeze_490.data_ptr()), c_void_p(primals_630.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf382.data_ptr()), c_void_p(buf383.data_ptr()))
    del convolution_302
    del primals_630
    del relu_162
    del squeeze_490
    del unsqueeze_1250
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf385 = aten.convolution_backward(buf384, convolution_301, primals_629, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf384
    del convolution_301
    del primals_629
    buf386 = buf385[0]
    buf387 = buf385[1]
    del buf385
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf388 = aten.convolution_backward(buf386, relu_161, primals_628, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf386
    del primals_628
    buf389 = buf388[0]
    buf390 = buf388[1]
    del buf388
    buf391 = buf309; del buf309  # reuse
    cpp_fused_add_threshold_backward_40(c_void_p(buf391.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(relu_161.data_ptr()), c_void_p(buf348.data_ptr()), c_void_p(buf367.data_ptr()), c_void_p(buf370.data_ptr()), c_void_p(buf389.data_ptr()))
    del buf348
    del buf367
    del buf370
    del relu_161
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf392 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf287, (8, 864, 11, 11), (522720, 1, 47520, 4320), 0), add_854, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_393)
    del add_854
    del getitem_393
    buf393 = buf392
    del buf392
    buf394 = buf382; del buf382  # reuse
    buf395 = empty((864, ), device='cpu', dtype=torch.float32)
    buf396 = empty((864, ), device='cpu', dtype=torch.float32)
    buf397 = buf389; del buf389  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_41(c_void_p(buf287.data_ptr()), c_void_p(convolution_300.data_ptr()), c_void_p(unsqueeze_1262.data_ptr()), c_void_p(squeeze_487.data_ptr()), c_void_p(primals_626.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(buf396.data_ptr()), c_void_p(buf397.data_ptr()))
    del buf287
    del convolution_300
    del primals_626
    del squeeze_487
    del unsqueeze_1262
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf398 = aten.convolution_backward(buf397, convolution_299, primals_625, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf397
    del convolution_299
    del primals_625
    buf399 = buf398[0]
    buf400 = buf398[1]
    del buf398
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf401 = aten.convolution_backward(buf399, relu_160, primals_624, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf399
    del primals_624
    buf402 = buf401[0]
    buf403 = buf401[1]
    del buf401
    buf404 = buf395; del buf395  # reuse
    buf405 = empty((864, ), device='cpu', dtype=torch.float32)
    buf406 = empty((864, ), device='cpu', dtype=torch.float32)
    buf407 = buf402; del buf402  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42(c_void_p(buf407.data_ptr()), c_void_p(relu_160.data_ptr()), c_void_p(convolution_298.data_ptr()), c_void_p(unsqueeze_1274.data_ptr()), c_void_p(squeeze_484.data_ptr()), c_void_p(primals_622.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf405.data_ptr()), c_void_p(buf406.data_ptr()))
    del convolution_298
    del primals_622
    del relu_160
    del squeeze_484
    del unsqueeze_1274
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf408 = aten.convolution_backward(buf407, convolution_297, primals_621, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf407
    del convolution_297
    del primals_621
    buf409 = buf408[0]
    buf410 = buf408[1]
    del buf408
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf411 = aten.convolution_backward(buf409, relu_159, primals_620, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf409
    del primals_620
    buf412 = buf411[0]
    buf413 = buf411[1]
    del buf411
    buf414 = buf405; del buf405  # reuse
    buf415 = empty((864, ), device='cpu', dtype=torch.float32)
    buf416 = empty((864, ), device='cpu', dtype=torch.float32)
    buf417 = buf391; del buf391  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_43(c_void_p(buf417.data_ptr()), c_void_p(convolution_296.data_ptr()), c_void_p(unsqueeze_1286.data_ptr()), c_void_p(squeeze_481.data_ptr()), c_void_p(primals_618.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf416.data_ptr()))
    del convolution_296
    del primals_618
    del squeeze_481
    del unsqueeze_1286
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf418 = aten.convolution_backward(buf417, relu_158, primals_617, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf417
    del primals_617
    buf419 = buf418[0]
    buf420 = buf418[1]
    del buf418
    buf421 = buf415; del buf415  # reuse
    buf422 = empty((864, ), device='cpu', dtype=torch.float32)
    buf423 = buf306; del buf306  # reuse
    buf424 = buf422; del buf422  # reuse
    buf425 = empty_strided((8, 432, 11, 11), (52272, 1, 4752, 432), device='cpu', dtype=torch.float32)
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_44(c_void_p(buf423.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(relu_159.data_ptr()), c_void_p(buf393.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(cat_14.data_ptr()), c_void_p(unsqueeze_1298.data_ptr()), c_void_p(squeeze_478.data_ptr()), c_void_p(primals_615.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf425.data_ptr()))
    del buf393
    del cat_14
    del relu_159
    del unsqueeze_1298
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf426 = aten.convolution_backward(buf425, avg_pool2d_7, primals_614, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d_7
    del primals_614
    buf427 = buf426[0]
    buf428 = buf426[1]
    del buf426
    buf429 = buf425; del buf425  # reuse
    cpp_fused_convolution_backward_45(c_void_p(buf423.data_ptr()), c_void_p(squeeze_478.data_ptr()), c_void_p(primals_615.data_ptr()), c_void_p(buf429.data_ptr()))
    del primals_615
    del squeeze_478
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf430 = aten.convolution_backward(buf429, avg_pool2d_6, primals_613, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d_6
    del buf429
    del primals_613
    buf431 = buf430[0]
    buf432 = buf430[1]
    del buf430
    buf433 = empty((8, 2160, 21, 21), device='cpu', dtype=torch.float32)
    buf434 = buf285; del buf285  # reuse
    buf435 = empty((864, ), device='cpu', dtype=torch.float32)
    buf436 = empty((864, ), device='cpu', dtype=torch.float32)
    buf442 = empty((864, ), device='cpu', dtype=torch.float32)
    buf437 = empty((864, ), device='cpu', dtype=torch.float32)
    buf438 = buf423; del buf423  # reuse
    buf444 = buf412; del buf412  # reuse
    cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_46(c_void_p(buf434.data_ptr()), c_void_p(buf427.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(relu_158.data_ptr()), c_void_p(buf419.data_ptr()), c_void_p(convolution_293.data_ptr()), c_void_p(unsqueeze_1310.data_ptr()), c_void_p(convolution_292.data_ptr()), c_void_p(unsqueeze_1322.data_ptr()), c_void_p(squeeze_475.data_ptr()), c_void_p(primals_611.data_ptr()), c_void_p(squeeze_472.data_ptr()), c_void_p(primals_609.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf435.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf444.data_ptr()))
    del buf419
    del buf427
    del buf431
    del convolution_292
    del convolution_293
    del primals_609
    del primals_611
    del relu_158
    del squeeze_475
    del unsqueeze_1310
    del unsqueeze_1322
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf439 = aten.convolution_backward(buf438, constant_pad_nd_38, primals_26, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf438
    del constant_pad_nd_38
    del primals_26
    buf440 = buf439[0]
    buf441 = buf439[1]
    del buf439
    buf443 = buf442; del buf442  # reuse
    cpp_fused_native_batch_norm_backward_47(c_void_p(buf443.data_ptr()), c_void_p(squeeze_472.data_ptr()))
    del squeeze_472
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf445 = aten.convolution_backward(buf444, convolution_291, primals_608, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf444
    del convolution_291
    del primals_608
    buf446 = buf445[0]
    buf447 = buf445[1]
    del buf445
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf448 = aten.convolution_backward(buf446, relu_155, primals_607, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf446
    del primals_607
    buf449 = buf448[0]
    buf450 = buf448[1]
    del buf448
    buf451 = buf436; del buf436  # reuse
    buf452 = empty((864, ), device='cpu', dtype=torch.float32)
    buf453 = empty((864, ), device='cpu', dtype=torch.float32)
    buf454 = buf449; del buf449  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_48(c_void_p(buf454.data_ptr()), c_void_p(relu_155.data_ptr()), c_void_p(convolution_290.data_ptr()), c_void_p(unsqueeze_1334.data_ptr()), c_void_p(squeeze_469.data_ptr()), c_void_p(primals_605.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf452.data_ptr()), c_void_p(buf453.data_ptr()))
    del convolution_290
    del primals_605
    del relu_155
    del squeeze_469
    del unsqueeze_1334
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf455 = aten.convolution_backward(buf454, convolution_289, primals_604, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf454
    del convolution_289
    del primals_604
    buf456 = buf455[0]
    buf457 = buf455[1]
    del buf455
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf458 = aten.convolution_backward(buf456, constant_pad_nd_37, primals_25, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 864, [True, True, False])
    del constant_pad_nd_37
    del primals_25
    buf459 = buf458[0]
    buf460 = buf458[1]
    del buf458
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf461 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf434, (8, 864, 11, 11), (522720, 1, 47520, 4320), 2592), constant_pad_nd_33, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_363)
    buf462 = buf461
    del buf461
    buf463 = buf452; del buf452  # reuse
    buf464 = empty((864, ), device='cpu', dtype=torch.float32)
    buf465 = empty((864, ), device='cpu', dtype=torch.float32)
    buf466 = buf456; del buf456  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_49(c_void_p(buf434.data_ptr()), c_void_p(convolution_288.data_ptr()), c_void_p(unsqueeze_1346.data_ptr()), c_void_p(squeeze_466.data_ptr()), c_void_p(primals_602.data_ptr()), c_void_p(buf463.data_ptr()), c_void_p(buf464.data_ptr()), c_void_p(buf465.data_ptr()), c_void_p(buf466.data_ptr()))
    del convolution_288
    del primals_602
    del squeeze_466
    del unsqueeze_1346
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf467 = aten.convolution_backward(buf466, convolution_287, primals_601, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf466
    del convolution_287
    del primals_601
    buf468 = buf467[0]
    buf469 = buf467[1]
    del buf467
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf470 = aten.convolution_backward(buf468, relu_153, primals_600, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf468
    del primals_600
    buf471 = buf470[0]
    buf472 = buf470[1]
    del buf470
    buf473 = buf464; del buf464  # reuse
    buf474 = empty((864, ), device='cpu', dtype=torch.float32)
    buf475 = empty((864, ), device='cpu', dtype=torch.float32)
    buf476 = buf471; del buf471  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_50(c_void_p(buf476.data_ptr()), c_void_p(relu_153.data_ptr()), c_void_p(convolution_286.data_ptr()), c_void_p(unsqueeze_1358.data_ptr()), c_void_p(squeeze_463.data_ptr()), c_void_p(primals_598.data_ptr()), c_void_p(buf473.data_ptr()), c_void_p(buf474.data_ptr()), c_void_p(buf475.data_ptr()))
    del convolution_286
    del primals_598
    del relu_153
    del squeeze_463
    del unsqueeze_1358
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf477 = aten.convolution_backward(buf476, convolution_285, primals_597, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_285
    del primals_597
    buf478 = buf477[0]
    buf479 = buf477[1]
    del buf477
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf480 = aten.convolution_backward(buf478, relu_152, primals_596, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del primals_596
    buf481 = buf480[0]
    buf482 = buf480[1]
    del buf480
    buf483 = buf474; del buf474  # reuse
    buf484 = empty((864, ), device='cpu', dtype=torch.float32)
    buf503 = empty((864, ), device='cpu', dtype=torch.float32)
    buf485 = buf478; del buf478  # reuse
    buf504 = buf476; del buf476  # reuse
    buf486 = buf484; del buf484  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_51(c_void_p(buf486.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(relu_152.data_ptr()), c_void_p(buf481.data_ptr()), c_void_p(convolution_284.data_ptr()), c_void_p(unsqueeze_1370.data_ptr()), c_void_p(convolution_280.data_ptr()), c_void_p(unsqueeze_1394.data_ptr()), c_void_p(squeeze_460.data_ptr()), c_void_p(primals_594.data_ptr()), c_void_p(squeeze_454.data_ptr()), c_void_p(primals_587.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(buf504.data_ptr()))
    del buf481
    del convolution_280
    del convolution_284
    del primals_587
    del primals_594
    del relu_152
    del squeeze_460
    del unsqueeze_1370
    del unsqueeze_1394
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf487 = aten.convolution_backward(buf485, convolution_283, primals_593, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf485
    del convolution_283
    del primals_593
    buf488 = buf487[0]
    buf489 = buf487[1]
    del buf487
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf490 = aten.convolution_backward(buf488, relu_151, primals_592, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf488
    del primals_592
    buf491 = buf490[0]
    buf492 = buf490[1]
    del buf490
    buf493 = empty((864, ), device='cpu', dtype=torch.float32)
    buf494 = empty((864, ), device='cpu', dtype=torch.float32)
    buf495 = empty((864, ), device='cpu', dtype=torch.float32)
    buf496 = buf491; del buf491  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_52(c_void_p(buf496.data_ptr()), c_void_p(relu_151.data_ptr()), c_void_p(convolution_282.data_ptr()), c_void_p(unsqueeze_1382.data_ptr()), c_void_p(squeeze_457.data_ptr()), c_void_p(primals_590.data_ptr()), c_void_p(buf493.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf495.data_ptr()))
    del convolution_282
    del primals_590
    del relu_151
    del squeeze_457
    del unsqueeze_1382
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf497 = aten.convolution_backward(buf496, convolution_281, primals_589, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf496
    del convolution_281
    del primals_589
    buf498 = buf497[0]
    buf499 = buf497[1]
    del buf497
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf500 = aten.convolution_backward(buf498, constant_pad_nd_35, primals_24, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf498
    del constant_pad_nd_35
    del primals_24
    buf501 = buf500[0]
    buf502 = buf500[1]
    del buf500
    buf505 = buf503; del buf503  # reuse
    cpp_fused_native_batch_norm_backward_53(c_void_p(buf505.data_ptr()), c_void_p(squeeze_454.data_ptr()))
    del squeeze_454
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf506 = aten.convolution_backward(buf504, convolution_279, primals_586, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf504
    del convolution_279
    del primals_586
    buf507 = buf506[0]
    buf508 = buf506[1]
    del buf506
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf509 = aten.convolution_backward(buf507, relu_149, primals_585, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf507
    del primals_585
    buf510 = buf509[0]
    buf511 = buf509[1]
    del buf509
    buf512 = buf494; del buf494  # reuse
    buf513 = empty((864, ), device='cpu', dtype=torch.float32)
    buf514 = empty((864, ), device='cpu', dtype=torch.float32)
    buf515 = buf510; del buf510  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_54(c_void_p(buf515.data_ptr()), c_void_p(relu_149.data_ptr()), c_void_p(convolution_278.data_ptr()), c_void_p(unsqueeze_1406.data_ptr()), c_void_p(squeeze_451.data_ptr()), c_void_p(primals_583.data_ptr()), c_void_p(buf512.data_ptr()), c_void_p(buf513.data_ptr()), c_void_p(buf514.data_ptr()))
    del convolution_278
    del primals_583
    del relu_149
    del squeeze_451
    del unsqueeze_1406
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf516 = aten.convolution_backward(buf515, convolution_277, primals_582, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf515
    del convolution_277
    del primals_582
    buf517 = buf516[0]
    buf518 = buf516[1]
    del buf516
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf519 = aten.convolution_backward(buf517, constant_pad_nd_34, primals_23, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 864, [True, True, False])
    del constant_pad_nd_34
    del primals_23
    buf520 = buf519[0]
    buf521 = buf519[1]
    del buf519
    buf522 = buf440; del buf440  # reuse
    cpp_fused_add_constant_pad_nd_threshold_backward_55(c_void_p(buf522.data_ptr()), c_void_p(le_43.data_ptr()), c_void_p(buf462.data_ptr()), c_void_p(buf501.data_ptr()), c_void_p(buf520.data_ptr()))
    del buf462
    del buf501
    del buf520
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf523 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf434, (8, 864, 11, 11), (522720, 1, 47520, 4320), 864), constant_pad_nd_33, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_363)
    del constant_pad_nd_33
    del getitem_363
    buf524 = buf523
    del buf523
    buf525 = buf513; del buf513  # reuse
    buf526 = empty((864, ), device='cpu', dtype=torch.float32)
    buf527 = empty((864, ), device='cpu', dtype=torch.float32)
    buf528 = buf517; del buf517  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_56(c_void_p(buf434.data_ptr()), c_void_p(convolution_276.data_ptr()), c_void_p(unsqueeze_1418.data_ptr()), c_void_p(squeeze_448.data_ptr()), c_void_p(primals_580.data_ptr()), c_void_p(buf525.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(buf528.data_ptr()))
    del convolution_276
    del primals_580
    del squeeze_448
    del unsqueeze_1418
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf529 = aten.convolution_backward(buf528, convolution_275, primals_579, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf528
    del convolution_275
    del primals_579
    buf530 = buf529[0]
    buf531 = buf529[1]
    del buf529
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf532 = aten.convolution_backward(buf530, relu_147, primals_578, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf530
    del primals_578
    buf533 = buf532[0]
    buf534 = buf532[1]
    del buf532
    buf535 = buf526; del buf526  # reuse
    buf536 = empty((864, ), device='cpu', dtype=torch.float32)
    buf537 = empty((864, ), device='cpu', dtype=torch.float32)
    buf538 = buf533; del buf533  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_57(c_void_p(buf538.data_ptr()), c_void_p(relu_147.data_ptr()), c_void_p(convolution_274.data_ptr()), c_void_p(unsqueeze_1430.data_ptr()), c_void_p(squeeze_445.data_ptr()), c_void_p(primals_576.data_ptr()), c_void_p(buf535.data_ptr()), c_void_p(buf536.data_ptr()), c_void_p(buf537.data_ptr()))
    del convolution_274
    del primals_576
    del relu_147
    del squeeze_445
    del unsqueeze_1430
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf539 = aten.convolution_backward(buf538, convolution_273, primals_575, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf538
    del convolution_273
    del primals_575
    buf540 = buf539[0]
    buf541 = buf539[1]
    del buf539
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf542 = aten.convolution_backward(buf540, constant_pad_nd_32, primals_22, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 864, [True, True, False])
    del constant_pad_nd_32
    del primals_22
    buf543 = buf542[0]
    buf544 = buf542[1]
    del buf542
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf545 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf434, (8, 864, 11, 11), (522720, 1, 47520, 4320), 0), constant_pad_nd_31, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_357)
    del constant_pad_nd_31
    del getitem_357
    buf546 = buf545
    del buf545
    buf547 = buf536; del buf536  # reuse
    buf548 = empty((864, ), device='cpu', dtype=torch.float32)
    buf549 = empty((864, ), device='cpu', dtype=torch.float32)
    buf550 = buf540; del buf540  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_58(c_void_p(buf434.data_ptr()), c_void_p(convolution_272.data_ptr()), c_void_p(unsqueeze_1442.data_ptr()), c_void_p(squeeze_442.data_ptr()), c_void_p(primals_573.data_ptr()), c_void_p(buf547.data_ptr()), c_void_p(buf548.data_ptr()), c_void_p(buf549.data_ptr()), c_void_p(buf550.data_ptr()))
    del buf434
    del convolution_272
    del primals_573
    del squeeze_442
    del unsqueeze_1442
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf551 = aten.convolution_backward(buf550, convolution_271, primals_572, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf550
    del convolution_271
    del primals_572
    buf552 = buf551[0]
    buf553 = buf551[1]
    del buf551
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf554 = aten.convolution_backward(buf552, relu_145, primals_571, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf552
    del primals_571
    buf555 = buf554[0]
    buf556 = buf554[1]
    del buf554
    buf557 = buf548; del buf548  # reuse
    buf558 = empty((864, ), device='cpu', dtype=torch.float32)
    buf559 = empty((864, ), device='cpu', dtype=torch.float32)
    buf560 = buf555; del buf555  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_59(c_void_p(buf560.data_ptr()), c_void_p(relu_145.data_ptr()), c_void_p(convolution_270.data_ptr()), c_void_p(unsqueeze_1454.data_ptr()), c_void_p(squeeze_439.data_ptr()), c_void_p(primals_569.data_ptr()), c_void_p(buf557.data_ptr()), c_void_p(buf558.data_ptr()), c_void_p(buf559.data_ptr()))
    del convolution_270
    del primals_569
    del relu_145
    del squeeze_439
    del unsqueeze_1454
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf561 = aten.convolution_backward(buf560, convolution_269, primals_568, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf560
    del convolution_269
    del primals_568
    buf562 = buf561[0]
    buf563 = buf561[1]
    del buf561
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf564 = aten.convolution_backward(buf562, constant_pad_nd_30, primals_21, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 864, [True, True, False])
    del buf562
    del constant_pad_nd_30
    del primals_21
    buf565 = buf564[0]
    buf566 = buf564[1]
    del buf564
    buf567 = empty_strided((8, 864, 21, 21), (381024, 1, 18144, 864), device='cpu', dtype=torch.float32)
    buf568 = buf558; del buf558  # reuse
    buf569 = empty((864, ), device='cpu', dtype=torch.float32)
    buf570 = buf522; del buf522  # reuse
    buf571 = buf569; del buf569  # reuse
    buf572 = buf570; del buf570  # reuse
    cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_60(c_void_p(buf572.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(le_45.data_ptr()), c_void_p(buf459.data_ptr()), c_void_p(buf546.data_ptr()), c_void_p(buf565.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(le_43.data_ptr()), c_void_p(buf543.data_ptr()), c_void_p(convolution_268.data_ptr()), c_void_p(unsqueeze_1466.data_ptr()), c_void_p(squeeze_436.data_ptr()), c_void_p(primals_566.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(buf568.data_ptr()))
    del buf459
    del buf524
    del buf543
    del buf546
    del buf565
    del convolution_268
    del le_43
    del le_45
    del primals_566
    del squeeze_436
    del unsqueeze_1466
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf573 = aten.convolution_backward(buf572, relu_143, primals_565, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf572
    del primals_565
    buf574 = buf573[0]
    buf575 = buf573[1]
    del buf573
    buf576 = empty((864, ), device='cpu', dtype=torch.float32)
    buf577 = empty((864, ), device='cpu', dtype=torch.float32)
    buf578 = empty((864, ), device='cpu', dtype=torch.float32)
    buf579 = buf567; del buf567  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_61(c_void_p(buf579.data_ptr()), c_void_p(convolution_267.data_ptr()), c_void_p(unsqueeze_1478.data_ptr()), c_void_p(squeeze_433.data_ptr()), c_void_p(primals_563.data_ptr()), c_void_p(buf576.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(buf578.data_ptr()))
    del buf577
    del convolution_267
    del primals_563
    del squeeze_433
    del unsqueeze_1478
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf580 = aten.convolution_backward(buf579, relu_129, primals_562, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_562
    buf581 = buf580[0]
    buf582 = buf580[1]
    del buf580
    buf583 = buf574; del buf574  # reuse
    buf584 = empty((432, ), device='cpu', dtype=torch.float32)
    buf585 = empty((432, ), device='cpu', dtype=torch.float32)
    buf586 = empty((432, ), device='cpu', dtype=torch.float32)
    buf587 = empty_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_62(c_void_p(buf583.data_ptr()), c_void_p(relu_143.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(convolution_266.data_ptr()), c_void_p(unsqueeze_1490.data_ptr()), c_void_p(squeeze_430.data_ptr()), c_void_p(primals_560.data_ptr()), c_void_p(buf584.data_ptr()), c_void_p(buf585.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf587.data_ptr()))
    del buf433
    del convolution_266
    del primals_560
    del relu_143
    del squeeze_430
    del unsqueeze_1490
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf588 = aten.convolution_backward(buf587, convolution_265, primals_559, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf587
    del convolution_265
    del primals_559
    buf589 = buf588[0]
    buf590 = buf588[1]
    del buf588
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf591 = aten.convolution_backward(buf589, relu_141, primals_558, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf589
    del primals_558
    buf592 = buf591[0]
    buf593 = buf591[1]
    del buf591
    buf594 = buf585; del buf585  # reuse
    buf595 = empty((432, ), device='cpu', dtype=torch.float32)
    buf596 = empty((432, ), device='cpu', dtype=torch.float32)
    buf597 = buf592; del buf592  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_63(c_void_p(buf597.data_ptr()), c_void_p(relu_141.data_ptr()), c_void_p(convolution_264.data_ptr()), c_void_p(unsqueeze_1502.data_ptr()), c_void_p(squeeze_427.data_ptr()), c_void_p(primals_556.data_ptr()), c_void_p(buf594.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf596.data_ptr()))
    del convolution_264
    del primals_556
    del relu_141
    del squeeze_427
    del unsqueeze_1502
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf598 = aten.convolution_backward(buf597, convolution_263, primals_555, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf597
    del convolution_263
    del primals_555
    buf599 = buf598[0]
    buf600 = buf598[1]
    del buf598
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf601 = aten.convolution_backward(buf599, relu_130, primals_554, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_554
    buf602 = buf601[0]
    buf603 = buf601[1]
    del buf601
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf604 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf583, (8, 432, 21, 21), (952560, 1, 45360, 2160), 1296), add_704, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_329)
    buf605 = buf604
    del buf604
    buf606 = buf595; del buf595  # reuse
    buf607 = empty((432, ), device='cpu', dtype=torch.float32)
    buf608 = empty((432, ), device='cpu', dtype=torch.float32)
    buf609 = buf599; del buf599  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_64(c_void_p(buf583.data_ptr()), c_void_p(convolution_262.data_ptr()), c_void_p(unsqueeze_1514.data_ptr()), c_void_p(squeeze_424.data_ptr()), c_void_p(primals_552.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(buf608.data_ptr()), c_void_p(buf609.data_ptr()))
    del convolution_262
    del primals_552
    del squeeze_424
    del unsqueeze_1514
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf610 = aten.convolution_backward(buf609, convolution_261, primals_551, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf609
    del convolution_261
    del primals_551
    buf611 = buf610[0]
    buf612 = buf610[1]
    del buf610
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf613 = aten.convolution_backward(buf611, relu_139, primals_550, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf611
    del primals_550
    buf614 = buf613[0]
    buf615 = buf613[1]
    del buf613
    buf616 = buf607; del buf607  # reuse
    buf617 = empty((432, ), device='cpu', dtype=torch.float32)
    buf618 = empty((432, ), device='cpu', dtype=torch.float32)
    buf619 = buf614; del buf614  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_65(c_void_p(buf619.data_ptr()), c_void_p(relu_139.data_ptr()), c_void_p(convolution_260.data_ptr()), c_void_p(unsqueeze_1526.data_ptr()), c_void_p(squeeze_421.data_ptr()), c_void_p(primals_548.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf617.data_ptr()), c_void_p(buf618.data_ptr()))
    del convolution_260
    del primals_548
    del relu_139
    del squeeze_421
    del unsqueeze_1526
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf620 = aten.convolution_backward(buf619, convolution_259, primals_547, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_259
    del primals_547
    buf621 = buf620[0]
    buf622 = buf620[1]
    del buf620
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf623 = aten.convolution_backward(buf621, relu_138, primals_546, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_546
    buf624 = buf623[0]
    buf625 = buf623[1]
    del buf623
    buf626 = buf617; del buf617  # reuse
    buf627 = empty((432, ), device='cpu', dtype=torch.float32)
    buf646 = empty((432, ), device='cpu', dtype=torch.float32)
    buf628 = buf621; del buf621  # reuse
    buf647 = buf619; del buf619  # reuse
    buf629 = buf627; del buf627  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_66(c_void_p(buf629.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(relu_138.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(convolution_258.data_ptr()), c_void_p(unsqueeze_1538.data_ptr()), c_void_p(convolution_254.data_ptr()), c_void_p(unsqueeze_1562.data_ptr()), c_void_p(squeeze_418.data_ptr()), c_void_p(primals_544.data_ptr()), c_void_p(squeeze_412.data_ptr()), c_void_p(primals_536.data_ptr()), c_void_p(buf626.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf628.data_ptr()), c_void_p(buf647.data_ptr()))
    del buf624
    del convolution_254
    del convolution_258
    del primals_536
    del primals_544
    del relu_138
    del squeeze_418
    del unsqueeze_1538
    del unsqueeze_1562
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf630 = aten.convolution_backward(buf628, convolution_257, primals_543, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf628
    del convolution_257
    del primals_543
    buf631 = buf630[0]
    buf632 = buf630[1]
    del buf630
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf633 = aten.convolution_backward(buf631, relu_137, primals_542, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf631
    del primals_542
    buf634 = buf633[0]
    buf635 = buf633[1]
    del buf633
    buf636 = empty((432, ), device='cpu', dtype=torch.float32)
    buf637 = empty((432, ), device='cpu', dtype=torch.float32)
    buf638 = empty((432, ), device='cpu', dtype=torch.float32)
    buf639 = buf634; del buf634  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_67(c_void_p(buf639.data_ptr()), c_void_p(relu_137.data_ptr()), c_void_p(convolution_256.data_ptr()), c_void_p(unsqueeze_1550.data_ptr()), c_void_p(squeeze_415.data_ptr()), c_void_p(primals_540.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf637.data_ptr()), c_void_p(buf638.data_ptr()))
    del convolution_256
    del primals_540
    del relu_137
    del squeeze_415
    del unsqueeze_1550
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf640 = aten.convolution_backward(buf639, convolution_255, primals_539, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf639
    del convolution_255
    del primals_539
    buf641 = buf640[0]
    buf642 = buf640[1]
    del buf640
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf643 = aten.convolution_backward(buf641, relu_132, primals_538, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf641
    del primals_538
    buf644 = buf643[0]
    buf645 = buf643[1]
    del buf643
    buf648 = buf646; del buf646  # reuse
    cpp_fused_native_batch_norm_backward_68(c_void_p(buf648.data_ptr()), c_void_p(squeeze_412.data_ptr()))
    del squeeze_412
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf649 = aten.convolution_backward(buf647, convolution_253, primals_535, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf647
    del convolution_253
    del primals_535
    buf650 = buf649[0]
    buf651 = buf649[1]
    del buf649
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf652 = aten.convolution_backward(buf650, relu_135, primals_534, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf650
    del primals_534
    buf653 = buf652[0]
    buf654 = buf652[1]
    del buf652
    buf655 = buf637; del buf637  # reuse
    buf656 = empty((432, ), device='cpu', dtype=torch.float32)
    buf657 = empty((432, ), device='cpu', dtype=torch.float32)
    buf658 = buf653; del buf653  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_69(c_void_p(buf658.data_ptr()), c_void_p(relu_135.data_ptr()), c_void_p(convolution_252.data_ptr()), c_void_p(unsqueeze_1574.data_ptr()), c_void_p(squeeze_409.data_ptr()), c_void_p(primals_532.data_ptr()), c_void_p(buf655.data_ptr()), c_void_p(buf656.data_ptr()), c_void_p(buf657.data_ptr()))
    del convolution_252
    del primals_532
    del relu_135
    del squeeze_409
    del unsqueeze_1574
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf659 = aten.convolution_backward(buf658, convolution_251, primals_531, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf658
    del convolution_251
    del primals_531
    buf660 = buf659[0]
    buf661 = buf659[1]
    del buf659
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf662 = aten.convolution_backward(buf660, relu_132, primals_530, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_530
    buf663 = buf662[0]
    buf664 = buf662[1]
    del buf662
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf665 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf583, (8, 432, 21, 21), (952560, 1, 45360, 2160), 432), add_704, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_329)
    del add_704
    del getitem_329
    buf666 = buf665
    del buf665
    buf667 = buf656; del buf656  # reuse
    buf668 = empty((432, ), device='cpu', dtype=torch.float32)
    buf669 = empty((432, ), device='cpu', dtype=torch.float32)
    buf670 = buf660; del buf660  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_70(c_void_p(buf583.data_ptr()), c_void_p(convolution_250.data_ptr()), c_void_p(unsqueeze_1586.data_ptr()), c_void_p(squeeze_406.data_ptr()), c_void_p(primals_528.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf670.data_ptr()))
    del convolution_250
    del primals_528
    del squeeze_406
    del unsqueeze_1586
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf671 = aten.convolution_backward(buf670, convolution_249, primals_527, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf670
    del convolution_249
    del primals_527
    buf672 = buf671[0]
    buf673 = buf671[1]
    del buf671
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf674 = aten.convolution_backward(buf672, relu_133, primals_526, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf672
    del primals_526
    buf675 = buf674[0]
    buf676 = buf674[1]
    del buf674
    buf677 = buf668; del buf668  # reuse
    buf678 = empty((432, ), device='cpu', dtype=torch.float32)
    buf679 = empty((432, ), device='cpu', dtype=torch.float32)
    buf680 = buf675; del buf675  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_71(c_void_p(buf680.data_ptr()), c_void_p(relu_133.data_ptr()), c_void_p(convolution_248.data_ptr()), c_void_p(unsqueeze_1598.data_ptr()), c_void_p(squeeze_403.data_ptr()), c_void_p(primals_524.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(buf678.data_ptr()), c_void_p(buf679.data_ptr()))
    del convolution_248
    del primals_524
    del relu_133
    del squeeze_403
    del unsqueeze_1598
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf681 = aten.convolution_backward(buf680, convolution_247, primals_523, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf680
    del convolution_247
    del primals_523
    buf682 = buf681[0]
    buf683 = buf681[1]
    del buf681
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf684 = aten.convolution_backward(buf682, relu_132, primals_522, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf682
    del primals_522
    buf685 = buf684[0]
    buf686 = buf684[1]
    del buf684
    buf687 = buf605; del buf605  # reuse
    cpp_fused_add_threshold_backward_72(c_void_p(buf687.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(relu_132.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf663.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(buf685.data_ptr()))
    del buf644
    del buf663
    del buf666
    del relu_132
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf688 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf583, (8, 432, 21, 21), (952560, 1, 45360, 2160), 0), add_699, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_323)
    del add_699
    del getitem_323
    buf689 = buf688
    del buf688
    buf690 = buf678; del buf678  # reuse
    buf691 = empty((432, ), device='cpu', dtype=torch.float32)
    buf692 = empty((432, ), device='cpu', dtype=torch.float32)
    buf693 = buf685; del buf685  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_73(c_void_p(buf583.data_ptr()), c_void_p(convolution_246.data_ptr()), c_void_p(unsqueeze_1610.data_ptr()), c_void_p(squeeze_400.data_ptr()), c_void_p(primals_520.data_ptr()), c_void_p(buf690.data_ptr()), c_void_p(buf691.data_ptr()), c_void_p(buf692.data_ptr()), c_void_p(buf693.data_ptr()))
    del buf583
    del convolution_246
    del primals_520
    del squeeze_400
    del unsqueeze_1610
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf694 = aten.convolution_backward(buf693, convolution_245, primals_519, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf693
    del convolution_245
    del primals_519
    buf695 = buf694[0]
    buf696 = buf694[1]
    del buf694
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf697 = aten.convolution_backward(buf695, relu_131, primals_518, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf695
    del primals_518
    buf698 = buf697[0]
    buf699 = buf697[1]
    del buf697
    buf700 = buf691; del buf691  # reuse
    buf701 = empty((432, ), device='cpu', dtype=torch.float32)
    buf702 = empty((432, ), device='cpu', dtype=torch.float32)
    buf703 = buf698; del buf698  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_74(c_void_p(buf703.data_ptr()), c_void_p(relu_131.data_ptr()), c_void_p(convolution_244.data_ptr()), c_void_p(unsqueeze_1622.data_ptr()), c_void_p(squeeze_397.data_ptr()), c_void_p(primals_516.data_ptr()), c_void_p(buf700.data_ptr()), c_void_p(buf701.data_ptr()), c_void_p(buf702.data_ptr()))
    del convolution_244
    del primals_516
    del relu_131
    del squeeze_397
    del unsqueeze_1622
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf704 = aten.convolution_backward(buf703, convolution_243, primals_515, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf703
    del convolution_243
    del primals_515
    buf705 = buf704[0]
    buf706 = buf704[1]
    del buf704
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf707 = aten.convolution_backward(buf705, relu_130, primals_514, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf705
    del primals_514
    buf708 = buf707[0]
    buf709 = buf707[1]
    del buf707
    buf710 = buf701; del buf701  # reuse
    buf711 = empty((432, ), device='cpu', dtype=torch.float32)
    buf712 = empty((432, ), device='cpu', dtype=torch.float32)
    buf713 = buf687; del buf687  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_75(c_void_p(buf713.data_ptr()), c_void_p(convolution_242.data_ptr()), c_void_p(unsqueeze_1634.data_ptr()), c_void_p(squeeze_394.data_ptr()), c_void_p(primals_512.data_ptr()), c_void_p(buf710.data_ptr()), c_void_p(buf711.data_ptr()), c_void_p(buf712.data_ptr()))
    del convolution_242
    del primals_512
    del squeeze_394
    del unsqueeze_1634
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf714 = aten.convolution_backward(buf713, relu_129, primals_511, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf713
    del primals_511
    buf715 = buf714[0]
    buf716 = buf714[1]
    del buf714
    buf717 = buf711; del buf711  # reuse
    buf718 = empty((432, ), device='cpu', dtype=torch.float32)
    buf719 = buf602; del buf602  # reuse
    buf721 = buf719; del buf719  # reuse
    buf720 = buf718; del buf718  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_76(c_void_p(buf721.data_ptr()), c_void_p(buf720.data_ptr()), c_void_p(relu_130.data_ptr()), c_void_p(buf689.data_ptr()), c_void_p(buf708.data_ptr()), c_void_p(convolution_241.data_ptr()), c_void_p(unsqueeze_1646.data_ptr()), c_void_p(squeeze_391.data_ptr()), c_void_p(primals_509.data_ptr()), c_void_p(buf717.data_ptr()))
    del buf689
    del buf708
    del convolution_241
    del primals_509
    del relu_130
    del squeeze_391
    del unsqueeze_1646
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf722 = aten.convolution_backward(buf721, relu_115, primals_508, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_508
    buf723 = buf722[0]
    buf724 = buf722[1]
    del buf722
    buf725 = buf581; del buf581  # reuse
    buf726 = empty((432, ), device='cpu', dtype=torch.float32)
    buf727 = empty((432, ), device='cpu', dtype=torch.float32)
    buf728 = empty((432, ), device='cpu', dtype=torch.float32)
    buf729 = buf721; del buf721  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_77(c_void_p(buf725.data_ptr()), c_void_p(relu_129.data_ptr()), c_void_p(buf715.data_ptr()), c_void_p(convolution_240.data_ptr()), c_void_p(unsqueeze_1658.data_ptr()), c_void_p(squeeze_388.data_ptr()), c_void_p(primals_506.data_ptr()), c_void_p(buf726.data_ptr()), c_void_p(buf727.data_ptr()), c_void_p(buf728.data_ptr()), c_void_p(buf729.data_ptr()))
    del buf715
    del convolution_240
    del primals_506
    del relu_129
    del squeeze_388
    del unsqueeze_1658
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf730 = aten.convolution_backward(buf729, convolution_239, primals_505, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf729
    del convolution_239
    del primals_505
    buf731 = buf730[0]
    buf732 = buf730[1]
    del buf730
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf733 = aten.convolution_backward(buf731, relu_127, primals_504, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf731
    del primals_504
    buf734 = buf733[0]
    buf735 = buf733[1]
    del buf733
    buf736 = buf727; del buf727  # reuse
    buf737 = empty((432, ), device='cpu', dtype=torch.float32)
    buf738 = empty((432, ), device='cpu', dtype=torch.float32)
    buf739 = buf734; del buf734  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_78(c_void_p(buf739.data_ptr()), c_void_p(relu_127.data_ptr()), c_void_p(convolution_238.data_ptr()), c_void_p(unsqueeze_1670.data_ptr()), c_void_p(squeeze_385.data_ptr()), c_void_p(primals_502.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(buf737.data_ptr()), c_void_p(buf738.data_ptr()))
    del convolution_238
    del primals_502
    del relu_127
    del squeeze_385
    del unsqueeze_1670
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf740 = aten.convolution_backward(buf739, convolution_237, primals_501, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf739
    del convolution_237
    del primals_501
    buf741 = buf740[0]
    buf742 = buf740[1]
    del buf740
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf743 = aten.convolution_backward(buf741, relu_116, primals_500, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_500
    buf744 = buf743[0]
    buf745 = buf743[1]
    del buf743
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf746 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf725, (8, 432, 21, 21), (952560, 1, 45360, 2160), 1296), add_629, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_295)
    buf747 = buf746
    del buf746
    buf748 = buf737; del buf737  # reuse
    buf749 = empty((432, ), device='cpu', dtype=torch.float32)
    buf750 = empty((432, ), device='cpu', dtype=torch.float32)
    buf751 = buf741; del buf741  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_79(c_void_p(buf725.data_ptr()), c_void_p(convolution_236.data_ptr()), c_void_p(unsqueeze_1682.data_ptr()), c_void_p(squeeze_382.data_ptr()), c_void_p(primals_498.data_ptr()), c_void_p(buf748.data_ptr()), c_void_p(buf749.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(buf751.data_ptr()))
    del convolution_236
    del primals_498
    del squeeze_382
    del unsqueeze_1682
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf752 = aten.convolution_backward(buf751, convolution_235, primals_497, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf751
    del convolution_235
    del primals_497
    buf753 = buf752[0]
    buf754 = buf752[1]
    del buf752
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf755 = aten.convolution_backward(buf753, relu_125, primals_496, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf753
    del primals_496
    buf756 = buf755[0]
    buf757 = buf755[1]
    del buf755
    buf758 = buf749; del buf749  # reuse
    buf759 = empty((432, ), device='cpu', dtype=torch.float32)
    buf760 = empty((432, ), device='cpu', dtype=torch.float32)
    buf761 = buf756; del buf756  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_80(c_void_p(buf761.data_ptr()), c_void_p(relu_125.data_ptr()), c_void_p(convolution_234.data_ptr()), c_void_p(unsqueeze_1694.data_ptr()), c_void_p(squeeze_379.data_ptr()), c_void_p(primals_494.data_ptr()), c_void_p(buf758.data_ptr()), c_void_p(buf759.data_ptr()), c_void_p(buf760.data_ptr()))
    del convolution_234
    del primals_494
    del relu_125
    del squeeze_379
    del unsqueeze_1694
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf762 = aten.convolution_backward(buf761, convolution_233, primals_493, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_233
    del primals_493
    buf763 = buf762[0]
    buf764 = buf762[1]
    del buf762
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf765 = aten.convolution_backward(buf763, relu_124, primals_492, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_492
    buf766 = buf765[0]
    buf767 = buf765[1]
    del buf765
    buf768 = buf759; del buf759  # reuse
    buf769 = empty((432, ), device='cpu', dtype=torch.float32)
    buf788 = empty((432, ), device='cpu', dtype=torch.float32)
    buf770 = buf763; del buf763  # reuse
    buf789 = buf761; del buf761  # reuse
    buf771 = buf769; del buf769  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_81(c_void_p(buf771.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(relu_124.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(convolution_232.data_ptr()), c_void_p(unsqueeze_1706.data_ptr()), c_void_p(convolution_228.data_ptr()), c_void_p(unsqueeze_1730.data_ptr()), c_void_p(squeeze_376.data_ptr()), c_void_p(primals_490.data_ptr()), c_void_p(squeeze_370.data_ptr()), c_void_p(primals_482.data_ptr()), c_void_p(buf768.data_ptr()), c_void_p(buf788.data_ptr()), c_void_p(buf770.data_ptr()), c_void_p(buf789.data_ptr()))
    del buf766
    del convolution_228
    del convolution_232
    del primals_482
    del primals_490
    del relu_124
    del squeeze_376
    del unsqueeze_1706
    del unsqueeze_1730
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf772 = aten.convolution_backward(buf770, convolution_231, primals_489, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf770
    del convolution_231
    del primals_489
    buf773 = buf772[0]
    buf774 = buf772[1]
    del buf772
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf775 = aten.convolution_backward(buf773, relu_123, primals_488, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf773
    del primals_488
    buf776 = buf775[0]
    buf777 = buf775[1]
    del buf775
    buf778 = empty((432, ), device='cpu', dtype=torch.float32)
    buf779 = empty((432, ), device='cpu', dtype=torch.float32)
    buf780 = empty((432, ), device='cpu', dtype=torch.float32)
    buf781 = buf776; del buf776  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_82(c_void_p(buf781.data_ptr()), c_void_p(relu_123.data_ptr()), c_void_p(convolution_230.data_ptr()), c_void_p(unsqueeze_1718.data_ptr()), c_void_p(squeeze_373.data_ptr()), c_void_p(primals_486.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(buf779.data_ptr()), c_void_p(buf780.data_ptr()))
    del convolution_230
    del primals_486
    del relu_123
    del squeeze_373
    del unsqueeze_1718
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf782 = aten.convolution_backward(buf781, convolution_229, primals_485, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf781
    del convolution_229
    del primals_485
    buf783 = buf782[0]
    buf784 = buf782[1]
    del buf782
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf785 = aten.convolution_backward(buf783, relu_118, primals_484, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf783
    del primals_484
    buf786 = buf785[0]
    buf787 = buf785[1]
    del buf785
    buf790 = buf788; del buf788  # reuse
    cpp_fused_native_batch_norm_backward_83(c_void_p(buf790.data_ptr()), c_void_p(squeeze_370.data_ptr()))
    del squeeze_370
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf791 = aten.convolution_backward(buf789, convolution_227, primals_481, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf789
    del convolution_227
    del primals_481
    buf792 = buf791[0]
    buf793 = buf791[1]
    del buf791
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf794 = aten.convolution_backward(buf792, relu_121, primals_480, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf792
    del primals_480
    buf795 = buf794[0]
    buf796 = buf794[1]
    del buf794
    buf797 = buf779; del buf779  # reuse
    buf798 = empty((432, ), device='cpu', dtype=torch.float32)
    buf799 = empty((432, ), device='cpu', dtype=torch.float32)
    buf800 = buf795; del buf795  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_84(c_void_p(buf800.data_ptr()), c_void_p(relu_121.data_ptr()), c_void_p(convolution_226.data_ptr()), c_void_p(unsqueeze_1742.data_ptr()), c_void_p(squeeze_367.data_ptr()), c_void_p(primals_478.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(buf798.data_ptr()), c_void_p(buf799.data_ptr()))
    del convolution_226
    del primals_478
    del relu_121
    del squeeze_367
    del unsqueeze_1742
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf801 = aten.convolution_backward(buf800, convolution_225, primals_477, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf800
    del convolution_225
    del primals_477
    buf802 = buf801[0]
    buf803 = buf801[1]
    del buf801
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf804 = aten.convolution_backward(buf802, relu_118, primals_476, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_476
    buf805 = buf804[0]
    buf806 = buf804[1]
    del buf804
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf807 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf725, (8, 432, 21, 21), (952560, 1, 45360, 2160), 432), add_629, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_295)
    del add_629
    del getitem_295
    buf808 = buf807
    del buf807
    buf809 = buf798; del buf798  # reuse
    buf810 = empty((432, ), device='cpu', dtype=torch.float32)
    buf811 = empty((432, ), device='cpu', dtype=torch.float32)
    buf812 = buf802; del buf802  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_85(c_void_p(buf725.data_ptr()), c_void_p(convolution_224.data_ptr()), c_void_p(unsqueeze_1754.data_ptr()), c_void_p(squeeze_364.data_ptr()), c_void_p(primals_474.data_ptr()), c_void_p(buf809.data_ptr()), c_void_p(buf810.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf812.data_ptr()))
    del convolution_224
    del primals_474
    del squeeze_364
    del unsqueeze_1754
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf813 = aten.convolution_backward(buf812, convolution_223, primals_473, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf812
    del convolution_223
    del primals_473
    buf814 = buf813[0]
    buf815 = buf813[1]
    del buf813
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf816 = aten.convolution_backward(buf814, relu_119, primals_472, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf814
    del primals_472
    buf817 = buf816[0]
    buf818 = buf816[1]
    del buf816
    buf819 = buf810; del buf810  # reuse
    buf820 = empty((432, ), device='cpu', dtype=torch.float32)
    buf821 = empty((432, ), device='cpu', dtype=torch.float32)
    buf822 = buf817; del buf817  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_86(c_void_p(buf822.data_ptr()), c_void_p(relu_119.data_ptr()), c_void_p(convolution_222.data_ptr()), c_void_p(unsqueeze_1766.data_ptr()), c_void_p(squeeze_361.data_ptr()), c_void_p(primals_470.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf821.data_ptr()))
    del convolution_222
    del primals_470
    del relu_119
    del squeeze_361
    del unsqueeze_1766
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf823 = aten.convolution_backward(buf822, convolution_221, primals_469, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf822
    del convolution_221
    del primals_469
    buf824 = buf823[0]
    buf825 = buf823[1]
    del buf823
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf826 = aten.convolution_backward(buf824, relu_118, primals_468, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf824
    del primals_468
    buf827 = buf826[0]
    buf828 = buf826[1]
    del buf826
    buf829 = buf747; del buf747  # reuse
    cpp_fused_add_threshold_backward_87(c_void_p(buf829.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(relu_118.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(buf805.data_ptr()), c_void_p(buf808.data_ptr()), c_void_p(buf827.data_ptr()))
    del buf786
    del buf805
    del buf808
    del relu_118
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf830 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf725, (8, 432, 21, 21), (952560, 1, 45360, 2160), 0), add_624, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_289)
    del add_624
    del getitem_289
    buf831 = buf830
    del buf830
    buf832 = buf820; del buf820  # reuse
    buf833 = empty((432, ), device='cpu', dtype=torch.float32)
    buf834 = empty((432, ), device='cpu', dtype=torch.float32)
    buf835 = buf827; del buf827  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_88(c_void_p(buf725.data_ptr()), c_void_p(convolution_220.data_ptr()), c_void_p(unsqueeze_1778.data_ptr()), c_void_p(squeeze_358.data_ptr()), c_void_p(primals_466.data_ptr()), c_void_p(buf832.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(buf834.data_ptr()), c_void_p(buf835.data_ptr()))
    del buf725
    del convolution_220
    del primals_466
    del squeeze_358
    del unsqueeze_1778
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf836 = aten.convolution_backward(buf835, convolution_219, primals_465, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf835
    del convolution_219
    del primals_465
    buf837 = buf836[0]
    buf838 = buf836[1]
    del buf836
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf839 = aten.convolution_backward(buf837, relu_117, primals_464, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf837
    del primals_464
    buf840 = buf839[0]
    buf841 = buf839[1]
    del buf839
    buf842 = buf833; del buf833  # reuse
    buf843 = empty((432, ), device='cpu', dtype=torch.float32)
    buf844 = empty((432, ), device='cpu', dtype=torch.float32)
    buf845 = buf840; del buf840  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_89(c_void_p(buf845.data_ptr()), c_void_p(relu_117.data_ptr()), c_void_p(convolution_218.data_ptr()), c_void_p(unsqueeze_1790.data_ptr()), c_void_p(squeeze_355.data_ptr()), c_void_p(primals_462.data_ptr()), c_void_p(buf842.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf844.data_ptr()))
    del convolution_218
    del primals_462
    del relu_117
    del squeeze_355
    del unsqueeze_1790
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf846 = aten.convolution_backward(buf845, convolution_217, primals_461, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf845
    del convolution_217
    del primals_461
    buf847 = buf846[0]
    buf848 = buf846[1]
    del buf846
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf849 = aten.convolution_backward(buf847, relu_116, primals_460, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf847
    del primals_460
    buf850 = buf849[0]
    buf851 = buf849[1]
    del buf849
    buf852 = buf843; del buf843  # reuse
    buf853 = empty((432, ), device='cpu', dtype=torch.float32)
    buf854 = empty((432, ), device='cpu', dtype=torch.float32)
    buf855 = buf829; del buf829  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_90(c_void_p(buf855.data_ptr()), c_void_p(convolution_216.data_ptr()), c_void_p(unsqueeze_1802.data_ptr()), c_void_p(squeeze_352.data_ptr()), c_void_p(primals_458.data_ptr()), c_void_p(buf852.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(buf854.data_ptr()))
    del convolution_216
    del primals_458
    del squeeze_352
    del unsqueeze_1802
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf856 = aten.convolution_backward(buf855, relu_115, primals_457, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf855
    del primals_457
    buf857 = buf856[0]
    buf858 = buf856[1]
    del buf856
    buf859 = buf853; del buf853  # reuse
    buf860 = empty((432, ), device='cpu', dtype=torch.float32)
    buf861 = buf744; del buf744  # reuse
    buf863 = buf861; del buf861  # reuse
    buf862 = buf860; del buf860  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_91(c_void_p(buf863.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(relu_116.data_ptr()), c_void_p(buf831.data_ptr()), c_void_p(buf850.data_ptr()), c_void_p(convolution_215.data_ptr()), c_void_p(unsqueeze_1814.data_ptr()), c_void_p(squeeze_349.data_ptr()), c_void_p(primals_455.data_ptr()), c_void_p(buf859.data_ptr()))
    del buf831
    del buf850
    del convolution_215
    del primals_455
    del relu_116
    del squeeze_349
    del unsqueeze_1814
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf864 = aten.convolution_backward(buf863, relu_101, primals_454, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_454
    buf865 = buf864[0]
    buf866 = buf864[1]
    del buf864
    buf867 = buf723; del buf723  # reuse
    buf868 = empty((432, ), device='cpu', dtype=torch.float32)
    buf869 = empty((432, ), device='cpu', dtype=torch.float32)
    buf870 = empty((432, ), device='cpu', dtype=torch.float32)
    buf871 = buf863; del buf863  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_92(c_void_p(buf867.data_ptr()), c_void_p(relu_115.data_ptr()), c_void_p(buf857.data_ptr()), c_void_p(convolution_214.data_ptr()), c_void_p(unsqueeze_1826.data_ptr()), c_void_p(squeeze_346.data_ptr()), c_void_p(primals_452.data_ptr()), c_void_p(buf868.data_ptr()), c_void_p(buf869.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(buf871.data_ptr()))
    del buf857
    del convolution_214
    del primals_452
    del relu_115
    del squeeze_346
    del unsqueeze_1826
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf872 = aten.convolution_backward(buf871, convolution_213, primals_451, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf871
    del convolution_213
    del primals_451
    buf873 = buf872[0]
    buf874 = buf872[1]
    del buf872
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf875 = aten.convolution_backward(buf873, relu_113, primals_450, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf873
    del primals_450
    buf876 = buf875[0]
    buf877 = buf875[1]
    del buf875
    buf878 = buf869; del buf869  # reuse
    buf879 = empty((432, ), device='cpu', dtype=torch.float32)
    buf880 = empty((432, ), device='cpu', dtype=torch.float32)
    buf881 = buf876; del buf876  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_93(c_void_p(buf881.data_ptr()), c_void_p(relu_113.data_ptr()), c_void_p(convolution_212.data_ptr()), c_void_p(unsqueeze_1838.data_ptr()), c_void_p(squeeze_343.data_ptr()), c_void_p(primals_448.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf879.data_ptr()), c_void_p(buf880.data_ptr()))
    del convolution_212
    del primals_448
    del relu_113
    del squeeze_343
    del unsqueeze_1838
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf882 = aten.convolution_backward(buf881, convolution_211, primals_447, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf881
    del convolution_211
    del primals_447
    buf883 = buf882[0]
    buf884 = buf882[1]
    del buf882
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf885 = aten.convolution_backward(buf883, relu_102, primals_446, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_446
    buf886 = buf885[0]
    buf887 = buf885[1]
    del buf885
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf888 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf867, (8, 432, 21, 21), (952560, 1, 45360, 2160), 1296), add_554, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_261)
    buf889 = buf888
    del buf888
    buf890 = buf879; del buf879  # reuse
    buf891 = empty((432, ), device='cpu', dtype=torch.float32)
    buf892 = empty((432, ), device='cpu', dtype=torch.float32)
    buf893 = buf883; del buf883  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_94(c_void_p(buf867.data_ptr()), c_void_p(convolution_210.data_ptr()), c_void_p(unsqueeze_1850.data_ptr()), c_void_p(squeeze_340.data_ptr()), c_void_p(primals_444.data_ptr()), c_void_p(buf890.data_ptr()), c_void_p(buf891.data_ptr()), c_void_p(buf892.data_ptr()), c_void_p(buf893.data_ptr()))
    del convolution_210
    del primals_444
    del squeeze_340
    del unsqueeze_1850
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf894 = aten.convolution_backward(buf893, convolution_209, primals_443, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf893
    del convolution_209
    del primals_443
    buf895 = buf894[0]
    buf896 = buf894[1]
    del buf894
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf897 = aten.convolution_backward(buf895, relu_111, primals_442, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf895
    del primals_442
    buf898 = buf897[0]
    buf899 = buf897[1]
    del buf897
    buf900 = buf891; del buf891  # reuse
    buf901 = empty((432, ), device='cpu', dtype=torch.float32)
    buf902 = empty((432, ), device='cpu', dtype=torch.float32)
    buf903 = buf898; del buf898  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_95(c_void_p(buf903.data_ptr()), c_void_p(relu_111.data_ptr()), c_void_p(convolution_208.data_ptr()), c_void_p(unsqueeze_1862.data_ptr()), c_void_p(squeeze_337.data_ptr()), c_void_p(primals_440.data_ptr()), c_void_p(buf900.data_ptr()), c_void_p(buf901.data_ptr()), c_void_p(buf902.data_ptr()))
    del convolution_208
    del primals_440
    del relu_111
    del squeeze_337
    del unsqueeze_1862
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf904 = aten.convolution_backward(buf903, convolution_207, primals_439, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_207
    del primals_439
    buf905 = buf904[0]
    buf906 = buf904[1]
    del buf904
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf907 = aten.convolution_backward(buf905, relu_110, primals_438, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_438
    buf908 = buf907[0]
    buf909 = buf907[1]
    del buf907
    buf910 = buf901; del buf901  # reuse
    buf911 = empty((432, ), device='cpu', dtype=torch.float32)
    buf930 = empty((432, ), device='cpu', dtype=torch.float32)
    buf912 = buf905; del buf905  # reuse
    buf931 = buf903; del buf903  # reuse
    buf913 = buf911; del buf911  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_96(c_void_p(buf913.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(relu_110.data_ptr()), c_void_p(buf908.data_ptr()), c_void_p(convolution_206.data_ptr()), c_void_p(unsqueeze_1874.data_ptr()), c_void_p(convolution_202.data_ptr()), c_void_p(unsqueeze_1898.data_ptr()), c_void_p(squeeze_334.data_ptr()), c_void_p(primals_436.data_ptr()), c_void_p(squeeze_328.data_ptr()), c_void_p(primals_428.data_ptr()), c_void_p(buf910.data_ptr()), c_void_p(buf930.data_ptr()), c_void_p(buf912.data_ptr()), c_void_p(buf931.data_ptr()))
    del buf908
    del convolution_202
    del convolution_206
    del primals_428
    del primals_436
    del relu_110
    del squeeze_334
    del unsqueeze_1874
    del unsqueeze_1898
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf914 = aten.convolution_backward(buf912, convolution_205, primals_435, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf912
    del convolution_205
    del primals_435
    buf915 = buf914[0]
    buf916 = buf914[1]
    del buf914
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf917 = aten.convolution_backward(buf915, relu_109, primals_434, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf915
    del primals_434
    buf918 = buf917[0]
    buf919 = buf917[1]
    del buf917
    buf920 = empty((432, ), device='cpu', dtype=torch.float32)
    buf921 = empty((432, ), device='cpu', dtype=torch.float32)
    buf922 = empty((432, ), device='cpu', dtype=torch.float32)
    buf923 = buf918; del buf918  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_97(c_void_p(buf923.data_ptr()), c_void_p(relu_109.data_ptr()), c_void_p(convolution_204.data_ptr()), c_void_p(unsqueeze_1886.data_ptr()), c_void_p(squeeze_331.data_ptr()), c_void_p(primals_432.data_ptr()), c_void_p(buf920.data_ptr()), c_void_p(buf921.data_ptr()), c_void_p(buf922.data_ptr()))
    del convolution_204
    del primals_432
    del relu_109
    del squeeze_331
    del unsqueeze_1886
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf924 = aten.convolution_backward(buf923, convolution_203, primals_431, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf923
    del convolution_203
    del primals_431
    buf925 = buf924[0]
    buf926 = buf924[1]
    del buf924
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf927 = aten.convolution_backward(buf925, relu_104, primals_430, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf925
    del primals_430
    buf928 = buf927[0]
    buf929 = buf927[1]
    del buf927
    buf932 = buf930; del buf930  # reuse
    cpp_fused_native_batch_norm_backward_98(c_void_p(buf932.data_ptr()), c_void_p(squeeze_328.data_ptr()))
    del squeeze_328
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf933 = aten.convolution_backward(buf931, convolution_201, primals_427, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf931
    del convolution_201
    del primals_427
    buf934 = buf933[0]
    buf935 = buf933[1]
    del buf933
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf936 = aten.convolution_backward(buf934, relu_107, primals_426, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf934
    del primals_426
    buf937 = buf936[0]
    buf938 = buf936[1]
    del buf936
    buf939 = buf921; del buf921  # reuse
    buf940 = empty((432, ), device='cpu', dtype=torch.float32)
    buf941 = empty((432, ), device='cpu', dtype=torch.float32)
    buf942 = buf937; del buf937  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_99(c_void_p(buf942.data_ptr()), c_void_p(relu_107.data_ptr()), c_void_p(convolution_200.data_ptr()), c_void_p(unsqueeze_1910.data_ptr()), c_void_p(squeeze_325.data_ptr()), c_void_p(primals_424.data_ptr()), c_void_p(buf939.data_ptr()), c_void_p(buf940.data_ptr()), c_void_p(buf941.data_ptr()))
    del convolution_200
    del primals_424
    del relu_107
    del squeeze_325
    del unsqueeze_1910
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf943 = aten.convolution_backward(buf942, convolution_199, primals_423, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf942
    del convolution_199
    del primals_423
    buf944 = buf943[0]
    buf945 = buf943[1]
    del buf943
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf946 = aten.convolution_backward(buf944, relu_104, primals_422, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_422
    buf947 = buf946[0]
    buf948 = buf946[1]
    del buf946
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf949 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf867, (8, 432, 21, 21), (952560, 1, 45360, 2160), 432), add_554, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_261)
    del add_554
    del getitem_261
    buf950 = buf949
    del buf949
    buf951 = buf940; del buf940  # reuse
    buf952 = empty((432, ), device='cpu', dtype=torch.float32)
    buf953 = empty((432, ), device='cpu', dtype=torch.float32)
    buf954 = buf944; del buf944  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_100(c_void_p(buf867.data_ptr()), c_void_p(convolution_198.data_ptr()), c_void_p(unsqueeze_1922.data_ptr()), c_void_p(squeeze_322.data_ptr()), c_void_p(primals_420.data_ptr()), c_void_p(buf951.data_ptr()), c_void_p(buf952.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(buf954.data_ptr()))
    del convolution_198
    del primals_420
    del squeeze_322
    del unsqueeze_1922
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf955 = aten.convolution_backward(buf954, convolution_197, primals_419, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf954
    del convolution_197
    del primals_419
    buf956 = buf955[0]
    buf957 = buf955[1]
    del buf955
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf958 = aten.convolution_backward(buf956, relu_105, primals_418, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf956
    del primals_418
    buf959 = buf958[0]
    buf960 = buf958[1]
    del buf958
    buf961 = buf952; del buf952  # reuse
    buf962 = empty((432, ), device='cpu', dtype=torch.float32)
    buf963 = empty((432, ), device='cpu', dtype=torch.float32)
    buf964 = buf959; del buf959  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101(c_void_p(buf964.data_ptr()), c_void_p(relu_105.data_ptr()), c_void_p(convolution_196.data_ptr()), c_void_p(unsqueeze_1934.data_ptr()), c_void_p(squeeze_319.data_ptr()), c_void_p(primals_416.data_ptr()), c_void_p(buf961.data_ptr()), c_void_p(buf962.data_ptr()), c_void_p(buf963.data_ptr()))
    del convolution_196
    del primals_416
    del relu_105
    del squeeze_319
    del unsqueeze_1934
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf965 = aten.convolution_backward(buf964, convolution_195, primals_415, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf964
    del convolution_195
    del primals_415
    buf966 = buf965[0]
    buf967 = buf965[1]
    del buf965
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf968 = aten.convolution_backward(buf966, relu_104, primals_414, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf966
    del primals_414
    buf969 = buf968[0]
    buf970 = buf968[1]
    del buf968
    buf971 = buf889; del buf889  # reuse
    cpp_fused_add_threshold_backward_102(c_void_p(buf971.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(relu_104.data_ptr()), c_void_p(buf928.data_ptr()), c_void_p(buf947.data_ptr()), c_void_p(buf950.data_ptr()), c_void_p(buf969.data_ptr()))
    del buf928
    del buf947
    del buf950
    del relu_104
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf972 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf867, (8, 432, 21, 21), (952560, 1, 45360, 2160), 0), add_549, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_255)
    del add_549
    del getitem_255
    buf973 = buf972
    del buf972
    buf974 = buf962; del buf962  # reuse
    buf975 = empty((432, ), device='cpu', dtype=torch.float32)
    buf976 = empty((432, ), device='cpu', dtype=torch.float32)
    buf977 = buf969; del buf969  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_103(c_void_p(buf867.data_ptr()), c_void_p(convolution_194.data_ptr()), c_void_p(unsqueeze_1946.data_ptr()), c_void_p(squeeze_316.data_ptr()), c_void_p(primals_412.data_ptr()), c_void_p(buf974.data_ptr()), c_void_p(buf975.data_ptr()), c_void_p(buf976.data_ptr()), c_void_p(buf977.data_ptr()))
    del buf867
    del convolution_194
    del primals_412
    del squeeze_316
    del unsqueeze_1946
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf978 = aten.convolution_backward(buf977, convolution_193, primals_411, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf977
    del convolution_193
    del primals_411
    buf979 = buf978[0]
    buf980 = buf978[1]
    del buf978
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf981 = aten.convolution_backward(buf979, relu_103, primals_410, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf979
    del primals_410
    buf982 = buf981[0]
    buf983 = buf981[1]
    del buf981
    buf984 = buf975; del buf975  # reuse
    buf985 = empty((432, ), device='cpu', dtype=torch.float32)
    buf986 = empty((432, ), device='cpu', dtype=torch.float32)
    buf987 = buf982; del buf982  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_104(c_void_p(buf987.data_ptr()), c_void_p(relu_103.data_ptr()), c_void_p(convolution_192.data_ptr()), c_void_p(unsqueeze_1958.data_ptr()), c_void_p(squeeze_313.data_ptr()), c_void_p(primals_408.data_ptr()), c_void_p(buf984.data_ptr()), c_void_p(buf985.data_ptr()), c_void_p(buf986.data_ptr()))
    del convolution_192
    del primals_408
    del relu_103
    del squeeze_313
    del unsqueeze_1958
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf988 = aten.convolution_backward(buf987, convolution_191, primals_407, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf987
    del convolution_191
    del primals_407
    buf989 = buf988[0]
    buf990 = buf988[1]
    del buf988
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf991 = aten.convolution_backward(buf989, relu_102, primals_406, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf989
    del primals_406
    buf992 = buf991[0]
    buf993 = buf991[1]
    del buf991
    buf994 = buf985; del buf985  # reuse
    buf995 = empty((432, ), device='cpu', dtype=torch.float32)
    buf996 = empty((432, ), device='cpu', dtype=torch.float32)
    buf997 = buf971; del buf971  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_105(c_void_p(buf997.data_ptr()), c_void_p(convolution_190.data_ptr()), c_void_p(unsqueeze_1970.data_ptr()), c_void_p(squeeze_310.data_ptr()), c_void_p(primals_404.data_ptr()), c_void_p(buf994.data_ptr()), c_void_p(buf995.data_ptr()), c_void_p(buf996.data_ptr()))
    del convolution_190
    del primals_404
    del squeeze_310
    del unsqueeze_1970
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf998 = aten.convolution_backward(buf997, relu_101, primals_403, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf997
    del primals_403
    buf999 = buf998[0]
    buf1000 = buf998[1]
    del buf998
    buf1001 = buf995; del buf995  # reuse
    buf1002 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1003 = buf886; del buf886  # reuse
    buf1004 = buf1002; del buf1002  # reuse
    buf1005 = empty_strided((8, 216, 21, 21), (95256, 1, 4536, 216), device='cpu', dtype=torch.float32)
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_106(c_void_p(buf1003.data_ptr()), c_void_p(buf1004.data_ptr()), c_void_p(relu_102.data_ptr()), c_void_p(buf973.data_ptr()), c_void_p(buf992.data_ptr()), c_void_p(cat_9.data_ptr()), c_void_p(unsqueeze_1982.data_ptr()), c_void_p(squeeze_307.data_ptr()), c_void_p(primals_401.data_ptr()), c_void_p(buf1001.data_ptr()), c_void_p(buf1005.data_ptr()))
    del buf973
    del cat_9
    del relu_102
    del unsqueeze_1982
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1006 = aten.convolution_backward(buf1005, avg_pool2d_5, primals_400, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d_5
    del primals_400
    buf1007 = buf1006[0]
    buf1008 = buf1006[1]
    del buf1006
    buf1009 = buf1005; del buf1005  # reuse
    cpp_fused_convolution_backward_107(c_void_p(buf1003.data_ptr()), c_void_p(squeeze_307.data_ptr()), c_void_p(primals_401.data_ptr()), c_void_p(buf1009.data_ptr()))
    del primals_401
    del squeeze_307
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1010 = aten.convolution_backward(buf1009, avg_pool2d_4, primals_399, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d_4
    del buf1009
    del primals_399
    buf1011 = buf1010[0]
    buf1012 = buf1010[1]
    del buf1010
    buf1013 = empty((8, 1080, 42, 42), device='cpu', dtype=torch.float32)
    buf1014 = buf865; del buf865  # reuse
    buf1015 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1016 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1022 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1017 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1018 = buf1003; del buf1003  # reuse
    buf1024 = buf992; del buf992  # reuse
    cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_108(c_void_p(buf1014.data_ptr()), c_void_p(buf1007.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(relu_101.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(convolution_187.data_ptr()), c_void_p(unsqueeze_1994.data_ptr()), c_void_p(convolution_186.data_ptr()), c_void_p(unsqueeze_2006.data_ptr()), c_void_p(squeeze_304.data_ptr()), c_void_p(primals_397.data_ptr()), c_void_p(squeeze_301.data_ptr()), c_void_p(primals_395.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(buf1015.data_ptr()), c_void_p(buf1016.data_ptr()), c_void_p(buf1022.data_ptr()), c_void_p(buf1017.data_ptr()), c_void_p(buf1018.data_ptr()), c_void_p(buf1024.data_ptr()))
    del buf1007
    del buf1011
    del buf999
    del convolution_186
    del convolution_187
    del primals_395
    del primals_397
    del relu_101
    del squeeze_304
    del unsqueeze_1994
    del unsqueeze_2006
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1019 = aten.convolution_backward(buf1018, constant_pad_nd_28, primals_20, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1018
    del constant_pad_nd_28
    del primals_20
    buf1020 = buf1019[0]
    buf1021 = buf1019[1]
    del buf1019
    buf1023 = buf1022; del buf1022  # reuse
    cpp_fused_native_batch_norm_backward_109(c_void_p(buf1023.data_ptr()), c_void_p(squeeze_301.data_ptr()))
    del squeeze_301
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1025 = aten.convolution_backward(buf1024, convolution_185, primals_394, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1024
    del convolution_185
    del primals_394
    buf1026 = buf1025[0]
    buf1027 = buf1025[1]
    del buf1025
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1028 = aten.convolution_backward(buf1026, relu_98, primals_393, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf1026
    del primals_393
    buf1029 = buf1028[0]
    buf1030 = buf1028[1]
    del buf1028
    buf1031 = buf1016; del buf1016  # reuse
    buf1032 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1033 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1034 = buf1029; del buf1029  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_110(c_void_p(buf1034.data_ptr()), c_void_p(relu_98.data_ptr()), c_void_p(convolution_184.data_ptr()), c_void_p(unsqueeze_2018.data_ptr()), c_void_p(squeeze_298.data_ptr()), c_void_p(primals_391.data_ptr()), c_void_p(buf1031.data_ptr()), c_void_p(buf1032.data_ptr()), c_void_p(buf1033.data_ptr()))
    del convolution_184
    del primals_391
    del relu_98
    del squeeze_298
    del unsqueeze_2018
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1035 = aten.convolution_backward(buf1034, convolution_183, primals_390, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1034
    del convolution_183
    del primals_390
    buf1036 = buf1035[0]
    buf1037 = buf1035[1]
    del buf1035
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1038 = aten.convolution_backward(buf1036, constant_pad_nd_27, primals_19, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 432, [True, True, False])
    del constant_pad_nd_27
    del primals_19
    buf1039 = buf1038[0]
    buf1040 = buf1038[1]
    del buf1038
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1041 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1014, (8, 432, 21, 21), (952560, 1, 45360, 2160), 1296), constant_pad_nd_23, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_225)
    buf1042 = buf1041
    del buf1041
    buf1043 = buf1032; del buf1032  # reuse
    buf1044 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1045 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1046 = buf1036; del buf1036  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_111(c_void_p(buf1014.data_ptr()), c_void_p(convolution_182.data_ptr()), c_void_p(unsqueeze_2030.data_ptr()), c_void_p(squeeze_295.data_ptr()), c_void_p(primals_388.data_ptr()), c_void_p(buf1043.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(buf1045.data_ptr()), c_void_p(buf1046.data_ptr()))
    del convolution_182
    del primals_388
    del squeeze_295
    del unsqueeze_2030
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1047 = aten.convolution_backward(buf1046, convolution_181, primals_387, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1046
    del convolution_181
    del primals_387
    buf1048 = buf1047[0]
    buf1049 = buf1047[1]
    del buf1047
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1050 = aten.convolution_backward(buf1048, relu_96, primals_386, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf1048
    del primals_386
    buf1051 = buf1050[0]
    buf1052 = buf1050[1]
    del buf1050
    buf1053 = buf1044; del buf1044  # reuse
    buf1054 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1055 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1056 = buf1051; del buf1051  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_112(c_void_p(buf1056.data_ptr()), c_void_p(relu_96.data_ptr()), c_void_p(convolution_180.data_ptr()), c_void_p(unsqueeze_2042.data_ptr()), c_void_p(squeeze_292.data_ptr()), c_void_p(primals_384.data_ptr()), c_void_p(buf1053.data_ptr()), c_void_p(buf1054.data_ptr()), c_void_p(buf1055.data_ptr()))
    del convolution_180
    del primals_384
    del relu_96
    del squeeze_292
    del unsqueeze_2042
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1057 = aten.convolution_backward(buf1056, convolution_179, primals_383, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_179
    del primals_383
    buf1058 = buf1057[0]
    buf1059 = buf1057[1]
    del buf1057
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1060 = aten.convolution_backward(buf1058, relu_95, primals_382, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del primals_382
    buf1061 = buf1060[0]
    buf1062 = buf1060[1]
    del buf1060
    buf1063 = buf1054; del buf1054  # reuse
    buf1064 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1083 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1065 = buf1058; del buf1058  # reuse
    buf1084 = buf1056; del buf1056  # reuse
    buf1066 = buf1064; del buf1064  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_113(c_void_p(buf1066.data_ptr()), c_void_p(buf1014.data_ptr()), c_void_p(relu_95.data_ptr()), c_void_p(buf1061.data_ptr()), c_void_p(convolution_178.data_ptr()), c_void_p(unsqueeze_2054.data_ptr()), c_void_p(convolution_174.data_ptr()), c_void_p(unsqueeze_2078.data_ptr()), c_void_p(squeeze_289.data_ptr()), c_void_p(primals_380.data_ptr()), c_void_p(squeeze_283.data_ptr()), c_void_p(primals_373.data_ptr()), c_void_p(buf1063.data_ptr()), c_void_p(buf1083.data_ptr()), c_void_p(buf1065.data_ptr()), c_void_p(buf1084.data_ptr()))
    del buf1061
    del convolution_174
    del convolution_178
    del primals_373
    del primals_380
    del relu_95
    del squeeze_289
    del unsqueeze_2054
    del unsqueeze_2078
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1067 = aten.convolution_backward(buf1065, convolution_177, primals_379, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1065
    del convolution_177
    del primals_379
    buf1068 = buf1067[0]
    buf1069 = buf1067[1]
    del buf1067
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1070 = aten.convolution_backward(buf1068, relu_94, primals_378, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf1068
    del primals_378
    buf1071 = buf1070[0]
    buf1072 = buf1070[1]
    del buf1070
    buf1073 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1074 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1075 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1076 = buf1071; del buf1071  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_114(c_void_p(buf1076.data_ptr()), c_void_p(relu_94.data_ptr()), c_void_p(convolution_176.data_ptr()), c_void_p(unsqueeze_2066.data_ptr()), c_void_p(squeeze_286.data_ptr()), c_void_p(primals_376.data_ptr()), c_void_p(buf1073.data_ptr()), c_void_p(buf1074.data_ptr()), c_void_p(buf1075.data_ptr()))
    del convolution_176
    del primals_376
    del relu_94
    del squeeze_286
    del unsqueeze_2066
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1077 = aten.convolution_backward(buf1076, convolution_175, primals_375, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1076
    del convolution_175
    del primals_375
    buf1078 = buf1077[0]
    buf1079 = buf1077[1]
    del buf1077
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1080 = aten.convolution_backward(buf1078, constant_pad_nd_25, primals_18, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf1078
    del constant_pad_nd_25
    del primals_18
    buf1081 = buf1080[0]
    buf1082 = buf1080[1]
    del buf1080
    buf1085 = buf1083; del buf1083  # reuse
    cpp_fused_native_batch_norm_backward_115(c_void_p(buf1085.data_ptr()), c_void_p(squeeze_283.data_ptr()))
    del squeeze_283
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1086 = aten.convolution_backward(buf1084, convolution_173, primals_372, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1084
    del convolution_173
    del primals_372
    buf1087 = buf1086[0]
    buf1088 = buf1086[1]
    del buf1086
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1089 = aten.convolution_backward(buf1087, relu_92, primals_371, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf1087
    del primals_371
    buf1090 = buf1089[0]
    buf1091 = buf1089[1]
    del buf1089
    buf1092 = buf1074; del buf1074  # reuse
    buf1093 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1094 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1095 = buf1090; del buf1090  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_116(c_void_p(buf1095.data_ptr()), c_void_p(relu_92.data_ptr()), c_void_p(convolution_172.data_ptr()), c_void_p(unsqueeze_2090.data_ptr()), c_void_p(squeeze_280.data_ptr()), c_void_p(primals_369.data_ptr()), c_void_p(buf1092.data_ptr()), c_void_p(buf1093.data_ptr()), c_void_p(buf1094.data_ptr()))
    del convolution_172
    del primals_369
    del relu_92
    del squeeze_280
    del unsqueeze_2090
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1096 = aten.convolution_backward(buf1095, convolution_171, primals_368, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1095
    del convolution_171
    del primals_368
    buf1097 = buf1096[0]
    buf1098 = buf1096[1]
    del buf1096
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1099 = aten.convolution_backward(buf1097, constant_pad_nd_24, primals_17, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 432, [True, True, False])
    del constant_pad_nd_24
    del primals_17
    buf1100 = buf1099[0]
    buf1101 = buf1099[1]
    del buf1099
    buf1102 = buf1020; del buf1020  # reuse
    cpp_fused_add_constant_pad_nd_threshold_backward_117(c_void_p(buf1102.data_ptr()), c_void_p(le_100.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1081.data_ptr()), c_void_p(buf1100.data_ptr()))
    del buf1042
    del buf1081
    del buf1100
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1103 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1014, (8, 432, 21, 21), (952560, 1, 45360, 2160), 432), constant_pad_nd_23, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_225)
    del constant_pad_nd_23
    del getitem_225
    buf1104 = buf1103
    del buf1103
    buf1105 = buf1093; del buf1093  # reuse
    buf1106 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1107 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1108 = buf1097; del buf1097  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_118(c_void_p(buf1014.data_ptr()), c_void_p(convolution_170.data_ptr()), c_void_p(unsqueeze_2102.data_ptr()), c_void_p(squeeze_277.data_ptr()), c_void_p(primals_366.data_ptr()), c_void_p(buf1105.data_ptr()), c_void_p(buf1106.data_ptr()), c_void_p(buf1107.data_ptr()), c_void_p(buf1108.data_ptr()))
    del convolution_170
    del primals_366
    del squeeze_277
    del unsqueeze_2102
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1109 = aten.convolution_backward(buf1108, convolution_169, primals_365, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1108
    del convolution_169
    del primals_365
    buf1110 = buf1109[0]
    buf1111 = buf1109[1]
    del buf1109
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1112 = aten.convolution_backward(buf1110, relu_90, primals_364, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf1110
    del primals_364
    buf1113 = buf1112[0]
    buf1114 = buf1112[1]
    del buf1112
    buf1115 = buf1106; del buf1106  # reuse
    buf1116 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1117 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1118 = buf1113; del buf1113  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_119(c_void_p(buf1118.data_ptr()), c_void_p(relu_90.data_ptr()), c_void_p(convolution_168.data_ptr()), c_void_p(unsqueeze_2114.data_ptr()), c_void_p(squeeze_274.data_ptr()), c_void_p(primals_362.data_ptr()), c_void_p(buf1115.data_ptr()), c_void_p(buf1116.data_ptr()), c_void_p(buf1117.data_ptr()))
    del convolution_168
    del primals_362
    del relu_90
    del squeeze_274
    del unsqueeze_2114
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1119 = aten.convolution_backward(buf1118, convolution_167, primals_361, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1118
    del convolution_167
    del primals_361
    buf1120 = buf1119[0]
    buf1121 = buf1119[1]
    del buf1119
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1122 = aten.convolution_backward(buf1120, constant_pad_nd_22, primals_16, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 432, [True, True, False])
    del constant_pad_nd_22
    del primals_16
    buf1123 = buf1122[0]
    buf1124 = buf1122[1]
    del buf1122
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1125 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1014, (8, 432, 21, 21), (952560, 1, 45360, 2160), 0), constant_pad_nd_21, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_219)
    del constant_pad_nd_21
    del getitem_219
    buf1126 = buf1125
    del buf1125
    buf1127 = buf1116; del buf1116  # reuse
    buf1128 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1129 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1130 = buf1120; del buf1120  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_120(c_void_p(buf1014.data_ptr()), c_void_p(convolution_166.data_ptr()), c_void_p(unsqueeze_2126.data_ptr()), c_void_p(squeeze_271.data_ptr()), c_void_p(primals_359.data_ptr()), c_void_p(buf1127.data_ptr()), c_void_p(buf1128.data_ptr()), c_void_p(buf1129.data_ptr()), c_void_p(buf1130.data_ptr()))
    del buf1014
    del convolution_166
    del primals_359
    del squeeze_271
    del unsqueeze_2126
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1131 = aten.convolution_backward(buf1130, convolution_165, primals_358, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1130
    del convolution_165
    del primals_358
    buf1132 = buf1131[0]
    buf1133 = buf1131[1]
    del buf1131
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1134 = aten.convolution_backward(buf1132, relu_88, primals_357, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 432, [True, True, False])
    del buf1132
    del primals_357
    buf1135 = buf1134[0]
    buf1136 = buf1134[1]
    del buf1134
    buf1137 = buf1128; del buf1128  # reuse
    buf1138 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1139 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1140 = buf1135; del buf1135  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_121(c_void_p(buf1140.data_ptr()), c_void_p(relu_88.data_ptr()), c_void_p(convolution_164.data_ptr()), c_void_p(unsqueeze_2138.data_ptr()), c_void_p(squeeze_268.data_ptr()), c_void_p(primals_355.data_ptr()), c_void_p(buf1137.data_ptr()), c_void_p(buf1138.data_ptr()), c_void_p(buf1139.data_ptr()))
    del convolution_164
    del primals_355
    del relu_88
    del squeeze_268
    del unsqueeze_2138
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1141 = aten.convolution_backward(buf1140, convolution_163, primals_354, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_163
    del primals_354
    buf1142 = buf1141[0]
    buf1143 = buf1141[1]
    del buf1141
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1144 = aten.convolution_backward(buf1142, constant_pad_nd_20, primals_15, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 432, [True, True, False])
    del constant_pad_nd_20
    del primals_15
    buf1145 = buf1144[0]
    buf1146 = buf1144[1]
    del buf1144
    buf1147 = buf1138; del buf1138  # reuse
    buf1148 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1149 = buf1102; del buf1102  # reuse
    buf1150 = buf1148; del buf1148  # reuse
    buf1151 = buf1149; del buf1149  # reuse
    cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_122(c_void_p(buf1151.data_ptr()), c_void_p(buf1150.data_ptr()), c_void_p(buf1104.data_ptr()), c_void_p(le_100.data_ptr()), c_void_p(buf1123.data_ptr()), c_void_p(convolution_162.data_ptr()), c_void_p(unsqueeze_2150.data_ptr()), c_void_p(squeeze_265.data_ptr()), c_void_p(primals_352.data_ptr()), c_void_p(buf1147.data_ptr()))
    del buf1104
    del buf1123
    del convolution_162
    del le_100
    del primals_352
    del squeeze_265
    del unsqueeze_2150
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1152 = aten.convolution_backward(buf1151, relu_86, primals_351, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_351
    buf1153 = buf1152[0]
    buf1154 = buf1152[1]
    del buf1152
    buf1155 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1156 = empty((432, ), device='cpu', dtype=torch.float32)
    buf1157 = buf1151; del buf1151  # reuse
    buf1158 = buf1156; del buf1156  # reuse
    buf1159 = buf1157; del buf1157  # reuse
    cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_123(c_void_p(buf1158.data_ptr()), c_void_p(buf1159.data_ptr()), c_void_p(le_102.data_ptr()), c_void_p(buf1039.data_ptr()), c_void_p(buf1126.data_ptr()), c_void_p(buf1145.data_ptr()), c_void_p(convolution_161.data_ptr()), c_void_p(unsqueeze_2162.data_ptr()), c_void_p(squeeze_262.data_ptr()), c_void_p(primals_349.data_ptr()), c_void_p(buf1155.data_ptr()))
    del buf1039
    del buf1126
    del buf1145
    del convolution_161
    del le_102
    del primals_349
    del squeeze_262
    del unsqueeze_2162
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1160 = aten.convolution_backward(buf1159, relu_72, primals_348, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1159
    del primals_348
    buf1161 = buf1160[0]
    buf1162 = buf1160[1]
    del buf1160
    buf1163 = buf1153; del buf1153  # reuse
    buf1164 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1165 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1166 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1167 = reinterpret_tensor(buf579, (8, 216, 42, 42), (381024, 1, 9072, 216), 0); del buf579  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_124(c_void_p(buf1163.data_ptr()), c_void_p(relu_86.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(convolution_160.data_ptr()), c_void_p(unsqueeze_2174.data_ptr()), c_void_p(squeeze_259.data_ptr()), c_void_p(primals_346.data_ptr()), c_void_p(buf1164.data_ptr()), c_void_p(buf1165.data_ptr()), c_void_p(buf1166.data_ptr()), c_void_p(buf1167.data_ptr()))
    del buf1013
    del convolution_160
    del primals_346
    del relu_86
    del squeeze_259
    del unsqueeze_2174
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1168 = aten.convolution_backward(buf1167, convolution_159, primals_345, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1167
    del convolution_159
    del primals_345
    buf1169 = buf1168[0]
    buf1170 = buf1168[1]
    del buf1168
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1171 = aten.convolution_backward(buf1169, relu_84, primals_344, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1169
    del primals_344
    buf1172 = buf1171[0]
    buf1173 = buf1171[1]
    del buf1171
    buf1174 = buf1165; del buf1165  # reuse
    buf1175 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1176 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1177 = buf1172; del buf1172  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_125(c_void_p(buf1177.data_ptr()), c_void_p(relu_84.data_ptr()), c_void_p(convolution_158.data_ptr()), c_void_p(unsqueeze_2186.data_ptr()), c_void_p(squeeze_256.data_ptr()), c_void_p(primals_342.data_ptr()), c_void_p(buf1174.data_ptr()), c_void_p(buf1175.data_ptr()), c_void_p(buf1176.data_ptr()))
    del convolution_158
    del primals_342
    del relu_84
    del squeeze_256
    del unsqueeze_2186
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1178 = aten.convolution_backward(buf1177, convolution_157, primals_341, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1177
    del convolution_157
    del primals_341
    buf1179 = buf1178[0]
    buf1180 = buf1178[1]
    del buf1178
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1181 = aten.convolution_backward(buf1179, relu_73, primals_340, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_340
    buf1182 = buf1181[0]
    buf1183 = buf1181[1]
    del buf1181
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1184 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1163, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 648), add_399, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_191)
    buf1185 = buf1184
    del buf1184
    buf1186 = buf1175; del buf1175  # reuse
    buf1187 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1188 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1189 = buf1179; del buf1179  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_126(c_void_p(buf1163.data_ptr()), c_void_p(convolution_156.data_ptr()), c_void_p(unsqueeze_2198.data_ptr()), c_void_p(squeeze_253.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(buf1186.data_ptr()), c_void_p(buf1187.data_ptr()), c_void_p(buf1188.data_ptr()), c_void_p(buf1189.data_ptr()))
    del convolution_156
    del primals_338
    del squeeze_253
    del unsqueeze_2198
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1190 = aten.convolution_backward(buf1189, convolution_155, primals_337, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1189
    del convolution_155
    del primals_337
    buf1191 = buf1190[0]
    buf1192 = buf1190[1]
    del buf1190
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1193 = aten.convolution_backward(buf1191, relu_82, primals_336, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1191
    del primals_336
    buf1194 = buf1193[0]
    buf1195 = buf1193[1]
    del buf1193
    buf1196 = buf1187; del buf1187  # reuse
    buf1197 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1198 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1199 = buf1194; del buf1194  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127(c_void_p(buf1199.data_ptr()), c_void_p(relu_82.data_ptr()), c_void_p(convolution_154.data_ptr()), c_void_p(unsqueeze_2210.data_ptr()), c_void_p(squeeze_250.data_ptr()), c_void_p(primals_334.data_ptr()), c_void_p(buf1196.data_ptr()), c_void_p(buf1197.data_ptr()), c_void_p(buf1198.data_ptr()))
    del convolution_154
    del primals_334
    del relu_82
    del squeeze_250
    del unsqueeze_2210
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1200 = aten.convolution_backward(buf1199, convolution_153, primals_333, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_153
    del primals_333
    buf1201 = buf1200[0]
    buf1202 = buf1200[1]
    del buf1200
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1203 = aten.convolution_backward(buf1201, relu_81, primals_332, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_332
    buf1204 = buf1203[0]
    buf1205 = buf1203[1]
    del buf1203
    buf1206 = buf1197; del buf1197  # reuse
    buf1207 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1226 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1208 = buf1201; del buf1201  # reuse
    buf1227 = buf1199; del buf1199  # reuse
    buf1209 = buf1207; del buf1207  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_128(c_void_p(buf1209.data_ptr()), c_void_p(buf1163.data_ptr()), c_void_p(relu_81.data_ptr()), c_void_p(buf1204.data_ptr()), c_void_p(convolution_152.data_ptr()), c_void_p(unsqueeze_2222.data_ptr()), c_void_p(convolution_148.data_ptr()), c_void_p(unsqueeze_2246.data_ptr()), c_void_p(squeeze_247.data_ptr()), c_void_p(primals_330.data_ptr()), c_void_p(squeeze_241.data_ptr()), c_void_p(primals_322.data_ptr()), c_void_p(buf1206.data_ptr()), c_void_p(buf1226.data_ptr()), c_void_p(buf1208.data_ptr()), c_void_p(buf1227.data_ptr()))
    del buf1204
    del convolution_148
    del convolution_152
    del primals_322
    del primals_330
    del relu_81
    del squeeze_247
    del unsqueeze_2222
    del unsqueeze_2246
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1210 = aten.convolution_backward(buf1208, convolution_151, primals_329, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1208
    del convolution_151
    del primals_329
    buf1211 = buf1210[0]
    buf1212 = buf1210[1]
    del buf1210
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1213 = aten.convolution_backward(buf1211, relu_80, primals_328, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1211
    del primals_328
    buf1214 = buf1213[0]
    buf1215 = buf1213[1]
    del buf1213
    buf1216 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1217 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1218 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1219 = buf1214; del buf1214  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_129(c_void_p(buf1219.data_ptr()), c_void_p(relu_80.data_ptr()), c_void_p(convolution_150.data_ptr()), c_void_p(unsqueeze_2234.data_ptr()), c_void_p(squeeze_244.data_ptr()), c_void_p(primals_326.data_ptr()), c_void_p(buf1216.data_ptr()), c_void_p(buf1217.data_ptr()), c_void_p(buf1218.data_ptr()))
    del convolution_150
    del primals_326
    del relu_80
    del squeeze_244
    del unsqueeze_2234
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1220 = aten.convolution_backward(buf1219, convolution_149, primals_325, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1219
    del convolution_149
    del primals_325
    buf1221 = buf1220[0]
    buf1222 = buf1220[1]
    del buf1220
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1223 = aten.convolution_backward(buf1221, relu_75, primals_324, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1221
    del primals_324
    buf1224 = buf1223[0]
    buf1225 = buf1223[1]
    del buf1223
    buf1228 = buf1226; del buf1226  # reuse
    cpp_fused_native_batch_norm_backward_130(c_void_p(buf1228.data_ptr()), c_void_p(squeeze_241.data_ptr()))
    del squeeze_241
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1229 = aten.convolution_backward(buf1227, convolution_147, primals_321, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1227
    del convolution_147
    del primals_321
    buf1230 = buf1229[0]
    buf1231 = buf1229[1]
    del buf1229
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1232 = aten.convolution_backward(buf1230, relu_78, primals_320, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1230
    del primals_320
    buf1233 = buf1232[0]
    buf1234 = buf1232[1]
    del buf1232
    buf1235 = buf1217; del buf1217  # reuse
    buf1236 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1237 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1238 = buf1233; del buf1233  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_131(c_void_p(buf1238.data_ptr()), c_void_p(relu_78.data_ptr()), c_void_p(convolution_146.data_ptr()), c_void_p(unsqueeze_2258.data_ptr()), c_void_p(squeeze_238.data_ptr()), c_void_p(primals_318.data_ptr()), c_void_p(buf1235.data_ptr()), c_void_p(buf1236.data_ptr()), c_void_p(buf1237.data_ptr()))
    del convolution_146
    del primals_318
    del relu_78
    del squeeze_238
    del unsqueeze_2258
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1239 = aten.convolution_backward(buf1238, convolution_145, primals_317, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1238
    del convolution_145
    del primals_317
    buf1240 = buf1239[0]
    buf1241 = buf1239[1]
    del buf1239
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1242 = aten.convolution_backward(buf1240, relu_75, primals_316, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_316
    buf1243 = buf1242[0]
    buf1244 = buf1242[1]
    del buf1242
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1245 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1163, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 216), add_399, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_191)
    del add_399
    del getitem_191
    buf1246 = buf1245
    del buf1245
    buf1247 = buf1236; del buf1236  # reuse
    buf1248 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1249 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1250 = buf1240; del buf1240  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_132(c_void_p(buf1163.data_ptr()), c_void_p(convolution_144.data_ptr()), c_void_p(unsqueeze_2270.data_ptr()), c_void_p(squeeze_235.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(buf1247.data_ptr()), c_void_p(buf1248.data_ptr()), c_void_p(buf1249.data_ptr()), c_void_p(buf1250.data_ptr()))
    del convolution_144
    del primals_314
    del squeeze_235
    del unsqueeze_2270
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1251 = aten.convolution_backward(buf1250, convolution_143, primals_313, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1250
    del convolution_143
    del primals_313
    buf1252 = buf1251[0]
    buf1253 = buf1251[1]
    del buf1251
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1254 = aten.convolution_backward(buf1252, relu_76, primals_312, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1252
    del primals_312
    buf1255 = buf1254[0]
    buf1256 = buf1254[1]
    del buf1254
    buf1257 = buf1248; del buf1248  # reuse
    buf1258 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1259 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1260 = buf1255; del buf1255  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_133(c_void_p(buf1260.data_ptr()), c_void_p(relu_76.data_ptr()), c_void_p(convolution_142.data_ptr()), c_void_p(unsqueeze_2282.data_ptr()), c_void_p(squeeze_232.data_ptr()), c_void_p(primals_310.data_ptr()), c_void_p(buf1257.data_ptr()), c_void_p(buf1258.data_ptr()), c_void_p(buf1259.data_ptr()))
    del convolution_142
    del primals_310
    del relu_76
    del squeeze_232
    del unsqueeze_2282
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1261 = aten.convolution_backward(buf1260, convolution_141, primals_309, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1260
    del convolution_141
    del primals_309
    buf1262 = buf1261[0]
    buf1263 = buf1261[1]
    del buf1261
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1264 = aten.convolution_backward(buf1262, relu_75, primals_308, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1262
    del primals_308
    buf1265 = buf1264[0]
    buf1266 = buf1264[1]
    del buf1264
    buf1267 = buf1185; del buf1185  # reuse
    cpp_fused_add_threshold_backward_134(c_void_p(buf1267.data_ptr()), c_void_p(buf1163.data_ptr()), c_void_p(relu_75.data_ptr()), c_void_p(buf1224.data_ptr()), c_void_p(buf1243.data_ptr()), c_void_p(buf1246.data_ptr()), c_void_p(buf1265.data_ptr()))
    del buf1224
    del buf1243
    del buf1246
    del relu_75
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1268 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1163, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 0), add_394, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_185)
    del add_394
    del getitem_185
    buf1269 = buf1268
    del buf1268
    buf1270 = buf1258; del buf1258  # reuse
    buf1271 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1272 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1273 = buf1265; del buf1265  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_135(c_void_p(buf1163.data_ptr()), c_void_p(convolution_140.data_ptr()), c_void_p(unsqueeze_2294.data_ptr()), c_void_p(squeeze_229.data_ptr()), c_void_p(primals_306.data_ptr()), c_void_p(buf1270.data_ptr()), c_void_p(buf1271.data_ptr()), c_void_p(buf1272.data_ptr()), c_void_p(buf1273.data_ptr()))
    del buf1163
    del convolution_140
    del primals_306
    del squeeze_229
    del unsqueeze_2294
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1274 = aten.convolution_backward(buf1273, convolution_139, primals_305, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1273
    del convolution_139
    del primals_305
    buf1275 = buf1274[0]
    buf1276 = buf1274[1]
    del buf1274
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1277 = aten.convolution_backward(buf1275, relu_74, primals_304, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1275
    del primals_304
    buf1278 = buf1277[0]
    buf1279 = buf1277[1]
    del buf1277
    buf1280 = buf1271; del buf1271  # reuse
    buf1281 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1282 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1283 = buf1278; del buf1278  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136(c_void_p(buf1283.data_ptr()), c_void_p(relu_74.data_ptr()), c_void_p(convolution_138.data_ptr()), c_void_p(unsqueeze_2306.data_ptr()), c_void_p(squeeze_226.data_ptr()), c_void_p(primals_302.data_ptr()), c_void_p(buf1280.data_ptr()), c_void_p(buf1281.data_ptr()), c_void_p(buf1282.data_ptr()))
    del convolution_138
    del primals_302
    del relu_74
    del squeeze_226
    del unsqueeze_2306
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1284 = aten.convolution_backward(buf1283, convolution_137, primals_301, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1283
    del convolution_137
    del primals_301
    buf1285 = buf1284[0]
    buf1286 = buf1284[1]
    del buf1284
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1287 = aten.convolution_backward(buf1285, relu_73, primals_300, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1285
    del primals_300
    buf1288 = buf1287[0]
    buf1289 = buf1287[1]
    del buf1287
    buf1290 = buf1281; del buf1281  # reuse
    buf1291 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1292 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1293 = buf1267; del buf1267  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_137(c_void_p(buf1293.data_ptr()), c_void_p(convolution_136.data_ptr()), c_void_p(unsqueeze_2318.data_ptr()), c_void_p(squeeze_223.data_ptr()), c_void_p(primals_298.data_ptr()), c_void_p(buf1290.data_ptr()), c_void_p(buf1291.data_ptr()), c_void_p(buf1292.data_ptr()))
    del convolution_136
    del primals_298
    del squeeze_223
    del unsqueeze_2318
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1294 = aten.convolution_backward(buf1293, relu_72, primals_297, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1293
    del primals_297
    buf1295 = buf1294[0]
    buf1296 = buf1294[1]
    del buf1294
    buf1297 = buf1291; del buf1291  # reuse
    buf1298 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1299 = buf1182; del buf1182  # reuse
    buf1301 = buf1299; del buf1299  # reuse
    buf1300 = buf1298; del buf1298  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_138(c_void_p(buf1301.data_ptr()), c_void_p(buf1300.data_ptr()), c_void_p(relu_73.data_ptr()), c_void_p(buf1269.data_ptr()), c_void_p(buf1288.data_ptr()), c_void_p(convolution_135.data_ptr()), c_void_p(unsqueeze_2330.data_ptr()), c_void_p(squeeze_220.data_ptr()), c_void_p(primals_295.data_ptr()), c_void_p(buf1297.data_ptr()))
    del buf1269
    del buf1288
    del convolution_135
    del primals_295
    del relu_73
    del squeeze_220
    del unsqueeze_2330
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1302 = aten.convolution_backward(buf1301, relu_58, primals_294, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_294
    buf1303 = buf1302[0]
    buf1304 = buf1302[1]
    del buf1302
    buf1305 = buf1161; del buf1161  # reuse
    buf1306 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1307 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1308 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1309 = buf1301; del buf1301  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_139(c_void_p(buf1305.data_ptr()), c_void_p(relu_72.data_ptr()), c_void_p(buf1295.data_ptr()), c_void_p(convolution_134.data_ptr()), c_void_p(unsqueeze_2342.data_ptr()), c_void_p(squeeze_217.data_ptr()), c_void_p(primals_292.data_ptr()), c_void_p(buf1306.data_ptr()), c_void_p(buf1307.data_ptr()), c_void_p(buf1308.data_ptr()), c_void_p(buf1309.data_ptr()))
    del buf1295
    del convolution_134
    del primals_292
    del relu_72
    del squeeze_217
    del unsqueeze_2342
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1310 = aten.convolution_backward(buf1309, convolution_133, primals_291, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1309
    del convolution_133
    del primals_291
    buf1311 = buf1310[0]
    buf1312 = buf1310[1]
    del buf1310
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1313 = aten.convolution_backward(buf1311, relu_70, primals_290, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1311
    del primals_290
    buf1314 = buf1313[0]
    buf1315 = buf1313[1]
    del buf1313
    buf1316 = buf1307; del buf1307  # reuse
    buf1317 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1318 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1319 = buf1314; del buf1314  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_140(c_void_p(buf1319.data_ptr()), c_void_p(relu_70.data_ptr()), c_void_p(convolution_132.data_ptr()), c_void_p(unsqueeze_2354.data_ptr()), c_void_p(squeeze_214.data_ptr()), c_void_p(primals_288.data_ptr()), c_void_p(buf1316.data_ptr()), c_void_p(buf1317.data_ptr()), c_void_p(buf1318.data_ptr()))
    del convolution_132
    del primals_288
    del relu_70
    del squeeze_214
    del unsqueeze_2354
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1320 = aten.convolution_backward(buf1319, convolution_131, primals_287, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1319
    del convolution_131
    del primals_287
    buf1321 = buf1320[0]
    buf1322 = buf1320[1]
    del buf1320
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1323 = aten.convolution_backward(buf1321, relu_59, primals_286, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_286
    buf1324 = buf1323[0]
    buf1325 = buf1323[1]
    del buf1323
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1326 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1305, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 648), add_324, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_157)
    buf1327 = buf1326
    del buf1326
    buf1328 = buf1317; del buf1317  # reuse
    buf1329 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1330 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1331 = buf1321; del buf1321  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_141(c_void_p(buf1305.data_ptr()), c_void_p(convolution_130.data_ptr()), c_void_p(unsqueeze_2366.data_ptr()), c_void_p(squeeze_211.data_ptr()), c_void_p(primals_284.data_ptr()), c_void_p(buf1328.data_ptr()), c_void_p(buf1329.data_ptr()), c_void_p(buf1330.data_ptr()), c_void_p(buf1331.data_ptr()))
    del convolution_130
    del primals_284
    del squeeze_211
    del unsqueeze_2366
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1332 = aten.convolution_backward(buf1331, convolution_129, primals_283, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1331
    del convolution_129
    del primals_283
    buf1333 = buf1332[0]
    buf1334 = buf1332[1]
    del buf1332
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1335 = aten.convolution_backward(buf1333, relu_68, primals_282, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1333
    del primals_282
    buf1336 = buf1335[0]
    buf1337 = buf1335[1]
    del buf1335
    buf1338 = buf1329; del buf1329  # reuse
    buf1339 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1340 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1341 = buf1336; del buf1336  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_142(c_void_p(buf1341.data_ptr()), c_void_p(relu_68.data_ptr()), c_void_p(convolution_128.data_ptr()), c_void_p(unsqueeze_2378.data_ptr()), c_void_p(squeeze_208.data_ptr()), c_void_p(primals_280.data_ptr()), c_void_p(buf1338.data_ptr()), c_void_p(buf1339.data_ptr()), c_void_p(buf1340.data_ptr()))
    del convolution_128
    del primals_280
    del relu_68
    del squeeze_208
    del unsqueeze_2378
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1342 = aten.convolution_backward(buf1341, convolution_127, primals_279, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_127
    del primals_279
    buf1343 = buf1342[0]
    buf1344 = buf1342[1]
    del buf1342
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1345 = aten.convolution_backward(buf1343, relu_67, primals_278, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_278
    buf1346 = buf1345[0]
    buf1347 = buf1345[1]
    del buf1345
    buf1348 = buf1339; del buf1339  # reuse
    buf1349 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1368 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1350 = buf1343; del buf1343  # reuse
    buf1369 = buf1341; del buf1341  # reuse
    buf1351 = buf1349; del buf1349  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_143(c_void_p(buf1351.data_ptr()), c_void_p(buf1305.data_ptr()), c_void_p(relu_67.data_ptr()), c_void_p(buf1346.data_ptr()), c_void_p(convolution_126.data_ptr()), c_void_p(unsqueeze_2390.data_ptr()), c_void_p(convolution_122.data_ptr()), c_void_p(unsqueeze_2414.data_ptr()), c_void_p(squeeze_205.data_ptr()), c_void_p(primals_276.data_ptr()), c_void_p(squeeze_199.data_ptr()), c_void_p(primals_268.data_ptr()), c_void_p(buf1348.data_ptr()), c_void_p(buf1368.data_ptr()), c_void_p(buf1350.data_ptr()), c_void_p(buf1369.data_ptr()))
    del buf1346
    del convolution_122
    del convolution_126
    del primals_268
    del primals_276
    del relu_67
    del squeeze_205
    del unsqueeze_2390
    del unsqueeze_2414
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1352 = aten.convolution_backward(buf1350, convolution_125, primals_275, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1350
    del convolution_125
    del primals_275
    buf1353 = buf1352[0]
    buf1354 = buf1352[1]
    del buf1352
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1355 = aten.convolution_backward(buf1353, relu_66, primals_274, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1353
    del primals_274
    buf1356 = buf1355[0]
    buf1357 = buf1355[1]
    del buf1355
    buf1358 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1359 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1360 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1361 = buf1356; del buf1356  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_144(c_void_p(buf1361.data_ptr()), c_void_p(relu_66.data_ptr()), c_void_p(convolution_124.data_ptr()), c_void_p(unsqueeze_2402.data_ptr()), c_void_p(squeeze_202.data_ptr()), c_void_p(primals_272.data_ptr()), c_void_p(buf1358.data_ptr()), c_void_p(buf1359.data_ptr()), c_void_p(buf1360.data_ptr()))
    del convolution_124
    del primals_272
    del relu_66
    del squeeze_202
    del unsqueeze_2402
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1362 = aten.convolution_backward(buf1361, convolution_123, primals_271, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1361
    del convolution_123
    del primals_271
    buf1363 = buf1362[0]
    buf1364 = buf1362[1]
    del buf1362
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1365 = aten.convolution_backward(buf1363, relu_61, primals_270, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1363
    del primals_270
    buf1366 = buf1365[0]
    buf1367 = buf1365[1]
    del buf1365
    buf1370 = buf1368; del buf1368  # reuse
    cpp_fused_native_batch_norm_backward_145(c_void_p(buf1370.data_ptr()), c_void_p(squeeze_199.data_ptr()))
    del squeeze_199
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1371 = aten.convolution_backward(buf1369, convolution_121, primals_267, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1369
    del convolution_121
    del primals_267
    buf1372 = buf1371[0]
    buf1373 = buf1371[1]
    del buf1371
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1374 = aten.convolution_backward(buf1372, relu_64, primals_266, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1372
    del primals_266
    buf1375 = buf1374[0]
    buf1376 = buf1374[1]
    del buf1374
    buf1377 = buf1359; del buf1359  # reuse
    buf1378 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1379 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1380 = buf1375; del buf1375  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_146(c_void_p(buf1380.data_ptr()), c_void_p(relu_64.data_ptr()), c_void_p(convolution_120.data_ptr()), c_void_p(unsqueeze_2426.data_ptr()), c_void_p(squeeze_196.data_ptr()), c_void_p(primals_264.data_ptr()), c_void_p(buf1377.data_ptr()), c_void_p(buf1378.data_ptr()), c_void_p(buf1379.data_ptr()))
    del convolution_120
    del primals_264
    del relu_64
    del squeeze_196
    del unsqueeze_2426
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1381 = aten.convolution_backward(buf1380, convolution_119, primals_263, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1380
    del convolution_119
    del primals_263
    buf1382 = buf1381[0]
    buf1383 = buf1381[1]
    del buf1381
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1384 = aten.convolution_backward(buf1382, relu_61, primals_262, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_262
    buf1385 = buf1384[0]
    buf1386 = buf1384[1]
    del buf1384
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1387 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1305, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 216), add_324, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_157)
    del add_324
    del getitem_157
    buf1388 = buf1387
    del buf1387
    buf1389 = buf1378; del buf1378  # reuse
    buf1390 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1391 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1392 = buf1382; del buf1382  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_147(c_void_p(buf1305.data_ptr()), c_void_p(convolution_118.data_ptr()), c_void_p(unsqueeze_2438.data_ptr()), c_void_p(squeeze_193.data_ptr()), c_void_p(primals_260.data_ptr()), c_void_p(buf1389.data_ptr()), c_void_p(buf1390.data_ptr()), c_void_p(buf1391.data_ptr()), c_void_p(buf1392.data_ptr()))
    del convolution_118
    del primals_260
    del squeeze_193
    del unsqueeze_2438
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1393 = aten.convolution_backward(buf1392, convolution_117, primals_259, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1392
    del convolution_117
    del primals_259
    buf1394 = buf1393[0]
    buf1395 = buf1393[1]
    del buf1393
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1396 = aten.convolution_backward(buf1394, relu_62, primals_258, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1394
    del primals_258
    buf1397 = buf1396[0]
    buf1398 = buf1396[1]
    del buf1396
    buf1399 = buf1390; del buf1390  # reuse
    buf1400 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1401 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1402 = buf1397; del buf1397  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_148(c_void_p(buf1402.data_ptr()), c_void_p(relu_62.data_ptr()), c_void_p(convolution_116.data_ptr()), c_void_p(unsqueeze_2450.data_ptr()), c_void_p(squeeze_190.data_ptr()), c_void_p(primals_256.data_ptr()), c_void_p(buf1399.data_ptr()), c_void_p(buf1400.data_ptr()), c_void_p(buf1401.data_ptr()))
    del convolution_116
    del primals_256
    del relu_62
    del squeeze_190
    del unsqueeze_2450
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1403 = aten.convolution_backward(buf1402, convolution_115, primals_255, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1402
    del convolution_115
    del primals_255
    buf1404 = buf1403[0]
    buf1405 = buf1403[1]
    del buf1403
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1406 = aten.convolution_backward(buf1404, relu_61, primals_254, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1404
    del primals_254
    buf1407 = buf1406[0]
    buf1408 = buf1406[1]
    del buf1406
    buf1409 = buf1327; del buf1327  # reuse
    cpp_fused_add_threshold_backward_149(c_void_p(buf1409.data_ptr()), c_void_p(buf1305.data_ptr()), c_void_p(relu_61.data_ptr()), c_void_p(buf1366.data_ptr()), c_void_p(buf1385.data_ptr()), c_void_p(buf1388.data_ptr()), c_void_p(buf1407.data_ptr()))
    del buf1366
    del buf1385
    del buf1388
    del relu_61
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1410 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1305, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 0), add_319, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_151)
    del add_319
    del getitem_151
    buf1411 = buf1410
    del buf1410
    buf1412 = buf1400; del buf1400  # reuse
    buf1413 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1414 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1415 = buf1407; del buf1407  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_150(c_void_p(buf1305.data_ptr()), c_void_p(convolution_114.data_ptr()), c_void_p(unsqueeze_2462.data_ptr()), c_void_p(squeeze_187.data_ptr()), c_void_p(primals_252.data_ptr()), c_void_p(buf1412.data_ptr()), c_void_p(buf1413.data_ptr()), c_void_p(buf1414.data_ptr()), c_void_p(buf1415.data_ptr()))
    del buf1305
    del convolution_114
    del primals_252
    del squeeze_187
    del unsqueeze_2462
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1416 = aten.convolution_backward(buf1415, convolution_113, primals_251, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1415
    del convolution_113
    del primals_251
    buf1417 = buf1416[0]
    buf1418 = buf1416[1]
    del buf1416
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1419 = aten.convolution_backward(buf1417, relu_60, primals_250, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1417
    del primals_250
    buf1420 = buf1419[0]
    buf1421 = buf1419[1]
    del buf1419
    buf1422 = buf1413; del buf1413  # reuse
    buf1423 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1424 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1425 = buf1420; del buf1420  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_151(c_void_p(buf1425.data_ptr()), c_void_p(relu_60.data_ptr()), c_void_p(convolution_112.data_ptr()), c_void_p(unsqueeze_2474.data_ptr()), c_void_p(squeeze_184.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(buf1422.data_ptr()), c_void_p(buf1423.data_ptr()), c_void_p(buf1424.data_ptr()))
    del convolution_112
    del primals_248
    del relu_60
    del squeeze_184
    del unsqueeze_2474
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1426 = aten.convolution_backward(buf1425, convolution_111, primals_247, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1425
    del convolution_111
    del primals_247
    buf1427 = buf1426[0]
    buf1428 = buf1426[1]
    del buf1426
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1429 = aten.convolution_backward(buf1427, relu_59, primals_246, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1427
    del primals_246
    buf1430 = buf1429[0]
    buf1431 = buf1429[1]
    del buf1429
    buf1432 = buf1423; del buf1423  # reuse
    buf1433 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1434 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1435 = buf1409; del buf1409  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_152(c_void_p(buf1435.data_ptr()), c_void_p(convolution_110.data_ptr()), c_void_p(unsqueeze_2486.data_ptr()), c_void_p(squeeze_181.data_ptr()), c_void_p(primals_244.data_ptr()), c_void_p(buf1432.data_ptr()), c_void_p(buf1433.data_ptr()), c_void_p(buf1434.data_ptr()))
    del convolution_110
    del primals_244
    del squeeze_181
    del unsqueeze_2486
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1436 = aten.convolution_backward(buf1435, relu_58, primals_243, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1435
    del primals_243
    buf1437 = buf1436[0]
    buf1438 = buf1436[1]
    del buf1436
    buf1439 = buf1433; del buf1433  # reuse
    buf1440 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1441 = buf1324; del buf1324  # reuse
    buf1443 = buf1441; del buf1441  # reuse
    buf1442 = buf1440; del buf1440  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_153(c_void_p(buf1443.data_ptr()), c_void_p(buf1442.data_ptr()), c_void_p(relu_59.data_ptr()), c_void_p(buf1411.data_ptr()), c_void_p(buf1430.data_ptr()), c_void_p(convolution_109.data_ptr()), c_void_p(unsqueeze_2498.data_ptr()), c_void_p(squeeze_178.data_ptr()), c_void_p(primals_241.data_ptr()), c_void_p(buf1439.data_ptr()))
    del buf1411
    del buf1430
    del convolution_109
    del primals_241
    del relu_59
    del squeeze_178
    del unsqueeze_2498
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1444 = aten.convolution_backward(buf1443, relu_44, primals_240, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_240
    buf1445 = buf1444[0]
    buf1446 = buf1444[1]
    del buf1444
    buf1447 = buf1303; del buf1303  # reuse
    buf1448 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1449 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1450 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1451 = buf1443; del buf1443  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_154(c_void_p(buf1447.data_ptr()), c_void_p(relu_58.data_ptr()), c_void_p(buf1437.data_ptr()), c_void_p(convolution_108.data_ptr()), c_void_p(unsqueeze_2510.data_ptr()), c_void_p(squeeze_175.data_ptr()), c_void_p(primals_238.data_ptr()), c_void_p(buf1448.data_ptr()), c_void_p(buf1449.data_ptr()), c_void_p(buf1450.data_ptr()), c_void_p(buf1451.data_ptr()))
    del buf1437
    del convolution_108
    del primals_238
    del relu_58
    del squeeze_175
    del unsqueeze_2510
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1452 = aten.convolution_backward(buf1451, convolution_107, primals_237, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1451
    del convolution_107
    del primals_237
    buf1453 = buf1452[0]
    buf1454 = buf1452[1]
    del buf1452
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1455 = aten.convolution_backward(buf1453, relu_56, primals_236, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1453
    del primals_236
    buf1456 = buf1455[0]
    buf1457 = buf1455[1]
    del buf1455
    buf1458 = buf1449; del buf1449  # reuse
    buf1459 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1460 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1461 = buf1456; del buf1456  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_155(c_void_p(buf1461.data_ptr()), c_void_p(relu_56.data_ptr()), c_void_p(convolution_106.data_ptr()), c_void_p(unsqueeze_2522.data_ptr()), c_void_p(squeeze_172.data_ptr()), c_void_p(primals_234.data_ptr()), c_void_p(buf1458.data_ptr()), c_void_p(buf1459.data_ptr()), c_void_p(buf1460.data_ptr()))
    del convolution_106
    del primals_234
    del relu_56
    del squeeze_172
    del unsqueeze_2522
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1462 = aten.convolution_backward(buf1461, convolution_105, primals_233, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1461
    del convolution_105
    del primals_233
    buf1463 = buf1462[0]
    buf1464 = buf1462[1]
    del buf1462
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1465 = aten.convolution_backward(buf1463, relu_45, primals_232, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_232
    buf1466 = buf1465[0]
    buf1467 = buf1465[1]
    del buf1465
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1468 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1447, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 648), add_249, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_123)
    buf1469 = buf1468
    del buf1468
    buf1470 = buf1459; del buf1459  # reuse
    buf1471 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1472 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1473 = buf1463; del buf1463  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_156(c_void_p(buf1447.data_ptr()), c_void_p(convolution_104.data_ptr()), c_void_p(unsqueeze_2534.data_ptr()), c_void_p(squeeze_169.data_ptr()), c_void_p(primals_230.data_ptr()), c_void_p(buf1470.data_ptr()), c_void_p(buf1471.data_ptr()), c_void_p(buf1472.data_ptr()), c_void_p(buf1473.data_ptr()))
    del convolution_104
    del primals_230
    del squeeze_169
    del unsqueeze_2534
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1474 = aten.convolution_backward(buf1473, convolution_103, primals_229, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1473
    del convolution_103
    del primals_229
    buf1475 = buf1474[0]
    buf1476 = buf1474[1]
    del buf1474
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1477 = aten.convolution_backward(buf1475, relu_54, primals_228, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1475
    del primals_228
    buf1478 = buf1477[0]
    buf1479 = buf1477[1]
    del buf1477
    buf1480 = buf1471; del buf1471  # reuse
    buf1481 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1482 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1483 = buf1478; del buf1478  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_157(c_void_p(buf1483.data_ptr()), c_void_p(relu_54.data_ptr()), c_void_p(convolution_102.data_ptr()), c_void_p(unsqueeze_2546.data_ptr()), c_void_p(squeeze_166.data_ptr()), c_void_p(primals_226.data_ptr()), c_void_p(buf1480.data_ptr()), c_void_p(buf1481.data_ptr()), c_void_p(buf1482.data_ptr()))
    del convolution_102
    del primals_226
    del relu_54
    del squeeze_166
    del unsqueeze_2546
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1484 = aten.convolution_backward(buf1483, convolution_101, primals_225, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_101
    del primals_225
    buf1485 = buf1484[0]
    buf1486 = buf1484[1]
    del buf1484
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1487 = aten.convolution_backward(buf1485, relu_53, primals_224, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_224
    buf1488 = buf1487[0]
    buf1489 = buf1487[1]
    del buf1487
    buf1490 = buf1481; del buf1481  # reuse
    buf1491 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1510 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1492 = buf1485; del buf1485  # reuse
    buf1511 = buf1483; del buf1483  # reuse
    buf1493 = buf1491; del buf1491  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_158(c_void_p(buf1493.data_ptr()), c_void_p(buf1447.data_ptr()), c_void_p(relu_53.data_ptr()), c_void_p(buf1488.data_ptr()), c_void_p(convolution_100.data_ptr()), c_void_p(unsqueeze_2558.data_ptr()), c_void_p(convolution_96.data_ptr()), c_void_p(unsqueeze_2582.data_ptr()), c_void_p(squeeze_163.data_ptr()), c_void_p(primals_222.data_ptr()), c_void_p(squeeze_157.data_ptr()), c_void_p(primals_214.data_ptr()), c_void_p(buf1490.data_ptr()), c_void_p(buf1510.data_ptr()), c_void_p(buf1492.data_ptr()), c_void_p(buf1511.data_ptr()))
    del buf1488
    del convolution_100
    del convolution_96
    del primals_214
    del primals_222
    del relu_53
    del squeeze_163
    del unsqueeze_2558
    del unsqueeze_2582
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1494 = aten.convolution_backward(buf1492, convolution_99, primals_221, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1492
    del convolution_99
    del primals_221
    buf1495 = buf1494[0]
    buf1496 = buf1494[1]
    del buf1494
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1497 = aten.convolution_backward(buf1495, relu_52, primals_220, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1495
    del primals_220
    buf1498 = buf1497[0]
    buf1499 = buf1497[1]
    del buf1497
    buf1500 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1501 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1502 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1503 = buf1498; del buf1498  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_159(c_void_p(buf1503.data_ptr()), c_void_p(relu_52.data_ptr()), c_void_p(convolution_98.data_ptr()), c_void_p(unsqueeze_2570.data_ptr()), c_void_p(squeeze_160.data_ptr()), c_void_p(primals_218.data_ptr()), c_void_p(buf1500.data_ptr()), c_void_p(buf1501.data_ptr()), c_void_p(buf1502.data_ptr()))
    del convolution_98
    del primals_218
    del relu_52
    del squeeze_160
    del unsqueeze_2570
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1504 = aten.convolution_backward(buf1503, convolution_97, primals_217, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1503
    del convolution_97
    del primals_217
    buf1505 = buf1504[0]
    buf1506 = buf1504[1]
    del buf1504
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1507 = aten.convolution_backward(buf1505, relu_47, primals_216, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1505
    del primals_216
    buf1508 = buf1507[0]
    buf1509 = buf1507[1]
    del buf1507
    buf1512 = buf1510; del buf1510  # reuse
    cpp_fused_native_batch_norm_backward_160(c_void_p(buf1512.data_ptr()), c_void_p(squeeze_157.data_ptr()))
    del squeeze_157
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1513 = aten.convolution_backward(buf1511, convolution_95, primals_213, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1511
    del convolution_95
    del primals_213
    buf1514 = buf1513[0]
    buf1515 = buf1513[1]
    del buf1513
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1516 = aten.convolution_backward(buf1514, relu_50, primals_212, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1514
    del primals_212
    buf1517 = buf1516[0]
    buf1518 = buf1516[1]
    del buf1516
    buf1519 = buf1501; del buf1501  # reuse
    buf1520 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1521 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1522 = buf1517; del buf1517  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_161(c_void_p(buf1522.data_ptr()), c_void_p(relu_50.data_ptr()), c_void_p(convolution_94.data_ptr()), c_void_p(unsqueeze_2594.data_ptr()), c_void_p(squeeze_154.data_ptr()), c_void_p(primals_210.data_ptr()), c_void_p(buf1519.data_ptr()), c_void_p(buf1520.data_ptr()), c_void_p(buf1521.data_ptr()))
    del convolution_94
    del primals_210
    del relu_50
    del squeeze_154
    del unsqueeze_2594
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1523 = aten.convolution_backward(buf1522, convolution_93, primals_209, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1522
    del convolution_93
    del primals_209
    buf1524 = buf1523[0]
    buf1525 = buf1523[1]
    del buf1523
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1526 = aten.convolution_backward(buf1524, relu_47, primals_208, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_208
    buf1527 = buf1526[0]
    buf1528 = buf1526[1]
    del buf1526
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1529 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1447, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 216), add_249, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_123)
    del add_249
    del getitem_123
    buf1530 = buf1529
    del buf1529
    buf1531 = buf1520; del buf1520  # reuse
    buf1532 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1533 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1534 = buf1524; del buf1524  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_162(c_void_p(buf1447.data_ptr()), c_void_p(convolution_92.data_ptr()), c_void_p(unsqueeze_2606.data_ptr()), c_void_p(squeeze_151.data_ptr()), c_void_p(primals_206.data_ptr()), c_void_p(buf1531.data_ptr()), c_void_p(buf1532.data_ptr()), c_void_p(buf1533.data_ptr()), c_void_p(buf1534.data_ptr()))
    del convolution_92
    del primals_206
    del squeeze_151
    del unsqueeze_2606
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1535 = aten.convolution_backward(buf1534, convolution_91, primals_205, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1534
    del convolution_91
    del primals_205
    buf1536 = buf1535[0]
    buf1537 = buf1535[1]
    del buf1535
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1538 = aten.convolution_backward(buf1536, relu_48, primals_204, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1536
    del primals_204
    buf1539 = buf1538[0]
    buf1540 = buf1538[1]
    del buf1538
    buf1541 = buf1532; del buf1532  # reuse
    buf1542 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1543 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1544 = buf1539; del buf1539  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_163(c_void_p(buf1544.data_ptr()), c_void_p(relu_48.data_ptr()), c_void_p(convolution_90.data_ptr()), c_void_p(unsqueeze_2618.data_ptr()), c_void_p(squeeze_148.data_ptr()), c_void_p(primals_202.data_ptr()), c_void_p(buf1541.data_ptr()), c_void_p(buf1542.data_ptr()), c_void_p(buf1543.data_ptr()))
    del convolution_90
    del primals_202
    del relu_48
    del squeeze_148
    del unsqueeze_2618
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1545 = aten.convolution_backward(buf1544, convolution_89, primals_201, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1544
    del convolution_89
    del primals_201
    buf1546 = buf1545[0]
    buf1547 = buf1545[1]
    del buf1545
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1548 = aten.convolution_backward(buf1546, relu_47, primals_200, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1546
    del primals_200
    buf1549 = buf1548[0]
    buf1550 = buf1548[1]
    del buf1548
    buf1551 = buf1469; del buf1469  # reuse
    cpp_fused_add_threshold_backward_164(c_void_p(buf1551.data_ptr()), c_void_p(buf1447.data_ptr()), c_void_p(relu_47.data_ptr()), c_void_p(buf1508.data_ptr()), c_void_p(buf1527.data_ptr()), c_void_p(buf1530.data_ptr()), c_void_p(buf1549.data_ptr()))
    del buf1508
    del buf1527
    del buf1530
    del relu_47
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1552 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1447, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 0), add_244, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_117)
    del add_244
    del getitem_117
    buf1553 = buf1552
    del buf1552
    buf1554 = buf1542; del buf1542  # reuse
    buf1555 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1556 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1557 = buf1549; del buf1549  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_165(c_void_p(buf1447.data_ptr()), c_void_p(convolution_88.data_ptr()), c_void_p(unsqueeze_2630.data_ptr()), c_void_p(squeeze_145.data_ptr()), c_void_p(primals_198.data_ptr()), c_void_p(buf1554.data_ptr()), c_void_p(buf1555.data_ptr()), c_void_p(buf1556.data_ptr()), c_void_p(buf1557.data_ptr()))
    del buf1447
    del convolution_88
    del primals_198
    del squeeze_145
    del unsqueeze_2630
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1558 = aten.convolution_backward(buf1557, convolution_87, primals_197, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1557
    del convolution_87
    del primals_197
    buf1559 = buf1558[0]
    buf1560 = buf1558[1]
    del buf1558
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1561 = aten.convolution_backward(buf1559, relu_46, primals_196, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1559
    del primals_196
    buf1562 = buf1561[0]
    buf1563 = buf1561[1]
    del buf1561
    buf1564 = buf1555; del buf1555  # reuse
    buf1565 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1566 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1567 = buf1562; del buf1562  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_166(c_void_p(buf1567.data_ptr()), c_void_p(relu_46.data_ptr()), c_void_p(convolution_86.data_ptr()), c_void_p(unsqueeze_2642.data_ptr()), c_void_p(squeeze_142.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(buf1564.data_ptr()), c_void_p(buf1565.data_ptr()), c_void_p(buf1566.data_ptr()))
    del convolution_86
    del primals_194
    del relu_46
    del squeeze_142
    del unsqueeze_2642
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1568 = aten.convolution_backward(buf1567, convolution_85, primals_193, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1567
    del convolution_85
    del primals_193
    buf1569 = buf1568[0]
    buf1570 = buf1568[1]
    del buf1568
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1571 = aten.convolution_backward(buf1569, relu_45, primals_192, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1569
    del primals_192
    buf1572 = buf1571[0]
    buf1573 = buf1571[1]
    del buf1571
    buf1574 = buf1565; del buf1565  # reuse
    buf1575 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1576 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1577 = buf1551; del buf1551  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_167(c_void_p(buf1577.data_ptr()), c_void_p(convolution_84.data_ptr()), c_void_p(unsqueeze_2654.data_ptr()), c_void_p(squeeze_139.data_ptr()), c_void_p(primals_190.data_ptr()), c_void_p(buf1574.data_ptr()), c_void_p(buf1575.data_ptr()), c_void_p(buf1576.data_ptr()))
    del convolution_84
    del primals_190
    del squeeze_139
    del unsqueeze_2654
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1578 = aten.convolution_backward(buf1577, relu_44, primals_189, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1577
    del primals_189
    buf1579 = buf1578[0]
    buf1580 = buf1578[1]
    del buf1578
    buf1581 = buf1575; del buf1575  # reuse
    buf1582 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1583 = buf1466; del buf1466  # reuse
    buf1585 = buf1583; del buf1583  # reuse
    buf1584 = buf1582; del buf1582  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_168(c_void_p(buf1585.data_ptr()), c_void_p(buf1584.data_ptr()), c_void_p(relu_45.data_ptr()), c_void_p(buf1553.data_ptr()), c_void_p(buf1572.data_ptr()), c_void_p(convolution_83.data_ptr()), c_void_p(unsqueeze_2666.data_ptr()), c_void_p(squeeze_136.data_ptr()), c_void_p(primals_187.data_ptr()), c_void_p(buf1581.data_ptr()))
    del buf1553
    del buf1572
    del convolution_83
    del primals_187
    del relu_45
    del squeeze_136
    del unsqueeze_2666
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1586 = aten.convolution_backward(buf1585, relu_30, primals_186, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_186
    buf1587 = buf1586[0]
    buf1588 = buf1586[1]
    del buf1586
    buf1589 = buf1445; del buf1445  # reuse
    buf1590 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1591 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1592 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1593 = buf1585; del buf1585  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_169(c_void_p(buf1589.data_ptr()), c_void_p(relu_44.data_ptr()), c_void_p(buf1579.data_ptr()), c_void_p(convolution_82.data_ptr()), c_void_p(unsqueeze_2678.data_ptr()), c_void_p(squeeze_133.data_ptr()), c_void_p(primals_184.data_ptr()), c_void_p(buf1590.data_ptr()), c_void_p(buf1591.data_ptr()), c_void_p(buf1592.data_ptr()), c_void_p(buf1593.data_ptr()))
    del buf1579
    del convolution_82
    del primals_184
    del relu_44
    del squeeze_133
    del unsqueeze_2678
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1594 = aten.convolution_backward(buf1593, convolution_81, primals_183, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1593
    del convolution_81
    del primals_183
    buf1595 = buf1594[0]
    buf1596 = buf1594[1]
    del buf1594
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1597 = aten.convolution_backward(buf1595, relu_42, primals_182, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1595
    del primals_182
    buf1598 = buf1597[0]
    buf1599 = buf1597[1]
    del buf1597
    buf1600 = buf1591; del buf1591  # reuse
    buf1601 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1602 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1603 = buf1598; del buf1598  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_170(c_void_p(buf1603.data_ptr()), c_void_p(relu_42.data_ptr()), c_void_p(convolution_80.data_ptr()), c_void_p(unsqueeze_2690.data_ptr()), c_void_p(squeeze_130.data_ptr()), c_void_p(primals_180.data_ptr()), c_void_p(buf1600.data_ptr()), c_void_p(buf1601.data_ptr()), c_void_p(buf1602.data_ptr()))
    del convolution_80
    del primals_180
    del relu_42
    del squeeze_130
    del unsqueeze_2690
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1604 = aten.convolution_backward(buf1603, convolution_79, primals_179, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1603
    del convolution_79
    del primals_179
    buf1605 = buf1604[0]
    buf1606 = buf1604[1]
    del buf1604
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1607 = aten.convolution_backward(buf1605, relu_31, primals_178, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_178
    buf1608 = buf1607[0]
    buf1609 = buf1607[1]
    del buf1607
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1610 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1589, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 648), add_174, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_89)
    buf1611 = buf1610
    del buf1610
    buf1612 = buf1601; del buf1601  # reuse
    buf1613 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1614 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1615 = buf1605; del buf1605  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_171(c_void_p(buf1589.data_ptr()), c_void_p(convolution_78.data_ptr()), c_void_p(unsqueeze_2702.data_ptr()), c_void_p(squeeze_127.data_ptr()), c_void_p(primals_176.data_ptr()), c_void_p(buf1612.data_ptr()), c_void_p(buf1613.data_ptr()), c_void_p(buf1614.data_ptr()), c_void_p(buf1615.data_ptr()))
    del convolution_78
    del primals_176
    del squeeze_127
    del unsqueeze_2702
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1616 = aten.convolution_backward(buf1615, convolution_77, primals_175, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1615
    del convolution_77
    del primals_175
    buf1617 = buf1616[0]
    buf1618 = buf1616[1]
    del buf1616
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1619 = aten.convolution_backward(buf1617, relu_40, primals_174, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1617
    del primals_174
    buf1620 = buf1619[0]
    buf1621 = buf1619[1]
    del buf1619
    buf1622 = buf1613; del buf1613  # reuse
    buf1623 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1624 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1625 = buf1620; del buf1620  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_172(c_void_p(buf1625.data_ptr()), c_void_p(relu_40.data_ptr()), c_void_p(convolution_76.data_ptr()), c_void_p(unsqueeze_2714.data_ptr()), c_void_p(squeeze_124.data_ptr()), c_void_p(primals_172.data_ptr()), c_void_p(buf1622.data_ptr()), c_void_p(buf1623.data_ptr()), c_void_p(buf1624.data_ptr()))
    del convolution_76
    del primals_172
    del relu_40
    del squeeze_124
    del unsqueeze_2714
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1626 = aten.convolution_backward(buf1625, convolution_75, primals_171, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_75
    del primals_171
    buf1627 = buf1626[0]
    buf1628 = buf1626[1]
    del buf1626
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1629 = aten.convolution_backward(buf1627, relu_39, primals_170, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_170
    buf1630 = buf1629[0]
    buf1631 = buf1629[1]
    del buf1629
    buf1632 = buf1623; del buf1623  # reuse
    buf1633 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1652 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1634 = buf1627; del buf1627  # reuse
    buf1653 = buf1625; del buf1625  # reuse
    buf1635 = buf1633; del buf1633  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_173(c_void_p(buf1635.data_ptr()), c_void_p(buf1589.data_ptr()), c_void_p(relu_39.data_ptr()), c_void_p(buf1630.data_ptr()), c_void_p(convolution_74.data_ptr()), c_void_p(unsqueeze_2726.data_ptr()), c_void_p(convolution_70.data_ptr()), c_void_p(unsqueeze_2750.data_ptr()), c_void_p(squeeze_121.data_ptr()), c_void_p(primals_168.data_ptr()), c_void_p(squeeze_115.data_ptr()), c_void_p(primals_160.data_ptr()), c_void_p(buf1632.data_ptr()), c_void_p(buf1652.data_ptr()), c_void_p(buf1634.data_ptr()), c_void_p(buf1653.data_ptr()))
    del buf1630
    del convolution_70
    del convolution_74
    del primals_160
    del primals_168
    del relu_39
    del squeeze_121
    del unsqueeze_2726
    del unsqueeze_2750
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1636 = aten.convolution_backward(buf1634, convolution_73, primals_167, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1634
    del convolution_73
    del primals_167
    buf1637 = buf1636[0]
    buf1638 = buf1636[1]
    del buf1636
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1639 = aten.convolution_backward(buf1637, relu_38, primals_166, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1637
    del primals_166
    buf1640 = buf1639[0]
    buf1641 = buf1639[1]
    del buf1639
    buf1642 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1643 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1644 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1645 = buf1640; del buf1640  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_174(c_void_p(buf1645.data_ptr()), c_void_p(relu_38.data_ptr()), c_void_p(convolution_72.data_ptr()), c_void_p(unsqueeze_2738.data_ptr()), c_void_p(squeeze_118.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(buf1642.data_ptr()), c_void_p(buf1643.data_ptr()), c_void_p(buf1644.data_ptr()))
    del convolution_72
    del primals_164
    del relu_38
    del squeeze_118
    del unsqueeze_2738
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1646 = aten.convolution_backward(buf1645, convolution_71, primals_163, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1645
    del convolution_71
    del primals_163
    buf1647 = buf1646[0]
    buf1648 = buf1646[1]
    del buf1646
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1649 = aten.convolution_backward(buf1647, relu_33, primals_162, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1647
    del primals_162
    buf1650 = buf1649[0]
    buf1651 = buf1649[1]
    del buf1649
    buf1654 = buf1652; del buf1652  # reuse
    cpp_fused_native_batch_norm_backward_175(c_void_p(buf1654.data_ptr()), c_void_p(squeeze_115.data_ptr()))
    del squeeze_115
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1655 = aten.convolution_backward(buf1653, convolution_69, primals_159, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1653
    del convolution_69
    del primals_159
    buf1656 = buf1655[0]
    buf1657 = buf1655[1]
    del buf1655
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1658 = aten.convolution_backward(buf1656, relu_36, primals_158, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1656
    del primals_158
    buf1659 = buf1658[0]
    buf1660 = buf1658[1]
    del buf1658
    buf1661 = buf1643; del buf1643  # reuse
    buf1662 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1663 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1664 = buf1659; del buf1659  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_176(c_void_p(buf1664.data_ptr()), c_void_p(relu_36.data_ptr()), c_void_p(convolution_68.data_ptr()), c_void_p(unsqueeze_2762.data_ptr()), c_void_p(squeeze_112.data_ptr()), c_void_p(primals_156.data_ptr()), c_void_p(buf1661.data_ptr()), c_void_p(buf1662.data_ptr()), c_void_p(buf1663.data_ptr()))
    del convolution_68
    del primals_156
    del relu_36
    del squeeze_112
    del unsqueeze_2762
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1665 = aten.convolution_backward(buf1664, convolution_67, primals_155, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1664
    del convolution_67
    del primals_155
    buf1666 = buf1665[0]
    buf1667 = buf1665[1]
    del buf1665
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1668 = aten.convolution_backward(buf1666, relu_33, primals_154, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del primals_154
    buf1669 = buf1668[0]
    buf1670 = buf1668[1]
    del buf1668
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1671 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1589, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 216), add_174, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_89)
    del add_174
    del getitem_89
    buf1672 = buf1671
    del buf1671
    buf1673 = buf1662; del buf1662  # reuse
    buf1674 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1675 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1676 = buf1666; del buf1666  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_177(c_void_p(buf1589.data_ptr()), c_void_p(convolution_66.data_ptr()), c_void_p(unsqueeze_2774.data_ptr()), c_void_p(squeeze_109.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(buf1673.data_ptr()), c_void_p(buf1674.data_ptr()), c_void_p(buf1675.data_ptr()), c_void_p(buf1676.data_ptr()))
    del convolution_66
    del primals_152
    del squeeze_109
    del unsqueeze_2774
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1677 = aten.convolution_backward(buf1676, convolution_65, primals_151, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1676
    del convolution_65
    del primals_151
    buf1678 = buf1677[0]
    buf1679 = buf1677[1]
    del buf1677
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1680 = aten.convolution_backward(buf1678, relu_34, primals_150, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1678
    del primals_150
    buf1681 = buf1680[0]
    buf1682 = buf1680[1]
    del buf1680
    buf1683 = buf1674; del buf1674  # reuse
    buf1684 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1685 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1686 = buf1681; del buf1681  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_178(c_void_p(buf1686.data_ptr()), c_void_p(relu_34.data_ptr()), c_void_p(convolution_64.data_ptr()), c_void_p(unsqueeze_2786.data_ptr()), c_void_p(squeeze_106.data_ptr()), c_void_p(primals_148.data_ptr()), c_void_p(buf1683.data_ptr()), c_void_p(buf1684.data_ptr()), c_void_p(buf1685.data_ptr()))
    del convolution_64
    del primals_148
    del relu_34
    del squeeze_106
    del unsqueeze_2786
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1687 = aten.convolution_backward(buf1686, convolution_63, primals_147, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1686
    del convolution_63
    del primals_147
    buf1688 = buf1687[0]
    buf1689 = buf1687[1]
    del buf1687
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1690 = aten.convolution_backward(buf1688, relu_33, primals_146, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1688
    del primals_146
    buf1691 = buf1690[0]
    buf1692 = buf1690[1]
    del buf1690
    buf1693 = buf1611; del buf1611  # reuse
    cpp_fused_add_threshold_backward_179(c_void_p(buf1693.data_ptr()), c_void_p(buf1589.data_ptr()), c_void_p(relu_33.data_ptr()), c_void_p(buf1650.data_ptr()), c_void_p(buf1669.data_ptr()), c_void_p(buf1672.data_ptr()), c_void_p(buf1691.data_ptr()))
    del buf1650
    del buf1669
    del buf1672
    del relu_33
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1694 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1589, (8, 216, 42, 42), (1905120, 1, 45360, 1080), 0), add_169, [3, 3], [1, 1], [1, 1], [1, 1], False, getitem_83)
    del add_169
    del getitem_83
    buf1695 = buf1694
    del buf1694
    buf1696 = buf1684; del buf1684  # reuse
    buf1697 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1698 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1699 = buf1691; del buf1691  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_180(c_void_p(buf1589.data_ptr()), c_void_p(convolution_62.data_ptr()), c_void_p(unsqueeze_2798.data_ptr()), c_void_p(squeeze_103.data_ptr()), c_void_p(primals_144.data_ptr()), c_void_p(buf1696.data_ptr()), c_void_p(buf1697.data_ptr()), c_void_p(buf1698.data_ptr()), c_void_p(buf1699.data_ptr()))
    del buf1589
    del convolution_62
    del primals_144
    del squeeze_103
    del unsqueeze_2798
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1700 = aten.convolution_backward(buf1699, convolution_61, primals_143, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1699
    del convolution_61
    del primals_143
    buf1701 = buf1700[0]
    buf1702 = buf1700[1]
    del buf1700
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1703 = aten.convolution_backward(buf1701, relu_32, primals_142, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1701
    del primals_142
    buf1704 = buf1703[0]
    buf1705 = buf1703[1]
    del buf1703
    buf1706 = buf1697; del buf1697  # reuse
    buf1707 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1708 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1709 = buf1704; del buf1704  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_181(c_void_p(buf1709.data_ptr()), c_void_p(relu_32.data_ptr()), c_void_p(convolution_60.data_ptr()), c_void_p(unsqueeze_2810.data_ptr()), c_void_p(squeeze_100.data_ptr()), c_void_p(primals_140.data_ptr()), c_void_p(buf1706.data_ptr()), c_void_p(buf1707.data_ptr()), c_void_p(buf1708.data_ptr()))
    del convolution_60
    del primals_140
    del relu_32
    del squeeze_100
    del unsqueeze_2810
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1710 = aten.convolution_backward(buf1709, convolution_59, primals_139, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1709
    del convolution_59
    del primals_139
    buf1711 = buf1710[0]
    buf1712 = buf1710[1]
    del buf1710
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1713 = aten.convolution_backward(buf1711, relu_31, primals_138, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 216, [True, True, False])
    del buf1711
    del primals_138
    buf1714 = buf1713[0]
    buf1715 = buf1713[1]
    del buf1713
    buf1716 = buf1707; del buf1707  # reuse
    buf1717 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1718 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1719 = buf1693; del buf1693  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_182(c_void_p(buf1719.data_ptr()), c_void_p(convolution_58.data_ptr()), c_void_p(unsqueeze_2822.data_ptr()), c_void_p(squeeze_97.data_ptr()), c_void_p(primals_136.data_ptr()), c_void_p(buf1716.data_ptr()), c_void_p(buf1717.data_ptr()), c_void_p(buf1718.data_ptr()))
    del convolution_58
    del primals_136
    del squeeze_97
    del unsqueeze_2822
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1720 = aten.convolution_backward(buf1719, relu_30, primals_135, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1719
    del primals_135
    buf1721 = buf1720[0]
    buf1722 = buf1720[1]
    del buf1720
    buf1723 = buf1717; del buf1717  # reuse
    buf1724 = empty((216, ), device='cpu', dtype=torch.float32)
    buf1725 = buf1608; del buf1608  # reuse
    buf1726 = buf1724; del buf1724  # reuse
    buf1727 = reinterpret_tensor(buf1142, (8, 108, 42, 42), (190512, 1, 4536, 108), 0); del buf1142  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_183(c_void_p(buf1725.data_ptr()), c_void_p(buf1726.data_ptr()), c_void_p(relu_31.data_ptr()), c_void_p(buf1695.data_ptr()), c_void_p(buf1714.data_ptr()), c_void_p(cat_3.data_ptr()), c_void_p(unsqueeze_2834.data_ptr()), c_void_p(squeeze_94.data_ptr()), c_void_p(primals_133.data_ptr()), c_void_p(buf1723.data_ptr()), c_void_p(buf1727.data_ptr()))
    del buf1695
    del buf1714
    del cat_3
    del relu_31
    del unsqueeze_2834
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1728 = aten.convolution_backward(buf1727, avg_pool2d_3, primals_132, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d_3
    del primals_132
    buf1729 = buf1728[0]
    buf1730 = buf1728[1]
    del buf1728
    buf1731 = buf1727; del buf1727  # reuse
    cpp_fused_convolution_backward_184(c_void_p(buf1725.data_ptr()), c_void_p(squeeze_94.data_ptr()), c_void_p(primals_133.data_ptr()), c_void_p(buf1731.data_ptr()))
    del buf1725
    del primals_133
    del squeeze_94
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1732 = aten.convolution_backward(buf1731, avg_pool2d_2, primals_131, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d_2
    del primals_131
    buf1733 = buf1732[0]
    buf1734 = buf1732[1]
    del buf1732
    buf1735 = empty((8, 270, 83, 83), device='cpu', dtype=torch.float32)
    buf1736 = buf1587; del buf1587  # reuse
    buf1737 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1738 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1744 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1739 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1740 = buf1731; del buf1731  # reuse
    buf1746 = reinterpret_tensor(buf1140, (8, 108, 42, 42), (190512, 1, 4536, 108), 0); del buf1140  # reuse
    cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_185(c_void_p(buf1736.data_ptr()), c_void_p(buf1729.data_ptr()), c_void_p(buf1733.data_ptr()), c_void_p(relu_30.data_ptr()), c_void_p(buf1721.data_ptr()), c_void_p(convolution_55.data_ptr()), c_void_p(unsqueeze_2846.data_ptr()), c_void_p(convolution_54.data_ptr()), c_void_p(unsqueeze_2858.data_ptr()), c_void_p(squeeze_91.data_ptr()), c_void_p(primals_129.data_ptr()), c_void_p(squeeze_88.data_ptr()), c_void_p(primals_127.data_ptr()), c_void_p(buf1735.data_ptr()), c_void_p(buf1737.data_ptr()), c_void_p(buf1738.data_ptr()), c_void_p(buf1744.data_ptr()), c_void_p(buf1739.data_ptr()), c_void_p(buf1740.data_ptr()), c_void_p(buf1746.data_ptr()))
    del buf1721
    del buf1729
    del buf1733
    del convolution_54
    del convolution_55
    del primals_127
    del primals_129
    del relu_30
    del squeeze_91
    del unsqueeze_2846
    del unsqueeze_2858
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1741 = aten.convolution_backward(buf1740, constant_pad_nd_18, primals_14, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1740
    del constant_pad_nd_18
    del primals_14
    buf1742 = buf1741[0]
    buf1743 = buf1741[1]
    del buf1741
    buf1745 = buf1744; del buf1744  # reuse
    cpp_fused_native_batch_norm_backward_186(c_void_p(buf1745.data_ptr()), c_void_p(squeeze_88.data_ptr()))
    del squeeze_88
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1747 = aten.convolution_backward(buf1746, convolution_53, primals_126, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1746
    del convolution_53
    del primals_126
    buf1748 = buf1747[0]
    buf1749 = buf1747[1]
    del buf1747
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1750 = aten.convolution_backward(buf1748, relu_27, primals_125, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1748
    del primals_125
    buf1751 = buf1750[0]
    buf1752 = buf1750[1]
    del buf1750
    buf1753 = buf1738; del buf1738  # reuse
    buf1754 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1755 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1756 = buf1751; del buf1751  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_187(c_void_p(buf1756.data_ptr()), c_void_p(relu_27.data_ptr()), c_void_p(convolution_52.data_ptr()), c_void_p(unsqueeze_2870.data_ptr()), c_void_p(squeeze_85.data_ptr()), c_void_p(primals_123.data_ptr()), c_void_p(buf1753.data_ptr()), c_void_p(buf1754.data_ptr()), c_void_p(buf1755.data_ptr()))
    del convolution_52
    del primals_123
    del relu_27
    del squeeze_85
    del unsqueeze_2870
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1757 = aten.convolution_backward(buf1756, convolution_51, primals_122, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1756
    del convolution_51
    del primals_122
    buf1758 = buf1757[0]
    buf1759 = buf1757[1]
    del buf1757
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1760 = aten.convolution_backward(buf1758, constant_pad_nd_17, primals_13, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 108, [True, True, False])
    del constant_pad_nd_17
    del primals_13
    buf1761 = buf1760[0]
    buf1762 = buf1760[1]
    del buf1760
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1763 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1736, (8, 108, 42, 42), (952560, 1, 22680, 540), 324), constant_pad_nd_13, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_53)
    buf1764 = buf1763
    del buf1763
    buf1765 = buf1754; del buf1754  # reuse
    buf1766 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1767 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1768 = buf1758; del buf1758  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_188(c_void_p(buf1736.data_ptr()), c_void_p(convolution_50.data_ptr()), c_void_p(unsqueeze_2882.data_ptr()), c_void_p(squeeze_82.data_ptr()), c_void_p(primals_120.data_ptr()), c_void_p(buf1765.data_ptr()), c_void_p(buf1766.data_ptr()), c_void_p(buf1767.data_ptr()), c_void_p(buf1768.data_ptr()))
    del convolution_50
    del primals_120
    del squeeze_82
    del unsqueeze_2882
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1769 = aten.convolution_backward(buf1768, convolution_49, primals_119, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1768
    del convolution_49
    del primals_119
    buf1770 = buf1769[0]
    buf1771 = buf1769[1]
    del buf1769
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1772 = aten.convolution_backward(buf1770, relu_25, primals_118, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1770
    del primals_118
    buf1773 = buf1772[0]
    buf1774 = buf1772[1]
    del buf1772
    buf1775 = buf1766; del buf1766  # reuse
    buf1776 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1777 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1778 = buf1773; del buf1773  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_189(c_void_p(buf1778.data_ptr()), c_void_p(relu_25.data_ptr()), c_void_p(convolution_48.data_ptr()), c_void_p(unsqueeze_2894.data_ptr()), c_void_p(squeeze_79.data_ptr()), c_void_p(primals_116.data_ptr()), c_void_p(buf1775.data_ptr()), c_void_p(buf1776.data_ptr()), c_void_p(buf1777.data_ptr()))
    del convolution_48
    del primals_116
    del relu_25
    del squeeze_79
    del unsqueeze_2894
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1779 = aten.convolution_backward(buf1778, convolution_47, primals_115, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_47
    del primals_115
    buf1780 = buf1779[0]
    buf1781 = buf1779[1]
    del buf1779
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1782 = aten.convolution_backward(buf1780, relu_24, primals_114, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 108, [True, True, False])
    del primals_114
    buf1783 = buf1782[0]
    buf1784 = buf1782[1]
    del buf1782
    buf1785 = buf1776; del buf1776  # reuse
    buf1786 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1805 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1787 = buf1780; del buf1780  # reuse
    buf1806 = buf1778; del buf1778  # reuse
    buf1788 = buf1786; del buf1786  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_190(c_void_p(buf1788.data_ptr()), c_void_p(buf1736.data_ptr()), c_void_p(relu_24.data_ptr()), c_void_p(buf1783.data_ptr()), c_void_p(convolution_46.data_ptr()), c_void_p(unsqueeze_2906.data_ptr()), c_void_p(convolution_42.data_ptr()), c_void_p(unsqueeze_2930.data_ptr()), c_void_p(squeeze_76.data_ptr()), c_void_p(primals_112.data_ptr()), c_void_p(squeeze_70.data_ptr()), c_void_p(primals_105.data_ptr()), c_void_p(buf1785.data_ptr()), c_void_p(buf1805.data_ptr()), c_void_p(buf1787.data_ptr()), c_void_p(buf1806.data_ptr()))
    del buf1783
    del convolution_42
    del convolution_46
    del primals_105
    del primals_112
    del relu_24
    del squeeze_76
    del unsqueeze_2906
    del unsqueeze_2930
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1789 = aten.convolution_backward(buf1787, convolution_45, primals_111, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1787
    del convolution_45
    del primals_111
    buf1790 = buf1789[0]
    buf1791 = buf1789[1]
    del buf1789
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1792 = aten.convolution_backward(buf1790, relu_23, primals_110, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1790
    del primals_110
    buf1793 = buf1792[0]
    buf1794 = buf1792[1]
    del buf1792
    buf1795 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1796 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1797 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1798 = buf1793; del buf1793  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_191(c_void_p(buf1798.data_ptr()), c_void_p(relu_23.data_ptr()), c_void_p(convolution_44.data_ptr()), c_void_p(unsqueeze_2918.data_ptr()), c_void_p(squeeze_73.data_ptr()), c_void_p(primals_108.data_ptr()), c_void_p(buf1795.data_ptr()), c_void_p(buf1796.data_ptr()), c_void_p(buf1797.data_ptr()))
    del convolution_44
    del primals_108
    del relu_23
    del squeeze_73
    del unsqueeze_2918
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1799 = aten.convolution_backward(buf1798, convolution_43, primals_107, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1798
    del convolution_43
    del primals_107
    buf1800 = buf1799[0]
    buf1801 = buf1799[1]
    del buf1799
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1802 = aten.convolution_backward(buf1800, constant_pad_nd_15, primals_12, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1800
    del constant_pad_nd_15
    del primals_12
    buf1803 = buf1802[0]
    buf1804 = buf1802[1]
    del buf1802
    buf1807 = buf1805; del buf1805  # reuse
    cpp_fused_native_batch_norm_backward_192(c_void_p(buf1807.data_ptr()), c_void_p(squeeze_70.data_ptr()))
    del squeeze_70
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1808 = aten.convolution_backward(buf1806, convolution_41, primals_104, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1806
    del convolution_41
    del primals_104
    buf1809 = buf1808[0]
    buf1810 = buf1808[1]
    del buf1808
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1811 = aten.convolution_backward(buf1809, relu_21, primals_103, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1809
    del primals_103
    buf1812 = buf1811[0]
    buf1813 = buf1811[1]
    del buf1811
    buf1814 = buf1796; del buf1796  # reuse
    buf1815 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1816 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1817 = buf1812; del buf1812  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_193(c_void_p(buf1817.data_ptr()), c_void_p(relu_21.data_ptr()), c_void_p(convolution_40.data_ptr()), c_void_p(unsqueeze_2942.data_ptr()), c_void_p(squeeze_67.data_ptr()), c_void_p(primals_101.data_ptr()), c_void_p(buf1814.data_ptr()), c_void_p(buf1815.data_ptr()), c_void_p(buf1816.data_ptr()))
    del convolution_40
    del primals_101
    del relu_21
    del squeeze_67
    del unsqueeze_2942
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1818 = aten.convolution_backward(buf1817, convolution_39, primals_100, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1817
    del convolution_39
    del primals_100
    buf1819 = buf1818[0]
    buf1820 = buf1818[1]
    del buf1818
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1821 = aten.convolution_backward(buf1819, constant_pad_nd_14, primals_11, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 108, [True, True, False])
    del constant_pad_nd_14
    del primals_11
    buf1822 = buf1821[0]
    buf1823 = buf1821[1]
    del buf1821
    buf1824 = buf1742; del buf1742  # reuse
    cpp_fused_add_constant_pad_nd_threshold_backward_194(c_void_p(buf1824.data_ptr()), c_void_p(le_171.data_ptr()), c_void_p(buf1764.data_ptr()), c_void_p(buf1803.data_ptr()), c_void_p(buf1822.data_ptr()))
    del buf1764
    del buf1803
    del buf1822
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1825 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1736, (8, 108, 42, 42), (952560, 1, 22680, 540), 108), constant_pad_nd_13, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_53)
    del constant_pad_nd_13
    del getitem_53
    buf1826 = buf1825
    del buf1825
    buf1827 = buf1815; del buf1815  # reuse
    buf1828 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1829 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1830 = buf1819; del buf1819  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_195(c_void_p(buf1736.data_ptr()), c_void_p(convolution_38.data_ptr()), c_void_p(unsqueeze_2954.data_ptr()), c_void_p(squeeze_64.data_ptr()), c_void_p(primals_98.data_ptr()), c_void_p(buf1827.data_ptr()), c_void_p(buf1828.data_ptr()), c_void_p(buf1829.data_ptr()), c_void_p(buf1830.data_ptr()))
    del convolution_38
    del primals_98
    del squeeze_64
    del unsqueeze_2954
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1831 = aten.convolution_backward(buf1830, convolution_37, primals_97, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1830
    del convolution_37
    del primals_97
    buf1832 = buf1831[0]
    buf1833 = buf1831[1]
    del buf1831
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1834 = aten.convolution_backward(buf1832, relu_19, primals_96, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1832
    del primals_96
    buf1835 = buf1834[0]
    buf1836 = buf1834[1]
    del buf1834
    buf1837 = buf1828; del buf1828  # reuse
    buf1838 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1839 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1840 = buf1835; del buf1835  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_196(c_void_p(buf1840.data_ptr()), c_void_p(relu_19.data_ptr()), c_void_p(convolution_36.data_ptr()), c_void_p(unsqueeze_2966.data_ptr()), c_void_p(squeeze_61.data_ptr()), c_void_p(primals_94.data_ptr()), c_void_p(buf1837.data_ptr()), c_void_p(buf1838.data_ptr()), c_void_p(buf1839.data_ptr()))
    del convolution_36
    del primals_94
    del relu_19
    del squeeze_61
    del unsqueeze_2966
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1841 = aten.convolution_backward(buf1840, convolution_35, primals_93, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1840
    del convolution_35
    del primals_93
    buf1842 = buf1841[0]
    buf1843 = buf1841[1]
    del buf1841
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1844 = aten.convolution_backward(buf1842, constant_pad_nd_12, primals_10, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 108, [True, True, False])
    del constant_pad_nd_12
    del primals_10
    buf1845 = buf1844[0]
    buf1846 = buf1844[1]
    del buf1844
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1847 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1736, (8, 108, 42, 42), (952560, 1, 22680, 540), 0), constant_pad_nd_11, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_47)
    del constant_pad_nd_11
    del getitem_47
    buf1848 = buf1847
    del buf1847
    buf1849 = buf1838; del buf1838  # reuse
    buf1850 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1851 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1852 = buf1842; del buf1842  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_197(c_void_p(buf1736.data_ptr()), c_void_p(convolution_34.data_ptr()), c_void_p(unsqueeze_2978.data_ptr()), c_void_p(squeeze_58.data_ptr()), c_void_p(primals_91.data_ptr()), c_void_p(buf1849.data_ptr()), c_void_p(buf1850.data_ptr()), c_void_p(buf1851.data_ptr()), c_void_p(buf1852.data_ptr()))
    del buf1736
    del convolution_34
    del primals_91
    del squeeze_58
    del unsqueeze_2978
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1853 = aten.convolution_backward(buf1852, convolution_33, primals_90, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1852
    del convolution_33
    del primals_90
    buf1854 = buf1853[0]
    buf1855 = buf1853[1]
    del buf1853
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1856 = aten.convolution_backward(buf1854, relu_17, primals_89, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1854
    del primals_89
    buf1857 = buf1856[0]
    buf1858 = buf1856[1]
    del buf1856
    buf1859 = buf1850; del buf1850  # reuse
    buf1860 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1861 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1862 = buf1857; del buf1857  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_198(c_void_p(buf1862.data_ptr()), c_void_p(relu_17.data_ptr()), c_void_p(convolution_32.data_ptr()), c_void_p(unsqueeze_2990.data_ptr()), c_void_p(squeeze_55.data_ptr()), c_void_p(primals_87.data_ptr()), c_void_p(buf1859.data_ptr()), c_void_p(buf1860.data_ptr()), c_void_p(buf1861.data_ptr()))
    del convolution_32
    del primals_87
    del relu_17
    del squeeze_55
    del unsqueeze_2990
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1863 = aten.convolution_backward(buf1862, convolution_31, primals_86, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1862
    del convolution_31
    del primals_86
    buf1864 = buf1863[0]
    buf1865 = buf1863[1]
    del buf1863
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1866 = aten.convolution_backward(buf1864, constant_pad_nd_10, primals_9, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 108, [True, True, False])
    del buf1864
    del constant_pad_nd_10
    del primals_9
    buf1867 = buf1866[0]
    buf1868 = buf1866[1]
    del buf1866
    buf1869 = empty_strided((8, 108, 83, 83), (744012, 1, 8964, 108), device='cpu', dtype=torch.float32)
    buf1870 = buf1860; del buf1860  # reuse
    buf1871 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1872 = buf1824; del buf1824  # reuse
    buf1873 = buf1871; del buf1871  # reuse
    buf1874 = buf1872; del buf1872  # reuse
    cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_199(c_void_p(buf1874.data_ptr()), c_void_p(buf1873.data_ptr()), c_void_p(le_173.data_ptr()), c_void_p(buf1761.data_ptr()), c_void_p(buf1848.data_ptr()), c_void_p(buf1867.data_ptr()), c_void_p(buf1826.data_ptr()), c_void_p(le_171.data_ptr()), c_void_p(buf1845.data_ptr()), c_void_p(convolution_30.data_ptr()), c_void_p(unsqueeze_3002.data_ptr()), c_void_p(squeeze_52.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(buf1869.data_ptr()), c_void_p(buf1870.data_ptr()))
    del buf1761
    del buf1826
    del buf1845
    del buf1848
    del buf1867
    del convolution_30
    del le_171
    del le_173
    del primals_84
    del squeeze_52
    del unsqueeze_3002
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1875 = aten.convolution_backward(buf1874, relu_15, primals_83, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_83
    buf1876 = buf1875[0]
    buf1877 = buf1875[1]
    del buf1875
    buf1878 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1879 = empty((108, ), device='cpu', dtype=torch.float32)
    buf1880 = reinterpret_tensor(buf1874, (8, 108, 83, 83), (744012, 6889, 83, 1), 0); del buf1874  # reuse
    buf1881 = buf1879; del buf1879  # reuse
    buf1882 = empty_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_200(c_void_p(buf1881.data_ptr()), c_void_p(buf1869.data_ptr()), c_void_p(cat_1.data_ptr()), c_void_p(unsqueeze_3014.data_ptr()), c_void_p(squeeze_49.data_ptr()), c_void_p(primals_81.data_ptr()), c_void_p(buf1878.data_ptr()), c_void_p(buf1880.data_ptr()), c_void_p(buf1882.data_ptr()))
    del buf1869
    del cat_1
    del primals_81
    del squeeze_49
    del unsqueeze_3014
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1883 = aten.convolution_backward(buf1882, avg_pool2d_1, primals_80, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d_1
    del primals_80
    buf1884 = buf1883[0]
    buf1885 = buf1883[1]
    del buf1883
    buf1886 = buf1882; del buf1882  # reuse
    cpp_fused_convolution_backward_201(c_void_p(buf1880.data_ptr()), c_void_p(buf1886.data_ptr()))
    del buf1880
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1887 = aten.convolution_backward(buf1886, avg_pool2d, primals_79, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del avg_pool2d
    del primals_79
    buf1888 = buf1887[0]
    buf1889 = buf1887[1]
    del buf1887
    buf1890 = empty((8, 96, 165, 165), device='cpu', dtype=torch.float32)
    buf1891 = buf1876; del buf1876  # reuse
    buf1892 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1893 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1899 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1894 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1895 = buf1886; del buf1886  # reuse
    buf1901 = empty_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_202(c_void_p(buf1891.data_ptr()), c_void_p(buf1884.data_ptr()), c_void_p(buf1888.data_ptr()), c_void_p(relu_15.data_ptr()), c_void_p(buf1735.data_ptr()), c_void_p(convolution_27.data_ptr()), c_void_p(unsqueeze_3026.data_ptr()), c_void_p(convolution_26.data_ptr()), c_void_p(unsqueeze_3038.data_ptr()), c_void_p(squeeze_46.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(squeeze_43.data_ptr()), c_void_p(primals_75.data_ptr()), c_void_p(buf1890.data_ptr()), c_void_p(buf1892.data_ptr()), c_void_p(buf1893.data_ptr()), c_void_p(buf1899.data_ptr()), c_void_p(buf1894.data_ptr()), c_void_p(buf1895.data_ptr()), c_void_p(buf1901.data_ptr()))
    del buf1735
    del buf1884
    del buf1888
    del convolution_26
    del convolution_27
    del primals_75
    del primals_77
    del relu_15
    del squeeze_46
    del unsqueeze_3026
    del unsqueeze_3038
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1896 = aten.convolution_backward(buf1895, constant_pad_nd_8, primals_8, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1895
    del constant_pad_nd_8
    del primals_8
    buf1897 = buf1896[0]
    buf1898 = buf1896[1]
    del buf1896
    buf1900 = buf1899; del buf1899  # reuse
    cpp_fused_native_batch_norm_backward_203(c_void_p(buf1900.data_ptr()), c_void_p(squeeze_43.data_ptr()))
    del squeeze_43
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1902 = aten.convolution_backward(buf1901, convolution_25, primals_74, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1901
    del convolution_25
    del primals_74
    buf1903 = buf1902[0]
    buf1904 = buf1902[1]
    del buf1902
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1905 = aten.convolution_backward(buf1903, relu_12, primals_73, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 54, [True, True, False])
    del buf1903
    del primals_73
    buf1906 = buf1905[0]
    buf1907 = buf1905[1]
    del buf1905
    buf1908 = buf1893; del buf1893  # reuse
    buf1909 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1910 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1911 = buf1906; del buf1906  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_204(c_void_p(buf1911.data_ptr()), c_void_p(relu_12.data_ptr()), c_void_p(convolution_24.data_ptr()), c_void_p(unsqueeze_3050.data_ptr()), c_void_p(squeeze_40.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(buf1908.data_ptr()), c_void_p(buf1909.data_ptr()), c_void_p(buf1910.data_ptr()))
    del convolution_24
    del primals_71
    del relu_12
    del squeeze_40
    del unsqueeze_3050
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1912 = aten.convolution_backward(buf1911, convolution_23, primals_70, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_23
    del primals_70
    buf1913 = buf1912[0]
    buf1914 = buf1912[1]
    del buf1912
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1915 = aten.convolution_backward(buf1913, constant_pad_nd_7, primals_7, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 96, [True, True, False])
    del buf1913
    del constant_pad_nd_7
    del primals_7
    buf1916 = buf1915[0]
    buf1917 = buf1915[1]
    del buf1915
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1918 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1891, (8, 54, 83, 83), (1860030, 1, 22410, 270), 162), constant_pad_nd_3, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_17)
    buf1919 = buf1918
    del buf1918
    buf1920 = buf1909; del buf1909  # reuse
    buf1921 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1922 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1923 = buf1911; del buf1911  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_205(c_void_p(buf1891.data_ptr()), c_void_p(convolution_22.data_ptr()), c_void_p(unsqueeze_3062.data_ptr()), c_void_p(squeeze_37.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(buf1920.data_ptr()), c_void_p(buf1921.data_ptr()), c_void_p(buf1922.data_ptr()), c_void_p(buf1923.data_ptr()))
    del convolution_22
    del primals_68
    del squeeze_37
    del unsqueeze_3062
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1924 = aten.convolution_backward(buf1923, convolution_21, primals_67, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1923
    del convolution_21
    del primals_67
    buf1925 = buf1924[0]
    buf1926 = buf1924[1]
    del buf1924
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1927 = aten.convolution_backward(buf1925, relu_10, primals_66, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 54, [True, True, False])
    del buf1925
    del primals_66
    buf1928 = buf1927[0]
    buf1929 = buf1927[1]
    del buf1927
    buf1930 = buf1921; del buf1921  # reuse
    buf1931 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1932 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1933 = buf1928; del buf1928  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_206(c_void_p(buf1933.data_ptr()), c_void_p(relu_10.data_ptr()), c_void_p(convolution_20.data_ptr()), c_void_p(unsqueeze_3074.data_ptr()), c_void_p(squeeze_34.data_ptr()), c_void_p(primals_64.data_ptr()), c_void_p(buf1930.data_ptr()), c_void_p(buf1931.data_ptr()), c_void_p(buf1932.data_ptr()))
    del convolution_20
    del primals_64
    del relu_10
    del squeeze_34
    del unsqueeze_3074
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1934 = aten.convolution_backward(buf1933, convolution_19, primals_63, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_19
    del primals_63
    buf1935 = buf1934[0]
    buf1936 = buf1934[1]
    del buf1934
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1937 = aten.convolution_backward(buf1935, relu_9, primals_62, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 54, [True, True, False])
    del primals_62
    buf1938 = buf1937[0]
    buf1939 = buf1937[1]
    del buf1937
    buf1940 = buf1931; del buf1931  # reuse
    buf1941 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1960 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1942 = buf1935; del buf1935  # reuse
    buf1961 = buf1933; del buf1933  # reuse
    buf1943 = buf1941; del buf1941  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_207(c_void_p(buf1943.data_ptr()), c_void_p(buf1891.data_ptr()), c_void_p(relu_9.data_ptr()), c_void_p(buf1938.data_ptr()), c_void_p(convolution_18.data_ptr()), c_void_p(unsqueeze_3086.data_ptr()), c_void_p(convolution_14.data_ptr()), c_void_p(unsqueeze_3110.data_ptr()), c_void_p(squeeze_31.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(squeeze_25.data_ptr()), c_void_p(primals_53.data_ptr()), c_void_p(buf1940.data_ptr()), c_void_p(buf1960.data_ptr()), c_void_p(buf1942.data_ptr()), c_void_p(buf1961.data_ptr()))
    del buf1938
    del convolution_14
    del convolution_18
    del primals_53
    del primals_60
    del relu_9
    del squeeze_31
    del unsqueeze_3086
    del unsqueeze_3110
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1944 = aten.convolution_backward(buf1942, convolution_17, primals_59, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1942
    del convolution_17
    del primals_59
    buf1945 = buf1944[0]
    buf1946 = buf1944[1]
    del buf1944
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1947 = aten.convolution_backward(buf1945, relu_8, primals_58, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 54, [True, True, False])
    del buf1945
    del primals_58
    buf1948 = buf1947[0]
    buf1949 = buf1947[1]
    del buf1947
    buf1950 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1951 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1952 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1953 = buf1948; del buf1948  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_208(c_void_p(buf1953.data_ptr()), c_void_p(relu_8.data_ptr()), c_void_p(convolution_16.data_ptr()), c_void_p(unsqueeze_3098.data_ptr()), c_void_p(squeeze_28.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(buf1950.data_ptr()), c_void_p(buf1951.data_ptr()), c_void_p(buf1952.data_ptr()))
    del convolution_16
    del primals_56
    del relu_8
    del squeeze_28
    del unsqueeze_3098
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1954 = aten.convolution_backward(buf1953, convolution_15, primals_55, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1953
    del convolution_15
    del primals_55
    buf1955 = buf1954[0]
    buf1956 = buf1954[1]
    del buf1954
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1957 = aten.convolution_backward(buf1955, constant_pad_nd_5, primals_6, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 54, [True, True, False])
    del buf1955
    del constant_pad_nd_5
    del primals_6
    buf1958 = buf1957[0]
    buf1959 = buf1957[1]
    del buf1957
    buf1962 = buf1960; del buf1960  # reuse
    cpp_fused_native_batch_norm_backward_209(c_void_p(buf1962.data_ptr()), c_void_p(squeeze_25.data_ptr()))
    del squeeze_25
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1963 = aten.convolution_backward(buf1961, convolution_13, primals_52, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1961
    del convolution_13
    del primals_52
    buf1964 = buf1963[0]
    buf1965 = buf1963[1]
    del buf1963
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1966 = aten.convolution_backward(buf1964, relu_6, primals_51, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 54, [True, True, False])
    del buf1964
    del primals_51
    buf1967 = buf1966[0]
    buf1968 = buf1966[1]
    del buf1966
    buf1969 = buf1951; del buf1951  # reuse
    buf1970 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1971 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1972 = buf1967; del buf1967  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_210(c_void_p(buf1972.data_ptr()), c_void_p(relu_6.data_ptr()), c_void_p(convolution_12.data_ptr()), c_void_p(unsqueeze_3122.data_ptr()), c_void_p(squeeze_22.data_ptr()), c_void_p(primals_49.data_ptr()), c_void_p(buf1969.data_ptr()), c_void_p(buf1970.data_ptr()), c_void_p(buf1971.data_ptr()))
    del convolution_12
    del primals_49
    del relu_6
    del squeeze_22
    del unsqueeze_3122
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1973 = aten.convolution_backward(buf1972, convolution_11, primals_48, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1972
    del convolution_11
    del primals_48
    buf1974 = buf1973[0]
    buf1975 = buf1973[1]
    del buf1973
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1976 = aten.convolution_backward(buf1974, constant_pad_nd_4, primals_5, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 54, [True, True, False])
    del constant_pad_nd_4
    del primals_5
    buf1977 = buf1976[0]
    buf1978 = buf1976[1]
    del buf1976
    buf1979 = buf1897; del buf1897  # reuse
    cpp_fused_add_constant_pad_nd_threshold_backward_211(c_void_p(buf1979.data_ptr()), c_void_p(le_186.data_ptr()), c_void_p(buf1919.data_ptr()), c_void_p(buf1958.data_ptr()), c_void_p(buf1977.data_ptr()))
    del buf1919
    del buf1958
    del buf1977
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf1980 = aten.max_pool2d_with_indices_backward(reinterpret_tensor(buf1891, (8, 54, 83, 83), (1860030, 1, 22410, 270), 54), constant_pad_nd_3, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_17)
    del constant_pad_nd_3
    del getitem_17
    buf1981 = buf1980
    del buf1980
    buf1982 = buf1970; del buf1970  # reuse
    buf1983 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1984 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1985 = buf1974; del buf1974  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_212(c_void_p(buf1891.data_ptr()), c_void_p(convolution_10.data_ptr()), c_void_p(unsqueeze_3134.data_ptr()), c_void_p(squeeze_19.data_ptr()), c_void_p(primals_46.data_ptr()), c_void_p(buf1982.data_ptr()), c_void_p(buf1983.data_ptr()), c_void_p(buf1984.data_ptr()), c_void_p(buf1985.data_ptr()))
    del convolution_10
    del primals_46
    del squeeze_19
    del unsqueeze_3134
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1986 = aten.convolution_backward(buf1985, convolution_9, primals_45, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1985
    del convolution_9
    del primals_45
    buf1987 = buf1986[0]
    buf1988 = buf1986[1]
    del buf1986
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1989 = aten.convolution_backward(buf1987, relu_4, primals_44, [0], [1, 1], [3, 3], [1, 1], False, [0, 0], 54, [True, True, False])
    del buf1987
    del primals_44
    buf1990 = buf1989[0]
    buf1991 = buf1989[1]
    del buf1989
    buf1992 = buf1983; del buf1983  # reuse
    buf1993 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1994 = empty((54, ), device='cpu', dtype=torch.float32)
    buf1995 = buf1990; del buf1990  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_213(c_void_p(buf1995.data_ptr()), c_void_p(relu_4.data_ptr()), c_void_p(convolution_8.data_ptr()), c_void_p(unsqueeze_3146.data_ptr()), c_void_p(squeeze_16.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(buf1992.data_ptr()), c_void_p(buf1993.data_ptr()), c_void_p(buf1994.data_ptr()))
    del convolution_8
    del primals_42
    del relu_4
    del squeeze_16
    del unsqueeze_3146
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1996 = aten.convolution_backward(buf1995, convolution_7, primals_41, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del convolution_7
    del primals_41
    buf1997 = buf1996[0]
    buf1998 = buf1996[1]
    del buf1996
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1999 = aten.convolution_backward(buf1997, constant_pad_nd_2, primals_4, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 54, [True, True, False])
    del constant_pad_nd_2
    del primals_4
    buf2000 = buf1999[0]
    buf2001 = buf1999[1]
    del buf1999
    buf2002 = buf1993; del buf1993  # reuse
    buf2003 = empty((54, ), device='cpu', dtype=torch.float32)
    buf2011 = empty((54, ), device='cpu', dtype=torch.float32)
    buf2004 = empty((54, ), device='cpu', dtype=torch.float32)
    buf2005 = buf1997; del buf1997  # reuse
    buf2013 = buf1995; del buf1995  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_214(c_void_p(buf1891.data_ptr()), c_void_p(convolution_6.data_ptr()), c_void_p(unsqueeze_3158.data_ptr()), c_void_p(convolution_5.data_ptr()), c_void_p(unsqueeze_3170.data_ptr()), c_void_p(squeeze_13.data_ptr()), c_void_p(primals_39.data_ptr()), c_void_p(squeeze_10.data_ptr()), c_void_p(primals_36.data_ptr()), c_void_p(buf2002.data_ptr()), c_void_p(buf2003.data_ptr()), c_void_p(buf2011.data_ptr()), c_void_p(buf2004.data_ptr()), c_void_p(buf2005.data_ptr()), c_void_p(buf2013.data_ptr()))
    del buf1891
    del convolution_5
    del convolution_6
    del primals_36
    del primals_39
    del squeeze_13
    del unsqueeze_3158
    del unsqueeze_3170
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2006 = aten.convolution_backward(buf2005, getitem_8, primals_38, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2005
    del getitem_8
    del primals_38
    buf2007 = buf2006[0]
    buf2008 = buf2006[1]
    del buf2006
    # Source Nodes: [], Original ATen: [aten.max_pool2d_with_indices_backward]
    buf2009 = aten.max_pool2d_with_indices_backward(buf2007, constant_pad_nd_1, [3, 3], [2, 2], [0, 0], [1, 1], False, getitem_9)
    del buf2007
    del constant_pad_nd_1
    del getitem_9
    buf2010 = buf2009
    del buf2009
    buf2012 = buf2011; del buf2011  # reuse
    cpp_fused_native_batch_norm_backward_215(c_void_p(buf2012.data_ptr()), c_void_p(squeeze_10.data_ptr()))
    del squeeze_10
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2014 = aten.convolution_backward(buf2013, convolution_4, primals_35, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2013
    del convolution_4
    del primals_35
    buf2015 = buf2014[0]
    buf2016 = buf2014[1]
    del buf2014
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2017 = aten.convolution_backward(buf2015, relu_2, primals_34, [0], [1, 1], [2, 2], [1, 1], False, [0, 0], 54, [True, True, False])
    del buf2015
    del primals_34
    buf2018 = buf2017[0]
    buf2019 = buf2017[1]
    del buf2017
    buf2020 = buf2003; del buf2003  # reuse
    buf2021 = empty((54, ), device='cpu', dtype=torch.float32)
    buf2022 = empty((54, ), device='cpu', dtype=torch.float32)
    buf2023 = buf2018; del buf2018  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_216(c_void_p(buf2023.data_ptr()), c_void_p(relu_2.data_ptr()), c_void_p(convolution_3.data_ptr()), c_void_p(unsqueeze_3182.data_ptr()), c_void_p(squeeze_7.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(buf2020.data_ptr()), c_void_p(buf2021.data_ptr()), c_void_p(buf2022.data_ptr()))
    del convolution_3
    del primals_32
    del relu_2
    del squeeze_7
    del unsqueeze_3182
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2024 = aten.convolution_backward(buf2023, convolution_2, primals_31, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2023
    del convolution_2
    del primals_31
    buf2025 = buf2024[0]
    buf2026 = buf2024[1]
    del buf2024
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2027 = aten.convolution_backward(buf2025, constant_pad_nd, primals_3, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 96, [True, True, False])
    del buf2025
    del constant_pad_nd
    del primals_3
    buf2028 = buf2027[0]
    buf2029 = buf2027[1]
    del buf2027
    buf2030 = empty_strided((8, 96, 165, 165), (2613600, 1, 15840, 96), device='cpu', dtype=torch.float32)
    buf2031 = buf2021; del buf2021  # reuse
    buf2032 = empty((54, ), device='cpu', dtype=torch.float32)
    buf2033 = buf1979; del buf1979  # reuse
    buf2034 = buf2032; del buf2032  # reuse
    buf2035 = buf2033; del buf2033  # reuse
    cpp_fused_add_constant_pad_nd_convolution_backward_native_batch_norm_backward_threshold_backward_217(c_void_p(buf2035.data_ptr()), c_void_p(buf2034.data_ptr()), c_void_p(relu.data_ptr()), c_void_p(buf1890.data_ptr()), c_void_p(buf1916.data_ptr()), c_void_p(buf2010.data_ptr()), c_void_p(buf2028.data_ptr()), c_void_p(buf1981.data_ptr()), c_void_p(le_186.data_ptr()), c_void_p(buf2000.data_ptr()), c_void_p(convolution_1.data_ptr()), c_void_p(unsqueeze_3194.data_ptr()), c_void_p(squeeze_4.data_ptr()), c_void_p(primals_29.data_ptr()), c_void_p(buf2030.data_ptr()), c_void_p(buf2031.data_ptr()))
    del buf1890
    del buf1916
    del buf1981
    del buf2000
    del buf2010
    del buf2028
    del convolution_1
    del le_186
    del primals_29
    del squeeze_4
    del unsqueeze_3194
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2036 = aten.convolution_backward(buf2035, relu, primals_28, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2035
    del primals_28
    buf2037 = buf2036[0]
    buf2038 = buf2036[1]
    del buf2036
    buf2039 = empty((96, ), device='cpu', dtype=torch.float32)
    buf2040 = empty((96, ), device='cpu', dtype=torch.float32)
    buf2041 = buf2030; del buf2030  # reuse
    buf2042 = buf2040; del buf2040  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_218(c_void_p(buf2041.data_ptr()), c_void_p(buf2042.data_ptr()), c_void_p(relu.data_ptr()), c_void_p(buf2037.data_ptr()), c_void_p(convolution.data_ptr()), c_void_p(unsqueeze_3206.data_ptr()), c_void_p(squeeze_1.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(buf2039.data_ptr()))
    del buf2037
    del convolution
    del primals_1
    del relu
    del squeeze_1
    del unsqueeze_3206
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2043 = aten.convolution_backward(buf2041, primals_1381, primals_27, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [False, True, False])
    del buf2041
    del primals_1381
    del primals_27
    buf2044 = buf2043[1]
    return (buf2042, buf2039, buf2029, buf2001, buf1978, buf1959, buf1917, buf1898, buf1868, buf1846, buf1823, buf1804, buf1762, buf1743, buf1146, buf1124, buf1101, buf1082, buf1040, buf1021, buf566, buf544, buf521, buf502, buf460, buf441, buf2044, buf2038, buf2034, buf2031, buf2026, buf2022, buf2020, buf2019, buf2016, buf2012, buf2002, buf2008, buf2004, buf2002, buf1998, buf1994, buf1992, buf1991, buf1988, buf1984, buf1982, buf1975, buf1971, buf1969, buf1968, buf1965, buf1962, buf1940, buf1956, buf1952, buf1950, buf1949, buf1946, buf1943, buf1940, buf1939, buf1936, buf1932, buf1930, buf1929, buf1926, buf1922, buf1920, buf1914, buf1910, buf1908, buf1907, buf1904, buf1900, buf1892, buf1894, buf1892, buf1889, buf1885, buf1881, buf1878, buf1877, buf1873, buf1870, buf1865, buf1861, buf1859, buf1858, buf1855, buf1851, buf1849, buf1843, buf1839, buf1837, buf1836, buf1833, buf1829, buf1827, buf1820, buf1816, buf1814, buf1813, buf1810, buf1807, buf1785, buf1801, buf1797, buf1795, buf1794, buf1791, buf1788, buf1785, buf1784, buf1781, buf1777, buf1775, buf1774, buf1771, buf1767, buf1765, buf1759, buf1755, buf1753, buf1752, buf1749, buf1745, buf1737, buf1739, buf1737, buf1734, buf1730, buf1726, buf1723, buf1722, buf1718, buf1716, buf1715, buf1712, buf1708, buf1706, buf1705, buf1702, buf1698, buf1696, buf1692, buf1689, buf1685, buf1683, buf1682, buf1679, buf1675, buf1673, buf1670, buf1667, buf1663, buf1661, buf1660, buf1657, buf1654, buf1632, buf1651, buf1648, buf1644, buf1642, buf1641, buf1638, buf1635, buf1632, buf1631, buf1628, buf1624, buf1622, buf1621, buf1618, buf1614, buf1612, buf1609, buf1606, buf1602, buf1600, buf1599, buf1596, buf1592, buf1590, buf1588, buf1584, buf1581, buf1580, buf1576, buf1574, buf1573, buf1570, buf1566, buf1564, buf1563, buf1560, buf1556, buf1554, buf1550, buf1547, buf1543, buf1541, buf1540, buf1537, buf1533, buf1531, buf1528, buf1525, buf1521, buf1519, buf1518, buf1515, buf1512, buf1490, buf1509, buf1506, buf1502, buf1500, buf1499, buf1496, buf1493, buf1490, buf1489, buf1486, buf1482, buf1480, buf1479, buf1476, buf1472, buf1470, buf1467, buf1464, buf1460, buf1458, buf1457, buf1454, buf1450, buf1448, buf1446, buf1442, buf1439, buf1438, buf1434, buf1432, buf1431, buf1428, buf1424, buf1422, buf1421, buf1418, buf1414, buf1412, buf1408, buf1405, buf1401, buf1399, buf1398, buf1395, buf1391, buf1389, buf1386, buf1383, buf1379, buf1377, buf1376, buf1373, buf1370, buf1348, buf1367, buf1364, buf1360, buf1358, buf1357, buf1354, buf1351, buf1348, buf1347, buf1344, buf1340, buf1338, buf1337, buf1334, buf1330, buf1328, buf1325, buf1322, buf1318, buf1316, buf1315, buf1312, buf1308, buf1306, buf1304, buf1300, buf1297, buf1296, buf1292, buf1290, buf1289, buf1286, buf1282, buf1280, buf1279, buf1276, buf1272, buf1270, buf1266, buf1263, buf1259, buf1257, buf1256, buf1253, buf1249, buf1247, buf1244, buf1241, buf1237, buf1235, buf1234, buf1231, buf1228, buf1206, buf1225, buf1222, buf1218, buf1216, buf1215, buf1212, buf1209, buf1206, buf1205, buf1202, buf1198, buf1196, buf1195, buf1192, buf1188, buf1186, buf1183, buf1180, buf1176, buf1174, buf1173, buf1170, buf1166, buf1164, buf1162, buf1158, buf1155, buf1154, buf1150, buf1147, buf1143, buf1139, buf1137, buf1136, buf1133, buf1129, buf1127, buf1121, buf1117, buf1115, buf1114, buf1111, buf1107, buf1105, buf1098, buf1094, buf1092, buf1091, buf1088, buf1085, buf1063, buf1079, buf1075, buf1073, buf1072, buf1069, buf1066, buf1063, buf1062, buf1059, buf1055, buf1053, buf1052, buf1049, buf1045, buf1043, buf1037, buf1033, buf1031, buf1030, buf1027, buf1023, buf1015, buf1017, buf1015, buf1012, buf1008, buf1004, buf1001, buf1000, buf996, buf994, buf993, buf990, buf986, buf984, buf983, buf980, buf976, buf974, buf970, buf967, buf963, buf961, buf960, buf957, buf953, buf951, buf948, buf945, buf941, buf939, buf938, buf935, buf932, buf910, buf929, buf926, buf922, buf920, buf919, buf916, buf913, buf910, buf909, buf906, buf902, buf900, buf899, buf896, buf892, buf890, buf887, buf884, buf880, buf878, buf877, buf874, buf870, buf868, buf866, buf862, buf859, buf858, buf854, buf852, buf851, buf848, buf844, buf842, buf841, buf838, buf834, buf832, buf828, buf825, buf821, buf819, buf818, buf815, buf811, buf809, buf806, buf803, buf799, buf797, buf796, buf793, buf790, buf768, buf787, buf784, buf780, buf778, buf777, buf774, buf771, buf768, buf767, buf764, buf760, buf758, buf757, buf754, buf750, buf748, buf745, buf742, buf738, buf736, buf735, buf732, buf728, buf726, buf724, buf720, buf717, buf716, buf712, buf710, buf709, buf706, buf702, buf700, buf699, buf696, buf692, buf690, buf686, buf683, buf679, buf677, buf676, buf673, buf669, buf667, buf664, buf661, buf657, buf655, buf654, buf651, buf648, buf626, buf645, buf642, buf638, buf636, buf635, buf632, buf629, buf626, buf625, buf622, buf618, buf616, buf615, buf612, buf608, buf606, buf603, buf600, buf596, buf594, buf593, buf590, buf586, buf584, buf582, buf578, buf576, buf575, buf571, buf568, buf563, buf559, buf557, buf556, buf553, buf549, buf547, buf541, buf537, buf535, buf534, buf531, buf527, buf525, buf518, buf514, buf512, buf511, buf508, buf505, buf483, buf499, buf495, buf493, buf492, buf489, buf486, buf483, buf482, buf479, buf475, buf473, buf472, buf469, buf465, buf463, buf457, buf453, buf451, buf450, buf447, buf443, buf435, buf437, buf435, buf432, buf428, buf424, buf421, buf420, buf416, buf414, buf413, buf410, buf406, buf404, buf403, buf400, buf396, buf394, buf390, buf387, buf383, buf381, buf380, buf377, buf373, buf371, buf368, buf365, buf361, buf359, buf358, buf355, buf352, buf330, buf349, buf346, buf342, buf340, buf339, buf336, buf333, buf330, buf329, buf326, buf322, buf320, buf319, buf316, buf312, buf310, buf307, buf304, buf300, buf298, buf297, buf294, buf290, buf288, buf286, buf282, buf279, buf278, buf274, buf272, buf271, buf268, buf264, buf262, buf261, buf258, buf254, buf252, buf248, buf245, buf241, buf239, buf238, buf235, buf231, buf229, buf226, buf223, buf219, buf217, buf216, buf213, buf210, buf188, buf207, buf204, buf200, buf198, buf197, buf194, buf191, buf188, buf187, buf184, buf180, buf178, buf177, buf174, buf170, buf168, buf165, buf162, buf158, buf156, buf155, buf152, buf148, buf146, buf144, buf140, buf137, buf136, buf132, buf130, buf129, buf126, buf122, buf120, buf119, buf116, buf112, buf110, buf106, buf103, buf99, buf97, buf96, buf93, buf89, buf87, buf84, buf81, buf77, buf75, buf74, buf71, buf68, buf46, buf65, buf62, buf58, buf56, buf55, buf52, buf49, buf46, buf45, buf42, buf38, buf36, buf35, buf32, buf28, buf26, buf23, buf20, buf16, buf14, buf13, buf10, buf6, buf4, reinterpret_tensor(buf1, (1000, 4320), (4320, 1), 0), reinterpret_tensor(buf2, (1000, ), (1, ), 0), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_3 = rand_strided((96, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((54, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((54, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_6 = rand_strided((54, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((96, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_8 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_9 = rand_strided((108, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((108, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_11 = rand_strided((108, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_12 = rand_strided((108, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((108, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_14 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_15 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_16 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_18 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_20 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_21 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_22 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_23 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_24 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_26 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_27 = rand_strided((96, 3, 3, 3), (27, 1, 9, 3), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((54, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_29 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((54, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_32 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((54, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_35 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_36 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_38 = rand_strided((54, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_39 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_41 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_42 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_44 = rand_strided((54, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_45 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_48 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_51 = rand_strided((54, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_53 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((54, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_59 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_60 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((54, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_63 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_64 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_66 = rand_strided((54, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_67 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_70 = rand_strided((54, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_71 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((54, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((54, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_75 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_77 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((54, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_80 = rand_strided((54, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_81 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_83 = rand_strided((108, 270, 1, 1), (270, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_84 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_86 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_87 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_89 = rand_strided((108, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_90 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_93 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_96 = rand_strided((108, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_98 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_101 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((108, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_104 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_105 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_107 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_108 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_110 = rand_strided((108, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_111 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_114 = rand_strided((108, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_116 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_118 = rand_strided((108, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_119 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_120 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_122 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_123 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_125 = rand_strided((108, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_126 = rand_strided((108, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_129 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    primals_131 = rand_strided((108, 270, 1, 1), (270, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_132 = rand_strided((108, 270, 1, 1), (270, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_135 = rand_strided((216, 540, 1, 1), (540, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_138 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_140 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_143 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_144 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_146 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_147 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_148 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_150 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_151 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_154 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_155 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_156 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_158 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_159 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_160 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_162 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_164 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_166 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_168 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_170 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_171 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_174 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_176 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_179 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_180 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_182 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_183 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_186 = rand_strided((216, 540, 1, 1), (540, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_189 = rand_strided((216, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_190 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_192 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_197 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_198 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_201 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_204 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_206 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_209 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_210 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_212 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_213 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_214 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_216 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_218 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_220 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_222 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_224 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_225 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_226 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_228 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_230 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_233 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_234 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_236 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_237 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_238 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_240 = rand_strided((216, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_243 = rand_strided((216, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_244 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_246 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_250 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_251 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_252 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_254 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_255 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_256 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_258 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_260 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_262 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_263 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_264 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_266 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_267 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_268 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_270 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_272 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_274 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_276 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_278 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_279 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_282 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_284 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_286 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_287 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_288 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_290 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_291 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_292 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_294 = rand_strided((216, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_297 = rand_strided((216, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_300 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_302 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_304 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_305 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_306 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_308 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_309 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_310 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_312 = rand_strided((216, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_316 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_317 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_318 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_320 = rand_strided((216, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_321 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_322 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_324 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_326 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_328 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_330 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_332 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_333 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_334 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_336 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_338 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_340 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_341 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_342 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_344 = rand_strided((216, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_345 = rand_strided((216, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_346 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    primals_348 = rand_strided((432, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_351 = rand_strided((432, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_352 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_354 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_357 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_358 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_359 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_362 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_364 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_366 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_368 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_369 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_371 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_372 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_375 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_376 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_378 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_379 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_380 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_382 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_383 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_384 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_386 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_387 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_388 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_390 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_391 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_393 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_394 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_395 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_397 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_399 = rand_strided((216, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_400 = rand_strided((216, 1080, 1, 1), (1080, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_401 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_403 = rand_strided((432, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_404 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_406 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_407 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_408 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_410 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_411 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_412 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_414 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_415 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_416 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_418 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_419 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_420 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_422 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_423 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_424 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_426 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_427 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_428 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_430 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_431 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_432 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_434 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_435 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_436 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_438 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_439 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_440 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_442 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_443 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_444 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_446 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_447 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_448 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_450 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_451 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_452 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_454 = rand_strided((432, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_455 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_457 = rand_strided((432, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_458 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_460 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_461 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_462 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_464 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_465 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_466 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_468 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_469 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_470 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_472 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_473 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_474 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_476 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_477 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_478 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_480 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_481 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_482 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_484 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_485 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_486 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_488 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_489 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_490 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_492 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_493 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_494 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_496 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_497 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_498 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_500 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_501 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_502 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_504 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_505 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_506 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_508 = rand_strided((432, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_509 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_511 = rand_strided((432, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_512 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_514 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_515 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_516 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_518 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_519 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_520 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_522 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_523 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_524 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_526 = rand_strided((432, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_527 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_528 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_530 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_531 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_532 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_534 = rand_strided((432, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_535 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_536 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_538 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_539 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_540 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_542 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_543 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_544 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_546 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_547 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_548 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_550 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_551 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_552 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_554 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_555 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_556 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_558 = rand_strided((432, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_559 = rand_strided((432, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_560 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    primals_562 = rand_strided((864, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_563 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_565 = rand_strided((864, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_566 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_568 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_569 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_571 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_572 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_573 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_575 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_576 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_578 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_579 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_580 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_582 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_583 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_585 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_586 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_587 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_589 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_590 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_592 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_593 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_594 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_596 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_597 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_598 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_600 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_601 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_602 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_604 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_605 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_607 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_608 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_609 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_611 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_613 = rand_strided((432, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_614 = rand_strided((432, 2160, 1, 1), (2160, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_615 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_617 = rand_strided((864, 4320, 1, 1), (4320, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_618 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_620 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_621 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_622 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_624 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_625 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_626 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_628 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_629 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_630 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_632 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_633 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_634 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_636 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_637 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_638 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_640 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_641 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_642 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_644 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_645 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_646 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_648 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_649 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_650 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_652 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_653 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_654 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_656 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_657 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_658 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_660 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_661 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_662 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_664 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_665 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_666 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_668 = rand_strided((864, 4320, 1, 1), (4320, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_669 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_671 = rand_strided((864, 4320, 1, 1), (4320, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_672 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_674 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_675 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_676 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_678 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_679 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_680 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_682 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_683 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_684 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_686 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_687 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_688 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_690 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_691 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_692 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_694 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_695 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_696 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_698 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_699 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_700 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_702 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_703 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_704 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_706 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_707 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_708 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_710 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_711 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_712 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_714 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_715 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_716 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_718 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_719 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_720 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_722 = rand_strided((864, 4320, 1, 1), (4320, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_723 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_725 = rand_strided((864, 4320, 1, 1), (4320, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_726 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_728 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_729 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_730 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_732 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_733 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_734 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_736 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_737 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_738 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_740 = rand_strided((864, 1, 7, 7), (49, 49, 7, 1), device='cpu', dtype=torch.float32)
    primals_741 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_742 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_744 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_745 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_746 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_748 = rand_strided((864, 1, 5, 5), (25, 25, 5, 1), device='cpu', dtype=torch.float32)
    primals_749 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_750 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_752 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_753 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_754 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_756 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_757 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_758 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_760 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_761 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_762 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_764 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_765 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_766 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_768 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_769 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_770 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_772 = rand_strided((864, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_773 = rand_strided((864, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_774 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    primals_1381 = rand_strided((8, 3, 331, 331), (328683, 1, 993, 3), device='cpu', dtype=torch.float32)
    convolution = rand_strided((8, 96, 165, 165), (2613600, 1, 15840, 96), device='cpu', dtype=torch.float32)
    squeeze_1 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    relu = rand_strided((8, 96, 165, 165), (2613600, 1, 15840, 96), device='cpu', dtype=torch.float32)
    convolution_1 = rand_strided((8, 54, 165, 165), (1470150, 1, 8910, 54), device='cpu', dtype=torch.float32)
    squeeze_4 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd = rand_strided((8, 96, 169, 169), (2741856, 1, 16224, 96), device='cpu', dtype=torch.float32)
    convolution_2 = rand_strided((8, 96, 83, 83), (661344, 1, 7968, 96), device='cpu', dtype=torch.float32)
    convolution_3 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_7 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    relu_2 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_4 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_5 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_10 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_1 = rand_strided((8, 96, 167, 167), (2677344, 1, 16032, 96), device='cpu', dtype=torch.float32)
    getitem_8 = rand_strided((8, 96, 83, 83), (661344, 1, 7968, 96), device='cpu', dtype=torch.float32)
    getitem_9 = rand_strided((8, 96, 83, 83), (661344, 1, 7968, 96), device='cpu', dtype=torch.int64)
    convolution_6 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_13 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_2 = rand_strided((8, 54, 171, 171), (1579014, 1, 9234, 54), device='cpu', dtype=torch.float32)
    convolution_7 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_8 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_16 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    relu_4 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_9 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_10 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_19 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_3 = rand_strided((8, 54, 167, 167), (1506006, 1, 9018, 54), device='cpu', dtype=torch.float32)
    getitem_17 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.int64)
    constant_pad_nd_4 = rand_strided((8, 54, 169, 169), (1542294, 1, 9126, 54), device='cpu', dtype=torch.float32)
    convolution_11 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_12 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_22 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    relu_6 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_13 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_14 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_25 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_5 = rand_strided((8, 54, 167, 167), (1506006, 1, 9018, 54), device='cpu', dtype=torch.float32)
    convolution_15 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_16 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_28 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    relu_8 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_17 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_18 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_31 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    relu_9 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_19 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_20 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_34 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    relu_10 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_21 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_22 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_37 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_7 = rand_strided((8, 96, 167, 167), (2677344, 1, 16032, 96), device='cpu', dtype=torch.float32)
    convolution_23 = rand_strided((8, 96, 83, 83), (661344, 1, 7968, 96), device='cpu', dtype=torch.float32)
    convolution_24 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_40 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    relu_12 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_25 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    convolution_26 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_43 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_8 = rand_strided((8, 54, 165, 165), (1470150, 1, 8910, 54), device='cpu', dtype=torch.float32)
    convolution_27 = rand_strided((8, 54, 83, 83), (372006, 1, 4482, 54), device='cpu', dtype=torch.float32)
    squeeze_46 = rand_strided((54, ), (1, ), device='cpu', dtype=torch.float32)
    avg_pool2d = rand_strided((8, 96, 83, 83), (661344, 1, 7968, 96), device='cpu', dtype=torch.float32)
    constant_pad_nd_9 = rand_strided((8, 96, 165, 165), (2613600, 1, 15840, 96), device='cpu', dtype=torch.float32)
    avg_pool2d_1 = rand_strided((8, 96, 83, 83), (661344, 1, 7968, 96), device='cpu', dtype=torch.float32)
    cat_1 = rand_strided((8, 108, 83, 83), (744012, 1, 8964, 108), device='cpu', dtype=torch.float32)
    squeeze_49 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_15 = rand_strided((8, 270, 83, 83), (1860030, 1, 22410, 270), device='cpu', dtype=torch.float32)
    convolution_30 = rand_strided((8, 108, 83, 83), (744012, 1, 8964, 108), device='cpu', dtype=torch.float32)
    squeeze_52 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_10 = rand_strided((8, 108, 87, 87), (817452, 1, 9396, 108), device='cpu', dtype=torch.float32)
    convolution_31 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_32 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_55 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_17 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_33 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_34 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_58 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_11 = rand_strided((8, 108, 85, 85), (780300, 1, 9180, 108), device='cpu', dtype=torch.float32)
    getitem_47 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.int64)
    constant_pad_nd_12 = rand_strided((8, 108, 89, 89), (855468, 1, 9612, 108), device='cpu', dtype=torch.float32)
    convolution_35 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_36 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_61 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_19 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_37 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_38 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_64 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_13 = rand_strided((8, 108, 85, 85), (780300, 1, 9180, 108), device='cpu', dtype=torch.float32)
    getitem_53 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.int64)
    constant_pad_nd_14 = rand_strided((8, 108, 87, 87), (817452, 1, 9396, 108), device='cpu', dtype=torch.float32)
    convolution_39 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_40 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_67 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_21 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_41 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_42 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_70 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_15 = rand_strided((8, 108, 85, 85), (780300, 1, 9180, 108), device='cpu', dtype=torch.float32)
    convolution_43 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_44 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_73 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_23 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_45 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_46 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_76 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_24 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_47 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_48 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_79 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_25 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_49 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_50 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_82 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_17 = rand_strided((8, 108, 85, 85), (780300, 1, 9180, 108), device='cpu', dtype=torch.float32)
    convolution_51 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_52 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_85 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    relu_27 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_53 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    convolution_54 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_88 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_18 = rand_strided((8, 108, 83, 83), (744012, 1, 8964, 108), device='cpu', dtype=torch.float32)
    convolution_55 = rand_strided((8, 108, 42, 42), (190512, 1, 4536, 108), device='cpu', dtype=torch.float32)
    squeeze_91 = rand_strided((108, ), (1, ), device='cpu', dtype=torch.float32)
    avg_pool2d_2 = rand_strided((8, 270, 42, 42), (476280, 1, 11340, 270), device='cpu', dtype=torch.float32)
    constant_pad_nd_19 = rand_strided((8, 270, 83, 83), (1860030, 1, 22410, 270), device='cpu', dtype=torch.float32)
    avg_pool2d_3 = rand_strided((8, 270, 42, 42), (476280, 1, 11340, 270), device='cpu', dtype=torch.float32)
    cat_3 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_94 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_169 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_30 = rand_strided((8, 540, 42, 42), (952560, 1, 22680, 540), device='cpu', dtype=torch.float32)
    convolution_58 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_97 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_174 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_31 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_59 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_60 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_100 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_32 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_61 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_62 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_103 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_83 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    relu_33 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_63 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_64 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_106 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_34 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_65 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_66 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_109 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_89 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    convolution_67 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_68 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_112 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_36 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_69 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_70 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_115 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_71 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_72 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_118 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_38 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_73 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_74 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_121 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_39 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_75 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_76 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_124 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_40 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_77 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_78 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_127 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_79 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_80 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_130 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_42 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_81 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_82 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_133 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_83 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_136 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_244 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_44 = rand_strided((8, 1080, 42, 42), (1905120, 1, 45360, 1080), device='cpu', dtype=torch.float32)
    convolution_84 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_139 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_249 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_45 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_85 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_86 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_142 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_46 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_87 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_88 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_145 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_117 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    relu_47 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_89 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_90 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_148 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_48 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_91 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_92 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_151 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_123 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    convolution_93 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_94 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_154 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_50 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_95 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_96 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_157 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_97 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_98 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_160 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_52 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_99 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_100 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_163 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_53 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_101 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_102 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_166 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_54 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_103 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_104 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_169 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_105 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_106 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_172 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_56 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_107 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_108 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_175 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_109 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_178 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_319 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_58 = rand_strided((8, 1080, 42, 42), (1905120, 1, 45360, 1080), device='cpu', dtype=torch.float32)
    convolution_110 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_181 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_324 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_59 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_111 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_112 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_184 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_60 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_113 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_114 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_187 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_151 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    relu_61 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_115 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_116 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_190 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_62 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_117 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_118 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_193 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_157 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    convolution_119 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_120 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_196 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_64 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_121 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_122 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_199 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_123 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_124 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_202 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_66 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_125 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_126 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_205 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_67 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_127 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_128 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_208 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_68 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_129 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_130 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_211 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_131 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_132 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_214 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_70 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_133 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_134 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_217 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_135 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_220 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_394 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_72 = rand_strided((8, 1080, 42, 42), (1905120, 1, 45360, 1080), device='cpu', dtype=torch.float32)
    convolution_136 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_223 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    add_399 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    relu_73 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_137 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_138 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_226 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_74 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_139 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_140 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_229 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_185 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    relu_75 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_141 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_142 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_232 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_76 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_143 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_144 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_235 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_191 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.int64)
    convolution_145 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_146 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_238 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_78 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_147 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_148 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_241 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_149 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_150 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_244 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_80 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_151 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_152 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_247 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_81 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_153 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_154 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_250 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_82 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_155 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_156 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_253 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_157 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_158 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_256 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    relu_84 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_159 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    convolution_160 = rand_strided((8, 216, 42, 42), (381024, 1, 9072, 216), device='cpu', dtype=torch.float32)
    squeeze_259 = rand_strided((216, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_161 = rand_strided((8, 432, 42, 42), (762048, 1, 18144, 432), device='cpu', dtype=torch.float32)
    squeeze_262 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_86 = rand_strided((8, 1080, 42, 42), (1905120, 1, 45360, 1080), device='cpu', dtype=torch.float32)
    convolution_162 = rand_strided((8, 432, 42, 42), (762048, 1, 18144, 432), device='cpu', dtype=torch.float32)
    squeeze_265 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_20 = rand_strided((8, 432, 45, 45), (874800, 1, 19440, 432), device='cpu', dtype=torch.float32)
    convolution_163 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_164 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_268 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_88 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_165 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_166 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_271 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_21 = rand_strided((8, 432, 43, 43), (798768, 1, 18576, 432), device='cpu', dtype=torch.float32)
    getitem_219 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    constant_pad_nd_22 = rand_strided((8, 432, 47, 47), (954288, 1, 20304, 432), device='cpu', dtype=torch.float32)
    convolution_167 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_168 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_274 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_90 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_169 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_170 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_277 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_23 = rand_strided((8, 432, 43, 43), (798768, 1, 18576, 432), device='cpu', dtype=torch.float32)
    getitem_225 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    constant_pad_nd_24 = rand_strided((8, 432, 45, 45), (874800, 1, 19440, 432), device='cpu', dtype=torch.float32)
    convolution_171 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_172 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_280 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_92 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_173 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_174 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_283 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_25 = rand_strided((8, 432, 43, 43), (798768, 1, 18576, 432), device='cpu', dtype=torch.float32)
    convolution_175 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_176 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_286 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_94 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_177 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_178 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_289 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_95 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_179 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_180 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_292 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_96 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_181 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_182 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_295 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_27 = rand_strided((8, 432, 43, 43), (798768, 1, 18576, 432), device='cpu', dtype=torch.float32)
    convolution_183 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_184 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_298 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_98 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_185 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_186 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_301 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_28 = rand_strided((8, 432, 42, 42), (762048, 1, 18144, 432), device='cpu', dtype=torch.float32)
    convolution_187 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_304 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    avg_pool2d_4 = rand_strided((8, 1080, 21, 21), (476280, 1, 22680, 1080), device='cpu', dtype=torch.float32)
    constant_pad_nd_29 = rand_strided((8, 1080, 42, 42), (1905120, 1, 45360, 1080), device='cpu', dtype=torch.float32)
    avg_pool2d_5 = rand_strided((8, 1080, 21, 21), (476280, 1, 22680, 1080), device='cpu', dtype=torch.float32)
    cat_9 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_307 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    add_549 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    relu_101 = rand_strided((8, 2160, 21, 21), (952560, 1, 45360, 2160), device='cpu', dtype=torch.float32)
    convolution_190 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_310 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    add_554 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    relu_102 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_191 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_192 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_313 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_103 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_193 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_194 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_316 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_255 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    relu_104 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_195 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_196 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_319 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_105 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_197 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_198 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_322 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_261 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    convolution_199 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_200 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_325 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_107 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_201 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_202 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_328 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_203 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_204 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_331 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_109 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_205 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_206 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_334 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_110 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_207 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_208 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_337 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_111 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_209 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_210 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_340 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_211 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_212 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_343 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_113 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_213 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_214 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_346 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_215 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_349 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    add_624 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    relu_115 = rand_strided((8, 2160, 21, 21), (952560, 1, 45360, 2160), device='cpu', dtype=torch.float32)
    convolution_216 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_352 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    add_629 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    relu_116 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_217 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_218 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_355 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_117 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_219 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_220 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_358 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_289 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    relu_118 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_221 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_222 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_361 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_119 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_223 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_224 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_364 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_295 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    convolution_225 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_226 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_367 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_121 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_227 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_228 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_370 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_229 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_230 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_373 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_123 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_231 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_232 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_376 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_124 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_233 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_234 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_379 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_125 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_235 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_236 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_382 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_237 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_238 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_385 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_127 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_239 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_240 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_388 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_241 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_391 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    add_699 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    relu_129 = rand_strided((8, 2160, 21, 21), (952560, 1, 45360, 2160), device='cpu', dtype=torch.float32)
    convolution_242 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_394 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    add_704 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    relu_130 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_243 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_244 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_397 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_131 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_245 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_246 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_400 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_323 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    relu_132 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_247 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_248 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_403 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_133 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_249 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_250 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_406 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_329 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.int64)
    convolution_251 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_252 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_409 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_135 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_253 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_254 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_412 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_255 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_256 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_415 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_137 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_257 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_258 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_418 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_138 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_259 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_260 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_421 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_139 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_261 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_262 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_424 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_263 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_264 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_427 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    relu_141 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_265 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    convolution_266 = rand_strided((8, 432, 21, 21), (190512, 1, 9072, 432), device='cpu', dtype=torch.float32)
    squeeze_430 = rand_strided((432, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_267 = rand_strided((8, 864, 21, 21), (381024, 1, 18144, 864), device='cpu', dtype=torch.float32)
    squeeze_433 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_143 = rand_strided((8, 2160, 21, 21), (952560, 1, 45360, 2160), device='cpu', dtype=torch.float32)
    convolution_268 = rand_strided((8, 864, 21, 21), (381024, 1, 18144, 864), device='cpu', dtype=torch.float32)
    squeeze_436 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_30 = rand_strided((8, 864, 25, 25), (540000, 1, 21600, 864), device='cpu', dtype=torch.float32)
    convolution_269 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_270 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_439 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_145 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_271 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_272 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_442 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_31 = rand_strided((8, 864, 23, 23), (457056, 1, 19872, 864), device='cpu', dtype=torch.float32)
    getitem_357 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    constant_pad_nd_32 = rand_strided((8, 864, 27, 27), (629856, 1, 23328, 864), device='cpu', dtype=torch.float32)
    convolution_273 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_274 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_445 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_147 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_275 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_276 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_448 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_33 = rand_strided((8, 864, 23, 23), (457056, 1, 19872, 864), device='cpu', dtype=torch.float32)
    getitem_363 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    constant_pad_nd_34 = rand_strided((8, 864, 25, 25), (540000, 1, 21600, 864), device='cpu', dtype=torch.float32)
    convolution_277 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_278 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_451 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_149 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_279 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_280 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_454 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_35 = rand_strided((8, 864, 23, 23), (457056, 1, 19872, 864), device='cpu', dtype=torch.float32)
    convolution_281 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_282 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_457 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_151 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_283 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_284 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_460 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_152 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_285 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_286 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_463 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_153 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_287 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_288 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_466 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_37 = rand_strided((8, 864, 23, 23), (457056, 1, 19872, 864), device='cpu', dtype=torch.float32)
    convolution_289 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_290 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_469 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_155 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_291 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_292 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_472 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    constant_pad_nd_38 = rand_strided((8, 864, 21, 21), (381024, 1, 18144, 864), device='cpu', dtype=torch.float32)
    convolution_293 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_475 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    avg_pool2d_6 = rand_strided((8, 2160, 11, 11), (261360, 1, 23760, 2160), device='cpu', dtype=torch.float32)
    constant_pad_nd_39 = rand_strided((8, 2160, 21, 21), (952560, 1, 45360, 2160), device='cpu', dtype=torch.float32)
    avg_pool2d_7 = rand_strided((8, 2160, 11, 11), (261360, 1, 23760, 2160), device='cpu', dtype=torch.float32)
    cat_14 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_478 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    add_854 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    relu_158 = rand_strided((8, 4320, 11, 11), (522720, 1, 47520, 4320), device='cpu', dtype=torch.float32)
    convolution_296 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_481 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    add_859 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    relu_159 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_297 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_298 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_484 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_160 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_299 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_300 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_487 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_393 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    relu_161 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_301 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_302 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_490 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_162 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_303 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_304 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_493 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_399 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    convolution_305 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_306 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_496 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_164 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_307 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_308 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_499 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_309 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_310 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_502 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_166 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_311 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_312 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_505 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_167 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_313 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_314 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_508 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_168 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_315 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_316 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_511 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_317 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_318 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_514 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_170 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_319 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_320 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_517 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_321 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_520 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    add_929 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    relu_172 = rand_strided((8, 4320, 11, 11), (522720, 1, 47520, 4320), device='cpu', dtype=torch.float32)
    convolution_322 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_523 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    add_934 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    relu_173 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_323 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_324 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_526 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_174 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_325 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_326 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_529 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_427 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    relu_175 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_327 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_328 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_532 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_176 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_329 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_330 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_535 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_433 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    convolution_331 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_332 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_538 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_178 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_333 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_334 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_541 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_335 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_336 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_544 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_180 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_337 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_338 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_547 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_181 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_339 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_340 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_550 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_182 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_341 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_342 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_553 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_343 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_344 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_556 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_184 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_345 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_346 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_559 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_347 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_562 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    add_1004 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    relu_186 = rand_strided((8, 4320, 11, 11), (522720, 1, 47520, 4320), device='cpu', dtype=torch.float32)
    convolution_348 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_565 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    add_1009 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    relu_187 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_349 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_350 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_568 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_188 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_351 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_352 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_571 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_461 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    relu_189 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_353 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_354 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_574 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_190 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_355 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_356 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_577 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_467 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.int64)
    convolution_357 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_358 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_580 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_192 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_359 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_360 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_583 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_361 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_362 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_586 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_194 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_363 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_364 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_589 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_195 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_365 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_366 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_592 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_196 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_367 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_368 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_595 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_369 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_370 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_598 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    relu_198 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_371 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    convolution_372 = rand_strided((8, 864, 11, 11), (104544, 1, 9504, 864), device='cpu', dtype=torch.float32)
    squeeze_601 = rand_strided((864, ), (1, ), device='cpu', dtype=torch.float32)
    clone = rand_strided((8, 4320), (4320, 1), device='cpu', dtype=torch.float32)
    permute_1 = rand_strided((1000, 4320), (4320, 1), device='cpu', dtype=torch.float32)
    le = rand_strided((8, 4320, 11, 11), (522720, 1, 47520, 4320), device='cpu', dtype=torch.bool)
    unsqueeze_806 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_818 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_830 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_842 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_854 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_866 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_878 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_890 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_902 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_914 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_926 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_938 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_950 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_962 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_974 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_986 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_998 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1010 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1022 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1034 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1046 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1058 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1070 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1082 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1094 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1106 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1118 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1130 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1142 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1154 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1166 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1178 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1190 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1202 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1214 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1226 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1238 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1250 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1262 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1274 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1286 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1298 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1310 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_43 = rand_strided((8, 864, 21, 21), (381024, 1, 18144, 864), device='cpu', dtype=torch.bool)
    unsqueeze_1322 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1334 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_45 = rand_strided((8, 864, 21, 21), (381024, 1, 18144, 864), device='cpu', dtype=torch.bool)
    unsqueeze_1346 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1358 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1370 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1382 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1394 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1406 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1418 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1430 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1442 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1454 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1466 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1478 = rand_strided((1, 864, 1, 1), (864, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1490 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1502 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1514 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1526 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1538 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1550 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1562 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1574 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1586 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1598 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1610 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1622 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1634 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1646 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1658 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1670 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1682 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1694 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1706 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1718 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1730 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1742 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1754 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1766 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1778 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1790 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1802 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1814 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1826 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1838 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1850 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1862 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1874 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1886 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1898 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1910 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1922 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1934 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1946 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1958 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1970 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1982 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1994 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_100 = rand_strided((8, 432, 42, 42), (762048, 1, 18144, 432), device='cpu', dtype=torch.bool)
    unsqueeze_2006 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2018 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_102 = rand_strided((8, 432, 42, 42), (762048, 1, 18144, 432), device='cpu', dtype=torch.bool)
    unsqueeze_2030 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2042 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2054 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2066 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2078 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2090 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2102 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2114 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2126 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2138 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2150 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2162 = rand_strided((1, 432, 1, 1), (432, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2174 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2186 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2198 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2210 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2222 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2234 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2246 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2258 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2270 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2282 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2294 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2306 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2318 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2330 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2342 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2354 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2366 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2378 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2390 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2402 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2414 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2426 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2438 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2450 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2462 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2474 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2486 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2498 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2510 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2522 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2534 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2546 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2558 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2570 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2582 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2594 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2606 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2618 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2630 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2642 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2654 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2666 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2678 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2690 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2702 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2714 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2726 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2738 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2750 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2762 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2774 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2786 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2798 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2810 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2822 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2834 = rand_strided((1, 216, 1, 1), (216, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2846 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_171 = rand_strided((8, 108, 83, 83), (744012, 1, 8964, 108), device='cpu', dtype=torch.bool)
    unsqueeze_2858 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2870 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_173 = rand_strided((8, 108, 83, 83), (744012, 1, 8964, 108), device='cpu', dtype=torch.bool)
    unsqueeze_2882 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2894 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2906 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2918 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2930 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2942 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2954 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2966 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2978 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2990 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3002 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3014 = rand_strided((1, 108, 1, 1), (108, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3026 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_186 = rand_strided((8, 54, 165, 165), (1470150, 1, 8910, 54), device='cpu', dtype=torch.bool)
    unsqueeze_3038 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3050 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3062 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3074 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3086 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3098 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3110 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3122 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3134 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3146 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3158 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3170 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3182 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3194 = rand_strided((1, 54, 1, 1), (54, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3206 = rand_strided((1, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_36, primals_38, primals_39, primals_41, primals_42, primals_44, primals_45, primals_46, primals_48, primals_49, primals_51, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_60, primals_62, primals_63, primals_64, primals_66, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_75, primals_77, primals_79, primals_80, primals_81, primals_83, primals_84, primals_86, primals_87, primals_89, primals_90, primals_91, primals_93, primals_94, primals_96, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_105, primals_107, primals_108, primals_110, primals_111, primals_112, primals_114, primals_115, primals_116, primals_118, primals_119, primals_120, primals_122, primals_123, primals_125, primals_126, primals_127, primals_129, primals_131, primals_132, primals_133, primals_135, primals_136, primals_138, primals_139, primals_140, primals_142, primals_143, primals_144, primals_146, primals_147, primals_148, primals_150, primals_151, primals_152, primals_154, primals_155, primals_156, primals_158, primals_159, primals_160, primals_162, primals_163, primals_164, primals_166, primals_167, primals_168, primals_170, primals_171, primals_172, primals_174, primals_175, primals_176, primals_178, primals_179, primals_180, primals_182, primals_183, primals_184, primals_186, primals_187, primals_189, primals_190, primals_192, primals_193, primals_194, primals_196, primals_197, primals_198, primals_200, primals_201, primals_202, primals_204, primals_205, primals_206, primals_208, primals_209, primals_210, primals_212, primals_213, primals_214, primals_216, primals_217, primals_218, primals_220, primals_221, primals_222, primals_224, primals_225, primals_226, primals_228, primals_229, primals_230, primals_232, primals_233, primals_234, primals_236, primals_237, primals_238, primals_240, primals_241, primals_243, primals_244, primals_246, primals_247, primals_248, primals_250, primals_251, primals_252, primals_254, primals_255, primals_256, primals_258, primals_259, primals_260, primals_262, primals_263, primals_264, primals_266, primals_267, primals_268, primals_270, primals_271, primals_272, primals_274, primals_275, primals_276, primals_278, primals_279, primals_280, primals_282, primals_283, primals_284, primals_286, primals_287, primals_288, primals_290, primals_291, primals_292, primals_294, primals_295, primals_297, primals_298, primals_300, primals_301, primals_302, primals_304, primals_305, primals_306, primals_308, primals_309, primals_310, primals_312, primals_313, primals_314, primals_316, primals_317, primals_318, primals_320, primals_321, primals_322, primals_324, primals_325, primals_326, primals_328, primals_329, primals_330, primals_332, primals_333, primals_334, primals_336, primals_337, primals_338, primals_340, primals_341, primals_342, primals_344, primals_345, primals_346, primals_348, primals_349, primals_351, primals_352, primals_354, primals_355, primals_357, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_366, primals_368, primals_369, primals_371, primals_372, primals_373, primals_375, primals_376, primals_378, primals_379, primals_380, primals_382, primals_383, primals_384, primals_386, primals_387, primals_388, primals_390, primals_391, primals_393, primals_394, primals_395, primals_397, primals_399, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_408, primals_410, primals_411, primals_412, primals_414, primals_415, primals_416, primals_418, primals_419, primals_420, primals_422, primals_423, primals_424, primals_426, primals_427, primals_428, primals_430, primals_431, primals_432, primals_434, primals_435, primals_436, primals_438, primals_439, primals_440, primals_442, primals_443, primals_444, primals_446, primals_447, primals_448, primals_450, primals_451, primals_452, primals_454, primals_455, primals_457, primals_458, primals_460, primals_461, primals_462, primals_464, primals_465, primals_466, primals_468, primals_469, primals_470, primals_472, primals_473, primals_474, primals_476, primals_477, primals_478, primals_480, primals_481, primals_482, primals_484, primals_485, primals_486, primals_488, primals_489, primals_490, primals_492, primals_493, primals_494, primals_496, primals_497, primals_498, primals_500, primals_501, primals_502, primals_504, primals_505, primals_506, primals_508, primals_509, primals_511, primals_512, primals_514, primals_515, primals_516, primals_518, primals_519, primals_520, primals_522, primals_523, primals_524, primals_526, primals_527, primals_528, primals_530, primals_531, primals_532, primals_534, primals_535, primals_536, primals_538, primals_539, primals_540, primals_542, primals_543, primals_544, primals_546, primals_547, primals_548, primals_550, primals_551, primals_552, primals_554, primals_555, primals_556, primals_558, primals_559, primals_560, primals_562, primals_563, primals_565, primals_566, primals_568, primals_569, primals_571, primals_572, primals_573, primals_575, primals_576, primals_578, primals_579, primals_580, primals_582, primals_583, primals_585, primals_586, primals_587, primals_589, primals_590, primals_592, primals_593, primals_594, primals_596, primals_597, primals_598, primals_600, primals_601, primals_602, primals_604, primals_605, primals_607, primals_608, primals_609, primals_611, primals_613, primals_614, primals_615, primals_617, primals_618, primals_620, primals_621, primals_622, primals_624, primals_625, primals_626, primals_628, primals_629, primals_630, primals_632, primals_633, primals_634, primals_636, primals_637, primals_638, primals_640, primals_641, primals_642, primals_644, primals_645, primals_646, primals_648, primals_649, primals_650, primals_652, primals_653, primals_654, primals_656, primals_657, primals_658, primals_660, primals_661, primals_662, primals_664, primals_665, primals_666, primals_668, primals_669, primals_671, primals_672, primals_674, primals_675, primals_676, primals_678, primals_679, primals_680, primals_682, primals_683, primals_684, primals_686, primals_687, primals_688, primals_690, primals_691, primals_692, primals_694, primals_695, primals_696, primals_698, primals_699, primals_700, primals_702, primals_703, primals_704, primals_706, primals_707, primals_708, primals_710, primals_711, primals_712, primals_714, primals_715, primals_716, primals_718, primals_719, primals_720, primals_722, primals_723, primals_725, primals_726, primals_728, primals_729, primals_730, primals_732, primals_733, primals_734, primals_736, primals_737, primals_738, primals_740, primals_741, primals_742, primals_744, primals_745, primals_746, primals_748, primals_749, primals_750, primals_752, primals_753, primals_754, primals_756, primals_757, primals_758, primals_760, primals_761, primals_762, primals_764, primals_765, primals_766, primals_768, primals_769, primals_770, primals_772, primals_773, primals_774, primals_1381, convolution, squeeze_1, relu, convolution_1, squeeze_4, constant_pad_nd, convolution_2, convolution_3, squeeze_7, relu_2, convolution_4, convolution_5, squeeze_10, constant_pad_nd_1, getitem_8, getitem_9, convolution_6, squeeze_13, constant_pad_nd_2, convolution_7, convolution_8, squeeze_16, relu_4, convolution_9, convolution_10, squeeze_19, constant_pad_nd_3, getitem_17, constant_pad_nd_4, convolution_11, convolution_12, squeeze_22, relu_6, convolution_13, convolution_14, squeeze_25, constant_pad_nd_5, convolution_15, convolution_16, squeeze_28, relu_8, convolution_17, convolution_18, squeeze_31, relu_9, convolution_19, convolution_20, squeeze_34, relu_10, convolution_21, convolution_22, squeeze_37, constant_pad_nd_7, convolution_23, convolution_24, squeeze_40, relu_12, convolution_25, convolution_26, squeeze_43, constant_pad_nd_8, convolution_27, squeeze_46, avg_pool2d, constant_pad_nd_9, avg_pool2d_1, cat_1, squeeze_49, relu_15, convolution_30, squeeze_52, constant_pad_nd_10, convolution_31, convolution_32, squeeze_55, relu_17, convolution_33, convolution_34, squeeze_58, constant_pad_nd_11, getitem_47, constant_pad_nd_12, convolution_35, convolution_36, squeeze_61, relu_19, convolution_37, convolution_38, squeeze_64, constant_pad_nd_13, getitem_53, constant_pad_nd_14, convolution_39, convolution_40, squeeze_67, relu_21, convolution_41, convolution_42, squeeze_70, constant_pad_nd_15, convolution_43, convolution_44, squeeze_73, relu_23, convolution_45, convolution_46, squeeze_76, relu_24, convolution_47, convolution_48, squeeze_79, relu_25, convolution_49, convolution_50, squeeze_82, constant_pad_nd_17, convolution_51, convolution_52, squeeze_85, relu_27, convolution_53, convolution_54, squeeze_88, constant_pad_nd_18, convolution_55, squeeze_91, avg_pool2d_2, constant_pad_nd_19, avg_pool2d_3, cat_3, squeeze_94, add_169, relu_30, convolution_58, squeeze_97, add_174, relu_31, convolution_59, convolution_60, squeeze_100, relu_32, convolution_61, convolution_62, squeeze_103, getitem_83, relu_33, convolution_63, convolution_64, squeeze_106, relu_34, convolution_65, convolution_66, squeeze_109, getitem_89, convolution_67, convolution_68, squeeze_112, relu_36, convolution_69, convolution_70, squeeze_115, convolution_71, convolution_72, squeeze_118, relu_38, convolution_73, convolution_74, squeeze_121, relu_39, convolution_75, convolution_76, squeeze_124, relu_40, convolution_77, convolution_78, squeeze_127, convolution_79, convolution_80, squeeze_130, relu_42, convolution_81, convolution_82, squeeze_133, convolution_83, squeeze_136, add_244, relu_44, convolution_84, squeeze_139, add_249, relu_45, convolution_85, convolution_86, squeeze_142, relu_46, convolution_87, convolution_88, squeeze_145, getitem_117, relu_47, convolution_89, convolution_90, squeeze_148, relu_48, convolution_91, convolution_92, squeeze_151, getitem_123, convolution_93, convolution_94, squeeze_154, relu_50, convolution_95, convolution_96, squeeze_157, convolution_97, convolution_98, squeeze_160, relu_52, convolution_99, convolution_100, squeeze_163, relu_53, convolution_101, convolution_102, squeeze_166, relu_54, convolution_103, convolution_104, squeeze_169, convolution_105, convolution_106, squeeze_172, relu_56, convolution_107, convolution_108, squeeze_175, convolution_109, squeeze_178, add_319, relu_58, convolution_110, squeeze_181, add_324, relu_59, convolution_111, convolution_112, squeeze_184, relu_60, convolution_113, convolution_114, squeeze_187, getitem_151, relu_61, convolution_115, convolution_116, squeeze_190, relu_62, convolution_117, convolution_118, squeeze_193, getitem_157, convolution_119, convolution_120, squeeze_196, relu_64, convolution_121, convolution_122, squeeze_199, convolution_123, convolution_124, squeeze_202, relu_66, convolution_125, convolution_126, squeeze_205, relu_67, convolution_127, convolution_128, squeeze_208, relu_68, convolution_129, convolution_130, squeeze_211, convolution_131, convolution_132, squeeze_214, relu_70, convolution_133, convolution_134, squeeze_217, convolution_135, squeeze_220, add_394, relu_72, convolution_136, squeeze_223, add_399, relu_73, convolution_137, convolution_138, squeeze_226, relu_74, convolution_139, convolution_140, squeeze_229, getitem_185, relu_75, convolution_141, convolution_142, squeeze_232, relu_76, convolution_143, convolution_144, squeeze_235, getitem_191, convolution_145, convolution_146, squeeze_238, relu_78, convolution_147, convolution_148, squeeze_241, convolution_149, convolution_150, squeeze_244, relu_80, convolution_151, convolution_152, squeeze_247, relu_81, convolution_153, convolution_154, squeeze_250, relu_82, convolution_155, convolution_156, squeeze_253, convolution_157, convolution_158, squeeze_256, relu_84, convolution_159, convolution_160, squeeze_259, convolution_161, squeeze_262, relu_86, convolution_162, squeeze_265, constant_pad_nd_20, convolution_163, convolution_164, squeeze_268, relu_88, convolution_165, convolution_166, squeeze_271, constant_pad_nd_21, getitem_219, constant_pad_nd_22, convolution_167, convolution_168, squeeze_274, relu_90, convolution_169, convolution_170, squeeze_277, constant_pad_nd_23, getitem_225, constant_pad_nd_24, convolution_171, convolution_172, squeeze_280, relu_92, convolution_173, convolution_174, squeeze_283, constant_pad_nd_25, convolution_175, convolution_176, squeeze_286, relu_94, convolution_177, convolution_178, squeeze_289, relu_95, convolution_179, convolution_180, squeeze_292, relu_96, convolution_181, convolution_182, squeeze_295, constant_pad_nd_27, convolution_183, convolution_184, squeeze_298, relu_98, convolution_185, convolution_186, squeeze_301, constant_pad_nd_28, convolution_187, squeeze_304, avg_pool2d_4, constant_pad_nd_29, avg_pool2d_5, cat_9, squeeze_307, add_549, relu_101, convolution_190, squeeze_310, add_554, relu_102, convolution_191, convolution_192, squeeze_313, relu_103, convolution_193, convolution_194, squeeze_316, getitem_255, relu_104, convolution_195, convolution_196, squeeze_319, relu_105, convolution_197, convolution_198, squeeze_322, getitem_261, convolution_199, convolution_200, squeeze_325, relu_107, convolution_201, convolution_202, squeeze_328, convolution_203, convolution_204, squeeze_331, relu_109, convolution_205, convolution_206, squeeze_334, relu_110, convolution_207, convolution_208, squeeze_337, relu_111, convolution_209, convolution_210, squeeze_340, convolution_211, convolution_212, squeeze_343, relu_113, convolution_213, convolution_214, squeeze_346, convolution_215, squeeze_349, add_624, relu_115, convolution_216, squeeze_352, add_629, relu_116, convolution_217, convolution_218, squeeze_355, relu_117, convolution_219, convolution_220, squeeze_358, getitem_289, relu_118, convolution_221, convolution_222, squeeze_361, relu_119, convolution_223, convolution_224, squeeze_364, getitem_295, convolution_225, convolution_226, squeeze_367, relu_121, convolution_227, convolution_228, squeeze_370, convolution_229, convolution_230, squeeze_373, relu_123, convolution_231, convolution_232, squeeze_376, relu_124, convolution_233, convolution_234, squeeze_379, relu_125, convolution_235, convolution_236, squeeze_382, convolution_237, convolution_238, squeeze_385, relu_127, convolution_239, convolution_240, squeeze_388, convolution_241, squeeze_391, add_699, relu_129, convolution_242, squeeze_394, add_704, relu_130, convolution_243, convolution_244, squeeze_397, relu_131, convolution_245, convolution_246, squeeze_400, getitem_323, relu_132, convolution_247, convolution_248, squeeze_403, relu_133, convolution_249, convolution_250, squeeze_406, getitem_329, convolution_251, convolution_252, squeeze_409, relu_135, convolution_253, convolution_254, squeeze_412, convolution_255, convolution_256, squeeze_415, relu_137, convolution_257, convolution_258, squeeze_418, relu_138, convolution_259, convolution_260, squeeze_421, relu_139, convolution_261, convolution_262, squeeze_424, convolution_263, convolution_264, squeeze_427, relu_141, convolution_265, convolution_266, squeeze_430, convolution_267, squeeze_433, relu_143, convolution_268, squeeze_436, constant_pad_nd_30, convolution_269, convolution_270, squeeze_439, relu_145, convolution_271, convolution_272, squeeze_442, constant_pad_nd_31, getitem_357, constant_pad_nd_32, convolution_273, convolution_274, squeeze_445, relu_147, convolution_275, convolution_276, squeeze_448, constant_pad_nd_33, getitem_363, constant_pad_nd_34, convolution_277, convolution_278, squeeze_451, relu_149, convolution_279, convolution_280, squeeze_454, constant_pad_nd_35, convolution_281, convolution_282, squeeze_457, relu_151, convolution_283, convolution_284, squeeze_460, relu_152, convolution_285, convolution_286, squeeze_463, relu_153, convolution_287, convolution_288, squeeze_466, constant_pad_nd_37, convolution_289, convolution_290, squeeze_469, relu_155, convolution_291, convolution_292, squeeze_472, constant_pad_nd_38, convolution_293, squeeze_475, avg_pool2d_6, constant_pad_nd_39, avg_pool2d_7, cat_14, squeeze_478, add_854, relu_158, convolution_296, squeeze_481, add_859, relu_159, convolution_297, convolution_298, squeeze_484, relu_160, convolution_299, convolution_300, squeeze_487, getitem_393, relu_161, convolution_301, convolution_302, squeeze_490, relu_162, convolution_303, convolution_304, squeeze_493, getitem_399, convolution_305, convolution_306, squeeze_496, relu_164, convolution_307, convolution_308, squeeze_499, convolution_309, convolution_310, squeeze_502, relu_166, convolution_311, convolution_312, squeeze_505, relu_167, convolution_313, convolution_314, squeeze_508, relu_168, convolution_315, convolution_316, squeeze_511, convolution_317, convolution_318, squeeze_514, relu_170, convolution_319, convolution_320, squeeze_517, convolution_321, squeeze_520, add_929, relu_172, convolution_322, squeeze_523, add_934, relu_173, convolution_323, convolution_324, squeeze_526, relu_174, convolution_325, convolution_326, squeeze_529, getitem_427, relu_175, convolution_327, convolution_328, squeeze_532, relu_176, convolution_329, convolution_330, squeeze_535, getitem_433, convolution_331, convolution_332, squeeze_538, relu_178, convolution_333, convolution_334, squeeze_541, convolution_335, convolution_336, squeeze_544, relu_180, convolution_337, convolution_338, squeeze_547, relu_181, convolution_339, convolution_340, squeeze_550, relu_182, convolution_341, convolution_342, squeeze_553, convolution_343, convolution_344, squeeze_556, relu_184, convolution_345, convolution_346, squeeze_559, convolution_347, squeeze_562, add_1004, relu_186, convolution_348, squeeze_565, add_1009, relu_187, convolution_349, convolution_350, squeeze_568, relu_188, convolution_351, convolution_352, squeeze_571, getitem_461, relu_189, convolution_353, convolution_354, squeeze_574, relu_190, convolution_355, convolution_356, squeeze_577, getitem_467, convolution_357, convolution_358, squeeze_580, relu_192, convolution_359, convolution_360, squeeze_583, convolution_361, convolution_362, squeeze_586, relu_194, convolution_363, convolution_364, squeeze_589, relu_195, convolution_365, convolution_366, squeeze_592, relu_196, convolution_367, convolution_368, squeeze_595, convolution_369, convolution_370, squeeze_598, relu_198, convolution_371, convolution_372, squeeze_601, clone, permute_1, le, unsqueeze_806, unsqueeze_818, unsqueeze_830, unsqueeze_842, unsqueeze_854, unsqueeze_866, unsqueeze_878, unsqueeze_890, unsqueeze_902, unsqueeze_914, unsqueeze_926, unsqueeze_938, unsqueeze_950, unsqueeze_962, unsqueeze_974, unsqueeze_986, unsqueeze_998, unsqueeze_1010, unsqueeze_1022, unsqueeze_1034, unsqueeze_1046, unsqueeze_1058, unsqueeze_1070, unsqueeze_1082, unsqueeze_1094, unsqueeze_1106, unsqueeze_1118, unsqueeze_1130, unsqueeze_1142, unsqueeze_1154, unsqueeze_1166, unsqueeze_1178, unsqueeze_1190, unsqueeze_1202, unsqueeze_1214, unsqueeze_1226, unsqueeze_1238, unsqueeze_1250, unsqueeze_1262, unsqueeze_1274, unsqueeze_1286, unsqueeze_1298, unsqueeze_1310, le_43, unsqueeze_1322, unsqueeze_1334, le_45, unsqueeze_1346, unsqueeze_1358, unsqueeze_1370, unsqueeze_1382, unsqueeze_1394, unsqueeze_1406, unsqueeze_1418, unsqueeze_1430, unsqueeze_1442, unsqueeze_1454, unsqueeze_1466, unsqueeze_1478, unsqueeze_1490, unsqueeze_1502, unsqueeze_1514, unsqueeze_1526, unsqueeze_1538, unsqueeze_1550, unsqueeze_1562, unsqueeze_1574, unsqueeze_1586, unsqueeze_1598, unsqueeze_1610, unsqueeze_1622, unsqueeze_1634, unsqueeze_1646, unsqueeze_1658, unsqueeze_1670, unsqueeze_1682, unsqueeze_1694, unsqueeze_1706, unsqueeze_1718, unsqueeze_1730, unsqueeze_1742, unsqueeze_1754, unsqueeze_1766, unsqueeze_1778, unsqueeze_1790, unsqueeze_1802, unsqueeze_1814, unsqueeze_1826, unsqueeze_1838, unsqueeze_1850, unsqueeze_1862, unsqueeze_1874, unsqueeze_1886, unsqueeze_1898, unsqueeze_1910, unsqueeze_1922, unsqueeze_1934, unsqueeze_1946, unsqueeze_1958, unsqueeze_1970, unsqueeze_1982, unsqueeze_1994, le_100, unsqueeze_2006, unsqueeze_2018, le_102, unsqueeze_2030, unsqueeze_2042, unsqueeze_2054, unsqueeze_2066, unsqueeze_2078, unsqueeze_2090, unsqueeze_2102, unsqueeze_2114, unsqueeze_2126, unsqueeze_2138, unsqueeze_2150, unsqueeze_2162, unsqueeze_2174, unsqueeze_2186, unsqueeze_2198, unsqueeze_2210, unsqueeze_2222, unsqueeze_2234, unsqueeze_2246, unsqueeze_2258, unsqueeze_2270, unsqueeze_2282, unsqueeze_2294, unsqueeze_2306, unsqueeze_2318, unsqueeze_2330, unsqueeze_2342, unsqueeze_2354, unsqueeze_2366, unsqueeze_2378, unsqueeze_2390, unsqueeze_2402, unsqueeze_2414, unsqueeze_2426, unsqueeze_2438, unsqueeze_2450, unsqueeze_2462, unsqueeze_2474, unsqueeze_2486, unsqueeze_2498, unsqueeze_2510, unsqueeze_2522, unsqueeze_2534, unsqueeze_2546, unsqueeze_2558, unsqueeze_2570, unsqueeze_2582, unsqueeze_2594, unsqueeze_2606, unsqueeze_2618, unsqueeze_2630, unsqueeze_2642, unsqueeze_2654, unsqueeze_2666, unsqueeze_2678, unsqueeze_2690, unsqueeze_2702, unsqueeze_2714, unsqueeze_2726, unsqueeze_2738, unsqueeze_2750, unsqueeze_2762, unsqueeze_2774, unsqueeze_2786, unsqueeze_2798, unsqueeze_2810, unsqueeze_2822, unsqueeze_2834, unsqueeze_2846, le_171, unsqueeze_2858, unsqueeze_2870, le_173, unsqueeze_2882, unsqueeze_2894, unsqueeze_2906, unsqueeze_2918, unsqueeze_2930, unsqueeze_2942, unsqueeze_2954, unsqueeze_2966, unsqueeze_2978, unsqueeze_2990, unsqueeze_3002, unsqueeze_3014, unsqueeze_3026, le_186, unsqueeze_3038, unsqueeze_3050, unsqueeze_3062, unsqueeze_3074, unsqueeze_3086, unsqueeze_3098, unsqueeze_3110, unsqueeze_3122, unsqueeze_3134, unsqueeze_3146, unsqueeze_3158, unsqueeze_3170, unsqueeze_3182, unsqueeze_3194, unsqueeze_3206, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('pnasnet5large', benchmark_compiled_module)
