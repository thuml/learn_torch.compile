
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (2048L*x1)));
                            auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                            auto tmp2 = static_cast<float>(49.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 / tmp3;
                            auto tmp5 = static_cast<float>(0.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = decltype(tmp6)::blendv(tmp4, tmp6, tmp0);
                            auto tmp10 = tmp8 - tmp9;
                            auto tmp11 = tmp7 * tmp10;
                            tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2048L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (2048L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x2));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2));
                        auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2));
                        auto tmp2 = static_cast<float>(49.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 / tmp3;
                        auto tmp5 = static_cast<float>(0.0);
                        auto tmp6 = at::vec::Vectorized<float>(tmp5);
                        auto tmp7 = decltype(tmp6)::blendv(tmp4, tmp6, tmp0);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp12 = static_cast<float>(0.002551020408163265);
                        auto tmp13 = at::vec::Vectorized<float>(tmp12);
                        auto tmp14 = tmp11 * tmp13;
                        auto tmp16 = tmp15 * tmp15;
                        auto tmp17 = tmp14 * tmp16;
                        auto tmp18 = tmp10 * tmp17;
                        auto tmp19 = tmp7 - tmp18;
                        auto tmp21 = tmp20 * tmp13;
                        auto tmp22 = tmp19 - tmp21;
                        auto tmp24 = tmp15 * tmp23;
                        auto tmp25 = tmp22 * tmp24;
                        tmp25.store(out_ptr4 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(416L + x0 + (832L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(416L + x1 + (832L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (832L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (832L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (208L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (832L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (832L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (208L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(832L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (832L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(208);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (208L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(416);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-208L) + x1 + (208L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(624);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-416L) + x1 + (208L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(832);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (832L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (832L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(832L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (832L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (832L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(832L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(832L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (832L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (832L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (832L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr0;
    auto out_ptr2 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp4 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (2048L*x1)));
                            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                            auto tmp1 = static_cast<float>(0.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = to_float_mask(tmp0 <= tmp2);
                            auto tmp6 = static_cast<float>(49.0);
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 / tmp7;
                            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp4);
                            auto tmp11 = tmp9 + tmp10;
                            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                            auto tmp15 = tmp13 - tmp14;
                            auto tmp16 = tmp12 * tmp15;
                            tmp_acc0_vec = tmp_acc0_vec + tmp12;
                            tmp_acc1_vec = tmp_acc1_vec + tmp16;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2048L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp4 = flag_to_float_vec(in_ptr1 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (2048L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp16 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2));
                        auto tmp25 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x2));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = static_cast<float>(49.0);
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 / tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp4);
                        auto tmp11 = tmp9 + tmp10;
                        auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                        auto tmp15 = tmp13 - tmp14;
                        auto tmp17 = static_cast<float>(0.002551020408163265);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp16 * tmp18;
                        auto tmp21 = tmp20 * tmp20;
                        auto tmp22 = tmp19 * tmp21;
                        auto tmp23 = tmp15 * tmp22;
                        auto tmp24 = tmp12 - tmp23;
                        auto tmp26 = tmp25 * tmp18;
                        auto tmp27 = tmp24 - tmp26;
                        tmp27.store(out_ptr2 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(2048L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp4.store(in_out_ptr1 + static_cast<long>(x1 + (2048L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(416L + x0 + (832L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(416L + x1 + (832L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (832L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (832L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (208L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (832L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp10 = tmp6 * tmp9;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp10;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (832L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (208L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp3 = tmp1 + tmp2;
                auto tmp4 = static_cast<float>(0.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                auto tmp9 = tmp7 - tmp8;
                auto tmp11 = static_cast<float>(0.002551020408163265);
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp15 = tmp14 * tmp14;
                auto tmp16 = tmp13 * tmp15;
                auto tmp17 = tmp9 * tmp16;
                auto tmp18 = tmp6 - tmp17;
                auto tmp20 = tmp19 * tmp12;
                auto tmp21 = tmp18 - tmp20;
                auto tmp23 = tmp14 * tmp22;
                auto tmp24 = tmp21 * tmp23;
                tmp24.store(out_ptr2 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(832L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (832L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(208);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (208L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(416);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-208L) + x1 + (208L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(624);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-416L) + x1 + (208L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(832);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (832L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (832L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(832L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (832L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (832L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(832L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(832L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (832L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (832L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (832L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2048L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp6 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (2048L*x0)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = to_float_mask(tmp4 <= tmp2);
                        auto tmp8 = static_cast<float>(49.0);
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp6);
                        auto tmp13 = tmp11 + tmp12;
                        auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp5);
                        auto tmp16 = tmp14 + tmp15;
                        auto tmp17 = decltype(tmp2)::blendv(tmp16, tmp2, tmp3);
                        tmp17.store(in_out_ptr0 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (2048L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (2048L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(2048L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (2048L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr4 + static_cast<long>(x1 + (2048L*x0)));
                    tmp32.store(out_ptr5 + static_cast<long>(x1 + (2048L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(624L + x1 + (832L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (832L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 7L)) + (5824L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (40768L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(624L + x1 + (832L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (832L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 7L)) + (5824L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (40768L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(624L + x1 + (832L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (832L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 7L)) + (5824L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (40768L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(624L + x1 + (832L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (832L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 7L)) + (5824L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 7L)) + (40768L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp3 = c10::convert<int>(std::min(7L, 1L + (c10::div_floor_integer((1L + x2), 2L))));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                            auto tmp6 = c10::convert<int>(std::min(7L, 1L + (c10::div_floor_integer((1L + x3), 2L))));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))));
                            auto tmp21 = tmp20 < tmp3;
                            auto tmp22 = tmp21 & tmp7;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = tmp21 & tmp14;
                            auto tmp28 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp29 = tmp27 ? tmp28 : tmp24;
                            out_ptr0[static_cast<long>(x3 + (14L*x2) + (196L*x1) + (40768L*x0))] = tmp29;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (208L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(416L + x0 + (832L*x1)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                            auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                            auto tmp2 = static_cast<float>(0.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                            auto tmp7 = tmp5 - tmp6;
                            auto tmp8 = tmp4 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            tmp_acc1_vec = tmp_acc1_vec + tmp8;
                        }
                        tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (208L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(416L + x1 + (832L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp9 = static_cast<float>(0.002551020408163265);
                        auto tmp10 = at::vec::Vectorized<float>(tmp9);
                        auto tmp11 = tmp8 * tmp10;
                        auto tmp13 = tmp12 * tmp12;
                        auto tmp14 = tmp11 * tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        auto tmp16 = tmp4 - tmp15;
                        auto tmp18 = tmp17 * tmp10;
                        auto tmp19 = tmp16 - tmp18;
                        auto tmp21 = tmp12 * tmp20;
                        auto tmp22 = tmp19 * tmp21;
                        tmp22.store(out_ptr4 + static_cast<long>(x1 + (208L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (832L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (832L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (832L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (208L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp4 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (208L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (832L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (208L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                auto tmp7 = tmp5 - tmp6;
                auto tmp9 = static_cast<float>(0.002551020408163265);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp13 = tmp12 * tmp12;
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp7 * tmp14;
                auto tmp16 = tmp4 - tmp15;
                auto tmp18 = tmp17 * tmp10;
                auto tmp19 = tmp16 - tmp18;
                auto tmp21 = tmp12 * tmp20;
                auto tmp22 = tmp19 * tmp21;
                tmp22.store(out_ptr3 + static_cast<long>(x1 + (208L*x0)));
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(832L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (832L*x1) + (163072L*x0))];
                        auto tmp1 = c10::convert<long>(x2);
                        auto tmp2 = static_cast<long>(0);
                        auto tmp3 = tmp1 >= tmp2;
                        auto tmp4 = static_cast<long>(208);
                        auto tmp5 = tmp1 < tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = in_ptr1[static_cast<long>(x2 + (208L*x1) + (40768L*x0))];
                            return tmp7;
                        }
                        ;
                        auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                        auto tmp9 = tmp1 >= tmp4;
                        auto tmp10 = static_cast<long>(416);
                        auto tmp11 = tmp1 < tmp10;
                        auto tmp12 = tmp9 & tmp11;
                        auto tmp13 = [&]
                        {
                            auto tmp14 = in_ptr2[static_cast<long>((-208L) + x2 + (208L*x1) + (40768L*x0))];
                            return tmp14;
                        }
                        ;
                        auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                        auto tmp16 = tmp1 >= tmp10;
                        auto tmp17 = static_cast<long>(624);
                        auto tmp18 = tmp1 < tmp17;
                        auto tmp19 = tmp16 & tmp18;
                        auto tmp20 = [&]
                        {
                            auto tmp21 = in_ptr3[static_cast<long>((-416L) + x2 + (208L*x1) + (40768L*x0))];
                            return tmp21;
                        }
                        ;
                        auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                        auto tmp23 = tmp1 >= tmp17;
                        auto tmp24 = static_cast<long>(832);
                        auto tmp25 = tmp1 < tmp24;
                        auto tmp26 = [&]
                        {
                            auto tmp27 = in_ptr4[static_cast<long>((-122304L) + x1 + (196L*x2) + (40768L*x0))];
                            return tmp27;
                        }
                        ;
                        auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                        auto tmp29 = tmp19 ? tmp22 : tmp28;
                        auto tmp30 = tmp12 ? tmp15 : tmp29;
                        auto tmp31 = tmp5 ? tmp8 : tmp30;
                        auto tmp32 = static_cast<float>(0.0);
                        auto tmp33 = tmp0 ? tmp32 : tmp31;
                        out_ptr0[static_cast<long>(x2 + (832L*x1) + (163072L*x0))] = tmp33;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(832L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (832L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (832L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(832L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(832L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (832L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (832L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (832L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.0006377551020408163);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (416L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(104);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(208);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-104L) + x1 + (104L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(312);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-208L) + x1 + (104L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(416);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (416L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (416L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.0006377551020408163);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(312L + x1 + (416L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (416L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 14L)) + (5824L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (81536L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(312L + x1 + (416L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (416L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 14L)) + (5824L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (81536L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(312L + x1 + (416L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (416L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 14L)) + (5824L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (81536L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(312L + x1 + (416L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (416L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 14L)) + (5824L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 14L)) + (81536L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer((1L + x2), 2L))));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                            auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer((1L + x3), 2L))));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))));
                            auto tmp21 = tmp20 < tmp3;
                            auto tmp22 = tmp21 & tmp7;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = tmp21 & tmp14;
                            auto tmp28 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp29 = tmp27 ? tmp28 : tmp24;
                            out_ptr0[static_cast<long>(x3 + (28L*x2) + (784L*x1) + (81536L*x0))] = tmp29;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(208L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(208L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr4 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(416L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (416L*x1) + (326144L*x0))];
                        auto tmp1 = c10::convert<long>(x2);
                        auto tmp2 = static_cast<long>(0);
                        auto tmp3 = tmp1 >= tmp2;
                        auto tmp4 = static_cast<long>(104);
                        auto tmp5 = tmp1 < tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = in_ptr1[static_cast<long>(x2 + (104L*x1) + (81536L*x0))];
                            return tmp7;
                        }
                        ;
                        auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                        auto tmp9 = tmp1 >= tmp4;
                        auto tmp10 = static_cast<long>(208);
                        auto tmp11 = tmp1 < tmp10;
                        auto tmp12 = tmp9 & tmp11;
                        auto tmp13 = [&]
                        {
                            auto tmp14 = in_ptr2[static_cast<long>((-104L) + x2 + (104L*x1) + (81536L*x0))];
                            return tmp14;
                        }
                        ;
                        auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                        auto tmp16 = tmp1 >= tmp10;
                        auto tmp17 = static_cast<long>(312);
                        auto tmp18 = tmp1 < tmp17;
                        auto tmp19 = tmp16 & tmp18;
                        auto tmp20 = [&]
                        {
                            auto tmp21 = in_ptr3[static_cast<long>((-208L) + x2 + (104L*x1) + (81536L*x0))];
                            return tmp21;
                        }
                        ;
                        auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                        auto tmp23 = tmp1 >= tmp17;
                        auto tmp24 = static_cast<long>(416);
                        auto tmp25 = tmp1 < tmp24;
                        auto tmp26 = [&]
                        {
                            auto tmp27 = in_ptr4[static_cast<long>((-244608L) + x1 + (784L*x2) + (81536L*x0))];
                            return tmp27;
                        }
                        ;
                        auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                        auto tmp29 = tmp19 ? tmp22 : tmp28;
                        auto tmp30 = tmp12 ? tmp15 : tmp29;
                        auto tmp31 = tmp5 ? tmp8 : tmp30;
                        auto tmp32 = static_cast<float>(0.0);
                        auto tmp33 = tmp0 ? tmp32 : tmp31;
                        out_ptr0[static_cast<long>(x2 + (416L*x1) + (326144L*x0))] = tmp33;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (416L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(416L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(416L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (416L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (416L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (208L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(104L + x0 + (208L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (208L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(104L + x1 + (208L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (52L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(52L + x0 + (208L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (52L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(52L + x1 + (208L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (52L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (52L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (208L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (52L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (208L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (52L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (52L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (208L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(52);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (52L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(104);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-52L) + x1 + (52L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(156);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-104L) + x1 + (52L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(208);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (208L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (208L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (208L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(104L + x0 + (208L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (208L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(104L + x1 + (208L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (52L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(52L + x0 + (208L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (52L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(52L + x1 + (208L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (52L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (52L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (208L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (52L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (208L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (52L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (52L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (208L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(52);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (52L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(104);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-52L) + x1 + (52L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(156);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-104L) + x1 + (52L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(208);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (208L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (208L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x0 + (208L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(104L + x0 + (208L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(104L + x1 + (208L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(104L + x1 + (208L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (52L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(52L + x0 + (208L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (52L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(52L + x1 + (208L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (52L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (52L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (208L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (52L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (208L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (52L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (52L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (208L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(52);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (52L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(104);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-52L) + x1 + (52L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(156);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-104L) + x1 + (52L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(208);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (208L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (208L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    tmp32.store(out_ptr5 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(156L + x1 + (208L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (208L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 28L)) + (5824L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (163072L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(156L + x1 + (208L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (208L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 28L)) + (5824L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (163072L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(156L + x1 + (208L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (208L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 28L)) + (5824L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (163072L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(156L + x1 + (208L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L))))))) + (208L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L)))))) >= 0L) ? 0L : 28L)) + (5824L*(std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))))))) + (5824L*(((std::min(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))), (-1L) + (std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L)))))) >= 0L) ? 0L : 28L)) + (163072L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp3 = c10::convert<int>(std::min(28L, 1L + (c10::div_floor_integer((1L + x2), 2L))));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                            auto tmp6 = c10::convert<int>(std::min(28L, 1L + (c10::div_floor_integer((1L + x3), 2L))));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x3, 2L))));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(1L + (std::max(0L, c10::div_floor_integer(x2, 2L))));
                            auto tmp21 = tmp20 < tmp3;
                            auto tmp22 = tmp21 & tmp7;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = tmp21 & tmp14;
                            auto tmp28 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp29 = tmp27 ? tmp28 : tmp24;
                            out_ptr0[static_cast<long>(x3 + (56L*x2) + (3136L*x1) + (163072L*x0))] = tmp29;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(104L + x0 + (208L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr0[static_cast<long>(104L + x0 + (208L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr3[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(104L + x1 + (208L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr4 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(104L + x1 + (208L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr2[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr1[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr4[static_cast<long>(x1 + (52L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x0 + (208L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(52L + x0 + (208L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x1 + (208L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(52L + x1 + (208L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (52L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (52L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (52L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (208L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (52L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(48L); x0<static_cast<long>(52L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (52L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (52L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(52L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (52L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (208L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (52L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(0.00015943877551020407);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (52L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(208L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (208L*x1) + (652288L*x0))];
                        auto tmp1 = c10::convert<long>(x2);
                        auto tmp2 = static_cast<long>(0);
                        auto tmp3 = tmp1 >= tmp2;
                        auto tmp4 = static_cast<long>(52);
                        auto tmp5 = tmp1 < tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = in_ptr1[static_cast<long>(x2 + (52L*x1) + (163072L*x0))];
                            return tmp7;
                        }
                        ;
                        auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                        auto tmp9 = tmp1 >= tmp4;
                        auto tmp10 = static_cast<long>(104);
                        auto tmp11 = tmp1 < tmp10;
                        auto tmp12 = tmp9 & tmp11;
                        auto tmp13 = [&]
                        {
                            auto tmp14 = in_ptr2[static_cast<long>((-52L) + x2 + (52L*x1) + (163072L*x0))];
                            return tmp14;
                        }
                        ;
                        auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                        auto tmp16 = tmp1 >= tmp10;
                        auto tmp17 = static_cast<long>(156);
                        auto tmp18 = tmp1 < tmp17;
                        auto tmp19 = tmp16 & tmp18;
                        auto tmp20 = [&]
                        {
                            auto tmp21 = in_ptr3[static_cast<long>((-104L) + x2 + (52L*x1) + (163072L*x0))];
                            return tmp21;
                        }
                        ;
                        auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                        auto tmp23 = tmp1 >= tmp17;
                        auto tmp24 = static_cast<long>(208);
                        auto tmp25 = tmp1 < tmp24;
                        auto tmp26 = [&]
                        {
                            auto tmp27 = in_ptr4[static_cast<long>((-489216L) + x1 + (3136L*x2) + (163072L*x0))];
                            return tmp27;
                        }
                        ;
                        auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                        auto tmp29 = tmp19 ? tmp22 : tmp28;
                        auto tmp30 = tmp12 ? tmp15 : tmp29;
                        auto tmp31 = tmp5 ? tmp8 : tmp30;
                        auto tmp32 = static_cast<float>(0.0);
                        auto tmp33 = tmp0 ? tmp32 : tmp31;
                        out_ptr0[static_cast<long>(x2 + (208L*x1) + (652288L*x0))] = tmp33;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (208L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(208L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(208L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (208L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (208L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x0 + (104L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(52L + x0 + (104L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x1 + (104L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(52L + x1 + (104L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (26L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(26L + x0 + (104L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(26L + x0 + (104L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (26L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(26L + x1 + (104L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(26L + x1 + (104L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (26L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (26L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (104L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (26L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (26L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (26L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (104L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(26);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (26L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(52);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-26L) + x1 + (26L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(78);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-52L) + x1 + (26L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(104);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (104L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (104L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x0 + (104L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(52L + x0 + (104L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(52L + x1 + (104L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(52L + x1 + (104L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (26L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(26L + x0 + (104L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(26L + x0 + (104L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (26L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(26L + x1 + (104L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(26L + x1 + (104L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (26L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (26L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp10 = tmp6 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp6;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (104L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (26L*x1))];
                        auto tmp7 = in_ptr4[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp4 = static_cast<float>(0.0);
                        auto tmp5 = tmp0 ? tmp4 : tmp3;
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp9 = decltype(tmp5)(tmp5 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = decltype(tmp5)::blendv(tmp3, tmp5, tmp0);
                    auto tmp9 = tmp7 - tmp8;
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp15 = tmp14 * tmp14;
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp9 * tmp16;
                    auto tmp18 = tmp6 - tmp17;
                    auto tmp20 = tmp19 * tmp12;
                    auto tmp21 = tmp18 - tmp20;
                    auto tmp23 = tmp14 * tmp22;
                    auto tmp24 = tmp21 * tmp23;
                    tmp24.store(out_ptr2 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (26L*x0))];
                    auto tmp7 = in_ptr4[static_cast<long>(x1)];
                    auto tmp9 = out_ptr1[static_cast<long>(x1)];
                    auto tmp12 = in_ptr5[static_cast<long>(x1)];
                    auto tmp17 = out_ptr0[static_cast<long>(x1)];
                    auto tmp20 = in_ptr6[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                    auto tmp4 = static_cast<float>(0.0);
                    auto tmp5 = tmp0 ? tmp4 : tmp3;
                    auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp12);
                    auto tmp14 = decltype(tmp11)(tmp11 * tmp13);
                    auto tmp15 = decltype(tmp8)(tmp8 * tmp14);
                    auto tmp16 = decltype(tmp5)(tmp5 - tmp15);
                    auto tmp18 = decltype(tmp17)(tmp17 * tmp10);
                    auto tmp19 = decltype(tmp16)(tmp16 - tmp18);
                    auto tmp21 = decltype(tmp12)(tmp12 * tmp20);
                    auto tmp22 = decltype(tmp19)(tmp19 * tmp21);
                    out_ptr2[static_cast<long>(x1 + (26L*x0))] = tmp22;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (104L*x0))];
                    auto tmp1 = c10::convert<long>(x1);
                    auto tmp2 = static_cast<long>(0);
                    auto tmp3 = tmp1 >= tmp2;
                    auto tmp4 = static_cast<long>(26);
                    auto tmp5 = tmp1 < tmp4;
                    auto tmp6 = [&]
                    {
                        auto tmp7 = in_ptr1[static_cast<long>(x1 + (26L*x0))];
                        return tmp7;
                    }
                    ;
                    auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                    auto tmp9 = tmp1 >= tmp4;
                    auto tmp10 = static_cast<long>(52);
                    auto tmp11 = tmp1 < tmp10;
                    auto tmp12 = tmp9 & tmp11;
                    auto tmp13 = [&]
                    {
                        auto tmp14 = in_ptr2[static_cast<long>((-26L) + x1 + (26L*x0))];
                        return tmp14;
                    }
                    ;
                    auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                    auto tmp16 = tmp1 >= tmp10;
                    auto tmp17 = static_cast<long>(78);
                    auto tmp18 = tmp1 < tmp17;
                    auto tmp19 = tmp16 & tmp18;
                    auto tmp20 = [&]
                    {
                        auto tmp21 = in_ptr3[static_cast<long>((-52L) + x1 + (26L*x0))];
                        return tmp21;
                    }
                    ;
                    auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                    auto tmp23 = tmp1 >= tmp17;
                    auto tmp24 = static_cast<long>(104);
                    auto tmp25 = tmp1 < tmp24;
                    auto tmp26 = [&]
                    {
                        auto tmp27 = in_out_ptr0[static_cast<long>(x1 + (104L*x0))];
                        return tmp27;
                    }
                    ;
                    auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                    auto tmp29 = tmp19 ? tmp22 : tmp28;
                    auto tmp30 = tmp12 ? tmp15 : tmp29;
                    auto tmp31 = tmp5 ? tmp8 : tmp30;
                    auto tmp32 = static_cast<float>(0.0);
                    auto tmp33 = tmp0 ? tmp32 : tmp31;
                    in_out_ptr0[static_cast<long>(x1 + (104L*x0))] = tmp33;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        auto tmp14 = tmp12 - tmp13;
                        auto tmp15 = tmp7 * tmp14;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    auto tmp28 = tmp26 - tmp27;
                    auto tmp30 = tmp29 * tmp13;
                    auto tmp32 = tmp31 * tmp31;
                    auto tmp33 = tmp30 * tmp32;
                    auto tmp34 = tmp28 * tmp33;
                    auto tmp35 = tmp7 - tmp34;
                    auto tmp36 = tmp35 - tmp21;
                    auto tmp38 = tmp31 * tmp37;
                    auto tmp39 = tmp36 * tmp38;
                    tmp25.store(out_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    tmp39.store(out_ptr4 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp11 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp18 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp25 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp32 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp37 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp42 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp49 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp54 = in_ptr0[static_cast<long>(78L + x1 + (104L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5824L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (326144L*x0))];
                            auto tmp1 = tmp0 / 9;
                            auto tmp2 = c10::convert<int>(std::max(0L, (-1L) + x2));
                            auto tmp3 = c10::convert<int>(std::min(56L, 2L + x2));
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = c10::convert<int>(std::max(0L, (-1L) + x3));
                            auto tmp6 = c10::convert<int>(std::min(56L, 2L + x3));
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp8 = tmp4 & tmp7;
                            auto tmp9 = static_cast<float>(0.0);
                            auto tmp10 = tmp8 ? tmp1 : tmp9;
                            auto tmp12 = tmp11 / 9;
                            auto tmp13 = c10::convert<int>(1L + (std::max(0L, (-1L) + x3)));
                            auto tmp14 = tmp13 < tmp6;
                            auto tmp15 = tmp4 & tmp14;
                            auto tmp16 = decltype(tmp10)(tmp10 + tmp12);
                            auto tmp17 = tmp15 ? tmp16 : tmp10;
                            auto tmp19 = tmp18 / 9;
                            auto tmp20 = c10::convert<int>(2L + (std::max(0L, (-1L) + x3)));
                            auto tmp21 = tmp20 < tmp6;
                            auto tmp22 = tmp4 & tmp21;
                            auto tmp23 = decltype(tmp17)(tmp17 + tmp19);
                            auto tmp24 = tmp22 ? tmp23 : tmp17;
                            auto tmp26 = tmp25 / 9;
                            auto tmp27 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                            auto tmp28 = tmp27 < tmp3;
                            auto tmp29 = tmp28 & tmp7;
                            auto tmp30 = decltype(tmp24)(tmp24 + tmp26);
                            auto tmp31 = tmp29 ? tmp30 : tmp24;
                            auto tmp33 = tmp32 / 9;
                            auto tmp34 = tmp28 & tmp14;
                            auto tmp35 = decltype(tmp31)(tmp31 + tmp33);
                            auto tmp36 = tmp34 ? tmp35 : tmp31;
                            auto tmp38 = tmp37 / 9;
                            auto tmp39 = tmp28 & tmp21;
                            auto tmp40 = decltype(tmp36)(tmp36 + tmp38);
                            auto tmp41 = tmp39 ? tmp40 : tmp36;
                            auto tmp43 = tmp42 / 9;
                            auto tmp44 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                            auto tmp45 = tmp44 < tmp3;
                            auto tmp46 = tmp45 & tmp7;
                            auto tmp47 = decltype(tmp41)(tmp41 + tmp43);
                            auto tmp48 = tmp46 ? tmp47 : tmp41;
                            auto tmp50 = tmp49 / 9;
                            auto tmp51 = tmp45 & tmp14;
                            auto tmp52 = decltype(tmp48)(tmp48 + tmp50);
                            auto tmp53 = tmp51 ? tmp52 : tmp48;
                            auto tmp55 = tmp54 / 9;
                            auto tmp56 = tmp45 & tmp21;
                            auto tmp57 = decltype(tmp53)(tmp53 + tmp55);
                            auto tmp58 = tmp56 ? tmp57 : tmp53;
                            out_ptr0[static_cast<long>(x3 + (56L*x2) + (3136L*x1) + (81536L*x0))] = tmp58;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(52L + x0 + (104L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr0[static_cast<long>(52L + x0 + (104L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr3[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(52L + x1 + (104L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr4 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr1[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(52L + x1 + (104L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr2[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr1[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr4[static_cast<long>(x1 + (26L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(26L + x0 + (104L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(26L + x0 + (104L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(26L + x1 + (104L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(26L + x1 + (104L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (26L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (26L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (26L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (104L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (26L*x1))];
                        auto tmp5 = in_ptr3[static_cast<long>(x0)];
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = tmp0 ? tmp2 : tmp1;
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp7 = decltype(tmp3)(tmp3 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp3;
                        tmp_acc1 = tmp_acc1 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(24L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(24L); x0<static_cast<long>(26L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(24L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (26L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    tmp22.store(out_ptr3 + static_cast<long>(x1 + (26L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(24L); x1<static_cast<long>(26L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (26L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (104L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (26L*x0))];
                    auto tmp5 = in_ptr3[static_cast<long>(x1)];
                    auto tmp7 = out_ptr1[static_cast<long>(x1)];
                    auto tmp10 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = out_ptr0[static_cast<long>(x1)];
                    auto tmp18 = in_ptr5[static_cast<long>(x1)];
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = tmp0 ? tmp2 : tmp1;
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = static_cast<float>(3.985969387755102e-05);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp11 = decltype(tmp10)(tmp10 * tmp10);
                    auto tmp12 = decltype(tmp9)(tmp9 * tmp11);
                    auto tmp13 = decltype(tmp6)(tmp6 * tmp12);
                    auto tmp14 = decltype(tmp3)(tmp3 - tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp8);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp19 = decltype(tmp10)(tmp10 * tmp18);
                    auto tmp20 = decltype(tmp17)(tmp17 * tmp19);
                    out_ptr3[static_cast<long>(x1 + (26L*x0))] = tmp20;
                }
            }
        }
    }
}
''')


cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(104L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (104L*x1) + (326144L*x0))];
                        auto tmp1 = c10::convert<long>(x2);
                        auto tmp2 = static_cast<long>(0);
                        auto tmp3 = tmp1 >= tmp2;
                        auto tmp4 = static_cast<long>(26);
                        auto tmp5 = tmp1 < tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = in_ptr1[static_cast<long>(x2 + (26L*x1) + (81536L*x0))];
                            return tmp7;
                        }
                        ;
                        auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                        auto tmp9 = tmp1 >= tmp4;
                        auto tmp10 = static_cast<long>(52);
                        auto tmp11 = tmp1 < tmp10;
                        auto tmp12 = tmp9 & tmp11;
                        auto tmp13 = [&]
                        {
                            auto tmp14 = in_ptr2[static_cast<long>((-26L) + x2 + (26L*x1) + (81536L*x0))];
                            return tmp14;
                        }
                        ;
                        auto tmp15 = tmp12 ? tmp13() : static_cast<decltype(tmp13())>(0.0);
                        auto tmp16 = tmp1 >= tmp10;
                        auto tmp17 = static_cast<long>(78);
                        auto tmp18 = tmp1 < tmp17;
                        auto tmp19 = tmp16 & tmp18;
                        auto tmp20 = [&]
                        {
                            auto tmp21 = in_ptr3[static_cast<long>((-52L) + x2 + (26L*x1) + (81536L*x0))];
                            return tmp21;
                        }
                        ;
                        auto tmp22 = tmp19 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                        auto tmp23 = tmp1 >= tmp17;
                        auto tmp24 = static_cast<long>(104);
                        auto tmp25 = tmp1 < tmp24;
                        auto tmp26 = [&]
                        {
                            auto tmp27 = in_ptr4[static_cast<long>((-244608L) + x1 + (3136L*x2) + (81536L*x0))];
                            return tmp27;
                        }
                        ;
                        auto tmp28 = tmp23 ? tmp26() : static_cast<decltype(tmp26())>(0.0);
                        auto tmp29 = tmp19 ? tmp22 : tmp28;
                        auto tmp30 = tmp12 ? tmp15 : tmp29;
                        auto tmp31 = tmp5 ? tmp8 : tmp30;
                        auto tmp32 = static_cast<float>(0.0);
                        auto tmp33 = tmp0 ? tmp32 : tmp31;
                        out_ptr0[static_cast<long>(x2 + (104L*x1) + (326144L*x0))] = tmp33;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (104L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(104L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(104L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (104L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (104L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1605632L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = tmp0 + tmp1;
                tmp2.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(9.964923469387754e-06);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_4, primals_5, primals_7, primals_8, primals_10, primals_11, primals_13, primals_14, primals_16, primals_17, primals_19, primals_20, primals_22, primals_23, primals_25, primals_26, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_37, primals_38, primals_40, primals_41, primals_43, primals_44, primals_46, primals_47, primals_49, primals_50, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_61, primals_62, primals_64, primals_65, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_76, primals_77, primals_79, primals_80, primals_82, primals_83, primals_85, primals_86, primals_88, primals_89, primals_91, primals_92, primals_94, primals_95, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_106, primals_107, primals_109, primals_110, primals_112, primals_113, primals_115, primals_116, primals_118, primals_119, primals_121, primals_122, primals_124, primals_125, primals_127, primals_128, primals_130, primals_131, primals_133, primals_134, primals_136, primals_137, primals_139, primals_140, primals_142, primals_143, primals_145, primals_146, primals_148, primals_149, primals_151, primals_152, primals_154, primals_155, primals_157, primals_158, primals_160, primals_161, primals_163, primals_164, primals_166, primals_167, primals_169, primals_170, primals_172, primals_173, primals_175, primals_176, primals_178, primals_179, primals_181, primals_182, primals_184, primals_185, primals_187, primals_188, primals_190, primals_191, primals_193, primals_194, primals_196, primals_197, primals_199, primals_200, primals_202, primals_203, primals_205, primals_206, primals_208, primals_209, primals_211, primals_212, primals_214, primals_215, primals_217, primals_218, primals_220, primals_221, primals_223, primals_224, primals_226, primals_227, primals_229, primals_230, primals_232, primals_233, primals_235, primals_236, primals_238, primals_239, primals_241, primals_242, primals_244, primals_245, primals_247, primals_248, primals_250, primals_251, primals_253, primals_254, primals_256, primals_257, primals_259, primals_260, primals_262, primals_263, primals_265, primals_266, primals_268, primals_269, primals_271, primals_272, primals_274, primals_275, primals_277, primals_278, primals_280, primals_281, primals_283, primals_284, primals_286, primals_287, primals_289, primals_290, primals_292, primals_293, primals_295, primals_296, primals_298, primals_299, primals_301, primals_302, primals_304, primals_305, primals_307, primals_308, primals_310, primals_311, primals_313, primals_314, primals_316, primals_317, primals_319, primals_320, primals_322, primals_323, primals_325, primals_326, primals_328, primals_329, primals_331, primals_332, primals_334, primals_335, primals_337, primals_338, primals_340, primals_341, primals_343, primals_344, primals_346, primals_347, primals_349, primals_350, primals_352, primals_353, primals_355, primals_356, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_367, primals_368, primals_370, primals_371, primals_373, primals_374, primals_376, primals_377, primals_379, primals_380, primals_382, primals_383, primals_385, primals_386, primals_388, primals_389, primals_391, primals_392, primals_394, primals_395, primals_397, primals_398, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_409, primals_410, primals_412, primals_413, primals_415, primals_416, primals_418, primals_419, primals_421, primals_422, primals_424, primals_425, primals_427, primals_428, primals_430, primals_431, primals_433, primals_434, primals_436, primals_437, primals_439, primals_440, primals_442, primals_443, primals_445, primals_446, primals_448, primals_449, primals_451, primals_452, primals_454, primals_455, primals_457, primals_458, primals_460, primals_461, primals_463, primals_464, primals_466, primals_467, primals_469, primals_470, primals_472, primals_473, primals_475, primals_476, primals_478, primals_479, primals_481, primals_482, primals_484, primals_485, primals_487, primals_488, primals_490, primals_491, primals_493, primals_494, primals_496, primals_497, primals_499, primals_500, primals_502, primals_503, primals_505, primals_506, primals_508, primals_509, primals_1023, convolution, squeeze_1, relu, getitem_2, getitem_3, convolution_1, squeeze_4, getitem_10, convolution_2, squeeze_7, getitem_17, convolution_3, squeeze_10, getitem_24, convolution_4, squeeze_13, getitem_31, cat, convolution_5, squeeze_16, convolution_6, squeeze_19, relu_5, convolution_7, squeeze_22, getitem_42, convolution_8, squeeze_25, add_46, convolution_9, squeeze_28, add_52, convolution_10, squeeze_31, cat_1, convolution_11, squeeze_34, relu_10, convolution_12, squeeze_37, getitem_72, convolution_13, squeeze_40, add_74, convolution_14, squeeze_43, add_80, convolution_15, squeeze_46, cat_2, convolution_16, squeeze_49, relu_15, convolution_17, squeeze_52, getitem_102, convolution_18, squeeze_55, getitem_109, convolution_19, squeeze_58, getitem_116, convolution_20, squeeze_61, getitem_123, cat_3, convolution_21, squeeze_64, convolution_22, squeeze_67, relu_20, convolution_23, squeeze_70, getitem_134, convolution_24, squeeze_73, add_133, convolution_25, squeeze_76, add_139, convolution_26, squeeze_79, cat_4, convolution_27, squeeze_82, relu_25, convolution_28, squeeze_85, getitem_164, convolution_29, squeeze_88, add_161, convolution_30, squeeze_91, add_167, convolution_31, squeeze_94, cat_5, convolution_32, squeeze_97, relu_30, convolution_33, squeeze_100, getitem_194, convolution_34, squeeze_103, add_189, convolution_35, squeeze_106, add_195, convolution_36, squeeze_109, cat_6, convolution_37, squeeze_112, relu_35, convolution_38, squeeze_115, getitem_224, convolution_39, squeeze_118, getitem_231, convolution_40, squeeze_121, getitem_238, convolution_41, squeeze_124, getitem_245, cat_7, convolution_42, squeeze_127, convolution_43, squeeze_130, relu_40, convolution_44, squeeze_133, getitem_256, convolution_45, squeeze_136, add_248, convolution_46, squeeze_139, add_254, convolution_47, squeeze_142, cat_8, convolution_48, squeeze_145, relu_45, convolution_49, squeeze_148, getitem_286, convolution_50, squeeze_151, add_276, convolution_51, squeeze_154, add_282, convolution_52, squeeze_157, cat_9, convolution_53, squeeze_160, relu_50, convolution_54, squeeze_163, getitem_316, convolution_55, squeeze_166, add_304, convolution_56, squeeze_169, add_310, convolution_57, squeeze_172, cat_10, convolution_58, squeeze_175, relu_55, convolution_59, squeeze_178, getitem_346, convolution_60, squeeze_181, add_332, convolution_61, squeeze_184, add_338, convolution_62, squeeze_187, cat_11, convolution_63, squeeze_190, relu_60, convolution_64, squeeze_193, getitem_376, convolution_65, squeeze_196, add_360, convolution_66, squeeze_199, add_366, convolution_67, squeeze_202, cat_12, convolution_68, squeeze_205, relu_65, convolution_69, squeeze_208, getitem_406, convolution_70, squeeze_211, add_388, convolution_71, squeeze_214, add_394, convolution_72, squeeze_217, cat_13, convolution_73, squeeze_220, relu_70, convolution_74, squeeze_223, getitem_436, convolution_75, squeeze_226, add_416, convolution_76, squeeze_229, add_422, convolution_77, squeeze_232, cat_14, convolution_78, squeeze_235, relu_75, convolution_79, squeeze_238, getitem_466, convolution_80, squeeze_241, add_444, convolution_81, squeeze_244, add_450, convolution_82, squeeze_247, cat_15, convolution_83, squeeze_250, relu_80, convolution_84, squeeze_253, getitem_496, convolution_85, squeeze_256, add_472, convolution_86, squeeze_259, add_478, convolution_87, squeeze_262, cat_16, convolution_88, squeeze_265, relu_85, convolution_89, squeeze_268, getitem_526, convolution_90, squeeze_271, add_500, convolution_91, squeeze_274, add_506, convolution_92, squeeze_277, cat_17, convolution_93, squeeze_280, relu_90, convolution_94, squeeze_283, getitem_556, convolution_95, squeeze_286, add_528, convolution_96, squeeze_289, add_534, convolution_97, squeeze_292, cat_18, convolution_98, squeeze_295, relu_95, convolution_99, squeeze_298, getitem_586, convolution_100, squeeze_301, add_556, convolution_101, squeeze_304, add_562, convolution_102, squeeze_307, cat_19, convolution_103, squeeze_310, relu_100, convolution_104, squeeze_313, getitem_616, convolution_105, squeeze_316, add_584, convolution_106, squeeze_319, add_590, convolution_107, squeeze_322, cat_20, convolution_108, squeeze_325, relu_105, convolution_109, squeeze_328, getitem_646, convolution_110, squeeze_331, add_612, convolution_111, squeeze_334, add_618, convolution_112, squeeze_337, cat_21, convolution_113, squeeze_340, relu_110, convolution_114, squeeze_343, getitem_676, convolution_115, squeeze_346, add_640, convolution_116, squeeze_349, add_646, convolution_117, squeeze_352, cat_22, convolution_118, squeeze_355, relu_115, convolution_119, squeeze_358, getitem_706, convolution_120, squeeze_361, add_668, convolution_121, squeeze_364, add_674, convolution_122, squeeze_367, cat_23, convolution_123, squeeze_370, relu_120, convolution_124, squeeze_373, getitem_736, convolution_125, squeeze_376, add_696, convolution_126, squeeze_379, add_702, convolution_127, squeeze_382, cat_24, convolution_128, squeeze_385, relu_125, convolution_129, squeeze_388, getitem_766, convolution_130, squeeze_391, add_724, convolution_131, squeeze_394, add_730, convolution_132, squeeze_397, cat_25, convolution_133, squeeze_400, relu_130, convolution_134, squeeze_403, getitem_796, convolution_135, squeeze_406, add_752, convolution_136, squeeze_409, add_758, convolution_137, squeeze_412, cat_26, convolution_138, squeeze_415, relu_135, convolution_139, squeeze_418, getitem_826, convolution_140, squeeze_421, add_780, convolution_141, squeeze_424, add_786, convolution_142, squeeze_427, cat_27, convolution_143, squeeze_430, relu_140, convolution_144, squeeze_433, getitem_856, convolution_145, squeeze_436, add_808, convolution_146, squeeze_439, add_814, convolution_147, squeeze_442, cat_28, convolution_148, squeeze_445, relu_145, convolution_149, squeeze_448, getitem_886, convolution_150, squeeze_451, add_836, convolution_151, squeeze_454, add_842, convolution_152, squeeze_457, cat_29, convolution_153, squeeze_460, relu_150, convolution_154, squeeze_463, getitem_916, convolution_155, squeeze_466, getitem_923, convolution_156, squeeze_469, getitem_930, convolution_157, squeeze_472, getitem_937, cat_30, convolution_158, squeeze_475, convolution_159, squeeze_478, relu_155, convolution_160, squeeze_481, getitem_948, convolution_161, squeeze_484, add_895, convolution_162, squeeze_487, add_901, convolution_163, squeeze_490, cat_31, convolution_164, squeeze_493, relu_160, convolution_165, squeeze_496, getitem_978, convolution_166, squeeze_499, add_923, convolution_167, squeeze_502, add_929, convolution_168, squeeze_505, cat_32, convolution_169, squeeze_508, view, permute_1, le, unsqueeze_682, le_1, unsqueeze_694, le_2, unsqueeze_706, le_3, unsqueeze_718, le_4, unsqueeze_730, unsqueeze_742, le_6, unsqueeze_754, le_7, unsqueeze_766, le_8, unsqueeze_778, le_9, unsqueeze_790, unsqueeze_802, unsqueeze_814, le_11, unsqueeze_826, le_12, unsqueeze_838, le_13, unsqueeze_850, le_14, unsqueeze_862, unsqueeze_874, le_16, unsqueeze_886, le_17, unsqueeze_898, le_18, unsqueeze_910, le_19, unsqueeze_922, unsqueeze_934, le_21, unsqueeze_946, le_22, unsqueeze_958, le_23, unsqueeze_970, le_24, unsqueeze_982, unsqueeze_994, le_26, unsqueeze_1006, le_27, unsqueeze_1018, le_28, unsqueeze_1030, le_29, unsqueeze_1042, unsqueeze_1054, le_31, unsqueeze_1066, le_32, unsqueeze_1078, le_33, unsqueeze_1090, le_34, unsqueeze_1102, unsqueeze_1114, le_36, unsqueeze_1126, le_37, unsqueeze_1138, le_38, unsqueeze_1150, le_39, unsqueeze_1162, unsqueeze_1174, le_41, unsqueeze_1186, le_42, unsqueeze_1198, le_43, unsqueeze_1210, le_44, unsqueeze_1222, unsqueeze_1234, le_46, unsqueeze_1246, le_47, unsqueeze_1258, le_48, unsqueeze_1270, le_49, unsqueeze_1282, unsqueeze_1294, le_51, unsqueeze_1306, le_52, unsqueeze_1318, le_53, unsqueeze_1330, le_54, unsqueeze_1342, unsqueeze_1354, le_56, unsqueeze_1366, le_57, unsqueeze_1378, le_58, unsqueeze_1390, le_59, unsqueeze_1402, unsqueeze_1414, le_61, unsqueeze_1426, le_62, unsqueeze_1438, le_63, unsqueeze_1450, le_64, unsqueeze_1462, unsqueeze_1474, le_66, unsqueeze_1486, le_67, unsqueeze_1498, le_68, unsqueeze_1510, le_69, unsqueeze_1522, unsqueeze_1534, le_71, unsqueeze_1546, le_72, unsqueeze_1558, le_73, unsqueeze_1570, le_74, unsqueeze_1582, unsqueeze_1594, le_76, unsqueeze_1606, le_77, unsqueeze_1618, le_78, unsqueeze_1630, le_79, unsqueeze_1642, unsqueeze_1654, le_81, unsqueeze_1666, le_82, unsqueeze_1678, le_83, unsqueeze_1690, le_84, unsqueeze_1702, unsqueeze_1714, le_86, unsqueeze_1726, le_87, unsqueeze_1738, le_88, unsqueeze_1750, le_89, unsqueeze_1762, unsqueeze_1774, le_91, unsqueeze_1786, le_92, unsqueeze_1798, le_93, unsqueeze_1810, le_94, unsqueeze_1822, unsqueeze_1834, le_96, unsqueeze_1846, le_97, unsqueeze_1858, le_98, unsqueeze_1870, le_99, unsqueeze_1882, unsqueeze_1894, le_101, unsqueeze_1906, le_102, unsqueeze_1918, le_103, unsqueeze_1930, le_104, unsqueeze_1942, unsqueeze_1954, le_106, unsqueeze_1966, le_107, unsqueeze_1978, le_108, unsqueeze_1990, le_109, unsqueeze_2002, unsqueeze_2014, le_111, unsqueeze_2026, le_112, unsqueeze_2038, le_113, unsqueeze_2050, le_114, unsqueeze_2062, unsqueeze_2074, le_116, unsqueeze_2086, le_117, unsqueeze_2098, le_118, unsqueeze_2110, le_119, unsqueeze_2122, unsqueeze_2134, le_121, unsqueeze_2146, le_122, unsqueeze_2158, le_123, unsqueeze_2170, le_124, unsqueeze_2182, unsqueeze_2194, unsqueeze_2206, le_126, unsqueeze_2218, le_127, unsqueeze_2230, le_128, unsqueeze_2242, le_129, unsqueeze_2254, unsqueeze_2266, le_131, unsqueeze_2278, le_132, unsqueeze_2290, le_133, unsqueeze_2302, le_134, unsqueeze_2314, unsqueeze_2326, le_136, unsqueeze_2338, le_137, unsqueeze_2350, le_138, unsqueeze_2362, le_139, unsqueeze_2374, unsqueeze_2386, le_141, unsqueeze_2398, le_142, unsqueeze_2410, le_143, unsqueeze_2422, le_144, unsqueeze_2434, unsqueeze_2446, unsqueeze_2458, le_146, unsqueeze_2470, le_147, unsqueeze_2482, le_148, unsqueeze_2494, le_149, unsqueeze_2506, unsqueeze_2518, le_151, unsqueeze_2530, le_152, unsqueeze_2542, le_153, unsqueeze_2554, le_154, unsqueeze_2566, unsqueeze_2578, le_156, unsqueeze_2590, le_157, unsqueeze_2602, le_158, unsqueeze_2614, le_159, unsqueeze_2626, unsqueeze_2638, unsqueeze_2650, le_161, unsqueeze_2662, le_162, unsqueeze_2674, le_163, unsqueeze_2686, le_164, unsqueeze_2698, unsqueeze_2710, tangents_1 = args
    args.clear()
    assert_size_stride(primals_1, (64, 3, 7, 7), (147, 1, 21, 3))
    assert_size_stride(primals_2, (64, ), (1, ))
    assert_size_stride(primals_4, (104, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_5, (104, ), (1, ))
    assert_size_stride(primals_7, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_8, (26, ), (1, ))
    assert_size_stride(primals_10, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_11, (26, ), (1, ))
    assert_size_stride(primals_13, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_14, (26, ), (1, ))
    assert_size_stride(primals_16, (256, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(primals_17, (256, ), (1, ))
    assert_size_stride(primals_19, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_20, (256, ), (1, ))
    assert_size_stride(primals_22, (104, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_23, (104, ), (1, ))
    assert_size_stride(primals_25, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_26, (26, ), (1, ))
    assert_size_stride(primals_28, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_29, (26, ), (1, ))
    assert_size_stride(primals_31, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_32, (26, ), (1, ))
    assert_size_stride(primals_34, (256, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(primals_35, (256, ), (1, ))
    assert_size_stride(primals_37, (104, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_38, (104, ), (1, ))
    assert_size_stride(primals_40, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_41, (26, ), (1, ))
    assert_size_stride(primals_43, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_44, (26, ), (1, ))
    assert_size_stride(primals_46, (26, 26, 3, 3), (234, 1, 78, 26))
    assert_size_stride(primals_47, (26, ), (1, ))
    assert_size_stride(primals_49, (256, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(primals_50, (256, ), (1, ))
    assert_size_stride(primals_52, (208, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_53, (208, ), (1, ))
    assert_size_stride(primals_55, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_56, (52, ), (1, ))
    assert_size_stride(primals_58, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_59, (52, ), (1, ))
    assert_size_stride(primals_61, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_62, (52, ), (1, ))
    assert_size_stride(primals_64, (512, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(primals_65, (512, ), (1, ))
    assert_size_stride(primals_67, (512, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_68, (512, ), (1, ))
    assert_size_stride(primals_70, (208, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_71, (208, ), (1, ))
    assert_size_stride(primals_73, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_74, (52, ), (1, ))
    assert_size_stride(primals_76, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_77, (52, ), (1, ))
    assert_size_stride(primals_79, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_80, (52, ), (1, ))
    assert_size_stride(primals_82, (512, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(primals_83, (512, ), (1, ))
    assert_size_stride(primals_85, (208, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_86, (208, ), (1, ))
    assert_size_stride(primals_88, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_89, (52, ), (1, ))
    assert_size_stride(primals_91, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_92, (52, ), (1, ))
    assert_size_stride(primals_94, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_95, (52, ), (1, ))
    assert_size_stride(primals_97, (512, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(primals_98, (512, ), (1, ))
    assert_size_stride(primals_100, (208, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_101, (208, ), (1, ))
    assert_size_stride(primals_103, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_104, (52, ), (1, ))
    assert_size_stride(primals_106, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_107, (52, ), (1, ))
    assert_size_stride(primals_109, (52, 52, 3, 3), (468, 1, 156, 52))
    assert_size_stride(primals_110, (52, ), (1, ))
    assert_size_stride(primals_112, (512, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(primals_113, (512, ), (1, ))
    assert_size_stride(primals_115, (416, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_116, (416, ), (1, ))
    assert_size_stride(primals_118, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_119, (104, ), (1, ))
    assert_size_stride(primals_121, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_122, (104, ), (1, ))
    assert_size_stride(primals_124, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_125, (104, ), (1, ))
    assert_size_stride(primals_127, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_128, (1024, ), (1, ))
    assert_size_stride(primals_130, (1024, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_131, (1024, ), (1, ))
    assert_size_stride(primals_133, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_134, (416, ), (1, ))
    assert_size_stride(primals_136, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_137, (104, ), (1, ))
    assert_size_stride(primals_139, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_140, (104, ), (1, ))
    assert_size_stride(primals_142, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_143, (104, ), (1, ))
    assert_size_stride(primals_145, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_146, (1024, ), (1, ))
    assert_size_stride(primals_148, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_149, (416, ), (1, ))
    assert_size_stride(primals_151, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_152, (104, ), (1, ))
    assert_size_stride(primals_154, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_155, (104, ), (1, ))
    assert_size_stride(primals_157, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_158, (104, ), (1, ))
    assert_size_stride(primals_160, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_161, (1024, ), (1, ))
    assert_size_stride(primals_163, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_164, (416, ), (1, ))
    assert_size_stride(primals_166, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_167, (104, ), (1, ))
    assert_size_stride(primals_169, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_170, (104, ), (1, ))
    assert_size_stride(primals_172, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_173, (104, ), (1, ))
    assert_size_stride(primals_175, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_176, (1024, ), (1, ))
    assert_size_stride(primals_178, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_179, (416, ), (1, ))
    assert_size_stride(primals_181, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_182, (104, ), (1, ))
    assert_size_stride(primals_184, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_185, (104, ), (1, ))
    assert_size_stride(primals_187, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_188, (104, ), (1, ))
    assert_size_stride(primals_190, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_191, (1024, ), (1, ))
    assert_size_stride(primals_193, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_194, (416, ), (1, ))
    assert_size_stride(primals_196, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_197, (104, ), (1, ))
    assert_size_stride(primals_199, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_200, (104, ), (1, ))
    assert_size_stride(primals_202, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_203, (104, ), (1, ))
    assert_size_stride(primals_205, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_206, (1024, ), (1, ))
    assert_size_stride(primals_208, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_209, (416, ), (1, ))
    assert_size_stride(primals_211, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_212, (104, ), (1, ))
    assert_size_stride(primals_214, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_215, (104, ), (1, ))
    assert_size_stride(primals_217, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_218, (104, ), (1, ))
    assert_size_stride(primals_220, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_221, (1024, ), (1, ))
    assert_size_stride(primals_223, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_224, (416, ), (1, ))
    assert_size_stride(primals_226, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_227, (104, ), (1, ))
    assert_size_stride(primals_229, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_230, (104, ), (1, ))
    assert_size_stride(primals_232, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_233, (104, ), (1, ))
    assert_size_stride(primals_235, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_236, (1024, ), (1, ))
    assert_size_stride(primals_238, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_239, (416, ), (1, ))
    assert_size_stride(primals_241, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_242, (104, ), (1, ))
    assert_size_stride(primals_244, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_245, (104, ), (1, ))
    assert_size_stride(primals_247, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_248, (104, ), (1, ))
    assert_size_stride(primals_250, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_251, (1024, ), (1, ))
    assert_size_stride(primals_253, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_254, (416, ), (1, ))
    assert_size_stride(primals_256, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_257, (104, ), (1, ))
    assert_size_stride(primals_259, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_260, (104, ), (1, ))
    assert_size_stride(primals_262, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_263, (104, ), (1, ))
    assert_size_stride(primals_265, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_266, (1024, ), (1, ))
    assert_size_stride(primals_268, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_269, (416, ), (1, ))
    assert_size_stride(primals_271, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_272, (104, ), (1, ))
    assert_size_stride(primals_274, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_275, (104, ), (1, ))
    assert_size_stride(primals_277, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_278, (104, ), (1, ))
    assert_size_stride(primals_280, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_281, (1024, ), (1, ))
    assert_size_stride(primals_283, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_284, (416, ), (1, ))
    assert_size_stride(primals_286, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_287, (104, ), (1, ))
    assert_size_stride(primals_289, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_290, (104, ), (1, ))
    assert_size_stride(primals_292, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_293, (104, ), (1, ))
    assert_size_stride(primals_295, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_296, (1024, ), (1, ))
    assert_size_stride(primals_298, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_299, (416, ), (1, ))
    assert_size_stride(primals_301, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_302, (104, ), (1, ))
    assert_size_stride(primals_304, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_305, (104, ), (1, ))
    assert_size_stride(primals_307, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_308, (104, ), (1, ))
    assert_size_stride(primals_310, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_311, (1024, ), (1, ))
    assert_size_stride(primals_313, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_314, (416, ), (1, ))
    assert_size_stride(primals_316, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_317, (104, ), (1, ))
    assert_size_stride(primals_319, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_320, (104, ), (1, ))
    assert_size_stride(primals_322, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_323, (104, ), (1, ))
    assert_size_stride(primals_325, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_326, (1024, ), (1, ))
    assert_size_stride(primals_328, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_329, (416, ), (1, ))
    assert_size_stride(primals_331, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_332, (104, ), (1, ))
    assert_size_stride(primals_334, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_335, (104, ), (1, ))
    assert_size_stride(primals_337, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_338, (104, ), (1, ))
    assert_size_stride(primals_340, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_341, (1024, ), (1, ))
    assert_size_stride(primals_343, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_344, (416, ), (1, ))
    assert_size_stride(primals_346, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_347, (104, ), (1, ))
    assert_size_stride(primals_349, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_350, (104, ), (1, ))
    assert_size_stride(primals_352, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_353, (104, ), (1, ))
    assert_size_stride(primals_355, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_356, (1024, ), (1, ))
    assert_size_stride(primals_358, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_359, (416, ), (1, ))
    assert_size_stride(primals_361, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_362, (104, ), (1, ))
    assert_size_stride(primals_364, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_365, (104, ), (1, ))
    assert_size_stride(primals_367, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_368, (104, ), (1, ))
    assert_size_stride(primals_370, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_371, (1024, ), (1, ))
    assert_size_stride(primals_373, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_374, (416, ), (1, ))
    assert_size_stride(primals_376, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_377, (104, ), (1, ))
    assert_size_stride(primals_379, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_380, (104, ), (1, ))
    assert_size_stride(primals_382, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_383, (104, ), (1, ))
    assert_size_stride(primals_385, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_386, (1024, ), (1, ))
    assert_size_stride(primals_388, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_389, (416, ), (1, ))
    assert_size_stride(primals_391, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_392, (104, ), (1, ))
    assert_size_stride(primals_394, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_395, (104, ), (1, ))
    assert_size_stride(primals_397, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_398, (104, ), (1, ))
    assert_size_stride(primals_400, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_401, (1024, ), (1, ))
    assert_size_stride(primals_403, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_404, (416, ), (1, ))
    assert_size_stride(primals_406, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_407, (104, ), (1, ))
    assert_size_stride(primals_409, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_410, (104, ), (1, ))
    assert_size_stride(primals_412, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_413, (104, ), (1, ))
    assert_size_stride(primals_415, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_416, (1024, ), (1, ))
    assert_size_stride(primals_418, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_419, (416, ), (1, ))
    assert_size_stride(primals_421, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_422, (104, ), (1, ))
    assert_size_stride(primals_424, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_425, (104, ), (1, ))
    assert_size_stride(primals_427, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_428, (104, ), (1, ))
    assert_size_stride(primals_430, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_431, (1024, ), (1, ))
    assert_size_stride(primals_433, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_434, (416, ), (1, ))
    assert_size_stride(primals_436, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_437, (104, ), (1, ))
    assert_size_stride(primals_439, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_440, (104, ), (1, ))
    assert_size_stride(primals_442, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_443, (104, ), (1, ))
    assert_size_stride(primals_445, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_446, (1024, ), (1, ))
    assert_size_stride(primals_448, (416, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_449, (416, ), (1, ))
    assert_size_stride(primals_451, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_452, (104, ), (1, ))
    assert_size_stride(primals_454, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_455, (104, ), (1, ))
    assert_size_stride(primals_457, (104, 104, 3, 3), (936, 1, 312, 104))
    assert_size_stride(primals_458, (104, ), (1, ))
    assert_size_stride(primals_460, (1024, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_461, (1024, ), (1, ))
    assert_size_stride(primals_463, (832, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_464, (832, ), (1, ))
    assert_size_stride(primals_466, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_467, (208, ), (1, ))
    assert_size_stride(primals_469, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_470, (208, ), (1, ))
    assert_size_stride(primals_472, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_473, (208, ), (1, ))
    assert_size_stride(primals_475, (2048, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(primals_476, (2048, ), (1, ))
    assert_size_stride(primals_478, (2048, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_479, (2048, ), (1, ))
    assert_size_stride(primals_481, (832, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(primals_482, (832, ), (1, ))
    assert_size_stride(primals_484, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_485, (208, ), (1, ))
    assert_size_stride(primals_487, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_488, (208, ), (1, ))
    assert_size_stride(primals_490, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_491, (208, ), (1, ))
    assert_size_stride(primals_493, (2048, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(primals_494, (2048, ), (1, ))
    assert_size_stride(primals_496, (832, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(primals_497, (832, ), (1, ))
    assert_size_stride(primals_499, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_500, (208, ), (1, ))
    assert_size_stride(primals_502, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_503, (208, ), (1, ))
    assert_size_stride(primals_505, (208, 208, 3, 3), (1872, 1, 624, 208))
    assert_size_stride(primals_506, (208, ), (1, ))
    assert_size_stride(primals_508, (2048, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(primals_509, (2048, ), (1, ))
    assert_size_stride(primals_1023, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(convolution, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(squeeze_1, (64, ), (1, ))
    assert_size_stride(relu, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(getitem_2, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(getitem_3, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_1, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(squeeze_4, (104, ), (1, ))
    assert_size_stride(getitem_10, (8, 26, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_2, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_7, (26, ), (1, ))
    assert_size_stride(getitem_17, (8, 26, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_3, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_10, (26, ), (1, ))
    assert_size_stride(getitem_24, (8, 26, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_4, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_13, (26, ), (1, ))
    assert_size_stride(getitem_31, (8, 26, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(cat, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_5, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_16, (256, ), (1, ))
    assert_size_stride(convolution_6, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_19, (256, ), (1, ))
    assert_size_stride(relu_5, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_7, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(squeeze_22, (104, ), (1, ))
    assert_size_stride(getitem_42, (8, 26, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_8, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_25, (26, ), (1, ))
    assert_size_stride(add_46, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(convolution_9, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_28, (26, ), (1, ))
    assert_size_stride(add_52, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(convolution_10, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_31, (26, ), (1, ))
    assert_size_stride(cat_1, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_11, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_34, (256, ), (1, ))
    assert_size_stride(relu_10, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_12, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(squeeze_37, (104, ), (1, ))
    assert_size_stride(getitem_72, (8, 26, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_13, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_40, (26, ), (1, ))
    assert_size_stride(add_74, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(convolution_14, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_43, (26, ), (1, ))
    assert_size_stride(add_80, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(convolution_15, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(squeeze_46, (26, ), (1, ))
    assert_size_stride(cat_2, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(convolution_16, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_49, (256, ), (1, ))
    assert_size_stride(relu_15, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_17, (8, 208, 56, 56), (652288, 1, 11648, 208))
    assert_size_stride(squeeze_52, (208, ), (1, ))
    assert_size_stride(getitem_102, (8, 52, 56, 56), (652288, 1, 11648, 208))
    assert_size_stride(convolution_18, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_55, (52, ), (1, ))
    assert_size_stride(getitem_109, (8, 52, 56, 56), (652288, 1, 11648, 208))
    assert_size_stride(convolution_19, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_58, (52, ), (1, ))
    assert_size_stride(getitem_116, (8, 52, 56, 56), (652288, 1, 11648, 208))
    assert_size_stride(convolution_20, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_61, (52, ), (1, ))
    assert_size_stride(getitem_123, (8, 52, 56, 56), (652288, 1, 11648, 208))
    assert_size_stride(cat_3, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(convolution_21, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_64, (512, ), (1, ))
    assert_size_stride(convolution_22, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_67, (512, ), (1, ))
    assert_size_stride(relu_20, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_23, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(squeeze_70, (208, ), (1, ))
    assert_size_stride(getitem_134, (8, 52, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(convolution_24, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_73, (52, ), (1, ))
    assert_size_stride(add_133, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(convolution_25, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_76, (52, ), (1, ))
    assert_size_stride(add_139, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(convolution_26, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_79, (52, ), (1, ))
    assert_size_stride(cat_4, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(convolution_27, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_82, (512, ), (1, ))
    assert_size_stride(relu_25, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_28, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(squeeze_85, (208, ), (1, ))
    assert_size_stride(getitem_164, (8, 52, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(convolution_29, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_88, (52, ), (1, ))
    assert_size_stride(add_161, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(convolution_30, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_91, (52, ), (1, ))
    assert_size_stride(add_167, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(convolution_31, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_94, (52, ), (1, ))
    assert_size_stride(cat_5, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(convolution_32, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_97, (512, ), (1, ))
    assert_size_stride(relu_30, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_33, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(squeeze_100, (208, ), (1, ))
    assert_size_stride(getitem_194, (8, 52, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(convolution_34, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_103, (52, ), (1, ))
    assert_size_stride(add_189, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(convolution_35, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_106, (52, ), (1, ))
    assert_size_stride(add_195, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(convolution_36, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(squeeze_109, (52, ), (1, ))
    assert_size_stride(cat_6, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(convolution_37, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(squeeze_112, (512, ), (1, ))
    assert_size_stride(relu_35, (8, 512, 28, 28), (401408, 1, 14336, 512))
    assert_size_stride(convolution_38, (8, 416, 28, 28), (326144, 1, 11648, 416))
    assert_size_stride(squeeze_115, (416, ), (1, ))
    assert_size_stride(getitem_224, (8, 104, 28, 28), (326144, 1, 11648, 416))
    assert_size_stride(convolution_39, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_118, (104, ), (1, ))
    assert_size_stride(getitem_231, (8, 104, 28, 28), (326144, 1, 11648, 416))
    assert_size_stride(convolution_40, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_121, (104, ), (1, ))
    assert_size_stride(getitem_238, (8, 104, 28, 28), (326144, 1, 11648, 416))
    assert_size_stride(convolution_41, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_124, (104, ), (1, ))
    assert_size_stride(getitem_245, (8, 104, 28, 28), (326144, 1, 11648, 416))
    assert_size_stride(cat_7, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_42, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_127, (1024, ), (1, ))
    assert_size_stride(convolution_43, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_130, (1024, ), (1, ))
    assert_size_stride(relu_40, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_44, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_133, (416, ), (1, ))
    assert_size_stride(getitem_256, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_45, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_136, (104, ), (1, ))
    assert_size_stride(add_248, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_46, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_139, (104, ), (1, ))
    assert_size_stride(add_254, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_47, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_142, (104, ), (1, ))
    assert_size_stride(cat_8, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_48, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_145, (1024, ), (1, ))
    assert_size_stride(relu_45, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_49, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_148, (416, ), (1, ))
    assert_size_stride(getitem_286, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_50, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_151, (104, ), (1, ))
    assert_size_stride(add_276, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_51, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_154, (104, ), (1, ))
    assert_size_stride(add_282, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_52, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_157, (104, ), (1, ))
    assert_size_stride(cat_9, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_53, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_160, (1024, ), (1, ))
    assert_size_stride(relu_50, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_54, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_163, (416, ), (1, ))
    assert_size_stride(getitem_316, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_55, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_166, (104, ), (1, ))
    assert_size_stride(add_304, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_56, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_169, (104, ), (1, ))
    assert_size_stride(add_310, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_57, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_172, (104, ), (1, ))
    assert_size_stride(cat_10, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_58, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_175, (1024, ), (1, ))
    assert_size_stride(relu_55, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_59, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_178, (416, ), (1, ))
    assert_size_stride(getitem_346, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_60, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_181, (104, ), (1, ))
    assert_size_stride(add_332, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_61, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_184, (104, ), (1, ))
    assert_size_stride(add_338, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_62, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_187, (104, ), (1, ))
    assert_size_stride(cat_11, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_63, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_190, (1024, ), (1, ))
    assert_size_stride(relu_60, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_64, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_193, (416, ), (1, ))
    assert_size_stride(getitem_376, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_65, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_196, (104, ), (1, ))
    assert_size_stride(add_360, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_66, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_199, (104, ), (1, ))
    assert_size_stride(add_366, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_67, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_202, (104, ), (1, ))
    assert_size_stride(cat_12, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_68, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_205, (1024, ), (1, ))
    assert_size_stride(relu_65, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_69, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_208, (416, ), (1, ))
    assert_size_stride(getitem_406, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_70, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_211, (104, ), (1, ))
    assert_size_stride(add_388, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_71, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_214, (104, ), (1, ))
    assert_size_stride(add_394, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_72, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_217, (104, ), (1, ))
    assert_size_stride(cat_13, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_73, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_220, (1024, ), (1, ))
    assert_size_stride(relu_70, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_74, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_223, (416, ), (1, ))
    assert_size_stride(getitem_436, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_75, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_226, (104, ), (1, ))
    assert_size_stride(add_416, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_76, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_229, (104, ), (1, ))
    assert_size_stride(add_422, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_77, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_232, (104, ), (1, ))
    assert_size_stride(cat_14, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_78, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_235, (1024, ), (1, ))
    assert_size_stride(relu_75, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_79, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_238, (416, ), (1, ))
    assert_size_stride(getitem_466, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_80, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_241, (104, ), (1, ))
    assert_size_stride(add_444, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_81, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_244, (104, ), (1, ))
    assert_size_stride(add_450, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_82, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_247, (104, ), (1, ))
    assert_size_stride(cat_15, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_83, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_250, (1024, ), (1, ))
    assert_size_stride(relu_80, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_84, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_253, (416, ), (1, ))
    assert_size_stride(getitem_496, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_85, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_256, (104, ), (1, ))
    assert_size_stride(add_472, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_86, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_259, (104, ), (1, ))
    assert_size_stride(add_478, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_87, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_262, (104, ), (1, ))
    assert_size_stride(cat_16, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_88, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_265, (1024, ), (1, ))
    assert_size_stride(relu_85, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_89, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_268, (416, ), (1, ))
    assert_size_stride(getitem_526, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_90, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_271, (104, ), (1, ))
    assert_size_stride(add_500, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_91, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_274, (104, ), (1, ))
    assert_size_stride(add_506, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_92, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_277, (104, ), (1, ))
    assert_size_stride(cat_17, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_93, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_280, (1024, ), (1, ))
    assert_size_stride(relu_90, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_94, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_283, (416, ), (1, ))
    assert_size_stride(getitem_556, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_95, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_286, (104, ), (1, ))
    assert_size_stride(add_528, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_96, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_289, (104, ), (1, ))
    assert_size_stride(add_534, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_97, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_292, (104, ), (1, ))
    assert_size_stride(cat_18, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_98, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_295, (1024, ), (1, ))
    assert_size_stride(relu_95, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_99, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_298, (416, ), (1, ))
    assert_size_stride(getitem_586, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_100, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_301, (104, ), (1, ))
    assert_size_stride(add_556, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_101, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_304, (104, ), (1, ))
    assert_size_stride(add_562, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_102, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_307, (104, ), (1, ))
    assert_size_stride(cat_19, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_103, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_310, (1024, ), (1, ))
    assert_size_stride(relu_100, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_104, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_313, (416, ), (1, ))
    assert_size_stride(getitem_616, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_105, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_316, (104, ), (1, ))
    assert_size_stride(add_584, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_106, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_319, (104, ), (1, ))
    assert_size_stride(add_590, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_107, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_322, (104, ), (1, ))
    assert_size_stride(cat_20, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_108, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_325, (1024, ), (1, ))
    assert_size_stride(relu_105, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_109, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_328, (416, ), (1, ))
    assert_size_stride(getitem_646, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_110, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_331, (104, ), (1, ))
    assert_size_stride(add_612, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_111, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_334, (104, ), (1, ))
    assert_size_stride(add_618, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_112, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_337, (104, ), (1, ))
    assert_size_stride(cat_21, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_113, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_340, (1024, ), (1, ))
    assert_size_stride(relu_110, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_114, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_343, (416, ), (1, ))
    assert_size_stride(getitem_676, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_115, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_346, (104, ), (1, ))
    assert_size_stride(add_640, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_116, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_349, (104, ), (1, ))
    assert_size_stride(add_646, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_117, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_352, (104, ), (1, ))
    assert_size_stride(cat_22, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_118, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_355, (1024, ), (1, ))
    assert_size_stride(relu_115, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_119, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_358, (416, ), (1, ))
    assert_size_stride(getitem_706, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_120, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_361, (104, ), (1, ))
    assert_size_stride(add_668, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_121, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_364, (104, ), (1, ))
    assert_size_stride(add_674, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_122, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_367, (104, ), (1, ))
    assert_size_stride(cat_23, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_123, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_370, (1024, ), (1, ))
    assert_size_stride(relu_120, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_124, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_373, (416, ), (1, ))
    assert_size_stride(getitem_736, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_125, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_376, (104, ), (1, ))
    assert_size_stride(add_696, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_126, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_379, (104, ), (1, ))
    assert_size_stride(add_702, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_127, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_382, (104, ), (1, ))
    assert_size_stride(cat_24, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_128, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_385, (1024, ), (1, ))
    assert_size_stride(relu_125, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_129, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_388, (416, ), (1, ))
    assert_size_stride(getitem_766, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_130, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_391, (104, ), (1, ))
    assert_size_stride(add_724, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_131, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_394, (104, ), (1, ))
    assert_size_stride(add_730, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_132, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_397, (104, ), (1, ))
    assert_size_stride(cat_25, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_133, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_400, (1024, ), (1, ))
    assert_size_stride(relu_130, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_134, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_403, (416, ), (1, ))
    assert_size_stride(getitem_796, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_135, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_406, (104, ), (1, ))
    assert_size_stride(add_752, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_136, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_409, (104, ), (1, ))
    assert_size_stride(add_758, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_137, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_412, (104, ), (1, ))
    assert_size_stride(cat_26, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_138, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_415, (1024, ), (1, ))
    assert_size_stride(relu_135, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_139, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_418, (416, ), (1, ))
    assert_size_stride(getitem_826, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_140, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_421, (104, ), (1, ))
    assert_size_stride(add_780, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_141, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_424, (104, ), (1, ))
    assert_size_stride(add_786, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_142, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_427, (104, ), (1, ))
    assert_size_stride(cat_27, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_143, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_430, (1024, ), (1, ))
    assert_size_stride(relu_140, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_144, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_433, (416, ), (1, ))
    assert_size_stride(getitem_856, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_145, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_436, (104, ), (1, ))
    assert_size_stride(add_808, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_146, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_439, (104, ), (1, ))
    assert_size_stride(add_814, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_147, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_442, (104, ), (1, ))
    assert_size_stride(cat_28, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_148, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_445, (1024, ), (1, ))
    assert_size_stride(relu_145, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_149, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(squeeze_448, (416, ), (1, ))
    assert_size_stride(getitem_886, (8, 104, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_150, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_451, (104, ), (1, ))
    assert_size_stride(add_836, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_151, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_454, (104, ), (1, ))
    assert_size_stride(add_842, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(convolution_152, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(squeeze_457, (104, ), (1, ))
    assert_size_stride(cat_29, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(convolution_153, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(squeeze_460, (1024, ), (1, ))
    assert_size_stride(relu_150, (8, 1024, 14, 14), (200704, 1, 14336, 1024))
    assert_size_stride(convolution_154, (8, 832, 14, 14), (163072, 1, 11648, 832))
    assert_size_stride(squeeze_463, (832, ), (1, ))
    assert_size_stride(getitem_916, (8, 208, 14, 14), (163072, 1, 11648, 832))
    assert_size_stride(convolution_155, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_466, (208, ), (1, ))
    assert_size_stride(getitem_923, (8, 208, 14, 14), (163072, 1, 11648, 832))
    assert_size_stride(convolution_156, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_469, (208, ), (1, ))
    assert_size_stride(getitem_930, (8, 208, 14, 14), (163072, 1, 11648, 832))
    assert_size_stride(convolution_157, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_472, (208, ), (1, ))
    assert_size_stride(getitem_937, (8, 208, 14, 14), (163072, 1, 11648, 832))
    assert_size_stride(cat_30, (8, 832, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(convolution_158, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_475, (2048, ), (1, ))
    assert_size_stride(convolution_159, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_478, (2048, ), (1, ))
    assert_size_stride(relu_155, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(convolution_160, (8, 832, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(squeeze_481, (832, ), (1, ))
    assert_size_stride(getitem_948, (8, 208, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(convolution_161, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_484, (208, ), (1, ))
    assert_size_stride(add_895, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(convolution_162, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_487, (208, ), (1, ))
    assert_size_stride(add_901, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(convolution_163, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_490, (208, ), (1, ))
    assert_size_stride(cat_31, (8, 832, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(convolution_164, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_493, (2048, ), (1, ))
    assert_size_stride(relu_160, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(convolution_165, (8, 832, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(squeeze_496, (832, ), (1, ))
    assert_size_stride(getitem_978, (8, 208, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(convolution_166, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_499, (208, ), (1, ))
    assert_size_stride(add_923, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(convolution_167, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_502, (208, ), (1, ))
    assert_size_stride(add_929, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(convolution_168, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(squeeze_505, (208, ), (1, ))
    assert_size_stride(cat_32, (8, 832, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(convolution_169, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_508, (2048, ), (1, ))
    assert_size_stride(view, (8, 2048), (2048, 1))
    assert_size_stride(permute_1, (1000, 2048), (2048, 1))
    assert_size_stride(le, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(unsqueeze_682, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(le_1, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_694, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_2, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_706, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_3, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_718, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_4, (8, 832, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(unsqueeze_730, (1, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(unsqueeze_742, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(le_6, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_754, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_7, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_766, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_8, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_778, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_9, (8, 832, 7, 7), (40768, 1, 5824, 832))
    assert_size_stride(unsqueeze_790, (1, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(unsqueeze_802, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(unsqueeze_814, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(le_11, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_826, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_12, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_838, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_13, (8, 208, 7, 7), (10192, 1, 1456, 208))
    assert_size_stride(unsqueeze_850, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(le_14, (8, 832, 14, 14), (163072, 1, 11648, 832))
    assert_size_stride(unsqueeze_862, (1, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(unsqueeze_874, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_16, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_886, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_17, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_898, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_18, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_910, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_19, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_922, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_934, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_21, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_946, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_22, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_958, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_23, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_970, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_24, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_982, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_994, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_26, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1006, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_27, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1018, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_28, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1030, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_29, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1042, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1054, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_31, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1066, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_32, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1078, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_33, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1090, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_34, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1102, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1114, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_36, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1126, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_37, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1138, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_38, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1150, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_39, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1162, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1174, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_41, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1186, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_42, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1198, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_43, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1210, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_44, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1222, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1234, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_46, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1246, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_47, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1258, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_48, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1270, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_49, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1282, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1294, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_51, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1306, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_52, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1318, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_53, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1330, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_54, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1342, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1354, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_56, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1366, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_57, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1378, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_58, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1390, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_59, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1402, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1414, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_61, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1426, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_62, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1438, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_63, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1450, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_64, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1462, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1474, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_66, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1486, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_67, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1498, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_68, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1510, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_69, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1522, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1534, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_71, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1546, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_72, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1558, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_73, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1570, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_74, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1582, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1594, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_76, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1606, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_77, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1618, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_78, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1630, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_79, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1642, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1654, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_81, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1666, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_82, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1678, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_83, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1690, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_84, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1702, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1714, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_86, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1726, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_87, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1738, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_88, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1750, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_89, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1762, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1774, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_91, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1786, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_92, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1798, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_93, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1810, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_94, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1822, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1834, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_96, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1846, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_97, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1858, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_98, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1870, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_99, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1882, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1894, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_101, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1906, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_102, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1918, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_103, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1930, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_104, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_1942, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_1954, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_106, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1966, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_107, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1978, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_108, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_1990, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_109, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_2002, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_2014, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_111, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2026, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_112, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2038, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_113, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2050, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_114, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_2062, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_2074, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_116, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2086, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_117, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2098, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_118, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2110, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_119, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_2122, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_2134, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_121, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2146, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_122, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2158, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_123, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2170, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_124, (8, 416, 14, 14), (81536, 1, 5824, 416))
    assert_size_stride(unsqueeze_2182, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_2194, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(unsqueeze_2206, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_126, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2218, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_127, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2230, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_128, (8, 104, 14, 14), (20384, 1, 1456, 104))
    assert_size_stride(unsqueeze_2242, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(le_129, (8, 416, 28, 28), (326144, 1, 11648, 416))
    assert_size_stride(unsqueeze_2254, (1, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(unsqueeze_2266, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_131, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2278, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_132, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2290, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_133, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2302, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_134, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(unsqueeze_2314, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(unsqueeze_2326, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_136, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2338, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_137, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2350, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_138, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2362, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_139, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(unsqueeze_2374, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(unsqueeze_2386, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_141, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2398, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_142, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2410, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_143, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2422, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_144, (8, 208, 28, 28), (163072, 1, 5824, 208))
    assert_size_stride(unsqueeze_2434, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(unsqueeze_2446, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(unsqueeze_2458, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_146, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2470, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_147, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2482, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_148, (8, 52, 28, 28), (40768, 1, 1456, 52))
    assert_size_stride(unsqueeze_2494, (1, 52, 1, 1), (52, 1, 1, 1))
    assert_size_stride(le_149, (8, 208, 56, 56), (652288, 1, 11648, 208))
    assert_size_stride(unsqueeze_2506, (1, 208, 1, 1), (208, 1, 1, 1))
    assert_size_stride(unsqueeze_2518, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_151, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2530, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_152, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2542, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_153, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2554, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_154, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(unsqueeze_2566, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(unsqueeze_2578, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_156, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2590, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_157, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2602, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_158, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2614, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_159, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(unsqueeze_2626, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(unsqueeze_2638, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_2650, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_161, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2662, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_162, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2674, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_163, (8, 26, 56, 56), (81536, 1, 1456, 26))
    assert_size_stride(unsqueeze_2686, (1, 26, 1, 1), (26, 1, 1, 1))
    assert_size_stride(le_164, (8, 104, 56, 56), (326144, 1, 5824, 104))
    assert_size_stride(unsqueeze_2698, (1, 104, 1, 1), (104, 1, 1, 1))
    assert_size_stride(unsqueeze_2710, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_1, out=buf0)
    del permute_1
    buf1 = empty((1000, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), view, out=buf1)
    del view
    buf2 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf3 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf4 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf5 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf6 = empty_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0(c_void_p(tangents_1.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(convolution_169.data_ptr()), c_void_p(unsqueeze_682.data_ptr()), c_void_p(squeeze_508.data_ptr()), c_void_p(primals_509.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()))
    del convolution_169
    del primals_509
    del squeeze_508
    del tangents_1
    del unsqueeze_682
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.div, aten.native_batch_norm_backward, aten.threshold_backward]
    buf7 = aten.convolution_backward(buf6, cat_32, primals_508, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_32
    del primals_508
    buf8 = buf7[0]
    buf9 = buf7[1]
    del buf7
    buf10 = empty((208, ), device='cpu', dtype=torch.float32)
    buf11 = empty((208, ), device='cpu', dtype=torch.float32)
    buf12 = empty((208, ), device='cpu', dtype=torch.float32)
    buf13 = empty_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1(c_void_p(le_1.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(convolution_168.data_ptr()), c_void_p(unsqueeze_694.data_ptr()), c_void_p(squeeze_505.data_ptr()), c_void_p(primals_506.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()))
    del convolution_168
    del le_1
    del primals_506
    del squeeze_505
    del unsqueeze_694
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf14 = aten.convolution_backward(buf13, add_929, primals_505, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_929
    del primals_505
    buf15 = buf14[0]
    buf16 = buf14[1]
    del buf14
    buf17 = buf11; del buf11  # reuse
    buf18 = empty((208, ), device='cpu', dtype=torch.float32)
    buf19 = buf13; del buf13  # reuse
    buf20 = buf18; del buf18  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_2(c_void_p(buf20.data_ptr()), c_void_p(le_2.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(convolution_167.data_ptr()), c_void_p(unsqueeze_706.data_ptr()), c_void_p(squeeze_502.data_ptr()), c_void_p(primals_503.data_ptr()), c_void_p(buf17.data_ptr()), c_void_p(buf19.data_ptr()))
    del convolution_167
    del le_2
    del primals_503
    del squeeze_502
    del unsqueeze_706
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf21 = aten.convolution_backward(buf19, add_923, primals_502, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_923
    del primals_502
    buf22 = buf21[0]
    buf23 = buf21[1]
    del buf21
    buf24 = empty((208, ), device='cpu', dtype=torch.float32)
    buf25 = empty((208, ), device='cpu', dtype=torch.float32)
    buf26 = buf19; del buf19  # reuse
    buf27 = buf25; del buf25  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_3(c_void_p(buf27.data_ptr()), c_void_p(le_3.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(convolution_166.data_ptr()), c_void_p(unsqueeze_718.data_ptr()), c_void_p(squeeze_499.data_ptr()), c_void_p(primals_500.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf26.data_ptr()))
    del convolution_166
    del le_3
    del primals_500
    del squeeze_499
    del unsqueeze_718
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf28 = aten.convolution_backward(buf26, getitem_978, primals_499, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf26
    del getitem_978
    del primals_499
    buf29 = buf28[0]
    buf30 = buf28[1]
    del buf28
    buf31 = buf8; del buf8  # reuse
    buf32 = empty((832, ), device='cpu', dtype=torch.float32)
    buf33 = empty((832, ), device='cpu', dtype=torch.float32)
    buf34 = empty((832, ), device='cpu', dtype=torch.float32)
    buf35 = buf31; del buf31  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_4(c_void_p(buf35.data_ptr()), c_void_p(le_4.data_ptr()), c_void_p(buf29.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(convolution_165.data_ptr()), c_void_p(unsqueeze_730.data_ptr()), c_void_p(squeeze_496.data_ptr()), c_void_p(primals_497.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(buf34.data_ptr()))
    del buf15
    del buf22
    del convolution_165
    del le_4
    del primals_497
    del squeeze_496
    del unsqueeze_730
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf36 = aten.convolution_backward(buf35, relu_160, primals_496, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf35
    del primals_496
    buf37 = buf36[0]
    buf38 = buf36[1]
    del buf36
    buf39 = buf4; del buf4  # reuse
    buf40 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf41 = buf6; del buf6  # reuse
    buf42 = buf40; del buf40  # reuse
    buf43 = buf41; del buf41  # reuse
    cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_5(c_void_p(buf42.data_ptr()), c_void_p(buf43.data_ptr()), c_void_p(relu_160.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(convolution_164.data_ptr()), c_void_p(unsqueeze_742.data_ptr()), c_void_p(squeeze_493.data_ptr()), c_void_p(primals_494.data_ptr()), c_void_p(buf39.data_ptr()))
    del convolution_164
    del primals_494
    del squeeze_493
    del unsqueeze_742
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf44 = aten.convolution_backward(buf43, cat_31, primals_493, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_31
    del primals_493
    buf45 = buf44[0]
    buf46 = buf44[1]
    del buf44
    buf47 = empty((208, ), device='cpu', dtype=torch.float32)
    buf48 = empty((208, ), device='cpu', dtype=torch.float32)
    buf49 = empty((208, ), device='cpu', dtype=torch.float32)
    buf50 = buf29; del buf29  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_6(c_void_p(le_6.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(convolution_163.data_ptr()), c_void_p(unsqueeze_754.data_ptr()), c_void_p(squeeze_490.data_ptr()), c_void_p(primals_491.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(buf49.data_ptr()), c_void_p(buf50.data_ptr()))
    del convolution_163
    del le_6
    del primals_491
    del squeeze_490
    del unsqueeze_754
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf51 = aten.convolution_backward(buf50, add_901, primals_490, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_901
    del primals_490
    buf52 = buf51[0]
    buf53 = buf51[1]
    del buf51
    buf54 = buf48; del buf48  # reuse
    buf55 = empty((208, ), device='cpu', dtype=torch.float32)
    buf56 = buf50; del buf50  # reuse
    buf57 = buf55; del buf55  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_7(c_void_p(buf57.data_ptr()), c_void_p(le_7.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(convolution_162.data_ptr()), c_void_p(unsqueeze_766.data_ptr()), c_void_p(squeeze_487.data_ptr()), c_void_p(primals_488.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf56.data_ptr()))
    del convolution_162
    del le_7
    del primals_488
    del squeeze_487
    del unsqueeze_766
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf58 = aten.convolution_backward(buf56, add_895, primals_487, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_895
    del primals_487
    buf59 = buf58[0]
    buf60 = buf58[1]
    del buf58
    buf61 = empty((208, ), device='cpu', dtype=torch.float32)
    buf62 = empty((208, ), device='cpu', dtype=torch.float32)
    buf63 = buf56; del buf56  # reuse
    buf64 = buf62; del buf62  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_8(c_void_p(buf64.data_ptr()), c_void_p(le_8.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(convolution_161.data_ptr()), c_void_p(unsqueeze_778.data_ptr()), c_void_p(squeeze_484.data_ptr()), c_void_p(primals_485.data_ptr()), c_void_p(buf61.data_ptr()), c_void_p(buf63.data_ptr()))
    del convolution_161
    del le_8
    del primals_485
    del squeeze_484
    del unsqueeze_778
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf65 = aten.convolution_backward(buf63, getitem_948, primals_484, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf63
    del getitem_948
    del primals_484
    buf66 = buf65[0]
    buf67 = buf65[1]
    del buf65
    buf68 = buf45; del buf45  # reuse
    buf69 = buf33; del buf33  # reuse
    buf70 = empty((832, ), device='cpu', dtype=torch.float32)
    buf71 = empty((832, ), device='cpu', dtype=torch.float32)
    buf72 = buf68; del buf68  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_9(c_void_p(buf72.data_ptr()), c_void_p(le_9.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(convolution_160.data_ptr()), c_void_p(unsqueeze_790.data_ptr()), c_void_p(squeeze_481.data_ptr()), c_void_p(primals_482.data_ptr()), c_void_p(buf69.data_ptr()), c_void_p(buf70.data_ptr()), c_void_p(buf71.data_ptr()))
    del buf52
    del buf59
    del convolution_160
    del le_9
    del primals_482
    del squeeze_481
    del unsqueeze_790
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf73 = aten.convolution_backward(buf72, relu_155, primals_481, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_481
    buf74 = buf73[0]
    buf75 = buf73[1]
    del buf73
    buf76 = buf37; del buf37  # reuse
    buf77 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf78 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf84 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf79 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf80 = buf43; del buf43  # reuse
    buf86 = empty_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    cpp_fused_add_convolution_backward_div_native_batch_norm_backward_threshold_backward_10(c_void_p(buf76.data_ptr()), c_void_p(relu_155.data_ptr()), c_void_p(relu_160.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(convolution_159.data_ptr()), c_void_p(unsqueeze_802.data_ptr()), c_void_p(convolution_158.data_ptr()), c_void_p(unsqueeze_814.data_ptr()), c_void_p(squeeze_478.data_ptr()), c_void_p(primals_479.data_ptr()), c_void_p(squeeze_475.data_ptr()), c_void_p(primals_476.data_ptr()), c_void_p(buf77.data_ptr()), c_void_p(buf78.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf80.data_ptr()), c_void_p(buf86.data_ptr()))
    del buf0
    del buf74
    del buf76
    del buf78
    del convolution_158
    del convolution_159
    del le
    del primals_476
    del primals_479
    del relu_155
    del relu_160
    del squeeze_478
    del unsqueeze_802
    del unsqueeze_814
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf81 = aten.convolution_backward(buf80, relu_150, primals_478, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf80
    del primals_478
    buf82 = buf81[0]
    buf83 = buf81[1]
    del buf81
    buf85 = buf84; del buf84  # reuse
    cpp_fused_native_batch_norm_backward_11(c_void_p(buf85.data_ptr()), c_void_p(squeeze_475.data_ptr()))
    del squeeze_475
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf87 = aten.convolution_backward(buf86, cat_30, primals_475, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf86
    del cat_30
    del primals_475
    buf88 = buf87[0]
    buf89 = buf87[1]
    del buf87
    buf90 = reinterpret_tensor(buf72, (8, 208, 14, 14), (40768, 196, 14, 1), 0); del buf72  # reuse
    buf91 = empty((208, ), device='cpu', dtype=torch.float32)
    buf92 = empty((208, ), device='cpu', dtype=torch.float32)
    buf93 = empty((208, ), device='cpu', dtype=torch.float32)
    buf94 = buf66; del buf66  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_12(c_void_p(buf88.data_ptr()), c_void_p(le_11.data_ptr()), c_void_p(convolution_157.data_ptr()), c_void_p(unsqueeze_826.data_ptr()), c_void_p(squeeze_472.data_ptr()), c_void_p(primals_473.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf93.data_ptr()), c_void_p(buf94.data_ptr()))
    del convolution_157
    del le_11
    del primals_473
    del squeeze_472
    del unsqueeze_826
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf95 = aten.convolution_backward(buf94, getitem_930, primals_472, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_930
    del primals_472
    buf96 = buf95[0]
    buf97 = buf95[1]
    del buf95
    buf98 = buf92; del buf92  # reuse
    buf99 = empty((208, ), device='cpu', dtype=torch.float32)
    buf100 = empty((208, ), device='cpu', dtype=torch.float32)
    buf101 = buf94; del buf94  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_13(c_void_p(le_12.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(convolution_156.data_ptr()), c_void_p(unsqueeze_838.data_ptr()), c_void_p(squeeze_469.data_ptr()), c_void_p(primals_470.data_ptr()), c_void_p(buf98.data_ptr()), c_void_p(buf99.data_ptr()), c_void_p(buf100.data_ptr()), c_void_p(buf101.data_ptr()))
    del convolution_156
    del le_12
    del primals_470
    del squeeze_469
    del unsqueeze_838
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf102 = aten.convolution_backward(buf101, getitem_923, primals_469, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_923
    del primals_469
    buf103 = buf102[0]
    buf104 = buf102[1]
    del buf102
    buf105 = buf99; del buf99  # reuse
    buf106 = empty((208, ), device='cpu', dtype=torch.float32)
    buf107 = empty((208, ), device='cpu', dtype=torch.float32)
    buf108 = buf101; del buf101  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_14(c_void_p(le_13.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(convolution_155.data_ptr()), c_void_p(unsqueeze_850.data_ptr()), c_void_p(squeeze_466.data_ptr()), c_void_p(primals_467.data_ptr()), c_void_p(buf105.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(buf107.data_ptr()), c_void_p(buf108.data_ptr()))
    del buf88
    del convolution_155
    del le_13
    del primals_467
    del squeeze_466
    del unsqueeze_850
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf109 = aten.convolution_backward(buf108, getitem_916, primals_466, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf108
    del getitem_916
    del primals_466
    buf110 = buf109[0]
    buf111 = buf109[1]
    del buf109
    buf112 = empty_strided((8, 832, 14, 14), (163072, 1, 11648, 832), device='cpu', dtype=torch.float32)
    buf113 = buf70; del buf70  # reuse
    buf114 = empty((832, ), device='cpu', dtype=torch.float32)
    buf115 = empty((832, ), device='cpu', dtype=torch.float32)
    buf116 = buf112; del buf112  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_15(c_void_p(buf116.data_ptr()), c_void_p(le_14.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(buf103.data_ptr()), c_void_p(buf96.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(convolution_154.data_ptr()), c_void_p(unsqueeze_862.data_ptr()), c_void_p(squeeze_463.data_ptr()), c_void_p(primals_464.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(buf114.data_ptr()), c_void_p(buf115.data_ptr()))
    del buf103
    del buf110
    del buf114
    del buf90
    del convolution_154
    del le_14
    del primals_464
    del squeeze_463
    del unsqueeze_862
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf117 = aten.convolution_backward(buf116, relu_150, primals_463, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf116
    del primals_463
    buf118 = buf117[0]
    buf119 = buf117[1]
    del buf117
    buf120 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf121 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf122 = empty_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    buf123 = buf121; del buf121  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_16(c_void_p(buf123.data_ptr()), c_void_p(relu_150.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(convolution_153.data_ptr()), c_void_p(unsqueeze_874.data_ptr()), c_void_p(squeeze_460.data_ptr()), c_void_p(primals_461.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf122.data_ptr()))
    del convolution_153
    del primals_461
    del squeeze_460
    del unsqueeze_874
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf124 = aten.convolution_backward(buf122, cat_29, primals_460, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_29
    del primals_460
    buf125 = buf124[0]
    buf126 = buf124[1]
    del buf124
    buf127 = empty((104, ), device='cpu', dtype=torch.float32)
    buf128 = empty((104, ), device='cpu', dtype=torch.float32)
    buf129 = empty((104, ), device='cpu', dtype=torch.float32)
    buf130 = empty_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_17(c_void_p(le_16.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(convolution_152.data_ptr()), c_void_p(unsqueeze_886.data_ptr()), c_void_p(squeeze_457.data_ptr()), c_void_p(primals_458.data_ptr()), c_void_p(buf127.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(buf129.data_ptr()), c_void_p(buf130.data_ptr()))
    del convolution_152
    del le_16
    del primals_458
    del squeeze_457
    del unsqueeze_886
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf131 = aten.convolution_backward(buf130, add_842, primals_457, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_842
    del primals_457
    buf132 = buf131[0]
    buf133 = buf131[1]
    del buf131
    buf134 = buf128; del buf128  # reuse
    buf135 = empty((104, ), device='cpu', dtype=torch.float32)
    buf136 = buf130; del buf130  # reuse
    buf137 = buf135; del buf135  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_18(c_void_p(buf137.data_ptr()), c_void_p(le_17.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(convolution_151.data_ptr()), c_void_p(unsqueeze_898.data_ptr()), c_void_p(squeeze_454.data_ptr()), c_void_p(primals_455.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(buf136.data_ptr()))
    del convolution_151
    del le_17
    del primals_455
    del squeeze_454
    del unsqueeze_898
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf138 = aten.convolution_backward(buf136, add_836, primals_454, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_836
    del primals_454
    buf139 = buf138[0]
    buf140 = buf138[1]
    del buf138
    buf141 = empty((104, ), device='cpu', dtype=torch.float32)
    buf142 = empty((104, ), device='cpu', dtype=torch.float32)
    buf143 = buf136; del buf136  # reuse
    buf144 = buf142; del buf142  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_19(c_void_p(buf144.data_ptr()), c_void_p(le_18.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(convolution_150.data_ptr()), c_void_p(unsqueeze_910.data_ptr()), c_void_p(squeeze_451.data_ptr()), c_void_p(primals_452.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(buf143.data_ptr()))
    del convolution_150
    del le_18
    del primals_452
    del squeeze_451
    del unsqueeze_910
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf145 = aten.convolution_backward(buf143, getitem_886, primals_451, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf143
    del getitem_886
    del primals_451
    buf146 = buf145[0]
    buf147 = buf145[1]
    del buf145
    buf148 = buf125; del buf125  # reuse
    buf149 = empty((416, ), device='cpu', dtype=torch.float32)
    buf150 = empty((416, ), device='cpu', dtype=torch.float32)
    buf151 = empty((416, ), device='cpu', dtype=torch.float32)
    buf152 = buf148; del buf148  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_20(c_void_p(buf152.data_ptr()), c_void_p(le_19.data_ptr()), c_void_p(buf146.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(convolution_149.data_ptr()), c_void_p(unsqueeze_922.data_ptr()), c_void_p(squeeze_448.data_ptr()), c_void_p(primals_449.data_ptr()), c_void_p(buf149.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf151.data_ptr()))
    del buf132
    del buf139
    del convolution_149
    del le_19
    del primals_449
    del squeeze_448
    del unsqueeze_922
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf153 = aten.convolution_backward(buf152, relu_145, primals_448, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf152
    del primals_448
    buf154 = buf153[0]
    buf155 = buf153[1]
    del buf153
    buf156 = buf118; del buf118  # reuse
    buf157 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf158 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf159 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf160 = buf122; del buf122  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_21(c_void_p(buf156.data_ptr()), c_void_p(relu_145.data_ptr()), c_void_p(relu_150.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(convolution_148.data_ptr()), c_void_p(unsqueeze_934.data_ptr()), c_void_p(squeeze_445.data_ptr()), c_void_p(primals_446.data_ptr()), c_void_p(buf157.data_ptr()), c_void_p(buf158.data_ptr()), c_void_p(buf159.data_ptr()), c_void_p(buf160.data_ptr()))
    del buf154
    del buf82
    del convolution_148
    del primals_446
    del relu_145
    del relu_150
    del squeeze_445
    del unsqueeze_934
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf161 = aten.convolution_backward(buf160, cat_28, primals_445, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_28
    del primals_445
    buf162 = buf161[0]
    buf163 = buf161[1]
    del buf161
    buf164 = empty((104, ), device='cpu', dtype=torch.float32)
    buf165 = empty((104, ), device='cpu', dtype=torch.float32)
    buf166 = empty((104, ), device='cpu', dtype=torch.float32)
    buf167 = buf146; del buf146  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22(c_void_p(le_21.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(convolution_147.data_ptr()), c_void_p(unsqueeze_946.data_ptr()), c_void_p(squeeze_442.data_ptr()), c_void_p(primals_443.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf165.data_ptr()), c_void_p(buf166.data_ptr()), c_void_p(buf167.data_ptr()))
    del convolution_147
    del le_21
    del primals_443
    del squeeze_442
    del unsqueeze_946
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf168 = aten.convolution_backward(buf167, add_814, primals_442, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_814
    del primals_442
    buf169 = buf168[0]
    buf170 = buf168[1]
    del buf168
    buf171 = buf165; del buf165  # reuse
    buf172 = empty((104, ), device='cpu', dtype=torch.float32)
    buf173 = buf167; del buf167  # reuse
    buf174 = buf172; del buf172  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_23(c_void_p(buf174.data_ptr()), c_void_p(le_22.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(convolution_146.data_ptr()), c_void_p(unsqueeze_958.data_ptr()), c_void_p(squeeze_439.data_ptr()), c_void_p(primals_440.data_ptr()), c_void_p(buf171.data_ptr()), c_void_p(buf173.data_ptr()))
    del convolution_146
    del le_22
    del primals_440
    del squeeze_439
    del unsqueeze_958
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf175 = aten.convolution_backward(buf173, add_808, primals_439, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_808
    del primals_439
    buf176 = buf175[0]
    buf177 = buf175[1]
    del buf175
    buf178 = empty((104, ), device='cpu', dtype=torch.float32)
    buf179 = empty((104, ), device='cpu', dtype=torch.float32)
    buf180 = buf173; del buf173  # reuse
    buf181 = buf179; del buf179  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_24(c_void_p(buf181.data_ptr()), c_void_p(le_23.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(convolution_145.data_ptr()), c_void_p(unsqueeze_970.data_ptr()), c_void_p(squeeze_436.data_ptr()), c_void_p(primals_437.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf180.data_ptr()))
    del convolution_145
    del le_23
    del primals_437
    del squeeze_436
    del unsqueeze_970
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf182 = aten.convolution_backward(buf180, getitem_856, primals_436, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf180
    del getitem_856
    del primals_436
    buf183 = buf182[0]
    buf184 = buf182[1]
    del buf182
    buf185 = buf162; del buf162  # reuse
    buf186 = buf150; del buf150  # reuse
    buf187 = empty((416, ), device='cpu', dtype=torch.float32)
    buf188 = empty((416, ), device='cpu', dtype=torch.float32)
    buf189 = buf185; del buf185  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_25(c_void_p(buf189.data_ptr()), c_void_p(le_24.data_ptr()), c_void_p(buf183.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(convolution_144.data_ptr()), c_void_p(unsqueeze_982.data_ptr()), c_void_p(squeeze_433.data_ptr()), c_void_p(primals_434.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf187.data_ptr()), c_void_p(buf188.data_ptr()))
    del buf169
    del buf176
    del convolution_144
    del le_24
    del primals_434
    del squeeze_433
    del unsqueeze_982
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf190 = aten.convolution_backward(buf189, relu_140, primals_433, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf189
    del primals_433
    buf191 = buf190[0]
    buf192 = buf190[1]
    del buf190
    buf193 = buf158; del buf158  # reuse
    buf194 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf195 = buf160; del buf160  # reuse
    buf196 = buf194; del buf194  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_26(c_void_p(buf196.data_ptr()), c_void_p(relu_140.data_ptr()), c_void_p(buf156.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(convolution_143.data_ptr()), c_void_p(unsqueeze_994.data_ptr()), c_void_p(squeeze_430.data_ptr()), c_void_p(primals_431.data_ptr()), c_void_p(buf193.data_ptr()), c_void_p(buf195.data_ptr()))
    del convolution_143
    del primals_431
    del squeeze_430
    del unsqueeze_994
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf197 = aten.convolution_backward(buf195, cat_27, primals_430, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_27
    del primals_430
    buf198 = buf197[0]
    buf199 = buf197[1]
    del buf197
    buf200 = empty((104, ), device='cpu', dtype=torch.float32)
    buf201 = empty((104, ), device='cpu', dtype=torch.float32)
    buf202 = empty((104, ), device='cpu', dtype=torch.float32)
    buf203 = buf183; del buf183  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_27(c_void_p(le_26.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(convolution_142.data_ptr()), c_void_p(unsqueeze_1006.data_ptr()), c_void_p(squeeze_427.data_ptr()), c_void_p(primals_428.data_ptr()), c_void_p(buf200.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(buf202.data_ptr()), c_void_p(buf203.data_ptr()))
    del convolution_142
    del le_26
    del primals_428
    del squeeze_427
    del unsqueeze_1006
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf204 = aten.convolution_backward(buf203, add_786, primals_427, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_786
    del primals_427
    buf205 = buf204[0]
    buf206 = buf204[1]
    del buf204
    buf207 = buf201; del buf201  # reuse
    buf208 = empty((104, ), device='cpu', dtype=torch.float32)
    buf209 = buf203; del buf203  # reuse
    buf210 = buf208; del buf208  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_28(c_void_p(buf210.data_ptr()), c_void_p(le_27.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(convolution_141.data_ptr()), c_void_p(unsqueeze_1018.data_ptr()), c_void_p(squeeze_424.data_ptr()), c_void_p(primals_425.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(buf209.data_ptr()))
    del convolution_141
    del le_27
    del primals_425
    del squeeze_424
    del unsqueeze_1018
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf211 = aten.convolution_backward(buf209, add_780, primals_424, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_780
    del primals_424
    buf212 = buf211[0]
    buf213 = buf211[1]
    del buf211
    buf214 = empty((104, ), device='cpu', dtype=torch.float32)
    buf215 = empty((104, ), device='cpu', dtype=torch.float32)
    buf216 = buf209; del buf209  # reuse
    buf217 = buf215; del buf215  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_29(c_void_p(buf217.data_ptr()), c_void_p(le_28.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(convolution_140.data_ptr()), c_void_p(unsqueeze_1030.data_ptr()), c_void_p(squeeze_421.data_ptr()), c_void_p(primals_422.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf216.data_ptr()))
    del convolution_140
    del le_28
    del primals_422
    del squeeze_421
    del unsqueeze_1030
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf218 = aten.convolution_backward(buf216, getitem_826, primals_421, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf216
    del getitem_826
    del primals_421
    buf219 = buf218[0]
    buf220 = buf218[1]
    del buf218
    buf221 = buf198; del buf198  # reuse
    buf222 = buf187; del buf187  # reuse
    buf223 = empty((416, ), device='cpu', dtype=torch.float32)
    buf224 = empty((416, ), device='cpu', dtype=torch.float32)
    buf225 = buf221; del buf221  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_30(c_void_p(buf225.data_ptr()), c_void_p(le_29.data_ptr()), c_void_p(buf219.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(convolution_139.data_ptr()), c_void_p(unsqueeze_1042.data_ptr()), c_void_p(squeeze_418.data_ptr()), c_void_p(primals_419.data_ptr()), c_void_p(buf222.data_ptr()), c_void_p(buf223.data_ptr()), c_void_p(buf224.data_ptr()))
    del buf205
    del buf212
    del convolution_139
    del le_29
    del primals_419
    del squeeze_418
    del unsqueeze_1042
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf226 = aten.convolution_backward(buf225, relu_135, primals_418, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf225
    del primals_418
    buf227 = buf226[0]
    buf228 = buf226[1]
    del buf226
    buf229 = buf156; del buf156  # reuse
    buf230 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf231 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf232 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf233 = buf195; del buf195  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_31(c_void_p(buf229.data_ptr()), c_void_p(relu_135.data_ptr()), c_void_p(relu_140.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(convolution_138.data_ptr()), c_void_p(unsqueeze_1054.data_ptr()), c_void_p(squeeze_415.data_ptr()), c_void_p(primals_416.data_ptr()), c_void_p(buf230.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf233.data_ptr()))
    del buf191
    del buf227
    del convolution_138
    del primals_416
    del relu_135
    del relu_140
    del squeeze_415
    del unsqueeze_1054
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf234 = aten.convolution_backward(buf233, cat_26, primals_415, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_26
    del primals_415
    buf235 = buf234[0]
    buf236 = buf234[1]
    del buf234
    buf237 = empty((104, ), device='cpu', dtype=torch.float32)
    buf238 = empty((104, ), device='cpu', dtype=torch.float32)
    buf239 = empty((104, ), device='cpu', dtype=torch.float32)
    buf240 = buf219; del buf219  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_32(c_void_p(le_31.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(convolution_137.data_ptr()), c_void_p(unsqueeze_1066.data_ptr()), c_void_p(squeeze_412.data_ptr()), c_void_p(primals_413.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf238.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(buf240.data_ptr()))
    del convolution_137
    del le_31
    del primals_413
    del squeeze_412
    del unsqueeze_1066
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf241 = aten.convolution_backward(buf240, add_758, primals_412, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_758
    del primals_412
    buf242 = buf241[0]
    buf243 = buf241[1]
    del buf241
    buf244 = buf238; del buf238  # reuse
    buf245 = empty((104, ), device='cpu', dtype=torch.float32)
    buf246 = buf240; del buf240  # reuse
    buf247 = buf245; del buf245  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_33(c_void_p(buf247.data_ptr()), c_void_p(le_32.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(convolution_136.data_ptr()), c_void_p(unsqueeze_1078.data_ptr()), c_void_p(squeeze_409.data_ptr()), c_void_p(primals_410.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf246.data_ptr()))
    del convolution_136
    del le_32
    del primals_410
    del squeeze_409
    del unsqueeze_1078
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf248 = aten.convolution_backward(buf246, add_752, primals_409, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_752
    del primals_409
    buf249 = buf248[0]
    buf250 = buf248[1]
    del buf248
    buf251 = empty((104, ), device='cpu', dtype=torch.float32)
    buf252 = empty((104, ), device='cpu', dtype=torch.float32)
    buf253 = buf246; del buf246  # reuse
    buf254 = buf252; del buf252  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_34(c_void_p(buf254.data_ptr()), c_void_p(le_33.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(buf249.data_ptr()), c_void_p(convolution_135.data_ptr()), c_void_p(unsqueeze_1090.data_ptr()), c_void_p(squeeze_406.data_ptr()), c_void_p(primals_407.data_ptr()), c_void_p(buf251.data_ptr()), c_void_p(buf253.data_ptr()))
    del convolution_135
    del le_33
    del primals_407
    del squeeze_406
    del unsqueeze_1090
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf255 = aten.convolution_backward(buf253, getitem_796, primals_406, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf253
    del getitem_796
    del primals_406
    buf256 = buf255[0]
    buf257 = buf255[1]
    del buf255
    buf258 = buf235; del buf235  # reuse
    buf259 = buf223; del buf223  # reuse
    buf260 = empty((416, ), device='cpu', dtype=torch.float32)
    buf261 = empty((416, ), device='cpu', dtype=torch.float32)
    buf262 = buf258; del buf258  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_35(c_void_p(buf262.data_ptr()), c_void_p(le_34.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(buf249.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(convolution_134.data_ptr()), c_void_p(unsqueeze_1102.data_ptr()), c_void_p(squeeze_403.data_ptr()), c_void_p(primals_404.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(buf261.data_ptr()))
    del buf242
    del buf249
    del convolution_134
    del le_34
    del primals_404
    del squeeze_403
    del unsqueeze_1102
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf263 = aten.convolution_backward(buf262, relu_130, primals_403, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf262
    del primals_403
    buf264 = buf263[0]
    buf265 = buf263[1]
    del buf263
    buf266 = buf231; del buf231  # reuse
    buf267 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf268 = buf233; del buf233  # reuse
    buf269 = buf267; del buf267  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_36(c_void_p(buf269.data_ptr()), c_void_p(relu_130.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf264.data_ptr()), c_void_p(convolution_133.data_ptr()), c_void_p(unsqueeze_1114.data_ptr()), c_void_p(squeeze_400.data_ptr()), c_void_p(primals_401.data_ptr()), c_void_p(buf266.data_ptr()), c_void_p(buf268.data_ptr()))
    del convolution_133
    del primals_401
    del squeeze_400
    del unsqueeze_1114
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf270 = aten.convolution_backward(buf268, cat_25, primals_400, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_25
    del primals_400
    buf271 = buf270[0]
    buf272 = buf270[1]
    del buf270
    buf273 = empty((104, ), device='cpu', dtype=torch.float32)
    buf274 = empty((104, ), device='cpu', dtype=torch.float32)
    buf275 = empty((104, ), device='cpu', dtype=torch.float32)
    buf276 = buf256; del buf256  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_37(c_void_p(le_36.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(convolution_132.data_ptr()), c_void_p(unsqueeze_1126.data_ptr()), c_void_p(squeeze_397.data_ptr()), c_void_p(primals_398.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(buf276.data_ptr()))
    del convolution_132
    del le_36
    del primals_398
    del squeeze_397
    del unsqueeze_1126
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf277 = aten.convolution_backward(buf276, add_730, primals_397, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_730
    del primals_397
    buf278 = buf277[0]
    buf279 = buf277[1]
    del buf277
    buf280 = buf274; del buf274  # reuse
    buf281 = empty((104, ), device='cpu', dtype=torch.float32)
    buf282 = buf276; del buf276  # reuse
    buf283 = buf281; del buf281  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_38(c_void_p(buf283.data_ptr()), c_void_p(le_37.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf278.data_ptr()), c_void_p(convolution_131.data_ptr()), c_void_p(unsqueeze_1138.data_ptr()), c_void_p(squeeze_394.data_ptr()), c_void_p(primals_395.data_ptr()), c_void_p(buf280.data_ptr()), c_void_p(buf282.data_ptr()))
    del convolution_131
    del le_37
    del primals_395
    del squeeze_394
    del unsqueeze_1138
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf284 = aten.convolution_backward(buf282, add_724, primals_394, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_724
    del primals_394
    buf285 = buf284[0]
    buf286 = buf284[1]
    del buf284
    buf287 = empty((104, ), device='cpu', dtype=torch.float32)
    buf288 = empty((104, ), device='cpu', dtype=torch.float32)
    buf289 = buf282; del buf282  # reuse
    buf290 = buf288; del buf288  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_39(c_void_p(buf290.data_ptr()), c_void_p(le_38.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf285.data_ptr()), c_void_p(convolution_130.data_ptr()), c_void_p(unsqueeze_1150.data_ptr()), c_void_p(squeeze_391.data_ptr()), c_void_p(primals_392.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(buf289.data_ptr()))
    del convolution_130
    del le_38
    del primals_392
    del squeeze_391
    del unsqueeze_1150
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf291 = aten.convolution_backward(buf289, getitem_766, primals_391, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf289
    del getitem_766
    del primals_391
    buf292 = buf291[0]
    buf293 = buf291[1]
    del buf291
    buf294 = buf271; del buf271  # reuse
    buf295 = buf260; del buf260  # reuse
    buf296 = empty((416, ), device='cpu', dtype=torch.float32)
    buf297 = empty((416, ), device='cpu', dtype=torch.float32)
    buf298 = buf294; del buf294  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_40(c_void_p(buf298.data_ptr()), c_void_p(le_39.data_ptr()), c_void_p(buf292.data_ptr()), c_void_p(buf285.data_ptr()), c_void_p(buf278.data_ptr()), c_void_p(convolution_129.data_ptr()), c_void_p(unsqueeze_1162.data_ptr()), c_void_p(squeeze_388.data_ptr()), c_void_p(primals_389.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(buf296.data_ptr()), c_void_p(buf297.data_ptr()))
    del buf278
    del buf285
    del convolution_129
    del le_39
    del primals_389
    del squeeze_388
    del unsqueeze_1162
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf299 = aten.convolution_backward(buf298, relu_125, primals_388, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf298
    del primals_388
    buf300 = buf299[0]
    buf301 = buf299[1]
    del buf299
    buf302 = buf229; del buf229  # reuse
    buf303 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf304 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf305 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf306 = buf268; del buf268  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_41(c_void_p(buf302.data_ptr()), c_void_p(relu_125.data_ptr()), c_void_p(relu_130.data_ptr()), c_void_p(buf264.data_ptr()), c_void_p(buf300.data_ptr()), c_void_p(convolution_128.data_ptr()), c_void_p(unsqueeze_1174.data_ptr()), c_void_p(squeeze_385.data_ptr()), c_void_p(primals_386.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf306.data_ptr()))
    del buf264
    del buf300
    del convolution_128
    del primals_386
    del relu_125
    del relu_130
    del squeeze_385
    del unsqueeze_1174
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf307 = aten.convolution_backward(buf306, cat_24, primals_385, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_24
    del primals_385
    buf308 = buf307[0]
    buf309 = buf307[1]
    del buf307
    buf310 = empty((104, ), device='cpu', dtype=torch.float32)
    buf311 = empty((104, ), device='cpu', dtype=torch.float32)
    buf312 = empty((104, ), device='cpu', dtype=torch.float32)
    buf313 = buf292; del buf292  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42(c_void_p(le_41.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(convolution_127.data_ptr()), c_void_p(unsqueeze_1186.data_ptr()), c_void_p(squeeze_382.data_ptr()), c_void_p(primals_383.data_ptr()), c_void_p(buf310.data_ptr()), c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf313.data_ptr()))
    del convolution_127
    del le_41
    del primals_383
    del squeeze_382
    del unsqueeze_1186
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf314 = aten.convolution_backward(buf313, add_702, primals_382, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_702
    del primals_382
    buf315 = buf314[0]
    buf316 = buf314[1]
    del buf314
    buf317 = buf311; del buf311  # reuse
    buf318 = empty((104, ), device='cpu', dtype=torch.float32)
    buf319 = buf313; del buf313  # reuse
    buf320 = buf318; del buf318  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_43(c_void_p(buf320.data_ptr()), c_void_p(le_42.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(convolution_126.data_ptr()), c_void_p(unsqueeze_1198.data_ptr()), c_void_p(squeeze_379.data_ptr()), c_void_p(primals_380.data_ptr()), c_void_p(buf317.data_ptr()), c_void_p(buf319.data_ptr()))
    del convolution_126
    del le_42
    del primals_380
    del squeeze_379
    del unsqueeze_1198
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf321 = aten.convolution_backward(buf319, add_696, primals_379, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_696
    del primals_379
    buf322 = buf321[0]
    buf323 = buf321[1]
    del buf321
    buf324 = empty((104, ), device='cpu', dtype=torch.float32)
    buf325 = empty((104, ), device='cpu', dtype=torch.float32)
    buf326 = buf319; del buf319  # reuse
    buf327 = buf325; del buf325  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_44(c_void_p(buf327.data_ptr()), c_void_p(le_43.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(buf322.data_ptr()), c_void_p(convolution_125.data_ptr()), c_void_p(unsqueeze_1210.data_ptr()), c_void_p(squeeze_376.data_ptr()), c_void_p(primals_377.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf326.data_ptr()))
    del convolution_125
    del le_43
    del primals_377
    del squeeze_376
    del unsqueeze_1210
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf328 = aten.convolution_backward(buf326, getitem_736, primals_376, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf326
    del getitem_736
    del primals_376
    buf329 = buf328[0]
    buf330 = buf328[1]
    del buf328
    buf331 = buf308; del buf308  # reuse
    buf332 = buf296; del buf296  # reuse
    buf333 = empty((416, ), device='cpu', dtype=torch.float32)
    buf334 = empty((416, ), device='cpu', dtype=torch.float32)
    buf335 = buf331; del buf331  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_45(c_void_p(buf335.data_ptr()), c_void_p(le_44.data_ptr()), c_void_p(buf329.data_ptr()), c_void_p(buf322.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(convolution_124.data_ptr()), c_void_p(unsqueeze_1222.data_ptr()), c_void_p(squeeze_373.data_ptr()), c_void_p(primals_374.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(buf334.data_ptr()))
    del buf315
    del buf322
    del convolution_124
    del le_44
    del primals_374
    del squeeze_373
    del unsqueeze_1222
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf336 = aten.convolution_backward(buf335, relu_120, primals_373, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf335
    del primals_373
    buf337 = buf336[0]
    buf338 = buf336[1]
    del buf336
    buf339 = buf304; del buf304  # reuse
    buf340 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf341 = buf306; del buf306  # reuse
    buf342 = buf340; del buf340  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_46(c_void_p(buf342.data_ptr()), c_void_p(relu_120.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(buf337.data_ptr()), c_void_p(convolution_123.data_ptr()), c_void_p(unsqueeze_1234.data_ptr()), c_void_p(squeeze_370.data_ptr()), c_void_p(primals_371.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf341.data_ptr()))
    del convolution_123
    del primals_371
    del squeeze_370
    del unsqueeze_1234
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf343 = aten.convolution_backward(buf341, cat_23, primals_370, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_23
    del primals_370
    buf344 = buf343[0]
    buf345 = buf343[1]
    del buf343
    buf346 = empty((104, ), device='cpu', dtype=torch.float32)
    buf347 = empty((104, ), device='cpu', dtype=torch.float32)
    buf348 = empty((104, ), device='cpu', dtype=torch.float32)
    buf349 = buf329; del buf329  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47(c_void_p(le_46.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(convolution_122.data_ptr()), c_void_p(unsqueeze_1246.data_ptr()), c_void_p(squeeze_367.data_ptr()), c_void_p(primals_368.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(buf347.data_ptr()), c_void_p(buf348.data_ptr()), c_void_p(buf349.data_ptr()))
    del convolution_122
    del le_46
    del primals_368
    del squeeze_367
    del unsqueeze_1246
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf350 = aten.convolution_backward(buf349, add_674, primals_367, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_674
    del primals_367
    buf351 = buf350[0]
    buf352 = buf350[1]
    del buf350
    buf353 = buf347; del buf347  # reuse
    buf354 = empty((104, ), device='cpu', dtype=torch.float32)
    buf355 = buf349; del buf349  # reuse
    buf356 = buf354; del buf354  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_48(c_void_p(buf356.data_ptr()), c_void_p(le_47.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(convolution_121.data_ptr()), c_void_p(unsqueeze_1258.data_ptr()), c_void_p(squeeze_364.data_ptr()), c_void_p(primals_365.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(buf355.data_ptr()))
    del convolution_121
    del le_47
    del primals_365
    del squeeze_364
    del unsqueeze_1258
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf357 = aten.convolution_backward(buf355, add_668, primals_364, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_668
    del primals_364
    buf358 = buf357[0]
    buf359 = buf357[1]
    del buf357
    buf360 = empty((104, ), device='cpu', dtype=torch.float32)
    buf361 = empty((104, ), device='cpu', dtype=torch.float32)
    buf362 = buf355; del buf355  # reuse
    buf363 = buf361; del buf361  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_49(c_void_p(buf363.data_ptr()), c_void_p(le_48.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(convolution_120.data_ptr()), c_void_p(unsqueeze_1270.data_ptr()), c_void_p(squeeze_361.data_ptr()), c_void_p(primals_362.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(buf362.data_ptr()))
    del convolution_120
    del le_48
    del primals_362
    del squeeze_361
    del unsqueeze_1270
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf364 = aten.convolution_backward(buf362, getitem_706, primals_361, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf362
    del getitem_706
    del primals_361
    buf365 = buf364[0]
    buf366 = buf364[1]
    del buf364
    buf367 = buf344; del buf344  # reuse
    buf368 = buf333; del buf333  # reuse
    buf369 = empty((416, ), device='cpu', dtype=torch.float32)
    buf370 = empty((416, ), device='cpu', dtype=torch.float32)
    buf371 = buf367; del buf367  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_50(c_void_p(buf371.data_ptr()), c_void_p(le_49.data_ptr()), c_void_p(buf365.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(convolution_119.data_ptr()), c_void_p(unsqueeze_1282.data_ptr()), c_void_p(squeeze_358.data_ptr()), c_void_p(primals_359.data_ptr()), c_void_p(buf368.data_ptr()), c_void_p(buf369.data_ptr()), c_void_p(buf370.data_ptr()))
    del buf351
    del buf358
    del convolution_119
    del le_49
    del primals_359
    del squeeze_358
    del unsqueeze_1282
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf372 = aten.convolution_backward(buf371, relu_115, primals_358, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf371
    del primals_358
    buf373 = buf372[0]
    buf374 = buf372[1]
    del buf372
    buf375 = buf302; del buf302  # reuse
    buf376 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf377 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf378 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf379 = buf341; del buf341  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_51(c_void_p(buf375.data_ptr()), c_void_p(relu_115.data_ptr()), c_void_p(relu_120.data_ptr()), c_void_p(buf337.data_ptr()), c_void_p(buf373.data_ptr()), c_void_p(convolution_118.data_ptr()), c_void_p(unsqueeze_1294.data_ptr()), c_void_p(squeeze_355.data_ptr()), c_void_p(primals_356.data_ptr()), c_void_p(buf376.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(buf379.data_ptr()))
    del buf337
    del buf373
    del convolution_118
    del primals_356
    del relu_115
    del relu_120
    del squeeze_355
    del unsqueeze_1294
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf380 = aten.convolution_backward(buf379, cat_22, primals_355, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_22
    del primals_355
    buf381 = buf380[0]
    buf382 = buf380[1]
    del buf380
    buf383 = empty((104, ), device='cpu', dtype=torch.float32)
    buf384 = empty((104, ), device='cpu', dtype=torch.float32)
    buf385 = empty((104, ), device='cpu', dtype=torch.float32)
    buf386 = buf365; del buf365  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_52(c_void_p(le_51.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(convolution_117.data_ptr()), c_void_p(unsqueeze_1306.data_ptr()), c_void_p(squeeze_352.data_ptr()), c_void_p(primals_353.data_ptr()), c_void_p(buf383.data_ptr()), c_void_p(buf384.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf386.data_ptr()))
    del convolution_117
    del le_51
    del primals_353
    del squeeze_352
    del unsqueeze_1306
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf387 = aten.convolution_backward(buf386, add_646, primals_352, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_646
    del primals_352
    buf388 = buf387[0]
    buf389 = buf387[1]
    del buf387
    buf390 = buf384; del buf384  # reuse
    buf391 = empty((104, ), device='cpu', dtype=torch.float32)
    buf392 = buf386; del buf386  # reuse
    buf393 = buf391; del buf391  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_53(c_void_p(buf393.data_ptr()), c_void_p(le_52.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(convolution_116.data_ptr()), c_void_p(unsqueeze_1318.data_ptr()), c_void_p(squeeze_349.data_ptr()), c_void_p(primals_350.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(buf392.data_ptr()))
    del convolution_116
    del le_52
    del primals_350
    del squeeze_349
    del unsqueeze_1318
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf394 = aten.convolution_backward(buf392, add_640, primals_349, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_640
    del primals_349
    buf395 = buf394[0]
    buf396 = buf394[1]
    del buf394
    buf397 = empty((104, ), device='cpu', dtype=torch.float32)
    buf398 = empty((104, ), device='cpu', dtype=torch.float32)
    buf399 = buf392; del buf392  # reuse
    buf400 = buf398; del buf398  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_54(c_void_p(buf400.data_ptr()), c_void_p(le_53.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(convolution_115.data_ptr()), c_void_p(unsqueeze_1330.data_ptr()), c_void_p(squeeze_346.data_ptr()), c_void_p(primals_347.data_ptr()), c_void_p(buf397.data_ptr()), c_void_p(buf399.data_ptr()))
    del convolution_115
    del le_53
    del primals_347
    del squeeze_346
    del unsqueeze_1330
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf401 = aten.convolution_backward(buf399, getitem_676, primals_346, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf399
    del getitem_676
    del primals_346
    buf402 = buf401[0]
    buf403 = buf401[1]
    del buf401
    buf404 = buf381; del buf381  # reuse
    buf405 = buf369; del buf369  # reuse
    buf406 = empty((416, ), device='cpu', dtype=torch.float32)
    buf407 = empty((416, ), device='cpu', dtype=torch.float32)
    buf408 = buf404; del buf404  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_55(c_void_p(buf408.data_ptr()), c_void_p(le_54.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(convolution_114.data_ptr()), c_void_p(unsqueeze_1342.data_ptr()), c_void_p(squeeze_343.data_ptr()), c_void_p(primals_344.data_ptr()), c_void_p(buf405.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(buf407.data_ptr()))
    del buf388
    del buf395
    del convolution_114
    del le_54
    del primals_344
    del squeeze_343
    del unsqueeze_1342
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf409 = aten.convolution_backward(buf408, relu_110, primals_343, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf408
    del primals_343
    buf410 = buf409[0]
    buf411 = buf409[1]
    del buf409
    buf412 = buf377; del buf377  # reuse
    buf413 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf414 = buf379; del buf379  # reuse
    buf415 = buf413; del buf413  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_56(c_void_p(buf415.data_ptr()), c_void_p(relu_110.data_ptr()), c_void_p(buf375.data_ptr()), c_void_p(buf410.data_ptr()), c_void_p(convolution_113.data_ptr()), c_void_p(unsqueeze_1354.data_ptr()), c_void_p(squeeze_340.data_ptr()), c_void_p(primals_341.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(buf414.data_ptr()))
    del convolution_113
    del primals_341
    del squeeze_340
    del unsqueeze_1354
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf416 = aten.convolution_backward(buf414, cat_21, primals_340, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_21
    del primals_340
    buf417 = buf416[0]
    buf418 = buf416[1]
    del buf416
    buf419 = empty((104, ), device='cpu', dtype=torch.float32)
    buf420 = empty((104, ), device='cpu', dtype=torch.float32)
    buf421 = empty((104, ), device='cpu', dtype=torch.float32)
    buf422 = buf402; del buf402  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_57(c_void_p(le_56.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(convolution_112.data_ptr()), c_void_p(unsqueeze_1366.data_ptr()), c_void_p(squeeze_337.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(buf419.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf422.data_ptr()))
    del convolution_112
    del le_56
    del primals_338
    del squeeze_337
    del unsqueeze_1366
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf423 = aten.convolution_backward(buf422, add_618, primals_337, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_618
    del primals_337
    buf424 = buf423[0]
    buf425 = buf423[1]
    del buf423
    buf426 = buf420; del buf420  # reuse
    buf427 = empty((104, ), device='cpu', dtype=torch.float32)
    buf428 = buf422; del buf422  # reuse
    buf429 = buf427; del buf427  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_58(c_void_p(buf429.data_ptr()), c_void_p(le_57.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(convolution_111.data_ptr()), c_void_p(unsqueeze_1378.data_ptr()), c_void_p(squeeze_334.data_ptr()), c_void_p(primals_335.data_ptr()), c_void_p(buf426.data_ptr()), c_void_p(buf428.data_ptr()))
    del convolution_111
    del le_57
    del primals_335
    del squeeze_334
    del unsqueeze_1378
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf430 = aten.convolution_backward(buf428, add_612, primals_334, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_612
    del primals_334
    buf431 = buf430[0]
    buf432 = buf430[1]
    del buf430
    buf433 = empty((104, ), device='cpu', dtype=torch.float32)
    buf434 = empty((104, ), device='cpu', dtype=torch.float32)
    buf435 = buf428; del buf428  # reuse
    buf436 = buf434; del buf434  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_59(c_void_p(buf436.data_ptr()), c_void_p(le_58.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(convolution_110.data_ptr()), c_void_p(unsqueeze_1390.data_ptr()), c_void_p(squeeze_331.data_ptr()), c_void_p(primals_332.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf435.data_ptr()))
    del convolution_110
    del le_58
    del primals_332
    del squeeze_331
    del unsqueeze_1390
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf437 = aten.convolution_backward(buf435, getitem_646, primals_331, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf435
    del getitem_646
    del primals_331
    buf438 = buf437[0]
    buf439 = buf437[1]
    del buf437
    buf440 = buf417; del buf417  # reuse
    buf441 = buf406; del buf406  # reuse
    buf442 = empty((416, ), device='cpu', dtype=torch.float32)
    buf443 = empty((416, ), device='cpu', dtype=torch.float32)
    buf444 = buf440; del buf440  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_60(c_void_p(buf444.data_ptr()), c_void_p(le_59.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(convolution_109.data_ptr()), c_void_p(unsqueeze_1402.data_ptr()), c_void_p(squeeze_328.data_ptr()), c_void_p(primals_329.data_ptr()), c_void_p(buf441.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(buf443.data_ptr()))
    del buf424
    del buf431
    del convolution_109
    del le_59
    del primals_329
    del squeeze_328
    del unsqueeze_1402
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf445 = aten.convolution_backward(buf444, relu_105, primals_328, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf444
    del primals_328
    buf446 = buf445[0]
    buf447 = buf445[1]
    del buf445
    buf448 = buf375; del buf375  # reuse
    buf449 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf450 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf451 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf452 = buf414; del buf414  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_61(c_void_p(buf448.data_ptr()), c_void_p(relu_105.data_ptr()), c_void_p(relu_110.data_ptr()), c_void_p(buf410.data_ptr()), c_void_p(buf446.data_ptr()), c_void_p(convolution_108.data_ptr()), c_void_p(unsqueeze_1414.data_ptr()), c_void_p(squeeze_325.data_ptr()), c_void_p(primals_326.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf452.data_ptr()))
    del buf410
    del buf446
    del convolution_108
    del primals_326
    del relu_105
    del relu_110
    del squeeze_325
    del unsqueeze_1414
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf453 = aten.convolution_backward(buf452, cat_20, primals_325, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_20
    del primals_325
    buf454 = buf453[0]
    buf455 = buf453[1]
    del buf453
    buf456 = empty((104, ), device='cpu', dtype=torch.float32)
    buf457 = empty((104, ), device='cpu', dtype=torch.float32)
    buf458 = empty((104, ), device='cpu', dtype=torch.float32)
    buf459 = buf438; del buf438  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_62(c_void_p(le_61.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(convolution_107.data_ptr()), c_void_p(unsqueeze_1426.data_ptr()), c_void_p(squeeze_322.data_ptr()), c_void_p(primals_323.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf457.data_ptr()), c_void_p(buf458.data_ptr()), c_void_p(buf459.data_ptr()))
    del convolution_107
    del le_61
    del primals_323
    del squeeze_322
    del unsqueeze_1426
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf460 = aten.convolution_backward(buf459, add_590, primals_322, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_590
    del primals_322
    buf461 = buf460[0]
    buf462 = buf460[1]
    del buf460
    buf463 = buf457; del buf457  # reuse
    buf464 = empty((104, ), device='cpu', dtype=torch.float32)
    buf465 = buf459; del buf459  # reuse
    buf466 = buf464; del buf464  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_63(c_void_p(buf466.data_ptr()), c_void_p(le_62.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(convolution_106.data_ptr()), c_void_p(unsqueeze_1438.data_ptr()), c_void_p(squeeze_319.data_ptr()), c_void_p(primals_320.data_ptr()), c_void_p(buf463.data_ptr()), c_void_p(buf465.data_ptr()))
    del convolution_106
    del le_62
    del primals_320
    del squeeze_319
    del unsqueeze_1438
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf467 = aten.convolution_backward(buf465, add_584, primals_319, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_584
    del primals_319
    buf468 = buf467[0]
    buf469 = buf467[1]
    del buf467
    buf470 = empty((104, ), device='cpu', dtype=torch.float32)
    buf471 = empty((104, ), device='cpu', dtype=torch.float32)
    buf472 = buf465; del buf465  # reuse
    buf473 = buf471; del buf471  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_64(c_void_p(buf473.data_ptr()), c_void_p(le_63.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(convolution_105.data_ptr()), c_void_p(unsqueeze_1450.data_ptr()), c_void_p(squeeze_316.data_ptr()), c_void_p(primals_317.data_ptr()), c_void_p(buf470.data_ptr()), c_void_p(buf472.data_ptr()))
    del convolution_105
    del le_63
    del primals_317
    del squeeze_316
    del unsqueeze_1450
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf474 = aten.convolution_backward(buf472, getitem_616, primals_316, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf472
    del getitem_616
    del primals_316
    buf475 = buf474[0]
    buf476 = buf474[1]
    del buf474
    buf477 = buf454; del buf454  # reuse
    buf478 = buf442; del buf442  # reuse
    buf479 = empty((416, ), device='cpu', dtype=torch.float32)
    buf480 = empty((416, ), device='cpu', dtype=torch.float32)
    buf481 = buf477; del buf477  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_65(c_void_p(buf481.data_ptr()), c_void_p(le_64.data_ptr()), c_void_p(buf475.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(convolution_104.data_ptr()), c_void_p(unsqueeze_1462.data_ptr()), c_void_p(squeeze_313.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()))
    del buf461
    del buf468
    del convolution_104
    del le_64
    del primals_314
    del squeeze_313
    del unsqueeze_1462
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf482 = aten.convolution_backward(buf481, relu_100, primals_313, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf481
    del primals_313
    buf483 = buf482[0]
    buf484 = buf482[1]
    del buf482
    buf485 = buf450; del buf450  # reuse
    buf486 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf487 = buf452; del buf452  # reuse
    buf488 = buf486; del buf486  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_66(c_void_p(buf488.data_ptr()), c_void_p(relu_100.data_ptr()), c_void_p(buf448.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(convolution_103.data_ptr()), c_void_p(unsqueeze_1474.data_ptr()), c_void_p(squeeze_310.data_ptr()), c_void_p(primals_311.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(buf487.data_ptr()))
    del convolution_103
    del primals_311
    del squeeze_310
    del unsqueeze_1474
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf489 = aten.convolution_backward(buf487, cat_19, primals_310, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_19
    del primals_310
    buf490 = buf489[0]
    buf491 = buf489[1]
    del buf489
    buf492 = empty((104, ), device='cpu', dtype=torch.float32)
    buf493 = empty((104, ), device='cpu', dtype=torch.float32)
    buf494 = empty((104, ), device='cpu', dtype=torch.float32)
    buf495 = buf475; del buf475  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_67(c_void_p(le_66.data_ptr()), c_void_p(buf490.data_ptr()), c_void_p(convolution_102.data_ptr()), c_void_p(unsqueeze_1486.data_ptr()), c_void_p(squeeze_307.data_ptr()), c_void_p(primals_308.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(buf493.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf495.data_ptr()))
    del convolution_102
    del le_66
    del primals_308
    del squeeze_307
    del unsqueeze_1486
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf496 = aten.convolution_backward(buf495, add_562, primals_307, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_562
    del primals_307
    buf497 = buf496[0]
    buf498 = buf496[1]
    del buf496
    buf499 = buf493; del buf493  # reuse
    buf500 = empty((104, ), device='cpu', dtype=torch.float32)
    buf501 = buf495; del buf495  # reuse
    buf502 = buf500; del buf500  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_68(c_void_p(buf502.data_ptr()), c_void_p(le_67.data_ptr()), c_void_p(buf490.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(convolution_101.data_ptr()), c_void_p(unsqueeze_1498.data_ptr()), c_void_p(squeeze_304.data_ptr()), c_void_p(primals_305.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf501.data_ptr()))
    del convolution_101
    del le_67
    del primals_305
    del squeeze_304
    del unsqueeze_1498
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf503 = aten.convolution_backward(buf501, add_556, primals_304, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_556
    del primals_304
    buf504 = buf503[0]
    buf505 = buf503[1]
    del buf503
    buf506 = empty((104, ), device='cpu', dtype=torch.float32)
    buf507 = empty((104, ), device='cpu', dtype=torch.float32)
    buf508 = buf501; del buf501  # reuse
    buf509 = buf507; del buf507  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_69(c_void_p(buf509.data_ptr()), c_void_p(le_68.data_ptr()), c_void_p(buf490.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(convolution_100.data_ptr()), c_void_p(unsqueeze_1510.data_ptr()), c_void_p(squeeze_301.data_ptr()), c_void_p(primals_302.data_ptr()), c_void_p(buf506.data_ptr()), c_void_p(buf508.data_ptr()))
    del convolution_100
    del le_68
    del primals_302
    del squeeze_301
    del unsqueeze_1510
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf510 = aten.convolution_backward(buf508, getitem_586, primals_301, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf508
    del getitem_586
    del primals_301
    buf511 = buf510[0]
    buf512 = buf510[1]
    del buf510
    buf513 = buf490; del buf490  # reuse
    buf514 = buf479; del buf479  # reuse
    buf515 = empty((416, ), device='cpu', dtype=torch.float32)
    buf516 = empty((416, ), device='cpu', dtype=torch.float32)
    buf517 = buf513; del buf513  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_70(c_void_p(buf517.data_ptr()), c_void_p(le_69.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(convolution_99.data_ptr()), c_void_p(unsqueeze_1522.data_ptr()), c_void_p(squeeze_298.data_ptr()), c_void_p(primals_299.data_ptr()), c_void_p(buf514.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(buf516.data_ptr()))
    del buf497
    del buf504
    del convolution_99
    del le_69
    del primals_299
    del squeeze_298
    del unsqueeze_1522
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf518 = aten.convolution_backward(buf517, relu_95, primals_298, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf517
    del primals_298
    buf519 = buf518[0]
    buf520 = buf518[1]
    del buf518
    buf521 = buf448; del buf448  # reuse
    buf522 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf523 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf524 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf525 = buf487; del buf487  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_71(c_void_p(buf521.data_ptr()), c_void_p(relu_95.data_ptr()), c_void_p(relu_100.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf519.data_ptr()), c_void_p(convolution_98.data_ptr()), c_void_p(unsqueeze_1534.data_ptr()), c_void_p(squeeze_295.data_ptr()), c_void_p(primals_296.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf523.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf525.data_ptr()))
    del buf483
    del buf519
    del convolution_98
    del primals_296
    del relu_100
    del relu_95
    del squeeze_295
    del unsqueeze_1534
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf526 = aten.convolution_backward(buf525, cat_18, primals_295, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_18
    del primals_295
    buf527 = buf526[0]
    buf528 = buf526[1]
    del buf526
    buf529 = empty((104, ), device='cpu', dtype=torch.float32)
    buf530 = empty((104, ), device='cpu', dtype=torch.float32)
    buf531 = empty((104, ), device='cpu', dtype=torch.float32)
    buf532 = buf511; del buf511  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_72(c_void_p(le_71.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(convolution_97.data_ptr()), c_void_p(unsqueeze_1546.data_ptr()), c_void_p(squeeze_292.data_ptr()), c_void_p(primals_293.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(buf530.data_ptr()), c_void_p(buf531.data_ptr()), c_void_p(buf532.data_ptr()))
    del convolution_97
    del le_71
    del primals_293
    del squeeze_292
    del unsqueeze_1546
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf533 = aten.convolution_backward(buf532, add_534, primals_292, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_534
    del primals_292
    buf534 = buf533[0]
    buf535 = buf533[1]
    del buf533
    buf536 = buf530; del buf530  # reuse
    buf537 = empty((104, ), device='cpu', dtype=torch.float32)
    buf538 = buf532; del buf532  # reuse
    buf539 = buf537; del buf537  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_73(c_void_p(buf539.data_ptr()), c_void_p(le_72.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(buf534.data_ptr()), c_void_p(convolution_96.data_ptr()), c_void_p(unsqueeze_1558.data_ptr()), c_void_p(squeeze_289.data_ptr()), c_void_p(primals_290.data_ptr()), c_void_p(buf536.data_ptr()), c_void_p(buf538.data_ptr()))
    del convolution_96
    del le_72
    del primals_290
    del squeeze_289
    del unsqueeze_1558
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf540 = aten.convolution_backward(buf538, add_528, primals_289, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_528
    del primals_289
    buf541 = buf540[0]
    buf542 = buf540[1]
    del buf540
    buf543 = empty((104, ), device='cpu', dtype=torch.float32)
    buf544 = empty((104, ), device='cpu', dtype=torch.float32)
    buf545 = buf538; del buf538  # reuse
    buf546 = buf544; del buf544  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_74(c_void_p(buf546.data_ptr()), c_void_p(le_73.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(convolution_95.data_ptr()), c_void_p(unsqueeze_1570.data_ptr()), c_void_p(squeeze_286.data_ptr()), c_void_p(primals_287.data_ptr()), c_void_p(buf543.data_ptr()), c_void_p(buf545.data_ptr()))
    del convolution_95
    del le_73
    del primals_287
    del squeeze_286
    del unsqueeze_1570
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf547 = aten.convolution_backward(buf545, getitem_556, primals_286, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf545
    del getitem_556
    del primals_286
    buf548 = buf547[0]
    buf549 = buf547[1]
    del buf547
    buf550 = buf527; del buf527  # reuse
    buf551 = buf515; del buf515  # reuse
    buf552 = empty((416, ), device='cpu', dtype=torch.float32)
    buf553 = empty((416, ), device='cpu', dtype=torch.float32)
    buf554 = buf550; del buf550  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_75(c_void_p(buf554.data_ptr()), c_void_p(le_74.data_ptr()), c_void_p(buf548.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(buf534.data_ptr()), c_void_p(convolution_94.data_ptr()), c_void_p(unsqueeze_1582.data_ptr()), c_void_p(squeeze_283.data_ptr()), c_void_p(primals_284.data_ptr()), c_void_p(buf551.data_ptr()), c_void_p(buf552.data_ptr()), c_void_p(buf553.data_ptr()))
    del buf534
    del buf541
    del convolution_94
    del le_74
    del primals_284
    del squeeze_283
    del unsqueeze_1582
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf555 = aten.convolution_backward(buf554, relu_90, primals_283, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf554
    del primals_283
    buf556 = buf555[0]
    buf557 = buf555[1]
    del buf555
    buf558 = buf523; del buf523  # reuse
    buf559 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf560 = buf525; del buf525  # reuse
    buf561 = buf559; del buf559  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_76(c_void_p(buf561.data_ptr()), c_void_p(relu_90.data_ptr()), c_void_p(buf521.data_ptr()), c_void_p(buf556.data_ptr()), c_void_p(convolution_93.data_ptr()), c_void_p(unsqueeze_1594.data_ptr()), c_void_p(squeeze_280.data_ptr()), c_void_p(primals_281.data_ptr()), c_void_p(buf558.data_ptr()), c_void_p(buf560.data_ptr()))
    del convolution_93
    del primals_281
    del squeeze_280
    del unsqueeze_1594
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf562 = aten.convolution_backward(buf560, cat_17, primals_280, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_17
    del primals_280
    buf563 = buf562[0]
    buf564 = buf562[1]
    del buf562
    buf565 = empty((104, ), device='cpu', dtype=torch.float32)
    buf566 = empty((104, ), device='cpu', dtype=torch.float32)
    buf567 = empty((104, ), device='cpu', dtype=torch.float32)
    buf568 = buf548; del buf548  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_77(c_void_p(le_76.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(convolution_92.data_ptr()), c_void_p(unsqueeze_1606.data_ptr()), c_void_p(squeeze_277.data_ptr()), c_void_p(primals_278.data_ptr()), c_void_p(buf565.data_ptr()), c_void_p(buf566.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(buf568.data_ptr()))
    del convolution_92
    del le_76
    del primals_278
    del squeeze_277
    del unsqueeze_1606
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf569 = aten.convolution_backward(buf568, add_506, primals_277, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_506
    del primals_277
    buf570 = buf569[0]
    buf571 = buf569[1]
    del buf569
    buf572 = buf566; del buf566  # reuse
    buf573 = empty((104, ), device='cpu', dtype=torch.float32)
    buf574 = buf568; del buf568  # reuse
    buf575 = buf573; del buf573  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_78(c_void_p(buf575.data_ptr()), c_void_p(le_77.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(convolution_91.data_ptr()), c_void_p(unsqueeze_1618.data_ptr()), c_void_p(squeeze_274.data_ptr()), c_void_p(primals_275.data_ptr()), c_void_p(buf572.data_ptr()), c_void_p(buf574.data_ptr()))
    del convolution_91
    del le_77
    del primals_275
    del squeeze_274
    del unsqueeze_1618
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf576 = aten.convolution_backward(buf574, add_500, primals_274, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_500
    del primals_274
    buf577 = buf576[0]
    buf578 = buf576[1]
    del buf576
    buf579 = empty((104, ), device='cpu', dtype=torch.float32)
    buf580 = empty((104, ), device='cpu', dtype=torch.float32)
    buf581 = buf574; del buf574  # reuse
    buf582 = buf580; del buf580  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_79(c_void_p(buf582.data_ptr()), c_void_p(le_78.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(convolution_90.data_ptr()), c_void_p(unsqueeze_1630.data_ptr()), c_void_p(squeeze_271.data_ptr()), c_void_p(primals_272.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(buf581.data_ptr()))
    del convolution_90
    del le_78
    del primals_272
    del squeeze_271
    del unsqueeze_1630
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf583 = aten.convolution_backward(buf581, getitem_526, primals_271, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf581
    del getitem_526
    del primals_271
    buf584 = buf583[0]
    buf585 = buf583[1]
    del buf583
    buf586 = buf563; del buf563  # reuse
    buf587 = buf552; del buf552  # reuse
    buf588 = empty((416, ), device='cpu', dtype=torch.float32)
    buf589 = empty((416, ), device='cpu', dtype=torch.float32)
    buf590 = buf586; del buf586  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_80(c_void_p(buf590.data_ptr()), c_void_p(le_79.data_ptr()), c_void_p(buf584.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(convolution_89.data_ptr()), c_void_p(unsqueeze_1642.data_ptr()), c_void_p(squeeze_268.data_ptr()), c_void_p(primals_269.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(buf589.data_ptr()))
    del buf570
    del buf577
    del convolution_89
    del le_79
    del primals_269
    del squeeze_268
    del unsqueeze_1642
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf591 = aten.convolution_backward(buf590, relu_85, primals_268, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf590
    del primals_268
    buf592 = buf591[0]
    buf593 = buf591[1]
    del buf591
    buf594 = buf521; del buf521  # reuse
    buf595 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf596 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf597 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf598 = buf560; del buf560  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_81(c_void_p(buf594.data_ptr()), c_void_p(relu_85.data_ptr()), c_void_p(relu_90.data_ptr()), c_void_p(buf556.data_ptr()), c_void_p(buf592.data_ptr()), c_void_p(convolution_88.data_ptr()), c_void_p(unsqueeze_1654.data_ptr()), c_void_p(squeeze_265.data_ptr()), c_void_p(primals_266.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf596.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(buf598.data_ptr()))
    del buf556
    del buf592
    del convolution_88
    del primals_266
    del relu_85
    del relu_90
    del squeeze_265
    del unsqueeze_1654
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf599 = aten.convolution_backward(buf598, cat_16, primals_265, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_16
    del primals_265
    buf600 = buf599[0]
    buf601 = buf599[1]
    del buf599
    buf602 = empty((104, ), device='cpu', dtype=torch.float32)
    buf603 = empty((104, ), device='cpu', dtype=torch.float32)
    buf604 = empty((104, ), device='cpu', dtype=torch.float32)
    buf605 = buf584; del buf584  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_82(c_void_p(le_81.data_ptr()), c_void_p(buf600.data_ptr()), c_void_p(convolution_87.data_ptr()), c_void_p(unsqueeze_1666.data_ptr()), c_void_p(squeeze_262.data_ptr()), c_void_p(primals_263.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(buf604.data_ptr()), c_void_p(buf605.data_ptr()))
    del convolution_87
    del le_81
    del primals_263
    del squeeze_262
    del unsqueeze_1666
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf606 = aten.convolution_backward(buf605, add_478, primals_262, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_478
    del primals_262
    buf607 = buf606[0]
    buf608 = buf606[1]
    del buf606
    buf609 = buf603; del buf603  # reuse
    buf610 = empty((104, ), device='cpu', dtype=torch.float32)
    buf611 = buf605; del buf605  # reuse
    buf612 = buf610; del buf610  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_83(c_void_p(buf612.data_ptr()), c_void_p(le_82.data_ptr()), c_void_p(buf600.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(convolution_86.data_ptr()), c_void_p(unsqueeze_1678.data_ptr()), c_void_p(squeeze_259.data_ptr()), c_void_p(primals_260.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(buf611.data_ptr()))
    del convolution_86
    del le_82
    del primals_260
    del squeeze_259
    del unsqueeze_1678
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf613 = aten.convolution_backward(buf611, add_472, primals_259, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_472
    del primals_259
    buf614 = buf613[0]
    buf615 = buf613[1]
    del buf613
    buf616 = empty((104, ), device='cpu', dtype=torch.float32)
    buf617 = empty((104, ), device='cpu', dtype=torch.float32)
    buf618 = buf611; del buf611  # reuse
    buf619 = buf617; del buf617  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_84(c_void_p(buf619.data_ptr()), c_void_p(le_83.data_ptr()), c_void_p(buf600.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(convolution_85.data_ptr()), c_void_p(unsqueeze_1690.data_ptr()), c_void_p(squeeze_256.data_ptr()), c_void_p(primals_257.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf618.data_ptr()))
    del convolution_85
    del le_83
    del primals_257
    del squeeze_256
    del unsqueeze_1690
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf620 = aten.convolution_backward(buf618, getitem_496, primals_256, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf618
    del getitem_496
    del primals_256
    buf621 = buf620[0]
    buf622 = buf620[1]
    del buf620
    buf623 = buf600; del buf600  # reuse
    buf624 = buf588; del buf588  # reuse
    buf625 = empty((416, ), device='cpu', dtype=torch.float32)
    buf626 = empty((416, ), device='cpu', dtype=torch.float32)
    buf627 = buf623; del buf623  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_85(c_void_p(buf627.data_ptr()), c_void_p(le_84.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(convolution_84.data_ptr()), c_void_p(unsqueeze_1702.data_ptr()), c_void_p(squeeze_253.data_ptr()), c_void_p(primals_254.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf626.data_ptr()))
    del buf607
    del buf614
    del convolution_84
    del le_84
    del primals_254
    del squeeze_253
    del unsqueeze_1702
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf628 = aten.convolution_backward(buf627, relu_80, primals_253, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf627
    del primals_253
    buf629 = buf628[0]
    buf630 = buf628[1]
    del buf628
    buf631 = buf596; del buf596  # reuse
    buf632 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf633 = buf598; del buf598  # reuse
    buf634 = buf632; del buf632  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_86(c_void_p(buf634.data_ptr()), c_void_p(relu_80.data_ptr()), c_void_p(buf594.data_ptr()), c_void_p(buf629.data_ptr()), c_void_p(convolution_83.data_ptr()), c_void_p(unsqueeze_1714.data_ptr()), c_void_p(squeeze_250.data_ptr()), c_void_p(primals_251.data_ptr()), c_void_p(buf631.data_ptr()), c_void_p(buf633.data_ptr()))
    del convolution_83
    del primals_251
    del squeeze_250
    del unsqueeze_1714
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf635 = aten.convolution_backward(buf633, cat_15, primals_250, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_15
    del primals_250
    buf636 = buf635[0]
    buf637 = buf635[1]
    del buf635
    buf638 = empty((104, ), device='cpu', dtype=torch.float32)
    buf639 = empty((104, ), device='cpu', dtype=torch.float32)
    buf640 = empty((104, ), device='cpu', dtype=torch.float32)
    buf641 = buf621; del buf621  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_87(c_void_p(le_86.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(convolution_82.data_ptr()), c_void_p(unsqueeze_1726.data_ptr()), c_void_p(squeeze_247.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(buf639.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(buf641.data_ptr()))
    del convolution_82
    del le_86
    del primals_248
    del squeeze_247
    del unsqueeze_1726
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf642 = aten.convolution_backward(buf641, add_450, primals_247, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_450
    del primals_247
    buf643 = buf642[0]
    buf644 = buf642[1]
    del buf642
    buf645 = buf639; del buf639  # reuse
    buf646 = empty((104, ), device='cpu', dtype=torch.float32)
    buf647 = buf641; del buf641  # reuse
    buf648 = buf646; del buf646  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_88(c_void_p(buf648.data_ptr()), c_void_p(le_87.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(convolution_81.data_ptr()), c_void_p(unsqueeze_1738.data_ptr()), c_void_p(squeeze_244.data_ptr()), c_void_p(primals_245.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(buf647.data_ptr()))
    del convolution_81
    del le_87
    del primals_245
    del squeeze_244
    del unsqueeze_1738
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf649 = aten.convolution_backward(buf647, add_444, primals_244, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_444
    del primals_244
    buf650 = buf649[0]
    buf651 = buf649[1]
    del buf649
    buf652 = empty((104, ), device='cpu', dtype=torch.float32)
    buf653 = empty((104, ), device='cpu', dtype=torch.float32)
    buf654 = buf647; del buf647  # reuse
    buf655 = buf653; del buf653  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_89(c_void_p(buf655.data_ptr()), c_void_p(le_88.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf650.data_ptr()), c_void_p(convolution_80.data_ptr()), c_void_p(unsqueeze_1750.data_ptr()), c_void_p(squeeze_241.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(buf654.data_ptr()))
    del convolution_80
    del le_88
    del primals_242
    del squeeze_241
    del unsqueeze_1750
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf656 = aten.convolution_backward(buf654, getitem_466, primals_241, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf654
    del getitem_466
    del primals_241
    buf657 = buf656[0]
    buf658 = buf656[1]
    del buf656
    buf659 = buf636; del buf636  # reuse
    buf660 = buf625; del buf625  # reuse
    buf661 = empty((416, ), device='cpu', dtype=torch.float32)
    buf662 = empty((416, ), device='cpu', dtype=torch.float32)
    buf663 = buf659; del buf659  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_90(c_void_p(buf663.data_ptr()), c_void_p(le_89.data_ptr()), c_void_p(buf657.data_ptr()), c_void_p(buf650.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(convolution_79.data_ptr()), c_void_p(unsqueeze_1762.data_ptr()), c_void_p(squeeze_238.data_ptr()), c_void_p(primals_239.data_ptr()), c_void_p(buf660.data_ptr()), c_void_p(buf661.data_ptr()), c_void_p(buf662.data_ptr()))
    del buf643
    del buf650
    del convolution_79
    del le_89
    del primals_239
    del squeeze_238
    del unsqueeze_1762
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf664 = aten.convolution_backward(buf663, relu_75, primals_238, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf663
    del primals_238
    buf665 = buf664[0]
    buf666 = buf664[1]
    del buf664
    buf667 = buf594; del buf594  # reuse
    buf668 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf669 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf670 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf671 = buf633; del buf633  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_91(c_void_p(buf667.data_ptr()), c_void_p(relu_75.data_ptr()), c_void_p(relu_80.data_ptr()), c_void_p(buf629.data_ptr()), c_void_p(buf665.data_ptr()), c_void_p(convolution_78.data_ptr()), c_void_p(unsqueeze_1774.data_ptr()), c_void_p(squeeze_235.data_ptr()), c_void_p(primals_236.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(buf671.data_ptr()))
    del buf629
    del buf665
    del convolution_78
    del primals_236
    del relu_75
    del relu_80
    del squeeze_235
    del unsqueeze_1774
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf672 = aten.convolution_backward(buf671, cat_14, primals_235, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_14
    del primals_235
    buf673 = buf672[0]
    buf674 = buf672[1]
    del buf672
    buf675 = empty((104, ), device='cpu', dtype=torch.float32)
    buf676 = empty((104, ), device='cpu', dtype=torch.float32)
    buf677 = empty((104, ), device='cpu', dtype=torch.float32)
    buf678 = buf657; del buf657  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_92(c_void_p(le_91.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(convolution_77.data_ptr()), c_void_p(unsqueeze_1786.data_ptr()), c_void_p(squeeze_232.data_ptr()), c_void_p(primals_233.data_ptr()), c_void_p(buf675.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(buf678.data_ptr()))
    del convolution_77
    del le_91
    del primals_233
    del squeeze_232
    del unsqueeze_1786
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf679 = aten.convolution_backward(buf678, add_422, primals_232, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_422
    del primals_232
    buf680 = buf679[0]
    buf681 = buf679[1]
    del buf679
    buf682 = buf676; del buf676  # reuse
    buf683 = empty((104, ), device='cpu', dtype=torch.float32)
    buf684 = buf678; del buf678  # reuse
    buf685 = buf683; del buf683  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_93(c_void_p(buf685.data_ptr()), c_void_p(le_92.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(convolution_76.data_ptr()), c_void_p(unsqueeze_1798.data_ptr()), c_void_p(squeeze_229.data_ptr()), c_void_p(primals_230.data_ptr()), c_void_p(buf682.data_ptr()), c_void_p(buf684.data_ptr()))
    del convolution_76
    del le_92
    del primals_230
    del squeeze_229
    del unsqueeze_1798
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf686 = aten.convolution_backward(buf684, add_416, primals_229, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_416
    del primals_229
    buf687 = buf686[0]
    buf688 = buf686[1]
    del buf686
    buf689 = empty((104, ), device='cpu', dtype=torch.float32)
    buf690 = empty((104, ), device='cpu', dtype=torch.float32)
    buf691 = buf684; del buf684  # reuse
    buf692 = buf690; del buf690  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_94(c_void_p(buf692.data_ptr()), c_void_p(le_93.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(convolution_75.data_ptr()), c_void_p(unsqueeze_1810.data_ptr()), c_void_p(squeeze_226.data_ptr()), c_void_p(primals_227.data_ptr()), c_void_p(buf689.data_ptr()), c_void_p(buf691.data_ptr()))
    del convolution_75
    del le_93
    del primals_227
    del squeeze_226
    del unsqueeze_1810
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf693 = aten.convolution_backward(buf691, getitem_436, primals_226, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf691
    del getitem_436
    del primals_226
    buf694 = buf693[0]
    buf695 = buf693[1]
    del buf693
    buf696 = buf673; del buf673  # reuse
    buf697 = buf661; del buf661  # reuse
    buf698 = empty((416, ), device='cpu', dtype=torch.float32)
    buf699 = empty((416, ), device='cpu', dtype=torch.float32)
    buf700 = buf696; del buf696  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_95(c_void_p(buf700.data_ptr()), c_void_p(le_94.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(convolution_74.data_ptr()), c_void_p(unsqueeze_1822.data_ptr()), c_void_p(squeeze_223.data_ptr()), c_void_p(primals_224.data_ptr()), c_void_p(buf697.data_ptr()), c_void_p(buf698.data_ptr()), c_void_p(buf699.data_ptr()))
    del buf680
    del buf687
    del convolution_74
    del le_94
    del primals_224
    del squeeze_223
    del unsqueeze_1822
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf701 = aten.convolution_backward(buf700, relu_70, primals_223, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf700
    del primals_223
    buf702 = buf701[0]
    buf703 = buf701[1]
    del buf701
    buf704 = buf669; del buf669  # reuse
    buf705 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf706 = buf671; del buf671  # reuse
    buf707 = buf705; del buf705  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_96(c_void_p(buf707.data_ptr()), c_void_p(relu_70.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(convolution_73.data_ptr()), c_void_p(unsqueeze_1834.data_ptr()), c_void_p(squeeze_220.data_ptr()), c_void_p(primals_221.data_ptr()), c_void_p(buf704.data_ptr()), c_void_p(buf706.data_ptr()))
    del convolution_73
    del primals_221
    del squeeze_220
    del unsqueeze_1834
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf708 = aten.convolution_backward(buf706, cat_13, primals_220, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_13
    del primals_220
    buf709 = buf708[0]
    buf710 = buf708[1]
    del buf708
    buf711 = empty((104, ), device='cpu', dtype=torch.float32)
    buf712 = empty((104, ), device='cpu', dtype=torch.float32)
    buf713 = empty((104, ), device='cpu', dtype=torch.float32)
    buf714 = buf694; del buf694  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_97(c_void_p(le_96.data_ptr()), c_void_p(buf709.data_ptr()), c_void_p(convolution_72.data_ptr()), c_void_p(unsqueeze_1846.data_ptr()), c_void_p(squeeze_217.data_ptr()), c_void_p(primals_218.data_ptr()), c_void_p(buf711.data_ptr()), c_void_p(buf712.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(buf714.data_ptr()))
    del convolution_72
    del le_96
    del primals_218
    del squeeze_217
    del unsqueeze_1846
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf715 = aten.convolution_backward(buf714, add_394, primals_217, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_394
    del primals_217
    buf716 = buf715[0]
    buf717 = buf715[1]
    del buf715
    buf718 = buf712; del buf712  # reuse
    buf719 = empty((104, ), device='cpu', dtype=torch.float32)
    buf720 = buf714; del buf714  # reuse
    buf721 = buf719; del buf719  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_98(c_void_p(buf721.data_ptr()), c_void_p(le_97.data_ptr()), c_void_p(buf709.data_ptr()), c_void_p(buf716.data_ptr()), c_void_p(convolution_71.data_ptr()), c_void_p(unsqueeze_1858.data_ptr()), c_void_p(squeeze_214.data_ptr()), c_void_p(primals_215.data_ptr()), c_void_p(buf718.data_ptr()), c_void_p(buf720.data_ptr()))
    del convolution_71
    del le_97
    del primals_215
    del squeeze_214
    del unsqueeze_1858
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf722 = aten.convolution_backward(buf720, add_388, primals_214, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_388
    del primals_214
    buf723 = buf722[0]
    buf724 = buf722[1]
    del buf722
    buf725 = empty((104, ), device='cpu', dtype=torch.float32)
    buf726 = empty((104, ), device='cpu', dtype=torch.float32)
    buf727 = buf720; del buf720  # reuse
    buf728 = buf726; del buf726  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_99(c_void_p(buf728.data_ptr()), c_void_p(le_98.data_ptr()), c_void_p(buf709.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(convolution_70.data_ptr()), c_void_p(unsqueeze_1870.data_ptr()), c_void_p(squeeze_211.data_ptr()), c_void_p(primals_212.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(buf727.data_ptr()))
    del convolution_70
    del le_98
    del primals_212
    del squeeze_211
    del unsqueeze_1870
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf729 = aten.convolution_backward(buf727, getitem_406, primals_211, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf727
    del getitem_406
    del primals_211
    buf730 = buf729[0]
    buf731 = buf729[1]
    del buf729
    buf732 = buf709; del buf709  # reuse
    buf733 = buf698; del buf698  # reuse
    buf734 = empty((416, ), device='cpu', dtype=torch.float32)
    buf735 = empty((416, ), device='cpu', dtype=torch.float32)
    buf736 = buf732; del buf732  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_100(c_void_p(buf736.data_ptr()), c_void_p(le_99.data_ptr()), c_void_p(buf730.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(buf716.data_ptr()), c_void_p(convolution_69.data_ptr()), c_void_p(unsqueeze_1882.data_ptr()), c_void_p(squeeze_208.data_ptr()), c_void_p(primals_209.data_ptr()), c_void_p(buf733.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf735.data_ptr()))
    del buf716
    del buf723
    del convolution_69
    del le_99
    del primals_209
    del squeeze_208
    del unsqueeze_1882
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf737 = aten.convolution_backward(buf736, relu_65, primals_208, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf736
    del primals_208
    buf738 = buf737[0]
    buf739 = buf737[1]
    del buf737
    buf740 = buf667; del buf667  # reuse
    buf741 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf742 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf743 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf744 = buf706; del buf706  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_101(c_void_p(buf740.data_ptr()), c_void_p(relu_65.data_ptr()), c_void_p(relu_70.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(buf738.data_ptr()), c_void_p(convolution_68.data_ptr()), c_void_p(unsqueeze_1894.data_ptr()), c_void_p(squeeze_205.data_ptr()), c_void_p(primals_206.data_ptr()), c_void_p(buf741.data_ptr()), c_void_p(buf742.data_ptr()), c_void_p(buf743.data_ptr()), c_void_p(buf744.data_ptr()))
    del buf702
    del buf738
    del convolution_68
    del primals_206
    del relu_65
    del relu_70
    del squeeze_205
    del unsqueeze_1894
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf745 = aten.convolution_backward(buf744, cat_12, primals_205, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_12
    del primals_205
    buf746 = buf745[0]
    buf747 = buf745[1]
    del buf745
    buf748 = empty((104, ), device='cpu', dtype=torch.float32)
    buf749 = empty((104, ), device='cpu', dtype=torch.float32)
    buf750 = empty((104, ), device='cpu', dtype=torch.float32)
    buf751 = buf730; del buf730  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_102(c_void_p(le_101.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(convolution_67.data_ptr()), c_void_p(unsqueeze_1906.data_ptr()), c_void_p(squeeze_202.data_ptr()), c_void_p(primals_203.data_ptr()), c_void_p(buf748.data_ptr()), c_void_p(buf749.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(buf751.data_ptr()))
    del convolution_67
    del le_101
    del primals_203
    del squeeze_202
    del unsqueeze_1906
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf752 = aten.convolution_backward(buf751, add_366, primals_202, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_366
    del primals_202
    buf753 = buf752[0]
    buf754 = buf752[1]
    del buf752
    buf755 = buf749; del buf749  # reuse
    buf756 = empty((104, ), device='cpu', dtype=torch.float32)
    buf757 = buf751; del buf751  # reuse
    buf758 = buf756; del buf756  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_103(c_void_p(buf758.data_ptr()), c_void_p(le_102.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(convolution_66.data_ptr()), c_void_p(unsqueeze_1918.data_ptr()), c_void_p(squeeze_199.data_ptr()), c_void_p(primals_200.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(buf757.data_ptr()))
    del convolution_66
    del le_102
    del primals_200
    del squeeze_199
    del unsqueeze_1918
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf759 = aten.convolution_backward(buf757, add_360, primals_199, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_360
    del primals_199
    buf760 = buf759[0]
    buf761 = buf759[1]
    del buf759
    buf762 = empty((104, ), device='cpu', dtype=torch.float32)
    buf763 = empty((104, ), device='cpu', dtype=torch.float32)
    buf764 = buf757; del buf757  # reuse
    buf765 = buf763; del buf763  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_104(c_void_p(buf765.data_ptr()), c_void_p(le_103.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(convolution_65.data_ptr()), c_void_p(unsqueeze_1930.data_ptr()), c_void_p(squeeze_196.data_ptr()), c_void_p(primals_197.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(buf764.data_ptr()))
    del convolution_65
    del le_103
    del primals_197
    del squeeze_196
    del unsqueeze_1930
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf766 = aten.convolution_backward(buf764, getitem_376, primals_196, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf764
    del getitem_376
    del primals_196
    buf767 = buf766[0]
    buf768 = buf766[1]
    del buf766
    buf769 = buf746; del buf746  # reuse
    buf770 = buf734; del buf734  # reuse
    buf771 = empty((416, ), device='cpu', dtype=torch.float32)
    buf772 = empty((416, ), device='cpu', dtype=torch.float32)
    buf773 = buf769; del buf769  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_105(c_void_p(buf773.data_ptr()), c_void_p(le_104.data_ptr()), c_void_p(buf767.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(convolution_64.data_ptr()), c_void_p(unsqueeze_1942.data_ptr()), c_void_p(squeeze_193.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(buf770.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(buf772.data_ptr()))
    del buf753
    del buf760
    del convolution_64
    del le_104
    del primals_194
    del squeeze_193
    del unsqueeze_1942
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf774 = aten.convolution_backward(buf773, relu_60, primals_193, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf773
    del primals_193
    buf775 = buf774[0]
    buf776 = buf774[1]
    del buf774
    buf777 = buf742; del buf742  # reuse
    buf778 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf779 = buf744; del buf744  # reuse
    buf780 = buf778; del buf778  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_106(c_void_p(buf780.data_ptr()), c_void_p(relu_60.data_ptr()), c_void_p(buf740.data_ptr()), c_void_p(buf775.data_ptr()), c_void_p(convolution_63.data_ptr()), c_void_p(unsqueeze_1954.data_ptr()), c_void_p(squeeze_190.data_ptr()), c_void_p(primals_191.data_ptr()), c_void_p(buf777.data_ptr()), c_void_p(buf779.data_ptr()))
    del convolution_63
    del primals_191
    del squeeze_190
    del unsqueeze_1954
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf781 = aten.convolution_backward(buf779, cat_11, primals_190, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_11
    del primals_190
    buf782 = buf781[0]
    buf783 = buf781[1]
    del buf781
    buf784 = empty((104, ), device='cpu', dtype=torch.float32)
    buf785 = empty((104, ), device='cpu', dtype=torch.float32)
    buf786 = empty((104, ), device='cpu', dtype=torch.float32)
    buf787 = buf767; del buf767  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_107(c_void_p(le_106.data_ptr()), c_void_p(buf782.data_ptr()), c_void_p(convolution_62.data_ptr()), c_void_p(unsqueeze_1966.data_ptr()), c_void_p(squeeze_187.data_ptr()), c_void_p(primals_188.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(buf787.data_ptr()))
    del convolution_62
    del le_106
    del primals_188
    del squeeze_187
    del unsqueeze_1966
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf788 = aten.convolution_backward(buf787, add_338, primals_187, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_338
    del primals_187
    buf789 = buf788[0]
    buf790 = buf788[1]
    del buf788
    buf791 = buf785; del buf785  # reuse
    buf792 = empty((104, ), device='cpu', dtype=torch.float32)
    buf793 = buf787; del buf787  # reuse
    buf794 = buf792; del buf792  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_108(c_void_p(buf794.data_ptr()), c_void_p(le_107.data_ptr()), c_void_p(buf782.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(convolution_61.data_ptr()), c_void_p(unsqueeze_1978.data_ptr()), c_void_p(squeeze_184.data_ptr()), c_void_p(primals_185.data_ptr()), c_void_p(buf791.data_ptr()), c_void_p(buf793.data_ptr()))
    del convolution_61
    del le_107
    del primals_185
    del squeeze_184
    del unsqueeze_1978
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf795 = aten.convolution_backward(buf793, add_332, primals_184, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_332
    del primals_184
    buf796 = buf795[0]
    buf797 = buf795[1]
    del buf795
    buf798 = empty((104, ), device='cpu', dtype=torch.float32)
    buf799 = empty((104, ), device='cpu', dtype=torch.float32)
    buf800 = buf793; del buf793  # reuse
    buf801 = buf799; del buf799  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_109(c_void_p(buf801.data_ptr()), c_void_p(le_108.data_ptr()), c_void_p(buf782.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(convolution_60.data_ptr()), c_void_p(unsqueeze_1990.data_ptr()), c_void_p(squeeze_181.data_ptr()), c_void_p(primals_182.data_ptr()), c_void_p(buf798.data_ptr()), c_void_p(buf800.data_ptr()))
    del convolution_60
    del le_108
    del primals_182
    del squeeze_181
    del unsqueeze_1990
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf802 = aten.convolution_backward(buf800, getitem_346, primals_181, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf800
    del getitem_346
    del primals_181
    buf803 = buf802[0]
    buf804 = buf802[1]
    del buf802
    buf805 = buf782; del buf782  # reuse
    buf806 = buf771; del buf771  # reuse
    buf807 = empty((416, ), device='cpu', dtype=torch.float32)
    buf808 = empty((416, ), device='cpu', dtype=torch.float32)
    buf809 = buf805; del buf805  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_110(c_void_p(buf809.data_ptr()), c_void_p(le_109.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(convolution_59.data_ptr()), c_void_p(unsqueeze_2002.data_ptr()), c_void_p(squeeze_178.data_ptr()), c_void_p(primals_179.data_ptr()), c_void_p(buf806.data_ptr()), c_void_p(buf807.data_ptr()), c_void_p(buf808.data_ptr()))
    del buf789
    del buf796
    del convolution_59
    del le_109
    del primals_179
    del squeeze_178
    del unsqueeze_2002
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf810 = aten.convolution_backward(buf809, relu_55, primals_178, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf809
    del primals_178
    buf811 = buf810[0]
    buf812 = buf810[1]
    del buf810
    buf813 = buf740; del buf740  # reuse
    buf814 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf815 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf816 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf817 = buf779; del buf779  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_111(c_void_p(buf813.data_ptr()), c_void_p(relu_55.data_ptr()), c_void_p(relu_60.data_ptr()), c_void_p(buf775.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(convolution_58.data_ptr()), c_void_p(unsqueeze_2014.data_ptr()), c_void_p(squeeze_175.data_ptr()), c_void_p(primals_176.data_ptr()), c_void_p(buf814.data_ptr()), c_void_p(buf815.data_ptr()), c_void_p(buf816.data_ptr()), c_void_p(buf817.data_ptr()))
    del buf775
    del buf811
    del convolution_58
    del primals_176
    del relu_55
    del relu_60
    del squeeze_175
    del unsqueeze_2014
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf818 = aten.convolution_backward(buf817, cat_10, primals_175, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_10
    del primals_175
    buf819 = buf818[0]
    buf820 = buf818[1]
    del buf818
    buf821 = empty((104, ), device='cpu', dtype=torch.float32)
    buf822 = empty((104, ), device='cpu', dtype=torch.float32)
    buf823 = empty((104, ), device='cpu', dtype=torch.float32)
    buf824 = buf803; del buf803  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_112(c_void_p(le_111.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(convolution_57.data_ptr()), c_void_p(unsqueeze_2026.data_ptr()), c_void_p(squeeze_172.data_ptr()), c_void_p(primals_173.data_ptr()), c_void_p(buf821.data_ptr()), c_void_p(buf822.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(buf824.data_ptr()))
    del convolution_57
    del le_111
    del primals_173
    del squeeze_172
    del unsqueeze_2026
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf825 = aten.convolution_backward(buf824, add_310, primals_172, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_310
    del primals_172
    buf826 = buf825[0]
    buf827 = buf825[1]
    del buf825
    buf828 = buf822; del buf822  # reuse
    buf829 = empty((104, ), device='cpu', dtype=torch.float32)
    buf830 = buf824; del buf824  # reuse
    buf831 = buf829; del buf829  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_113(c_void_p(buf831.data_ptr()), c_void_p(le_112.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(convolution_56.data_ptr()), c_void_p(unsqueeze_2038.data_ptr()), c_void_p(squeeze_169.data_ptr()), c_void_p(primals_170.data_ptr()), c_void_p(buf828.data_ptr()), c_void_p(buf830.data_ptr()))
    del convolution_56
    del le_112
    del primals_170
    del squeeze_169
    del unsqueeze_2038
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf832 = aten.convolution_backward(buf830, add_304, primals_169, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_304
    del primals_169
    buf833 = buf832[0]
    buf834 = buf832[1]
    del buf832
    buf835 = empty((104, ), device='cpu', dtype=torch.float32)
    buf836 = empty((104, ), device='cpu', dtype=torch.float32)
    buf837 = buf830; del buf830  # reuse
    buf838 = buf836; del buf836  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_114(c_void_p(buf838.data_ptr()), c_void_p(le_113.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(convolution_55.data_ptr()), c_void_p(unsqueeze_2050.data_ptr()), c_void_p(squeeze_166.data_ptr()), c_void_p(primals_167.data_ptr()), c_void_p(buf835.data_ptr()), c_void_p(buf837.data_ptr()))
    del convolution_55
    del le_113
    del primals_167
    del squeeze_166
    del unsqueeze_2050
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf839 = aten.convolution_backward(buf837, getitem_316, primals_166, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf837
    del getitem_316
    del primals_166
    buf840 = buf839[0]
    buf841 = buf839[1]
    del buf839
    buf842 = buf819; del buf819  # reuse
    buf843 = buf807; del buf807  # reuse
    buf844 = empty((416, ), device='cpu', dtype=torch.float32)
    buf845 = empty((416, ), device='cpu', dtype=torch.float32)
    buf846 = buf842; del buf842  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_115(c_void_p(buf846.data_ptr()), c_void_p(le_114.data_ptr()), c_void_p(buf840.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(convolution_54.data_ptr()), c_void_p(unsqueeze_2062.data_ptr()), c_void_p(squeeze_163.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf844.data_ptr()), c_void_p(buf845.data_ptr()))
    del buf826
    del buf833
    del convolution_54
    del le_114
    del primals_164
    del squeeze_163
    del unsqueeze_2062
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf847 = aten.convolution_backward(buf846, relu_50, primals_163, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf846
    del primals_163
    buf848 = buf847[0]
    buf849 = buf847[1]
    del buf847
    buf850 = buf815; del buf815  # reuse
    buf851 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf852 = buf817; del buf817  # reuse
    buf853 = buf851; del buf851  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_116(c_void_p(buf853.data_ptr()), c_void_p(relu_50.data_ptr()), c_void_p(buf813.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(convolution_53.data_ptr()), c_void_p(unsqueeze_2074.data_ptr()), c_void_p(squeeze_160.data_ptr()), c_void_p(primals_161.data_ptr()), c_void_p(buf850.data_ptr()), c_void_p(buf852.data_ptr()))
    del convolution_53
    del primals_161
    del squeeze_160
    del unsqueeze_2074
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf854 = aten.convolution_backward(buf852, cat_9, primals_160, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_9
    del primals_160
    buf855 = buf854[0]
    buf856 = buf854[1]
    del buf854
    buf857 = empty((104, ), device='cpu', dtype=torch.float32)
    buf858 = empty((104, ), device='cpu', dtype=torch.float32)
    buf859 = empty((104, ), device='cpu', dtype=torch.float32)
    buf860 = buf840; del buf840  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_117(c_void_p(le_116.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(convolution_52.data_ptr()), c_void_p(unsqueeze_2086.data_ptr()), c_void_p(squeeze_157.data_ptr()), c_void_p(primals_158.data_ptr()), c_void_p(buf857.data_ptr()), c_void_p(buf858.data_ptr()), c_void_p(buf859.data_ptr()), c_void_p(buf860.data_ptr()))
    del convolution_52
    del le_116
    del primals_158
    del squeeze_157
    del unsqueeze_2086
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf861 = aten.convolution_backward(buf860, add_282, primals_157, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_282
    del primals_157
    buf862 = buf861[0]
    buf863 = buf861[1]
    del buf861
    buf864 = buf858; del buf858  # reuse
    buf865 = empty((104, ), device='cpu', dtype=torch.float32)
    buf866 = buf860; del buf860  # reuse
    buf867 = buf865; del buf865  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_118(c_void_p(buf867.data_ptr()), c_void_p(le_117.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(convolution_51.data_ptr()), c_void_p(unsqueeze_2098.data_ptr()), c_void_p(squeeze_154.data_ptr()), c_void_p(primals_155.data_ptr()), c_void_p(buf864.data_ptr()), c_void_p(buf866.data_ptr()))
    del convolution_51
    del le_117
    del primals_155
    del squeeze_154
    del unsqueeze_2098
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf868 = aten.convolution_backward(buf866, add_276, primals_154, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_276
    del primals_154
    buf869 = buf868[0]
    buf870 = buf868[1]
    del buf868
    buf871 = empty((104, ), device='cpu', dtype=torch.float32)
    buf872 = empty((104, ), device='cpu', dtype=torch.float32)
    buf873 = buf866; del buf866  # reuse
    buf874 = buf872; del buf872  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_119(c_void_p(buf874.data_ptr()), c_void_p(le_118.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(buf869.data_ptr()), c_void_p(convolution_50.data_ptr()), c_void_p(unsqueeze_2110.data_ptr()), c_void_p(squeeze_151.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf873.data_ptr()))
    del convolution_50
    del le_118
    del primals_152
    del squeeze_151
    del unsqueeze_2110
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf875 = aten.convolution_backward(buf873, getitem_286, primals_151, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf873
    del getitem_286
    del primals_151
    buf876 = buf875[0]
    buf877 = buf875[1]
    del buf875
    buf878 = buf855; del buf855  # reuse
    buf879 = buf844; del buf844  # reuse
    buf880 = empty((416, ), device='cpu', dtype=torch.float32)
    buf881 = empty((416, ), device='cpu', dtype=torch.float32)
    buf882 = buf878; del buf878  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_120(c_void_p(buf882.data_ptr()), c_void_p(le_119.data_ptr()), c_void_p(buf876.data_ptr()), c_void_p(buf869.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(convolution_49.data_ptr()), c_void_p(unsqueeze_2122.data_ptr()), c_void_p(squeeze_148.data_ptr()), c_void_p(primals_149.data_ptr()), c_void_p(buf879.data_ptr()), c_void_p(buf880.data_ptr()), c_void_p(buf881.data_ptr()))
    del buf862
    del buf869
    del convolution_49
    del le_119
    del primals_149
    del squeeze_148
    del unsqueeze_2122
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf883 = aten.convolution_backward(buf882, relu_45, primals_148, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf882
    del primals_148
    buf884 = buf883[0]
    buf885 = buf883[1]
    del buf883
    buf886 = buf813; del buf813  # reuse
    buf887 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf888 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf889 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf890 = buf852; del buf852  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_121(c_void_p(buf886.data_ptr()), c_void_p(relu_45.data_ptr()), c_void_p(relu_50.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf884.data_ptr()), c_void_p(convolution_48.data_ptr()), c_void_p(unsqueeze_2134.data_ptr()), c_void_p(squeeze_145.data_ptr()), c_void_p(primals_146.data_ptr()), c_void_p(buf887.data_ptr()), c_void_p(buf888.data_ptr()), c_void_p(buf889.data_ptr()), c_void_p(buf890.data_ptr()))
    del buf848
    del convolution_48
    del primals_146
    del relu_45
    del relu_50
    del squeeze_145
    del unsqueeze_2134
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf891 = aten.convolution_backward(buf890, cat_8, primals_145, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_8
    del primals_145
    buf892 = buf891[0]
    buf893 = buf891[1]
    del buf891
    buf894 = empty((104, ), device='cpu', dtype=torch.float32)
    buf895 = empty((104, ), device='cpu', dtype=torch.float32)
    buf896 = empty((104, ), device='cpu', dtype=torch.float32)
    buf897 = buf876; del buf876  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_122(c_void_p(le_121.data_ptr()), c_void_p(buf892.data_ptr()), c_void_p(convolution_47.data_ptr()), c_void_p(unsqueeze_2146.data_ptr()), c_void_p(squeeze_142.data_ptr()), c_void_p(primals_143.data_ptr()), c_void_p(buf894.data_ptr()), c_void_p(buf895.data_ptr()), c_void_p(buf896.data_ptr()), c_void_p(buf897.data_ptr()))
    del convolution_47
    del le_121
    del primals_143
    del squeeze_142
    del unsqueeze_2146
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf898 = aten.convolution_backward(buf897, add_254, primals_142, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_254
    del primals_142
    buf899 = buf898[0]
    buf900 = buf898[1]
    del buf898
    buf901 = buf895; del buf895  # reuse
    buf902 = empty((104, ), device='cpu', dtype=torch.float32)
    buf903 = buf897; del buf897  # reuse
    buf904 = buf902; del buf902  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_123(c_void_p(buf904.data_ptr()), c_void_p(le_122.data_ptr()), c_void_p(buf892.data_ptr()), c_void_p(buf899.data_ptr()), c_void_p(convolution_46.data_ptr()), c_void_p(unsqueeze_2158.data_ptr()), c_void_p(squeeze_139.data_ptr()), c_void_p(primals_140.data_ptr()), c_void_p(buf901.data_ptr()), c_void_p(buf903.data_ptr()))
    del convolution_46
    del le_122
    del primals_140
    del squeeze_139
    del unsqueeze_2158
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf905 = aten.convolution_backward(buf903, add_248, primals_139, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_248
    del primals_139
    buf906 = buf905[0]
    buf907 = buf905[1]
    del buf905
    buf908 = empty((104, ), device='cpu', dtype=torch.float32)
    buf909 = empty((104, ), device='cpu', dtype=torch.float32)
    buf910 = buf903; del buf903  # reuse
    buf911 = buf909; del buf909  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_124(c_void_p(buf911.data_ptr()), c_void_p(le_123.data_ptr()), c_void_p(buf892.data_ptr()), c_void_p(buf906.data_ptr()), c_void_p(convolution_45.data_ptr()), c_void_p(unsqueeze_2170.data_ptr()), c_void_p(squeeze_136.data_ptr()), c_void_p(primals_137.data_ptr()), c_void_p(buf908.data_ptr()), c_void_p(buf910.data_ptr()))
    del convolution_45
    del le_123
    del primals_137
    del squeeze_136
    del unsqueeze_2170
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf912 = aten.convolution_backward(buf910, getitem_256, primals_136, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf910
    del getitem_256
    del primals_136
    buf913 = buf912[0]
    buf914 = buf912[1]
    del buf912
    buf915 = buf892; del buf892  # reuse
    buf916 = buf880; del buf880  # reuse
    buf917 = empty((416, ), device='cpu', dtype=torch.float32)
    buf918 = empty((416, ), device='cpu', dtype=torch.float32)
    buf919 = buf915; del buf915  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_125(c_void_p(buf919.data_ptr()), c_void_p(le_124.data_ptr()), c_void_p(buf913.data_ptr()), c_void_p(buf906.data_ptr()), c_void_p(buf899.data_ptr()), c_void_p(convolution_44.data_ptr()), c_void_p(unsqueeze_2182.data_ptr()), c_void_p(squeeze_133.data_ptr()), c_void_p(primals_134.data_ptr()), c_void_p(buf916.data_ptr()), c_void_p(buf917.data_ptr()), c_void_p(buf918.data_ptr()))
    del buf899
    del buf906
    del convolution_44
    del le_124
    del primals_134
    del squeeze_133
    del unsqueeze_2182
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf920 = aten.convolution_backward(buf919, relu_40, primals_133, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_133
    buf921 = buf920[0]
    buf922 = buf920[1]
    del buf920
    buf923 = buf888; del buf888  # reuse
    buf924 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf930 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf925 = buf890; del buf890  # reuse
    buf931 = buf884; del buf884  # reuse
    buf926 = buf924; del buf924  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_126(c_void_p(buf926.data_ptr()), c_void_p(relu_40.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf921.data_ptr()), c_void_p(convolution_43.data_ptr()), c_void_p(unsqueeze_2194.data_ptr()), c_void_p(convolution_42.data_ptr()), c_void_p(unsqueeze_2206.data_ptr()), c_void_p(squeeze_130.data_ptr()), c_void_p(primals_131.data_ptr()), c_void_p(squeeze_127.data_ptr()), c_void_p(primals_128.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(buf930.data_ptr()), c_void_p(buf925.data_ptr()), c_void_p(buf931.data_ptr()))
    del buf886
    del buf921
    del convolution_42
    del convolution_43
    del primals_128
    del primals_131
    del relu_40
    del squeeze_130
    del unsqueeze_2194
    del unsqueeze_2206
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf927 = aten.convolution_backward(buf925, relu_35, primals_130, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf925
    del primals_130
    buf928 = buf927[0]
    buf929 = buf927[1]
    del buf927
    buf932 = buf930; del buf930  # reuse
    cpp_fused_native_batch_norm_backward_127(c_void_p(buf932.data_ptr()), c_void_p(squeeze_127.data_ptr()))
    del squeeze_127
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf933 = aten.convolution_backward(buf931, cat_7, primals_127, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf931
    del cat_7
    del primals_127
    buf934 = buf933[0]
    buf935 = buf933[1]
    del buf933
    buf936 = reinterpret_tensor(buf919, (8, 104, 28, 28), (81536, 784, 28, 1), 0); del buf919  # reuse
    buf937 = empty((104, ), device='cpu', dtype=torch.float32)
    buf938 = empty((104, ), device='cpu', dtype=torch.float32)
    buf939 = empty((104, ), device='cpu', dtype=torch.float32)
    buf940 = buf913; del buf913  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_128(c_void_p(buf934.data_ptr()), c_void_p(le_126.data_ptr()), c_void_p(convolution_41.data_ptr()), c_void_p(unsqueeze_2218.data_ptr()), c_void_p(squeeze_124.data_ptr()), c_void_p(primals_125.data_ptr()), c_void_p(buf936.data_ptr()), c_void_p(buf937.data_ptr()), c_void_p(buf938.data_ptr()), c_void_p(buf939.data_ptr()), c_void_p(buf940.data_ptr()))
    del convolution_41
    del le_126
    del primals_125
    del squeeze_124
    del unsqueeze_2218
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf941 = aten.convolution_backward(buf940, getitem_238, primals_124, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_238
    del primals_124
    buf942 = buf941[0]
    buf943 = buf941[1]
    del buf941
    buf944 = buf938; del buf938  # reuse
    buf945 = empty((104, ), device='cpu', dtype=torch.float32)
    buf946 = empty((104, ), device='cpu', dtype=torch.float32)
    buf947 = buf940; del buf940  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_129(c_void_p(le_127.data_ptr()), c_void_p(buf934.data_ptr()), c_void_p(convolution_40.data_ptr()), c_void_p(unsqueeze_2230.data_ptr()), c_void_p(squeeze_121.data_ptr()), c_void_p(primals_122.data_ptr()), c_void_p(buf944.data_ptr()), c_void_p(buf945.data_ptr()), c_void_p(buf946.data_ptr()), c_void_p(buf947.data_ptr()))
    del convolution_40
    del le_127
    del primals_122
    del squeeze_121
    del unsqueeze_2230
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf948 = aten.convolution_backward(buf947, getitem_231, primals_121, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_231
    del primals_121
    buf949 = buf948[0]
    buf950 = buf948[1]
    del buf948
    buf951 = buf945; del buf945  # reuse
    buf952 = empty((104, ), device='cpu', dtype=torch.float32)
    buf953 = empty((104, ), device='cpu', dtype=torch.float32)
    buf954 = buf947; del buf947  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130(c_void_p(le_128.data_ptr()), c_void_p(buf934.data_ptr()), c_void_p(convolution_39.data_ptr()), c_void_p(unsqueeze_2242.data_ptr()), c_void_p(squeeze_118.data_ptr()), c_void_p(primals_119.data_ptr()), c_void_p(buf951.data_ptr()), c_void_p(buf952.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(buf954.data_ptr()))
    del buf934
    del convolution_39
    del le_128
    del primals_119
    del squeeze_118
    del unsqueeze_2242
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf955 = aten.convolution_backward(buf954, getitem_224, primals_118, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf954
    del getitem_224
    del primals_118
    buf956 = buf955[0]
    buf957 = buf955[1]
    del buf955
    buf958 = empty_strided((8, 416, 28, 28), (326144, 1, 11648, 416), device='cpu', dtype=torch.float32)
    buf959 = buf917; del buf917  # reuse
    buf960 = empty((416, ), device='cpu', dtype=torch.float32)
    buf961 = empty((416, ), device='cpu', dtype=torch.float32)
    buf962 = buf958; del buf958  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_131(c_void_p(buf962.data_ptr()), c_void_p(le_129.data_ptr()), c_void_p(buf956.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf942.data_ptr()), c_void_p(buf936.data_ptr()), c_void_p(convolution_38.data_ptr()), c_void_p(unsqueeze_2254.data_ptr()), c_void_p(squeeze_115.data_ptr()), c_void_p(primals_116.data_ptr()), c_void_p(buf959.data_ptr()), c_void_p(buf960.data_ptr()), c_void_p(buf961.data_ptr()))
    del buf936
    del buf942
    del buf949
    del buf960
    del convolution_38
    del le_129
    del primals_116
    del squeeze_115
    del unsqueeze_2254
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf963 = aten.convolution_backward(buf962, relu_35, primals_115, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf962
    del primals_115
    buf964 = buf963[0]
    buf965 = buf963[1]
    del buf963
    buf966 = empty((512, ), device='cpu', dtype=torch.float32)
    buf967 = empty((512, ), device='cpu', dtype=torch.float32)
    buf968 = empty_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    buf969 = buf967; del buf967  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_132(c_void_p(buf969.data_ptr()), c_void_p(relu_35.data_ptr()), c_void_p(buf928.data_ptr()), c_void_p(buf964.data_ptr()), c_void_p(convolution_37.data_ptr()), c_void_p(unsqueeze_2266.data_ptr()), c_void_p(squeeze_112.data_ptr()), c_void_p(primals_113.data_ptr()), c_void_p(buf966.data_ptr()), c_void_p(buf968.data_ptr()))
    del convolution_37
    del primals_113
    del squeeze_112
    del unsqueeze_2266
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf970 = aten.convolution_backward(buf968, cat_6, primals_112, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_6
    del primals_112
    buf971 = buf970[0]
    buf972 = buf970[1]
    del buf970
    buf973 = empty((52, ), device='cpu', dtype=torch.float32)
    buf974 = empty((52, ), device='cpu', dtype=torch.float32)
    buf975 = empty((52, ), device='cpu', dtype=torch.float32)
    buf976 = reinterpret_tensor(buf96, (8, 52, 28, 28), (40768, 1, 1456, 52), 0); del buf96  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_133(c_void_p(le_131.data_ptr()), c_void_p(buf971.data_ptr()), c_void_p(convolution_36.data_ptr()), c_void_p(unsqueeze_2278.data_ptr()), c_void_p(squeeze_109.data_ptr()), c_void_p(primals_110.data_ptr()), c_void_p(buf973.data_ptr()), c_void_p(buf974.data_ptr()), c_void_p(buf975.data_ptr()), c_void_p(buf976.data_ptr()))
    del convolution_36
    del le_131
    del primals_110
    del squeeze_109
    del unsqueeze_2278
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf977 = aten.convolution_backward(buf976, add_195, primals_109, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_195
    del primals_109
    buf978 = buf977[0]
    buf979 = buf977[1]
    del buf977
    buf980 = buf974; del buf974  # reuse
    buf981 = empty((52, ), device='cpu', dtype=torch.float32)
    buf982 = buf976; del buf976  # reuse
    buf983 = buf981; del buf981  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_134(c_void_p(buf983.data_ptr()), c_void_p(le_132.data_ptr()), c_void_p(buf971.data_ptr()), c_void_p(buf978.data_ptr()), c_void_p(convolution_35.data_ptr()), c_void_p(unsqueeze_2290.data_ptr()), c_void_p(squeeze_106.data_ptr()), c_void_p(primals_107.data_ptr()), c_void_p(buf980.data_ptr()), c_void_p(buf982.data_ptr()))
    del convolution_35
    del le_132
    del primals_107
    del squeeze_106
    del unsqueeze_2290
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf984 = aten.convolution_backward(buf982, add_189, primals_106, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_189
    del primals_106
    buf985 = buf984[0]
    buf986 = buf984[1]
    del buf984
    buf987 = empty((52, ), device='cpu', dtype=torch.float32)
    buf988 = empty((52, ), device='cpu', dtype=torch.float32)
    buf989 = buf982; del buf982  # reuse
    buf990 = buf988; del buf988  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_135(c_void_p(buf990.data_ptr()), c_void_p(le_133.data_ptr()), c_void_p(buf971.data_ptr()), c_void_p(buf985.data_ptr()), c_void_p(convolution_34.data_ptr()), c_void_p(unsqueeze_2302.data_ptr()), c_void_p(squeeze_103.data_ptr()), c_void_p(primals_104.data_ptr()), c_void_p(buf987.data_ptr()), c_void_p(buf989.data_ptr()))
    del convolution_34
    del le_133
    del primals_104
    del squeeze_103
    del unsqueeze_2302
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf991 = aten.convolution_backward(buf989, getitem_194, primals_103, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf989
    del getitem_194
    del primals_103
    buf992 = buf991[0]
    buf993 = buf991[1]
    del buf991
    buf994 = buf971; del buf971  # reuse
    buf995 = buf106; del buf106  # reuse
    buf996 = empty((208, ), device='cpu', dtype=torch.float32)
    buf997 = empty((208, ), device='cpu', dtype=torch.float32)
    buf998 = buf994; del buf994  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_136(c_void_p(buf998.data_ptr()), c_void_p(le_134.data_ptr()), c_void_p(buf992.data_ptr()), c_void_p(buf985.data_ptr()), c_void_p(buf978.data_ptr()), c_void_p(convolution_33.data_ptr()), c_void_p(unsqueeze_2314.data_ptr()), c_void_p(squeeze_100.data_ptr()), c_void_p(primals_101.data_ptr()), c_void_p(buf995.data_ptr()), c_void_p(buf996.data_ptr()), c_void_p(buf997.data_ptr()))
    del buf978
    del buf985
    del convolution_33
    del le_134
    del primals_101
    del squeeze_100
    del unsqueeze_2314
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf999 = aten.convolution_backward(buf998, relu_30, primals_100, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf998
    del primals_100
    buf1000 = buf999[0]
    buf1001 = buf999[1]
    del buf999
    buf1002 = buf1000; del buf1000  # reuse
    buf1003 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1004 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1005 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1006 = buf968; del buf968  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_137(c_void_p(buf1002.data_ptr()), c_void_p(relu_30.data_ptr()), c_void_p(relu_35.data_ptr()), c_void_p(buf928.data_ptr()), c_void_p(buf964.data_ptr()), c_void_p(convolution_32.data_ptr()), c_void_p(unsqueeze_2326.data_ptr()), c_void_p(squeeze_97.data_ptr()), c_void_p(primals_98.data_ptr()), c_void_p(buf1003.data_ptr()), c_void_p(buf1004.data_ptr()), c_void_p(buf1005.data_ptr()), c_void_p(buf1006.data_ptr()))
    del buf928
    del convolution_32
    del primals_98
    del relu_30
    del relu_35
    del squeeze_97
    del unsqueeze_2326
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1007 = aten.convolution_backward(buf1006, cat_5, primals_97, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_5
    del primals_97
    buf1008 = buf1007[0]
    buf1009 = buf1007[1]
    del buf1007
    buf1010 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1011 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1012 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1013 = buf992; del buf992  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_138(c_void_p(le_136.data_ptr()), c_void_p(buf1008.data_ptr()), c_void_p(convolution_31.data_ptr()), c_void_p(unsqueeze_2338.data_ptr()), c_void_p(squeeze_94.data_ptr()), c_void_p(primals_95.data_ptr()), c_void_p(buf1010.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(buf1012.data_ptr()), c_void_p(buf1013.data_ptr()))
    del convolution_31
    del le_136
    del primals_95
    del squeeze_94
    del unsqueeze_2338
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1014 = aten.convolution_backward(buf1013, add_167, primals_94, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_167
    del primals_94
    buf1015 = buf1014[0]
    buf1016 = buf1014[1]
    del buf1014
    buf1017 = buf1011; del buf1011  # reuse
    buf1018 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1019 = buf1013; del buf1013  # reuse
    buf1020 = buf1018; del buf1018  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_139(c_void_p(buf1020.data_ptr()), c_void_p(le_137.data_ptr()), c_void_p(buf1008.data_ptr()), c_void_p(buf1015.data_ptr()), c_void_p(convolution_30.data_ptr()), c_void_p(unsqueeze_2350.data_ptr()), c_void_p(squeeze_91.data_ptr()), c_void_p(primals_92.data_ptr()), c_void_p(buf1017.data_ptr()), c_void_p(buf1019.data_ptr()))
    del convolution_30
    del le_137
    del primals_92
    del squeeze_91
    del unsqueeze_2350
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1021 = aten.convolution_backward(buf1019, add_161, primals_91, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_161
    del primals_91
    buf1022 = buf1021[0]
    buf1023 = buf1021[1]
    del buf1021
    buf1024 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1025 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1026 = buf1019; del buf1019  # reuse
    buf1027 = buf1025; del buf1025  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_140(c_void_p(buf1027.data_ptr()), c_void_p(le_138.data_ptr()), c_void_p(buf1008.data_ptr()), c_void_p(buf1022.data_ptr()), c_void_p(convolution_29.data_ptr()), c_void_p(unsqueeze_2362.data_ptr()), c_void_p(squeeze_88.data_ptr()), c_void_p(primals_89.data_ptr()), c_void_p(buf1024.data_ptr()), c_void_p(buf1026.data_ptr()))
    del convolution_29
    del le_138
    del primals_89
    del squeeze_88
    del unsqueeze_2362
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1028 = aten.convolution_backward(buf1026, getitem_164, primals_88, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1026
    del getitem_164
    del primals_88
    buf1029 = buf1028[0]
    buf1030 = buf1028[1]
    del buf1028
    buf1031 = buf1008; del buf1008  # reuse
    buf1032 = buf996; del buf996  # reuse
    buf1033 = empty((208, ), device='cpu', dtype=torch.float32)
    buf1034 = empty((208, ), device='cpu', dtype=torch.float32)
    buf1035 = buf1031; del buf1031  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_141(c_void_p(buf1035.data_ptr()), c_void_p(le_139.data_ptr()), c_void_p(buf1029.data_ptr()), c_void_p(buf1022.data_ptr()), c_void_p(buf1015.data_ptr()), c_void_p(convolution_28.data_ptr()), c_void_p(unsqueeze_2374.data_ptr()), c_void_p(squeeze_85.data_ptr()), c_void_p(primals_86.data_ptr()), c_void_p(buf1032.data_ptr()), c_void_p(buf1033.data_ptr()), c_void_p(buf1034.data_ptr()))
    del buf1015
    del buf1022
    del convolution_28
    del le_139
    del primals_86
    del squeeze_85
    del unsqueeze_2374
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1036 = aten.convolution_backward(buf1035, relu_25, primals_85, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1035
    del primals_85
    buf1037 = buf1036[0]
    buf1038 = buf1036[1]
    del buf1036
    buf1039 = buf1004; del buf1004  # reuse
    buf1040 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1041 = buf1006; del buf1006  # reuse
    buf1042 = buf1040; del buf1040  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_142(c_void_p(buf1042.data_ptr()), c_void_p(relu_25.data_ptr()), c_void_p(buf1002.data_ptr()), c_void_p(buf1037.data_ptr()), c_void_p(convolution_27.data_ptr()), c_void_p(unsqueeze_2386.data_ptr()), c_void_p(squeeze_82.data_ptr()), c_void_p(primals_83.data_ptr()), c_void_p(buf1039.data_ptr()), c_void_p(buf1041.data_ptr()))
    del convolution_27
    del primals_83
    del squeeze_82
    del unsqueeze_2386
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1043 = aten.convolution_backward(buf1041, cat_4, primals_82, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_4
    del primals_82
    buf1044 = buf1043[0]
    buf1045 = buf1043[1]
    del buf1043
    buf1046 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1047 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1048 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1049 = buf1029; del buf1029  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_143(c_void_p(le_141.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(convolution_26.data_ptr()), c_void_p(unsqueeze_2398.data_ptr()), c_void_p(squeeze_79.data_ptr()), c_void_p(primals_80.data_ptr()), c_void_p(buf1046.data_ptr()), c_void_p(buf1047.data_ptr()), c_void_p(buf1048.data_ptr()), c_void_p(buf1049.data_ptr()))
    del convolution_26
    del le_141
    del primals_80
    del squeeze_79
    del unsqueeze_2398
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1050 = aten.convolution_backward(buf1049, add_139, primals_79, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_139
    del primals_79
    buf1051 = buf1050[0]
    buf1052 = buf1050[1]
    del buf1050
    buf1053 = buf1047; del buf1047  # reuse
    buf1054 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1055 = buf1049; del buf1049  # reuse
    buf1056 = buf1054; del buf1054  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_144(c_void_p(buf1056.data_ptr()), c_void_p(le_142.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(convolution_25.data_ptr()), c_void_p(unsqueeze_2410.data_ptr()), c_void_p(squeeze_76.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(buf1053.data_ptr()), c_void_p(buf1055.data_ptr()))
    del convolution_25
    del le_142
    del primals_77
    del squeeze_76
    del unsqueeze_2410
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1057 = aten.convolution_backward(buf1055, add_133, primals_76, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_133
    del primals_76
    buf1058 = buf1057[0]
    buf1059 = buf1057[1]
    del buf1057
    buf1060 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1061 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1062 = buf1055; del buf1055  # reuse
    buf1063 = buf1061; del buf1061  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_145(c_void_p(buf1063.data_ptr()), c_void_p(le_143.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(convolution_24.data_ptr()), c_void_p(unsqueeze_2422.data_ptr()), c_void_p(squeeze_73.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(buf1060.data_ptr()), c_void_p(buf1062.data_ptr()))
    del convolution_24
    del le_143
    del primals_74
    del squeeze_73
    del unsqueeze_2422
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1064 = aten.convolution_backward(buf1062, getitem_134, primals_73, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1062
    del getitem_134
    del primals_73
    buf1065 = buf1064[0]
    buf1066 = buf1064[1]
    del buf1064
    buf1067 = buf1044; del buf1044  # reuse
    buf1068 = buf1033; del buf1033  # reuse
    buf1069 = empty((208, ), device='cpu', dtype=torch.float32)
    buf1070 = empty((208, ), device='cpu', dtype=torch.float32)
    buf1071 = buf1067; del buf1067  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_146(c_void_p(buf1071.data_ptr()), c_void_p(le_144.data_ptr()), c_void_p(buf1065.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(convolution_23.data_ptr()), c_void_p(unsqueeze_2434.data_ptr()), c_void_p(squeeze_70.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(buf1068.data_ptr()), c_void_p(buf1069.data_ptr()), c_void_p(buf1070.data_ptr()))
    del buf1051
    del buf1058
    del convolution_23
    del le_144
    del primals_71
    del squeeze_70
    del unsqueeze_2434
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1072 = aten.convolution_backward(buf1071, relu_20, primals_70, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_70
    buf1073 = buf1072[0]
    buf1074 = buf1072[1]
    del buf1072
    buf1075 = buf1002; del buf1002  # reuse
    buf1076 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1077 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1083 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1078 = empty((512, ), device='cpu', dtype=torch.float32)
    buf1079 = buf1041; del buf1041  # reuse
    buf1085 = buf964; del buf964  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_147(c_void_p(buf1075.data_ptr()), c_void_p(relu_20.data_ptr()), c_void_p(relu_25.data_ptr()), c_void_p(buf1037.data_ptr()), c_void_p(buf1073.data_ptr()), c_void_p(convolution_22.data_ptr()), c_void_p(unsqueeze_2446.data_ptr()), c_void_p(convolution_21.data_ptr()), c_void_p(unsqueeze_2458.data_ptr()), c_void_p(squeeze_67.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(squeeze_64.data_ptr()), c_void_p(primals_65.data_ptr()), c_void_p(buf1076.data_ptr()), c_void_p(buf1077.data_ptr()), c_void_p(buf1083.data_ptr()), c_void_p(buf1078.data_ptr()), c_void_p(buf1079.data_ptr()), c_void_p(buf1085.data_ptr()))
    del buf1037
    del buf1073
    del buf1075
    del buf1077
    del convolution_21
    del convolution_22
    del primals_65
    del primals_68
    del relu_20
    del relu_25
    del squeeze_67
    del unsqueeze_2446
    del unsqueeze_2458
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1080 = aten.convolution_backward(buf1079, relu_15, primals_67, [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1079
    del primals_67
    buf1081 = buf1080[0]
    buf1082 = buf1080[1]
    del buf1080
    buf1084 = buf1083; del buf1083  # reuse
    cpp_fused_native_batch_norm_backward_148(c_void_p(buf1084.data_ptr()), c_void_p(squeeze_64.data_ptr()))
    del squeeze_64
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1086 = aten.convolution_backward(buf1085, cat_3, primals_64, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1085
    del cat_3
    del primals_64
    buf1087 = buf1086[0]
    buf1088 = buf1086[1]
    del buf1086
    buf1089 = reinterpret_tensor(buf1071, (8, 52, 56, 56), (163072, 3136, 56, 1), 0); del buf1071  # reuse
    buf1090 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1091 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1092 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1093 = buf1065; del buf1065  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_149(c_void_p(buf1087.data_ptr()), c_void_p(le_146.data_ptr()), c_void_p(convolution_20.data_ptr()), c_void_p(unsqueeze_2470.data_ptr()), c_void_p(squeeze_61.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(buf1089.data_ptr()), c_void_p(buf1090.data_ptr()), c_void_p(buf1091.data_ptr()), c_void_p(buf1092.data_ptr()), c_void_p(buf1093.data_ptr()))
    del convolution_20
    del le_146
    del primals_62
    del squeeze_61
    del unsqueeze_2470
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1094 = aten.convolution_backward(buf1093, getitem_116, primals_61, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_116
    del primals_61
    buf1095 = buf1094[0]
    buf1096 = buf1094[1]
    del buf1094
    buf1097 = buf1091; del buf1091  # reuse
    buf1098 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1099 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1100 = buf1093; del buf1093  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_150(c_void_p(le_147.data_ptr()), c_void_p(buf1087.data_ptr()), c_void_p(convolution_19.data_ptr()), c_void_p(unsqueeze_2482.data_ptr()), c_void_p(squeeze_58.data_ptr()), c_void_p(primals_59.data_ptr()), c_void_p(buf1097.data_ptr()), c_void_p(buf1098.data_ptr()), c_void_p(buf1099.data_ptr()), c_void_p(buf1100.data_ptr()))
    del convolution_19
    del le_147
    del primals_59
    del squeeze_58
    del unsqueeze_2482
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1101 = aten.convolution_backward(buf1100, getitem_109, primals_58, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_109
    del primals_58
    buf1102 = buf1101[0]
    buf1103 = buf1101[1]
    del buf1101
    buf1104 = buf1098; del buf1098  # reuse
    buf1105 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1106 = empty((52, ), device='cpu', dtype=torch.float32)
    buf1107 = buf1100; del buf1100  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_151(c_void_p(le_148.data_ptr()), c_void_p(buf1087.data_ptr()), c_void_p(convolution_18.data_ptr()), c_void_p(unsqueeze_2494.data_ptr()), c_void_p(squeeze_55.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(buf1104.data_ptr()), c_void_p(buf1105.data_ptr()), c_void_p(buf1106.data_ptr()), c_void_p(buf1107.data_ptr()))
    del buf1087
    del buf1105
    del convolution_18
    del le_148
    del primals_56
    del squeeze_55
    del unsqueeze_2494
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1108 = aten.convolution_backward(buf1107, getitem_102, primals_55, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1107
    del getitem_102
    del primals_55
    buf1109 = buf1108[0]
    buf1110 = buf1108[1]
    del buf1108
    buf1111 = empty_strided((8, 208, 56, 56), (652288, 1, 11648, 208), device='cpu', dtype=torch.float32)
    buf1112 = buf1069; del buf1069  # reuse
    buf1113 = empty((208, ), device='cpu', dtype=torch.float32)
    buf1114 = empty((208, ), device='cpu', dtype=torch.float32)
    buf1115 = buf1111; del buf1111  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_152(c_void_p(buf1115.data_ptr()), c_void_p(le_149.data_ptr()), c_void_p(buf1109.data_ptr()), c_void_p(buf1102.data_ptr()), c_void_p(buf1095.data_ptr()), c_void_p(buf1089.data_ptr()), c_void_p(convolution_17.data_ptr()), c_void_p(unsqueeze_2506.data_ptr()), c_void_p(squeeze_52.data_ptr()), c_void_p(primals_53.data_ptr()), c_void_p(buf1112.data_ptr()), c_void_p(buf1113.data_ptr()), c_void_p(buf1114.data_ptr()))
    del buf1089
    del buf1095
    del buf1102
    del buf1109
    del buf1113
    del convolution_17
    del le_149
    del primals_53
    del squeeze_52
    del unsqueeze_2506
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1116 = aten.convolution_backward(buf1115, relu_15, primals_52, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1115
    del primals_52
    buf1117 = buf1116[0]
    buf1118 = buf1116[1]
    del buf1116
    buf1119 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1120 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1121 = empty_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    buf1122 = buf1120; del buf1120  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_153(c_void_p(buf1122.data_ptr()), c_void_p(relu_15.data_ptr()), c_void_p(buf1081.data_ptr()), c_void_p(buf1117.data_ptr()), c_void_p(convolution_16.data_ptr()), c_void_p(unsqueeze_2518.data_ptr()), c_void_p(squeeze_49.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(buf1119.data_ptr()), c_void_p(buf1121.data_ptr()))
    del convolution_16
    del primals_50
    del squeeze_49
    del unsqueeze_2518
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1123 = aten.convolution_backward(buf1121, cat_2, primals_49, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_2
    del primals_49
    buf1124 = buf1123[0]
    buf1125 = buf1123[1]
    del buf1123
    buf1126 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1127 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1128 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1129 = reinterpret_tensor(buf956, (8, 26, 56, 56), (81536, 1, 1456, 26), 0); del buf956  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_154(c_void_p(le_151.data_ptr()), c_void_p(buf1124.data_ptr()), c_void_p(convolution_15.data_ptr()), c_void_p(unsqueeze_2530.data_ptr()), c_void_p(squeeze_46.data_ptr()), c_void_p(primals_47.data_ptr()), c_void_p(buf1126.data_ptr()), c_void_p(buf1127.data_ptr()), c_void_p(buf1128.data_ptr()), c_void_p(buf1129.data_ptr()))
    del convolution_15
    del le_151
    del primals_47
    del squeeze_46
    del unsqueeze_2530
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1130 = aten.convolution_backward(buf1129, add_80, primals_46, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_80
    del primals_46
    buf1131 = buf1130[0]
    buf1132 = buf1130[1]
    del buf1130
    buf1133 = buf1127; del buf1127  # reuse
    buf1134 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1135 = buf1129; del buf1129  # reuse
    buf1136 = buf1134; del buf1134  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_155(c_void_p(buf1136.data_ptr()), c_void_p(le_152.data_ptr()), c_void_p(buf1124.data_ptr()), c_void_p(buf1131.data_ptr()), c_void_p(convolution_14.data_ptr()), c_void_p(unsqueeze_2542.data_ptr()), c_void_p(squeeze_43.data_ptr()), c_void_p(primals_44.data_ptr()), c_void_p(buf1133.data_ptr()), c_void_p(buf1135.data_ptr()))
    del convolution_14
    del le_152
    del primals_44
    del squeeze_43
    del unsqueeze_2542
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1137 = aten.convolution_backward(buf1135, add_74, primals_43, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_74
    del primals_43
    buf1138 = buf1137[0]
    buf1139 = buf1137[1]
    del buf1137
    buf1140 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1141 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1142 = buf1135; del buf1135  # reuse
    buf1143 = buf1141; del buf1141  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_156(c_void_p(buf1143.data_ptr()), c_void_p(le_153.data_ptr()), c_void_p(buf1124.data_ptr()), c_void_p(buf1138.data_ptr()), c_void_p(convolution_13.data_ptr()), c_void_p(unsqueeze_2554.data_ptr()), c_void_p(squeeze_40.data_ptr()), c_void_p(primals_41.data_ptr()), c_void_p(buf1140.data_ptr()), c_void_p(buf1142.data_ptr()))
    del convolution_13
    del le_153
    del primals_41
    del squeeze_40
    del unsqueeze_2554
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1144 = aten.convolution_backward(buf1142, getitem_72, primals_40, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1142
    del getitem_72
    del primals_40
    buf1145 = buf1144[0]
    buf1146 = buf1144[1]
    del buf1144
    buf1147 = buf1124; del buf1124  # reuse
    buf1148 = buf952; del buf952  # reuse
    buf1149 = empty((104, ), device='cpu', dtype=torch.float32)
    buf1150 = empty((104, ), device='cpu', dtype=torch.float32)
    buf1151 = buf1147; del buf1147  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_157(c_void_p(buf1151.data_ptr()), c_void_p(le_154.data_ptr()), c_void_p(buf1145.data_ptr()), c_void_p(buf1138.data_ptr()), c_void_p(buf1131.data_ptr()), c_void_p(convolution_12.data_ptr()), c_void_p(unsqueeze_2566.data_ptr()), c_void_p(squeeze_37.data_ptr()), c_void_p(primals_38.data_ptr()), c_void_p(buf1148.data_ptr()), c_void_p(buf1149.data_ptr()), c_void_p(buf1150.data_ptr()))
    del buf1131
    del buf1138
    del convolution_12
    del le_154
    del primals_38
    del squeeze_37
    del unsqueeze_2566
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1152 = aten.convolution_backward(buf1151, relu_10, primals_37, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1151
    del primals_37
    buf1153 = buf1152[0]
    buf1154 = buf1152[1]
    del buf1152
    buf1155 = buf1081; del buf1081  # reuse
    buf1156 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1157 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1158 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1159 = buf1121; del buf1121  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_158(c_void_p(buf1155.data_ptr()), c_void_p(relu_10.data_ptr()), c_void_p(relu_15.data_ptr()), c_void_p(buf1117.data_ptr()), c_void_p(buf1153.data_ptr()), c_void_p(convolution_11.data_ptr()), c_void_p(unsqueeze_2578.data_ptr()), c_void_p(squeeze_34.data_ptr()), c_void_p(primals_35.data_ptr()), c_void_p(buf1156.data_ptr()), c_void_p(buf1157.data_ptr()), c_void_p(buf1158.data_ptr()), c_void_p(buf1159.data_ptr()))
    del buf1117
    del convolution_11
    del primals_35
    del relu_10
    del relu_15
    del squeeze_34
    del unsqueeze_2578
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1160 = aten.convolution_backward(buf1159, cat_1, primals_34, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del cat_1
    del primals_34
    buf1161 = buf1160[0]
    buf1162 = buf1160[1]
    del buf1160
    buf1163 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1164 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1165 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1166 = buf1145; del buf1145  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_159(c_void_p(le_156.data_ptr()), c_void_p(buf1161.data_ptr()), c_void_p(convolution_10.data_ptr()), c_void_p(unsqueeze_2590.data_ptr()), c_void_p(squeeze_31.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(buf1163.data_ptr()), c_void_p(buf1164.data_ptr()), c_void_p(buf1165.data_ptr()), c_void_p(buf1166.data_ptr()))
    del convolution_10
    del le_156
    del primals_32
    del squeeze_31
    del unsqueeze_2590
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1167 = aten.convolution_backward(buf1166, add_52, primals_31, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_52
    del primals_31
    buf1168 = buf1167[0]
    buf1169 = buf1167[1]
    del buf1167
    buf1170 = buf1164; del buf1164  # reuse
    buf1171 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1172 = buf1166; del buf1166  # reuse
    buf1173 = buf1171; del buf1171  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_160(c_void_p(buf1173.data_ptr()), c_void_p(le_157.data_ptr()), c_void_p(buf1161.data_ptr()), c_void_p(buf1168.data_ptr()), c_void_p(convolution_9.data_ptr()), c_void_p(unsqueeze_2602.data_ptr()), c_void_p(squeeze_28.data_ptr()), c_void_p(primals_29.data_ptr()), c_void_p(buf1170.data_ptr()), c_void_p(buf1172.data_ptr()))
    del convolution_9
    del le_157
    del primals_29
    del squeeze_28
    del unsqueeze_2602
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1174 = aten.convolution_backward(buf1172, add_46, primals_28, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del add_46
    del primals_28
    buf1175 = buf1174[0]
    buf1176 = buf1174[1]
    del buf1174
    buf1177 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1178 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1179 = buf1172; del buf1172  # reuse
    buf1180 = buf1178; del buf1178  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_161(c_void_p(buf1180.data_ptr()), c_void_p(le_158.data_ptr()), c_void_p(buf1161.data_ptr()), c_void_p(buf1175.data_ptr()), c_void_p(convolution_8.data_ptr()), c_void_p(unsqueeze_2614.data_ptr()), c_void_p(squeeze_25.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(buf1177.data_ptr()), c_void_p(buf1179.data_ptr()))
    del convolution_8
    del le_158
    del primals_26
    del squeeze_25
    del unsqueeze_2614
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1181 = aten.convolution_backward(buf1179, getitem_42, primals_25, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1179
    del getitem_42
    del primals_25
    buf1182 = buf1181[0]
    buf1183 = buf1181[1]
    del buf1181
    buf1184 = buf1161; del buf1161  # reuse
    buf1185 = buf1149; del buf1149  # reuse
    buf1186 = empty((104, ), device='cpu', dtype=torch.float32)
    buf1187 = empty((104, ), device='cpu', dtype=torch.float32)
    buf1188 = buf1184; del buf1184  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_162(c_void_p(buf1188.data_ptr()), c_void_p(le_159.data_ptr()), c_void_p(buf1182.data_ptr()), c_void_p(buf1175.data_ptr()), c_void_p(buf1168.data_ptr()), c_void_p(convolution_7.data_ptr()), c_void_p(unsqueeze_2626.data_ptr()), c_void_p(squeeze_22.data_ptr()), c_void_p(primals_23.data_ptr()), c_void_p(buf1185.data_ptr()), c_void_p(buf1186.data_ptr()), c_void_p(buf1187.data_ptr()))
    del buf1168
    del convolution_7
    del le_159
    del primals_23
    del squeeze_22
    del unsqueeze_2626
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1189 = aten.convolution_backward(buf1188, relu_5, primals_22, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1188
    del primals_22
    buf1190 = buf1189[0]
    buf1191 = buf1189[1]
    del buf1189
    buf1192 = buf1157; del buf1157  # reuse
    buf1193 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1199 = empty((256, ), device='cpu', dtype=torch.float32)
    buf1194 = buf1159; del buf1159  # reuse
    buf1200 = buf1153; del buf1153  # reuse
    buf1195 = buf1193; del buf1193  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_163(c_void_p(buf1195.data_ptr()), c_void_p(relu_5.data_ptr()), c_void_p(buf1155.data_ptr()), c_void_p(buf1190.data_ptr()), c_void_p(convolution_6.data_ptr()), c_void_p(unsqueeze_2638.data_ptr()), c_void_p(convolution_5.data_ptr()), c_void_p(unsqueeze_2650.data_ptr()), c_void_p(squeeze_19.data_ptr()), c_void_p(primals_20.data_ptr()), c_void_p(squeeze_16.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(buf1192.data_ptr()), c_void_p(buf1199.data_ptr()), c_void_p(buf1194.data_ptr()), c_void_p(buf1200.data_ptr()))
    del buf1155
    del buf1190
    del convolution_5
    del convolution_6
    del primals_17
    del primals_20
    del relu_5
    del squeeze_19
    del unsqueeze_2638
    del unsqueeze_2650
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1196 = aten.convolution_backward(buf1194, getitem_2, primals_19, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1194
    del primals_19
    buf1197 = buf1196[0]
    buf1198 = buf1196[1]
    del buf1196
    buf1201 = buf1199; del buf1199  # reuse
    cpp_fused_native_batch_norm_backward_164(c_void_p(buf1201.data_ptr()), c_void_p(squeeze_16.data_ptr()))
    del squeeze_16
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1202 = aten.convolution_backward(buf1200, cat, primals_16, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1200
    del cat
    del primals_16
    buf1203 = buf1202[0]
    buf1204 = buf1202[1]
    del buf1202
    buf1205 = reinterpret_tensor(buf1182, (8, 26, 56, 56), (81536, 3136, 56, 1), 0); del buf1182  # reuse
    buf1206 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1207 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1208 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1209 = buf1175; del buf1175  # reuse
    cpp_fused_avg_pool2d_backward_convolution_backward_native_batch_norm_backward_threshold_backward_165(c_void_p(buf1203.data_ptr()), c_void_p(le_161.data_ptr()), c_void_p(convolution_4.data_ptr()), c_void_p(unsqueeze_2662.data_ptr()), c_void_p(squeeze_13.data_ptr()), c_void_p(primals_14.data_ptr()), c_void_p(buf1205.data_ptr()), c_void_p(buf1206.data_ptr()), c_void_p(buf1207.data_ptr()), c_void_p(buf1208.data_ptr()), c_void_p(buf1209.data_ptr()))
    del convolution_4
    del le_161
    del primals_14
    del squeeze_13
    del unsqueeze_2662
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1210 = aten.convolution_backward(buf1209, getitem_24, primals_13, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_24
    del primals_13
    buf1211 = buf1210[0]
    buf1212 = buf1210[1]
    del buf1210
    buf1213 = buf1207; del buf1207  # reuse
    buf1214 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1215 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1216 = buf1209; del buf1209  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_166(c_void_p(le_162.data_ptr()), c_void_p(buf1203.data_ptr()), c_void_p(convolution_3.data_ptr()), c_void_p(unsqueeze_2674.data_ptr()), c_void_p(squeeze_10.data_ptr()), c_void_p(primals_11.data_ptr()), c_void_p(buf1213.data_ptr()), c_void_p(buf1214.data_ptr()), c_void_p(buf1215.data_ptr()), c_void_p(buf1216.data_ptr()))
    del convolution_3
    del le_162
    del primals_11
    del squeeze_10
    del unsqueeze_2674
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1217 = aten.convolution_backward(buf1216, getitem_17, primals_10, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del getitem_17
    del primals_10
    buf1218 = buf1217[0]
    buf1219 = buf1217[1]
    del buf1217
    buf1220 = buf1214; del buf1214  # reuse
    buf1221 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1222 = empty((26, ), device='cpu', dtype=torch.float32)
    buf1223 = buf1216; del buf1216  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_167(c_void_p(le_163.data_ptr()), c_void_p(buf1203.data_ptr()), c_void_p(convolution_2.data_ptr()), c_void_p(unsqueeze_2686.data_ptr()), c_void_p(squeeze_7.data_ptr()), c_void_p(primals_8.data_ptr()), c_void_p(buf1220.data_ptr()), c_void_p(buf1221.data_ptr()), c_void_p(buf1222.data_ptr()), c_void_p(buf1223.data_ptr()))
    del buf1221
    del convolution_2
    del le_163
    del primals_8
    del squeeze_7
    del unsqueeze_2686
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1224 = aten.convolution_backward(buf1223, getitem_10, primals_7, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1223
    del getitem_10
    del primals_7
    buf1225 = buf1224[0]
    buf1226 = buf1224[1]
    del buf1224
    buf1227 = buf1203; del buf1203  # reuse
    buf1228 = buf1186; del buf1186  # reuse
    buf1229 = empty((104, ), device='cpu', dtype=torch.float32)
    buf1230 = empty((104, ), device='cpu', dtype=torch.float32)
    buf1231 = buf1227; del buf1227  # reuse
    cpp_fused_cat_convolution_backward_native_batch_norm_backward_threshold_backward_168(c_void_p(buf1231.data_ptr()), c_void_p(le_164.data_ptr()), c_void_p(buf1225.data_ptr()), c_void_p(buf1218.data_ptr()), c_void_p(buf1211.data_ptr()), c_void_p(buf1205.data_ptr()), c_void_p(convolution_1.data_ptr()), c_void_p(unsqueeze_2698.data_ptr()), c_void_p(squeeze_4.data_ptr()), c_void_p(primals_5.data_ptr()), c_void_p(buf1228.data_ptr()), c_void_p(buf1229.data_ptr()), c_void_p(buf1230.data_ptr()))
    del buf1205
    del buf1211
    del buf1218
    del buf1225
    del buf1229
    del convolution_1
    del le_164
    del primals_5
    del squeeze_4
    del unsqueeze_2698
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1232 = aten.convolution_backward(buf1231, getitem_2, primals_4, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1231
    del getitem_2
    del primals_4
    buf1233 = buf1232[0]
    buf1234 = buf1232[1]
    del buf1232
    buf1235 = buf1197; del buf1197  # reuse
    cpp_fused_add_169(c_void_p(buf1235.data_ptr()), c_void_p(buf1233.data_ptr()))
    del buf1233
    # Source Nodes: [], Original ATen: [aten.add, aten.max_pool2d_with_indices_backward]
    buf1236 = aten.max_pool2d_with_indices_backward(buf1235, relu, [3, 3], [2, 2], [1, 1], [1, 1], False, getitem_3)
    del buf1235
    del getitem_3
    buf1237 = buf1236
    del buf1236
    buf1238 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1239 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1240 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1241 = buf1237; del buf1237  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_170(c_void_p(buf1241.data_ptr()), c_void_p(relu.data_ptr()), c_void_p(convolution.data_ptr()), c_void_p(unsqueeze_2710.data_ptr()), c_void_p(squeeze_1.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(buf1238.data_ptr()), c_void_p(buf1239.data_ptr()), c_void_p(buf1240.data_ptr()))
    del buf1239
    del convolution
    del primals_2
    del relu
    del squeeze_1
    del unsqueeze_2710
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1242 = aten.convolution_backward(buf1241, primals_1023, primals_1, [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False])
    del buf1241
    del primals_1
    del primals_1023
    buf1243 = buf1242[1]
    return (buf1243, buf1240, buf1238, buf1234, buf1230, buf1228, buf1226, buf1222, buf1220, buf1219, buf1215, buf1213, buf1212, buf1208, buf1206, buf1204, buf1201, buf1192, buf1198, buf1195, buf1192, buf1191, buf1187, buf1185, buf1183, buf1180, buf1177, buf1176, buf1173, buf1170, buf1169, buf1165, buf1163, buf1162, buf1158, buf1156, buf1154, buf1150, buf1148, buf1146, buf1143, buf1140, buf1139, buf1136, buf1133, buf1132, buf1128, buf1126, buf1125, buf1122, buf1119, buf1118, buf1114, buf1112, buf1110, buf1106, buf1104, buf1103, buf1099, buf1097, buf1096, buf1092, buf1090, buf1088, buf1084, buf1076, buf1082, buf1078, buf1076, buf1074, buf1070, buf1068, buf1066, buf1063, buf1060, buf1059, buf1056, buf1053, buf1052, buf1048, buf1046, buf1045, buf1042, buf1039, buf1038, buf1034, buf1032, buf1030, buf1027, buf1024, buf1023, buf1020, buf1017, buf1016, buf1012, buf1010, buf1009, buf1005, buf1003, buf1001, buf997, buf995, buf993, buf990, buf987, buf986, buf983, buf980, buf979, buf975, buf973, buf972, buf969, buf966, buf965, buf961, buf959, buf957, buf953, buf951, buf950, buf946, buf944, buf943, buf939, buf937, buf935, buf932, buf923, buf929, buf926, buf923, buf922, buf918, buf916, buf914, buf911, buf908, buf907, buf904, buf901, buf900, buf896, buf894, buf893, buf889, buf887, buf885, buf881, buf879, buf877, buf874, buf871, buf870, buf867, buf864, buf863, buf859, buf857, buf856, buf853, buf850, buf849, buf845, buf843, buf841, buf838, buf835, buf834, buf831, buf828, buf827, buf823, buf821, buf820, buf816, buf814, buf812, buf808, buf806, buf804, buf801, buf798, buf797, buf794, buf791, buf790, buf786, buf784, buf783, buf780, buf777, buf776, buf772, buf770, buf768, buf765, buf762, buf761, buf758, buf755, buf754, buf750, buf748, buf747, buf743, buf741, buf739, buf735, buf733, buf731, buf728, buf725, buf724, buf721, buf718, buf717, buf713, buf711, buf710, buf707, buf704, buf703, buf699, buf697, buf695, buf692, buf689, buf688, buf685, buf682, buf681, buf677, buf675, buf674, buf670, buf668, buf666, buf662, buf660, buf658, buf655, buf652, buf651, buf648, buf645, buf644, buf640, buf638, buf637, buf634, buf631, buf630, buf626, buf624, buf622, buf619, buf616, buf615, buf612, buf609, buf608, buf604, buf602, buf601, buf597, buf595, buf593, buf589, buf587, buf585, buf582, buf579, buf578, buf575, buf572, buf571, buf567, buf565, buf564, buf561, buf558, buf557, buf553, buf551, buf549, buf546, buf543, buf542, buf539, buf536, buf535, buf531, buf529, buf528, buf524, buf522, buf520, buf516, buf514, buf512, buf509, buf506, buf505, buf502, buf499, buf498, buf494, buf492, buf491, buf488, buf485, buf484, buf480, buf478, buf476, buf473, buf470, buf469, buf466, buf463, buf462, buf458, buf456, buf455, buf451, buf449, buf447, buf443, buf441, buf439, buf436, buf433, buf432, buf429, buf426, buf425, buf421, buf419, buf418, buf415, buf412, buf411, buf407, buf405, buf403, buf400, buf397, buf396, buf393, buf390, buf389, buf385, buf383, buf382, buf378, buf376, buf374, buf370, buf368, buf366, buf363, buf360, buf359, buf356, buf353, buf352, buf348, buf346, buf345, buf342, buf339, buf338, buf334, buf332, buf330, buf327, buf324, buf323, buf320, buf317, buf316, buf312, buf310, buf309, buf305, buf303, buf301, buf297, buf295, buf293, buf290, buf287, buf286, buf283, buf280, buf279, buf275, buf273, buf272, buf269, buf266, buf265, buf261, buf259, buf257, buf254, buf251, buf250, buf247, buf244, buf243, buf239, buf237, buf236, buf232, buf230, buf228, buf224, buf222, buf220, buf217, buf214, buf213, buf210, buf207, buf206, buf202, buf200, buf199, buf196, buf193, buf192, buf188, buf186, buf184, buf181, buf178, buf177, buf174, buf171, buf170, buf166, buf164, buf163, buf159, buf157, buf155, buf151, buf149, buf147, buf144, buf141, buf140, buf137, buf134, buf133, buf129, buf127, buf126, buf123, buf120, buf119, buf115, buf113, buf111, buf107, buf105, buf104, buf100, buf98, buf97, buf93, buf91, buf89, buf85, buf77, buf83, buf79, buf77, buf75, buf71, buf69, buf67, buf64, buf61, buf60, buf57, buf54, buf53, buf49, buf47, buf46, buf42, buf39, buf38, buf34, buf32, buf30, buf27, buf24, buf23, buf20, buf17, buf16, buf12, buf10, buf9, buf5, buf3, reinterpret_tensor(buf1, (1000, 2048), (2048, 1), 0), reinterpret_tensor(buf2, (1000, ), (1, ), 0), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((64, 3, 7, 7), (147, 1, 21, 3), device='cpu', dtype=torch.float32)
    primals_2 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((104, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_8 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_11 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_14 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_16 = rand_strided((256, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_20 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_22 = rand_strided((104, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_23 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_26 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_29 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_32 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((256, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_35 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_37 = rand_strided((104, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_38 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_41 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_43 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_44 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((26, 26, 3, 3), (234, 1, 78, 26), device='cpu', dtype=torch.float32)
    primals_47 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((256, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_50 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((208, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_53 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_59 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_61 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_64 = rand_strided((512, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_65 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_67 = rand_strided((512, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_70 = rand_strided((208, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_71 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_76 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_77 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_80 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((512, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_83 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_85 = rand_strided((208, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_86 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_88 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_89 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_92 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_95 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((512, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_98 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((208, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_101 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_104 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_107 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_109 = rand_strided((52, 52, 3, 3), (468, 1, 156, 52), device='cpu', dtype=torch.float32)
    primals_110 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((512, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_113 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((416, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_116 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_118 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_119 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_121 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_122 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_125 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_128 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_130 = rand_strided((1024, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_131 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_134 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_137 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_140 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_143 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_145 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_146 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_148 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_149 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_151 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_154 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_155 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_157 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_158 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_160 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_161 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_164 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_166 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_169 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_170 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_173 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_176 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_179 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_181 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_182 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_185 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_188 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_190 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_191 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_197 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_199 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_203 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_206 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_209 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_212 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_214 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_215 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_218 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_220 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_223 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_224 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_226 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_227 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_230 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_233 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_235 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_236 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_238 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_239 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_244 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_245 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_250 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_251 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_253 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_254 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_256 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_257 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_260 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_262 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_263 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_265 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_266 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_268 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_269 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_272 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_274 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_277 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_278 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_281 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_284 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_286 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_287 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_289 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_290 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_292 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_293 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_296 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_299 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_302 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_304 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_305 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_307 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_308 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_310 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_311 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_316 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_317 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_319 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_320 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_322 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_323 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_326 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_328 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_331 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_332 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_334 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_335 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_338 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_340 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_341 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_343 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_344 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_346 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_347 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_350 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_352 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_353 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_356 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_358 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_359 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_362 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_364 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_367 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_368 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_370 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_371 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_374 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_376 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_377 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_379 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_380 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_382 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_383 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_385 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_386 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_388 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_389 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_391 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_392 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_394 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_395 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_397 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_398 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_400 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_401 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_403 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_404 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_406 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_407 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_409 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_410 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_412 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_413 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_415 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_416 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_418 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_419 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_421 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_422 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_424 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_425 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_427 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_428 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_430 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_431 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_433 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_434 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_436 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_437 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_439 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_440 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_442 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_443 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_445 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_446 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_448 = rand_strided((416, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_449 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    primals_451 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_452 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_454 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_455 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_457 = rand_strided((104, 104, 3, 3), (936, 1, 312, 104), device='cpu', dtype=torch.float32)
    primals_458 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    primals_460 = rand_strided((1024, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_461 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_463 = rand_strided((832, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_464 = rand_strided((832, ), (1, ), device='cpu', dtype=torch.float32)
    primals_466 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_467 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_469 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_470 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_472 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_473 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_475 = rand_strided((2048, 832, 1, 1), (832, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_476 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_478 = rand_strided((2048, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_479 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_481 = rand_strided((832, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_482 = rand_strided((832, ), (1, ), device='cpu', dtype=torch.float32)
    primals_484 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_485 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_487 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_488 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_490 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_491 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_493 = rand_strided((2048, 832, 1, 1), (832, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_494 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_496 = rand_strided((832, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_497 = rand_strided((832, ), (1, ), device='cpu', dtype=torch.float32)
    primals_499 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_500 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_502 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_503 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_505 = rand_strided((208, 208, 3, 3), (1872, 1, 624, 208), device='cpu', dtype=torch.float32)
    primals_506 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    primals_508 = rand_strided((2048, 832, 1, 1), (832, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_509 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_1023 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    convolution = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    squeeze_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    getitem_2 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    getitem_3 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.int64)
    convolution_1 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    squeeze_4 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_10 = rand_strided((8, 26, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_2 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_7 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_17 = rand_strided((8, 26, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_3 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_10 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_24 = rand_strided((8, 26, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_4 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_13 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_31 = rand_strided((8, 26, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    cat = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_5 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_16 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_6 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_19 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_5 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_7 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    squeeze_22 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_42 = rand_strided((8, 26, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_8 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_25 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    add_46 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    convolution_9 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_28 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    add_52 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    convolution_10 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_31 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    cat_1 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_11 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_34 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_10 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_12 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    squeeze_37 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_72 = rand_strided((8, 26, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_13 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_40 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    add_74 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    convolution_14 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_43 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    add_80 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    convolution_15 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.float32)
    squeeze_46 = rand_strided((26, ), (1, ), device='cpu', dtype=torch.float32)
    cat_2 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.float32)
    convolution_16 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_49 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_15 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_17 = rand_strided((8, 208, 56, 56), (652288, 1, 11648, 208), device='cpu', dtype=torch.float32)
    squeeze_52 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_102 = rand_strided((8, 52, 56, 56), (652288, 1, 11648, 208), device='cpu', dtype=torch.float32)
    convolution_18 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_55 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_109 = rand_strided((8, 52, 56, 56), (652288, 1, 11648, 208), device='cpu', dtype=torch.float32)
    convolution_19 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_58 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_116 = rand_strided((8, 52, 56, 56), (652288, 1, 11648, 208), device='cpu', dtype=torch.float32)
    convolution_20 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_61 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_123 = rand_strided((8, 52, 56, 56), (652288, 1, 11648, 208), device='cpu', dtype=torch.float32)
    cat_3 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    convolution_21 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_64 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_22 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_67 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_20 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_23 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    squeeze_70 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_134 = rand_strided((8, 52, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    convolution_24 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_73 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    add_133 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    convolution_25 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_76 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    add_139 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    convolution_26 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_79 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    cat_4 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    convolution_27 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_82 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_25 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_28 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    squeeze_85 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_164 = rand_strided((8, 52, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    convolution_29 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_88 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    add_161 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    convolution_30 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_91 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    add_167 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    convolution_31 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_94 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    cat_5 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    convolution_32 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_97 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_30 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_33 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    squeeze_100 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_194 = rand_strided((8, 52, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    convolution_34 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_103 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    add_189 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    convolution_35 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_106 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    add_195 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    convolution_36 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.float32)
    squeeze_109 = rand_strided((52, ), (1, ), device='cpu', dtype=torch.float32)
    cat_6 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.float32)
    convolution_37 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    squeeze_112 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    relu_35 = rand_strided((8, 512, 28, 28), (401408, 1, 14336, 512), device='cpu', dtype=torch.float32)
    convolution_38 = rand_strided((8, 416, 28, 28), (326144, 1, 11648, 416), device='cpu', dtype=torch.float32)
    squeeze_115 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_224 = rand_strided((8, 104, 28, 28), (326144, 1, 11648, 416), device='cpu', dtype=torch.float32)
    convolution_39 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_118 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_231 = rand_strided((8, 104, 28, 28), (326144, 1, 11648, 416), device='cpu', dtype=torch.float32)
    convolution_40 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_121 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_238 = rand_strided((8, 104, 28, 28), (326144, 1, 11648, 416), device='cpu', dtype=torch.float32)
    convolution_41 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_124 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_245 = rand_strided((8, 104, 28, 28), (326144, 1, 11648, 416), device='cpu', dtype=torch.float32)
    cat_7 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_42 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_127 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_43 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_130 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_40 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_44 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_133 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_256 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_45 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_136 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_248 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_46 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_139 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_254 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_47 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_142 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_8 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_48 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_145 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_45 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_49 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_148 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_286 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_50 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_151 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_276 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_51 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_154 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_282 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_52 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_157 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_9 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_53 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_160 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_50 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_54 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_163 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_316 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_55 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_166 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_304 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_56 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_169 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_310 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_57 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_172 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_10 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_58 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_175 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_55 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_59 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_178 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_346 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_60 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_181 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_332 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_61 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_184 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_338 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_62 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_187 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_11 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_63 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_190 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_60 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_64 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_193 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_376 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_65 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_196 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_360 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_66 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_199 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_366 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_67 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_202 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_12 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_68 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_205 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_65 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_69 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_208 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_406 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_70 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_211 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_388 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_71 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_214 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_394 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_72 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_217 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_13 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_73 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_220 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_70 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_74 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_223 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_436 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_75 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_226 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_416 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_76 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_229 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_422 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_77 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_232 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_14 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_78 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_235 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_75 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_79 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_238 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_466 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_80 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_241 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_444 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_81 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_244 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_450 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_82 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_247 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_15 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_83 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_250 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_80 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_84 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_253 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_496 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_85 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_256 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_472 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_86 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_259 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_478 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_87 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_262 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_16 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_88 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_265 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_85 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_89 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_268 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_526 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_90 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_271 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_500 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_91 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_274 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_506 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_92 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_277 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_17 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_93 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_280 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_90 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_94 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_283 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_556 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_95 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_286 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_528 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_96 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_289 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_534 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_97 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_292 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_18 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_98 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_295 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_95 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_99 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_298 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_586 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_100 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_301 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_556 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_101 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_304 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_562 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_102 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_307 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_19 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_103 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_310 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_100 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_104 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_313 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_616 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_105 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_316 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_584 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_106 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_319 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_590 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_107 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_322 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_20 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_108 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_325 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_105 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_109 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_328 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_646 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_110 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_331 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_612 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_111 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_334 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_618 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_112 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_337 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_21 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_113 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_340 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_110 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_114 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_343 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_676 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_115 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_346 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_640 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_116 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_349 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_646 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_117 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_352 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_22 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_118 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_355 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_115 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_119 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_358 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_706 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_120 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_361 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_668 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_121 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_364 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_674 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_122 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_367 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_23 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_123 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_370 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_120 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_124 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_373 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_736 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_125 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_376 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_696 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_126 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_379 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_702 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_127 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_382 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_24 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_128 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_385 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_125 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_129 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_388 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_766 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_130 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_391 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_724 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_131 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_394 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_730 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_132 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_397 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_25 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_133 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_400 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_130 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_134 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_403 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_796 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_135 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_406 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_752 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_136 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_409 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_758 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_137 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_412 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_26 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_138 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_415 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_135 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_139 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_418 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_826 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_140 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_421 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_780 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_141 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_424 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_786 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_142 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_427 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_27 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_143 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_430 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_140 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_144 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_433 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_856 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_145 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_436 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_808 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_146 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_439 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_814 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_147 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_442 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_28 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_148 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_445 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_145 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_149 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    squeeze_448 = rand_strided((416, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_886 = rand_strided((8, 104, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_150 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_451 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_836 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_151 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_454 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    add_842 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    convolution_152 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.float32)
    squeeze_457 = rand_strided((104, ), (1, ), device='cpu', dtype=torch.float32)
    cat_29 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.float32)
    convolution_153 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    squeeze_460 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    relu_150 = rand_strided((8, 1024, 14, 14), (200704, 1, 14336, 1024), device='cpu', dtype=torch.float32)
    convolution_154 = rand_strided((8, 832, 14, 14), (163072, 1, 11648, 832), device='cpu', dtype=torch.float32)
    squeeze_463 = rand_strided((832, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_916 = rand_strided((8, 208, 14, 14), (163072, 1, 11648, 832), device='cpu', dtype=torch.float32)
    convolution_155 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_466 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_923 = rand_strided((8, 208, 14, 14), (163072, 1, 11648, 832), device='cpu', dtype=torch.float32)
    convolution_156 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_469 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_930 = rand_strided((8, 208, 14, 14), (163072, 1, 11648, 832), device='cpu', dtype=torch.float32)
    convolution_157 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_472 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_937 = rand_strided((8, 208, 14, 14), (163072, 1, 11648, 832), device='cpu', dtype=torch.float32)
    cat_30 = rand_strided((8, 832, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.float32)
    convolution_158 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_475 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_159 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_478 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    relu_155 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    convolution_160 = rand_strided((8, 832, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.float32)
    squeeze_481 = rand_strided((832, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_948 = rand_strided((8, 208, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.float32)
    convolution_161 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_484 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    add_895 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    convolution_162 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_487 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    add_901 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    convolution_163 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_490 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    cat_31 = rand_strided((8, 832, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.float32)
    convolution_164 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_493 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    relu_160 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    convolution_165 = rand_strided((8, 832, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.float32)
    squeeze_496 = rand_strided((832, ), (1, ), device='cpu', dtype=torch.float32)
    getitem_978 = rand_strided((8, 208, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.float32)
    convolution_166 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_499 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    add_923 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    convolution_167 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_502 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    add_929 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    convolution_168 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.float32)
    squeeze_505 = rand_strided((208, ), (1, ), device='cpu', dtype=torch.float32)
    cat_32 = rand_strided((8, 832, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.float32)
    convolution_169 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_508 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    view = rand_strided((8, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_1 = rand_strided((1000, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    le = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.bool)
    unsqueeze_682 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_1 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_694 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_2 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_706 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_3 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_718 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_4 = rand_strided((8, 832, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.bool)
    unsqueeze_730 = rand_strided((1, 832, 1, 1), (832, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_742 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_6 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_754 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_7 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_766 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_8 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_778 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_9 = rand_strided((8, 832, 7, 7), (40768, 1, 5824, 832), device='cpu', dtype=torch.bool)
    unsqueeze_790 = rand_strided((1, 832, 1, 1), (832, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_802 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_814 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_11 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_826 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_12 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_838 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_13 = rand_strided((8, 208, 7, 7), (10192, 1, 1456, 208), device='cpu', dtype=torch.bool)
    unsqueeze_850 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_14 = rand_strided((8, 832, 14, 14), (163072, 1, 11648, 832), device='cpu', dtype=torch.bool)
    unsqueeze_862 = rand_strided((1, 832, 1, 1), (832, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_874 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_16 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_886 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_17 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_898 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_18 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_910 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_19 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_922 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_934 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_21 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_946 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_22 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_958 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_23 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_970 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_24 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_982 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_994 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_26 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1006 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_27 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1018 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_28 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1030 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_29 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1042 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1054 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_31 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1066 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_32 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1078 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_33 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1090 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_34 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1102 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1114 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_36 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1126 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_37 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1138 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_38 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1150 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_39 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1162 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1174 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_41 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1186 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_42 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1198 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_43 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1210 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_44 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1222 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1234 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_46 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1246 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_47 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1258 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_48 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1270 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_49 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1282 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1294 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_51 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1306 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_52 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1318 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_53 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1330 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_54 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1342 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1354 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_56 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1366 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_57 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1378 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_58 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1390 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_59 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1402 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1414 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_61 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1426 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_62 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1438 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_63 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1450 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_64 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1462 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1474 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_66 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1486 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_67 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1498 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_68 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1510 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_69 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1522 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1534 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_71 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1546 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_72 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1558 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_73 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1570 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_74 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1582 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1594 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_76 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1606 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_77 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1618 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_78 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1630 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_79 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1642 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1654 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_81 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1666 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_82 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1678 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_83 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1690 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_84 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1702 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1714 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_86 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1726 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_87 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1738 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_88 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1750 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_89 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1762 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1774 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_91 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1786 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_92 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1798 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_93 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1810 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_94 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1822 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1834 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_96 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1846 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_97 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1858 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_98 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1870 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_99 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1882 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1894 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_101 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1906 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_102 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1918 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_103 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1930 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_104 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_1942 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1954 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_106 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1966 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_107 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1978 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_108 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_1990 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_109 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_2002 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2014 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_111 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2026 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_112 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2038 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_113 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2050 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_114 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_2062 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2074 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_116 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2086 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_117 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2098 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_118 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2110 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_119 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_2122 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2134 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_121 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2146 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_122 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2158 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_123 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2170 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_124 = rand_strided((8, 416, 14, 14), (81536, 1, 5824, 416), device='cpu', dtype=torch.bool)
    unsqueeze_2182 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2194 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2206 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_126 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2218 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_127 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2230 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_128 = rand_strided((8, 104, 14, 14), (20384, 1, 1456, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2242 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_129 = rand_strided((8, 416, 28, 28), (326144, 1, 11648, 416), device='cpu', dtype=torch.bool)
    unsqueeze_2254 = rand_strided((1, 416, 1, 1), (416, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2266 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_131 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2278 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_132 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2290 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_133 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2302 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_134 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.bool)
    unsqueeze_2314 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2326 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_136 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2338 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_137 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2350 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_138 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2362 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_139 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.bool)
    unsqueeze_2374 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2386 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_141 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2398 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_142 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2410 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_143 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2422 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_144 = rand_strided((8, 208, 28, 28), (163072, 1, 5824, 208), device='cpu', dtype=torch.bool)
    unsqueeze_2434 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2446 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2458 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_146 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2470 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_147 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2482 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_148 = rand_strided((8, 52, 28, 28), (40768, 1, 1456, 52), device='cpu', dtype=torch.bool)
    unsqueeze_2494 = rand_strided((1, 52, 1, 1), (52, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_149 = rand_strided((8, 208, 56, 56), (652288, 1, 11648, 208), device='cpu', dtype=torch.bool)
    unsqueeze_2506 = rand_strided((1, 208, 1, 1), (208, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2518 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_151 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2530 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_152 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2542 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_153 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2554 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_154 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2566 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2578 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_156 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2590 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_157 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2602 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_158 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2614 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_159 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2626 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2638 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2650 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_161 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2662 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_162 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2674 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_163 = rand_strided((8, 26, 56, 56), (81536, 1, 1456, 26), device='cpu', dtype=torch.bool)
    unsqueeze_2686 = rand_strided((1, 26, 1, 1), (26, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_164 = rand_strided((8, 104, 56, 56), (326144, 1, 5824, 104), device='cpu', dtype=torch.bool)
    unsqueeze_2698 = rand_strided((1, 104, 1, 1), (104, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2710 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_2, primals_4, primals_5, primals_7, primals_8, primals_10, primals_11, primals_13, primals_14, primals_16, primals_17, primals_19, primals_20, primals_22, primals_23, primals_25, primals_26, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_37, primals_38, primals_40, primals_41, primals_43, primals_44, primals_46, primals_47, primals_49, primals_50, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_61, primals_62, primals_64, primals_65, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_76, primals_77, primals_79, primals_80, primals_82, primals_83, primals_85, primals_86, primals_88, primals_89, primals_91, primals_92, primals_94, primals_95, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_106, primals_107, primals_109, primals_110, primals_112, primals_113, primals_115, primals_116, primals_118, primals_119, primals_121, primals_122, primals_124, primals_125, primals_127, primals_128, primals_130, primals_131, primals_133, primals_134, primals_136, primals_137, primals_139, primals_140, primals_142, primals_143, primals_145, primals_146, primals_148, primals_149, primals_151, primals_152, primals_154, primals_155, primals_157, primals_158, primals_160, primals_161, primals_163, primals_164, primals_166, primals_167, primals_169, primals_170, primals_172, primals_173, primals_175, primals_176, primals_178, primals_179, primals_181, primals_182, primals_184, primals_185, primals_187, primals_188, primals_190, primals_191, primals_193, primals_194, primals_196, primals_197, primals_199, primals_200, primals_202, primals_203, primals_205, primals_206, primals_208, primals_209, primals_211, primals_212, primals_214, primals_215, primals_217, primals_218, primals_220, primals_221, primals_223, primals_224, primals_226, primals_227, primals_229, primals_230, primals_232, primals_233, primals_235, primals_236, primals_238, primals_239, primals_241, primals_242, primals_244, primals_245, primals_247, primals_248, primals_250, primals_251, primals_253, primals_254, primals_256, primals_257, primals_259, primals_260, primals_262, primals_263, primals_265, primals_266, primals_268, primals_269, primals_271, primals_272, primals_274, primals_275, primals_277, primals_278, primals_280, primals_281, primals_283, primals_284, primals_286, primals_287, primals_289, primals_290, primals_292, primals_293, primals_295, primals_296, primals_298, primals_299, primals_301, primals_302, primals_304, primals_305, primals_307, primals_308, primals_310, primals_311, primals_313, primals_314, primals_316, primals_317, primals_319, primals_320, primals_322, primals_323, primals_325, primals_326, primals_328, primals_329, primals_331, primals_332, primals_334, primals_335, primals_337, primals_338, primals_340, primals_341, primals_343, primals_344, primals_346, primals_347, primals_349, primals_350, primals_352, primals_353, primals_355, primals_356, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_367, primals_368, primals_370, primals_371, primals_373, primals_374, primals_376, primals_377, primals_379, primals_380, primals_382, primals_383, primals_385, primals_386, primals_388, primals_389, primals_391, primals_392, primals_394, primals_395, primals_397, primals_398, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_409, primals_410, primals_412, primals_413, primals_415, primals_416, primals_418, primals_419, primals_421, primals_422, primals_424, primals_425, primals_427, primals_428, primals_430, primals_431, primals_433, primals_434, primals_436, primals_437, primals_439, primals_440, primals_442, primals_443, primals_445, primals_446, primals_448, primals_449, primals_451, primals_452, primals_454, primals_455, primals_457, primals_458, primals_460, primals_461, primals_463, primals_464, primals_466, primals_467, primals_469, primals_470, primals_472, primals_473, primals_475, primals_476, primals_478, primals_479, primals_481, primals_482, primals_484, primals_485, primals_487, primals_488, primals_490, primals_491, primals_493, primals_494, primals_496, primals_497, primals_499, primals_500, primals_502, primals_503, primals_505, primals_506, primals_508, primals_509, primals_1023, convolution, squeeze_1, relu, getitem_2, getitem_3, convolution_1, squeeze_4, getitem_10, convolution_2, squeeze_7, getitem_17, convolution_3, squeeze_10, getitem_24, convolution_4, squeeze_13, getitem_31, cat, convolution_5, squeeze_16, convolution_6, squeeze_19, relu_5, convolution_7, squeeze_22, getitem_42, convolution_8, squeeze_25, add_46, convolution_9, squeeze_28, add_52, convolution_10, squeeze_31, cat_1, convolution_11, squeeze_34, relu_10, convolution_12, squeeze_37, getitem_72, convolution_13, squeeze_40, add_74, convolution_14, squeeze_43, add_80, convolution_15, squeeze_46, cat_2, convolution_16, squeeze_49, relu_15, convolution_17, squeeze_52, getitem_102, convolution_18, squeeze_55, getitem_109, convolution_19, squeeze_58, getitem_116, convolution_20, squeeze_61, getitem_123, cat_3, convolution_21, squeeze_64, convolution_22, squeeze_67, relu_20, convolution_23, squeeze_70, getitem_134, convolution_24, squeeze_73, add_133, convolution_25, squeeze_76, add_139, convolution_26, squeeze_79, cat_4, convolution_27, squeeze_82, relu_25, convolution_28, squeeze_85, getitem_164, convolution_29, squeeze_88, add_161, convolution_30, squeeze_91, add_167, convolution_31, squeeze_94, cat_5, convolution_32, squeeze_97, relu_30, convolution_33, squeeze_100, getitem_194, convolution_34, squeeze_103, add_189, convolution_35, squeeze_106, add_195, convolution_36, squeeze_109, cat_6, convolution_37, squeeze_112, relu_35, convolution_38, squeeze_115, getitem_224, convolution_39, squeeze_118, getitem_231, convolution_40, squeeze_121, getitem_238, convolution_41, squeeze_124, getitem_245, cat_7, convolution_42, squeeze_127, convolution_43, squeeze_130, relu_40, convolution_44, squeeze_133, getitem_256, convolution_45, squeeze_136, add_248, convolution_46, squeeze_139, add_254, convolution_47, squeeze_142, cat_8, convolution_48, squeeze_145, relu_45, convolution_49, squeeze_148, getitem_286, convolution_50, squeeze_151, add_276, convolution_51, squeeze_154, add_282, convolution_52, squeeze_157, cat_9, convolution_53, squeeze_160, relu_50, convolution_54, squeeze_163, getitem_316, convolution_55, squeeze_166, add_304, convolution_56, squeeze_169, add_310, convolution_57, squeeze_172, cat_10, convolution_58, squeeze_175, relu_55, convolution_59, squeeze_178, getitem_346, convolution_60, squeeze_181, add_332, convolution_61, squeeze_184, add_338, convolution_62, squeeze_187, cat_11, convolution_63, squeeze_190, relu_60, convolution_64, squeeze_193, getitem_376, convolution_65, squeeze_196, add_360, convolution_66, squeeze_199, add_366, convolution_67, squeeze_202, cat_12, convolution_68, squeeze_205, relu_65, convolution_69, squeeze_208, getitem_406, convolution_70, squeeze_211, add_388, convolution_71, squeeze_214, add_394, convolution_72, squeeze_217, cat_13, convolution_73, squeeze_220, relu_70, convolution_74, squeeze_223, getitem_436, convolution_75, squeeze_226, add_416, convolution_76, squeeze_229, add_422, convolution_77, squeeze_232, cat_14, convolution_78, squeeze_235, relu_75, convolution_79, squeeze_238, getitem_466, convolution_80, squeeze_241, add_444, convolution_81, squeeze_244, add_450, convolution_82, squeeze_247, cat_15, convolution_83, squeeze_250, relu_80, convolution_84, squeeze_253, getitem_496, convolution_85, squeeze_256, add_472, convolution_86, squeeze_259, add_478, convolution_87, squeeze_262, cat_16, convolution_88, squeeze_265, relu_85, convolution_89, squeeze_268, getitem_526, convolution_90, squeeze_271, add_500, convolution_91, squeeze_274, add_506, convolution_92, squeeze_277, cat_17, convolution_93, squeeze_280, relu_90, convolution_94, squeeze_283, getitem_556, convolution_95, squeeze_286, add_528, convolution_96, squeeze_289, add_534, convolution_97, squeeze_292, cat_18, convolution_98, squeeze_295, relu_95, convolution_99, squeeze_298, getitem_586, convolution_100, squeeze_301, add_556, convolution_101, squeeze_304, add_562, convolution_102, squeeze_307, cat_19, convolution_103, squeeze_310, relu_100, convolution_104, squeeze_313, getitem_616, convolution_105, squeeze_316, add_584, convolution_106, squeeze_319, add_590, convolution_107, squeeze_322, cat_20, convolution_108, squeeze_325, relu_105, convolution_109, squeeze_328, getitem_646, convolution_110, squeeze_331, add_612, convolution_111, squeeze_334, add_618, convolution_112, squeeze_337, cat_21, convolution_113, squeeze_340, relu_110, convolution_114, squeeze_343, getitem_676, convolution_115, squeeze_346, add_640, convolution_116, squeeze_349, add_646, convolution_117, squeeze_352, cat_22, convolution_118, squeeze_355, relu_115, convolution_119, squeeze_358, getitem_706, convolution_120, squeeze_361, add_668, convolution_121, squeeze_364, add_674, convolution_122, squeeze_367, cat_23, convolution_123, squeeze_370, relu_120, convolution_124, squeeze_373, getitem_736, convolution_125, squeeze_376, add_696, convolution_126, squeeze_379, add_702, convolution_127, squeeze_382, cat_24, convolution_128, squeeze_385, relu_125, convolution_129, squeeze_388, getitem_766, convolution_130, squeeze_391, add_724, convolution_131, squeeze_394, add_730, convolution_132, squeeze_397, cat_25, convolution_133, squeeze_400, relu_130, convolution_134, squeeze_403, getitem_796, convolution_135, squeeze_406, add_752, convolution_136, squeeze_409, add_758, convolution_137, squeeze_412, cat_26, convolution_138, squeeze_415, relu_135, convolution_139, squeeze_418, getitem_826, convolution_140, squeeze_421, add_780, convolution_141, squeeze_424, add_786, convolution_142, squeeze_427, cat_27, convolution_143, squeeze_430, relu_140, convolution_144, squeeze_433, getitem_856, convolution_145, squeeze_436, add_808, convolution_146, squeeze_439, add_814, convolution_147, squeeze_442, cat_28, convolution_148, squeeze_445, relu_145, convolution_149, squeeze_448, getitem_886, convolution_150, squeeze_451, add_836, convolution_151, squeeze_454, add_842, convolution_152, squeeze_457, cat_29, convolution_153, squeeze_460, relu_150, convolution_154, squeeze_463, getitem_916, convolution_155, squeeze_466, getitem_923, convolution_156, squeeze_469, getitem_930, convolution_157, squeeze_472, getitem_937, cat_30, convolution_158, squeeze_475, convolution_159, squeeze_478, relu_155, convolution_160, squeeze_481, getitem_948, convolution_161, squeeze_484, add_895, convolution_162, squeeze_487, add_901, convolution_163, squeeze_490, cat_31, convolution_164, squeeze_493, relu_160, convolution_165, squeeze_496, getitem_978, convolution_166, squeeze_499, add_923, convolution_167, squeeze_502, add_929, convolution_168, squeeze_505, cat_32, convolution_169, squeeze_508, view, permute_1, le, unsqueeze_682, le_1, unsqueeze_694, le_2, unsqueeze_706, le_3, unsqueeze_718, le_4, unsqueeze_730, unsqueeze_742, le_6, unsqueeze_754, le_7, unsqueeze_766, le_8, unsqueeze_778, le_9, unsqueeze_790, unsqueeze_802, unsqueeze_814, le_11, unsqueeze_826, le_12, unsqueeze_838, le_13, unsqueeze_850, le_14, unsqueeze_862, unsqueeze_874, le_16, unsqueeze_886, le_17, unsqueeze_898, le_18, unsqueeze_910, le_19, unsqueeze_922, unsqueeze_934, le_21, unsqueeze_946, le_22, unsqueeze_958, le_23, unsqueeze_970, le_24, unsqueeze_982, unsqueeze_994, le_26, unsqueeze_1006, le_27, unsqueeze_1018, le_28, unsqueeze_1030, le_29, unsqueeze_1042, unsqueeze_1054, le_31, unsqueeze_1066, le_32, unsqueeze_1078, le_33, unsqueeze_1090, le_34, unsqueeze_1102, unsqueeze_1114, le_36, unsqueeze_1126, le_37, unsqueeze_1138, le_38, unsqueeze_1150, le_39, unsqueeze_1162, unsqueeze_1174, le_41, unsqueeze_1186, le_42, unsqueeze_1198, le_43, unsqueeze_1210, le_44, unsqueeze_1222, unsqueeze_1234, le_46, unsqueeze_1246, le_47, unsqueeze_1258, le_48, unsqueeze_1270, le_49, unsqueeze_1282, unsqueeze_1294, le_51, unsqueeze_1306, le_52, unsqueeze_1318, le_53, unsqueeze_1330, le_54, unsqueeze_1342, unsqueeze_1354, le_56, unsqueeze_1366, le_57, unsqueeze_1378, le_58, unsqueeze_1390, le_59, unsqueeze_1402, unsqueeze_1414, le_61, unsqueeze_1426, le_62, unsqueeze_1438, le_63, unsqueeze_1450, le_64, unsqueeze_1462, unsqueeze_1474, le_66, unsqueeze_1486, le_67, unsqueeze_1498, le_68, unsqueeze_1510, le_69, unsqueeze_1522, unsqueeze_1534, le_71, unsqueeze_1546, le_72, unsqueeze_1558, le_73, unsqueeze_1570, le_74, unsqueeze_1582, unsqueeze_1594, le_76, unsqueeze_1606, le_77, unsqueeze_1618, le_78, unsqueeze_1630, le_79, unsqueeze_1642, unsqueeze_1654, le_81, unsqueeze_1666, le_82, unsqueeze_1678, le_83, unsqueeze_1690, le_84, unsqueeze_1702, unsqueeze_1714, le_86, unsqueeze_1726, le_87, unsqueeze_1738, le_88, unsqueeze_1750, le_89, unsqueeze_1762, unsqueeze_1774, le_91, unsqueeze_1786, le_92, unsqueeze_1798, le_93, unsqueeze_1810, le_94, unsqueeze_1822, unsqueeze_1834, le_96, unsqueeze_1846, le_97, unsqueeze_1858, le_98, unsqueeze_1870, le_99, unsqueeze_1882, unsqueeze_1894, le_101, unsqueeze_1906, le_102, unsqueeze_1918, le_103, unsqueeze_1930, le_104, unsqueeze_1942, unsqueeze_1954, le_106, unsqueeze_1966, le_107, unsqueeze_1978, le_108, unsqueeze_1990, le_109, unsqueeze_2002, unsqueeze_2014, le_111, unsqueeze_2026, le_112, unsqueeze_2038, le_113, unsqueeze_2050, le_114, unsqueeze_2062, unsqueeze_2074, le_116, unsqueeze_2086, le_117, unsqueeze_2098, le_118, unsqueeze_2110, le_119, unsqueeze_2122, unsqueeze_2134, le_121, unsqueeze_2146, le_122, unsqueeze_2158, le_123, unsqueeze_2170, le_124, unsqueeze_2182, unsqueeze_2194, unsqueeze_2206, le_126, unsqueeze_2218, le_127, unsqueeze_2230, le_128, unsqueeze_2242, le_129, unsqueeze_2254, unsqueeze_2266, le_131, unsqueeze_2278, le_132, unsqueeze_2290, le_133, unsqueeze_2302, le_134, unsqueeze_2314, unsqueeze_2326, le_136, unsqueeze_2338, le_137, unsqueeze_2350, le_138, unsqueeze_2362, le_139, unsqueeze_2374, unsqueeze_2386, le_141, unsqueeze_2398, le_142, unsqueeze_2410, le_143, unsqueeze_2422, le_144, unsqueeze_2434, unsqueeze_2446, unsqueeze_2458, le_146, unsqueeze_2470, le_147, unsqueeze_2482, le_148, unsqueeze_2494, le_149, unsqueeze_2506, unsqueeze_2518, le_151, unsqueeze_2530, le_152, unsqueeze_2542, le_153, unsqueeze_2554, le_154, unsqueeze_2566, unsqueeze_2578, le_156, unsqueeze_2590, le_157, unsqueeze_2602, le_158, unsqueeze_2614, le_159, unsqueeze_2626, unsqueeze_2638, unsqueeze_2650, le_161, unsqueeze_2662, le_162, unsqueeze_2674, le_163, unsqueeze_2686, le_164, unsqueeze_2698, unsqueeze_2710, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('res2net101_26w_4s', benchmark_compiled_module)
